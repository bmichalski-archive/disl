!function(e,t){if("object"==typeof exports&&"object"==typeof module)module.exports=t();else if("function"==typeof define&&define.amd)define([],t);else{var n=t();for(var r in n)("object"==typeof exports?exports:e)[r]=n[r]}}(this,function(){return function(e){function t(r){if(n[r])return n[r].exports;var o=n[r]={exports:{},id:r,loaded:!1};return e[r].call(o.exports,o,o.exports,t),o.loaded=!0,o.exports}var n={};return t.m=e,t.c=n,t.p="",t(0)}([function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}var o=n(1),i=r(o),u=n(7),a=r(u),c=n(8),f=r(c),s=n(5),l=r(s),p=n(6),h=r(p),y=n(3),d=r(y),v=n(9),g=r(v),b={Container:i.default,ClassConstructorDefinition:a.default,FactoryDefinition:f.default,Reference:l.default,Parameter:h.default,MethodCall:d.default};for(var m in g.default)g.default.hasOwnProperty(m)&&(b[m]=g.default[m]);e.exports=b},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){var n=4,r=15;if(void 0===t&&(t=0),t+=1,null===e)return"null";if(void 0===e)return"void";if("string"==typeof e||"number"==typeof e||"boolean"==typeof e)return"undefined"==typeof e?"undefined":u(e);if(!Array.isArray(e)){var o=Object.keys(e);if(!o.length)return e.constructor&&e.constructor.name&&"Object"!==e.constructor.name?e.constructor.name:"Object";if(t>n)return"{...}";var a="  ".repeat(t-1),c=o.slice(0,r).map(function(n){return(/^([A-Z_$][A-Z0-9_$]*)$/i.test(n)?n:JSON.stringify(n))+": "+i(e[n],t)+";"}).join("\n  "+a);return o.length>=r&&(c+="\n  "+a+"..."),e.constructor&&e.constructor.name&&"Object"!==e.constructor.name?e.constructor.name+" {\n  "+a+c+"\n"+a+"}":"{\n  "+a+c+"\n"+a+"}"}if(!(e.length>0))return"Array";var f=function(){if(t>n)return{v:"[...]"};var o=i(e[0],t);return e.every(function(e){return i(e,t)===o})?{v:o.trim()+"[]"}:{v:"["+e.slice(0,r).map(function(e){return i(e,t)}).join(", ")+(e.length>=r?", ...":"")+"]"}}();return"object"===("undefined"==typeof f?"undefined":u(f))?f.v:void 0}Object.defineProperty(t,"__esModule",{value:!0});var u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),c=n(2),f=r(c),s=n(7),l=r(s),p=n(8),h=r(p),y=n(5),d=r(y),v=n(6),g=r(v),b=n(3),m=r(b),w=n(9),E=n(52),_=n(53),j=n(4),O=E.Service,S=_.ParameterValue,A=j.InjectableArguments,T=function(){function e(e){return null!=e&&e.obj instanceof Object&&Array.isArray(e.arr)&&e.arr.every(function(e){return"string"==typeof e})}return Object.defineProperty(e,Symbol.hasInstance,{value:function(t){return e(t)}}),e}(),x=function(){function e(e){return"function"==typeof e}return Object.defineProperty(e,Symbol.hasInstance,{value:function(t){return e(t)}}),e}(),k=function(){function e(){o(this,e),this._servicesByIdentifier={},this._serviceDefinitionsByIdentifier={},this._parametersByIdentifier={},this._serviceDefinitionsAlreadyUsedToInstantiateByIdentifier={},this._classConstructorLocators=[],this._instanceLocators=[]}return a(e,[{key:"get",value:function(){function e(e){if(!(e instanceof Promise))throw new TypeError("Function return value violates contract.\n\nExpected:\nPromise<Array<Service>>\n\nGot:\n"+i(e));return e}for(var t=this,n=arguments.length,r=Array(n),o=0;o<n;o++)r[o]=arguments[o];if(!Array.isArray(r)||!r.every(function(e){return"string"==typeof e}))throw new TypeError('Value of argument "identifiers" violates contract.\n\nExpected:\nArray<string>\n\nGot:\n'+i(r));var u=[];return r.forEach(function(e){if("string"!=typeof e)throw new TypeError('Value of argument "identifier" violates contract.\n\nExpected:\nstring\n\nGot:\n'+i(e));u.push(t._doGetService(e,{obj:{},arr:[]}).catch(function(t){if(!(t instanceof Error))throw new TypeError('Value of argument "e" violates contract.\n\nExpected:\nError\n\nGot:\n'+i(t));throw w.GetServiceError.createError(e,t)}))}),e(Promise.all(u))}},{key:"set",value:function(t,n){function r(t){if(!(t instanceof e))throw new TypeError("Function return value violates contract.\n\nExpected:\nContainer\n\nGot:\n"+i(t));return t}if("string"!=typeof t)throw new TypeError('Value of argument "identifier" violates contract.\n\nExpected:\nstring\n\nGot:\n'+i(t));if(!O(n))throw new TypeError('Value of argument "instance" violates contract.\n\nExpected:\nService\n\nGot:\n'+i(n));return this._servicesByIdentifier[t]=n,r(this)}},{key:"has",value:function(e){function t(e){if("boolean"!=typeof e)throw new TypeError("Function return value violates contract.\n\nExpected:\nboolean\n\nGot:\n"+i(e));return e}if("string"!=typeof e)throw new TypeError('Value of argument "identifier" violates contract.\n\nExpected:\nstring\n\nGot:\n'+i(e));return t(this.hasDefinition(e)||this.hasInstance(e))}},{key:"hasDefinition",value:function(e){function t(e){if("boolean"!=typeof e)throw new TypeError("Function return value violates contract.\n\nExpected:\nboolean\n\nGot:\n"+i(e));return e}if("string"!=typeof e)throw new TypeError('Value of argument "identifier" violates contract.\n\nExpected:\nstring\n\nGot:\n'+i(e));return t(void 0!==this._serviceDefinitionsByIdentifier[e])}},{key:"hasInstance",value:function(e){function t(e){if("boolean"!=typeof e)throw new TypeError("Function return value violates contract.\n\nExpected:\nboolean\n\nGot:\n"+i(e));return e}if("string"!=typeof e)throw new TypeError('Value of argument "identifier" violates contract.\n\nExpected:\nstring\n\nGot:\n'+i(e));return t(void 0!==this._servicesByIdentifier[e])}},{key:"getDefinition",value:function(e){function t(e){if(!(e instanceof f.default))throw new TypeError("Function return value violates contract.\n\nExpected:\nDefinition\n\nGot:\n"+i(e));return e}if("string"!=typeof e)throw new TypeError('Value of argument "identifier" violates contract.\n\nExpected:\nstring\n\nGot:\n'+i(e));var n=this._serviceDefinitionsByIdentifier[e];if(void 0===n)throw w.UndefinedServiceDefinitionError.createError(e);return t(n)}},{key:"setDefinition",value:function(t,n){function r(t){if(!(t instanceof e))throw new TypeError("Function return value violates contract.\n\nExpected:\nContainer\n\nGot:\n"+i(t));return t}if("string"!=typeof t)throw new TypeError('Value of argument "identifier" violates contract.\n\nExpected:\nstring\n\nGot:\n'+i(t));if(!(n instanceof f.default))throw new TypeError('Value of argument "definition" violates contract.\n\nExpected:\nDefinition\n\nGot:\n'+i(n));if(this._serviceDefinitionsAlreadyUsedToInstantiateByIdentifier[t])throw w.ServiceDefinitionAlreadyUsedError.createError(t);return this._serviceDefinitionsAlreadyUsedToInstantiateByIdentifier[t]=!1,this._serviceDefinitionsByIdentifier[t]=n,r(this)}},{key:"getParameter",value:function(e){function t(e){if(!S(e))throw new TypeError("Function return value violates contract.\n\nExpected:\nParameterValue\n\nGot:\n"+i(e));return e}if("string"!=typeof e)throw new TypeError('Value of argument "identifier" violates contract.\n\nExpected:\nstring\n\nGot:\n'+i(e));if(void 0===this._parametersByIdentifier[e])throw w.UndefinedParameterError.createError(e);return t(this._parametersByIdentifier[e])}},{key:"setParameter",value:function(t,n){function r(t){if(!(t instanceof e))throw new TypeError("Function return value violates contract.\n\nExpected:\nContainer\n\nGot:\n"+i(t));return t}if("string"!=typeof t)throw new TypeError('Value of argument "identifier" violates contract.\n\nExpected:\nstring\n\nGot:\n'+i(t));if(!S(n))throw new TypeError('Value of argument "value" violates contract.\n\nExpected:\nParameterValue\n\nGot:\n'+i(n));return this._parametersByIdentifier[t]=n,r(this)}},{key:"hasParameter",value:function(e){function t(e){if("boolean"!=typeof e)throw new TypeError("Function return value violates contract.\n\nExpected:\nboolean\n\nGot:\n"+i(e));return e}if("string"!=typeof e)throw new TypeError('Value of argument "identifier" violates contract.\n\nExpected:\nstring\n\nGot:\n'+i(e));return t(void 0!==this._parametersByIdentifier[e])}},{key:"registerClassConstructorLocator",value:function(t){function n(t){if(!(t instanceof e))throw new TypeError("Function return value violates contract.\n\nExpected:\nContainer\n\nGot:\n"+i(t));return t}if(!x(t))throw new TypeError('Value of argument "locator" violates contract.\n\nExpected:\nLocatorCallback\n\nGot:\n'+i(t));return this._classConstructorLocators.push(t),n(this)}},{key:"registerInstanceLocator",value:function(t){function n(t){if(!(t instanceof e))throw new TypeError("Function return value violates contract.\n\nExpected:\nContainer\n\nGot:\n"+i(t));return t}if(!x(t))throw new TypeError('Value of argument "locator" violates contract.\n\nExpected:\nLocatorCallback\n\nGot:\n'+i(t));return this._instanceLocators.push(t),n(this)}},{key:"_instantiate",value:function(e,t,n){function r(e){if(!(e instanceof Promise))throw new TypeError("Function return value violates contract.\n\nExpected:\nPromise<Service>\n\nGot:\n"+i(e));return e}var o=this;if("string"!=typeof e)throw new TypeError('Value of argument "identifier" violates contract.\n\nExpected:\nstring\n\nGot:\n'+i(e));if(!(t instanceof f.default))throw new TypeError('Value of argument "definition" violates contract.\n\nExpected:\nDefinition\n\nGot:\n'+i(t));if(!T(n))throw new TypeError('Value of argument "loading" violates contract.\n\nExpected:\nLoadingObject\n\nGot:\n'+i(n));return r(this._resolveArgs(t.args,n).then(function(r){function u(e){if(!(e instanceof Promise))throw new TypeError("Function return value violates contract.\n\nExpected:\nPromise\n\nGot:\n"+i(e));return e}if(!Array.isArray(r))throw new TypeError('Value of argument "args" violates contract.\n\nExpected:\nArray\n\nGot:\n'+i(r));var a=void 0;if(t instanceof l.default){var c=o._locateServiceClassConstructor(t.classConstructorIdentifier);a=new(Function.prototype.bind.apply(c,[void 0].concat(r)))}else if(t instanceof h.default&&(a=t.factory.apply(void 0,r),void 0===a))return u(Promise.reject(w.FactoryMethodReturnsNothingError.createError(e)));return new Promise(function(e,r){function u(e){function n(e){if(!(e instanceof m.default))throw new TypeError('Function "getMethodCall" return value violates contract.\n\nExpected:\nMethodCall\n\nGot:\n'+i(e));return e}return n(t.methodCalls[e])}var c=[],f=void 0,s=void 0,l=function(e){if("function"!=typeof e)throw new TypeError('Value of argument "methodToCall" violates contract.\n\nExpected:\nFunction\n\nGot:\n'+i(e));c.push(o._resolveArgs(s.args,n).then(function(t){function n(e){if(!(null==e||e instanceof Promise))throw new TypeError("Function return value violates contract.\n\nExpected:\n?Promise | mixed\n\nGot:\n"+i(e));return e}if(!Array.isArray(t))throw new TypeError('Value of argument "args" violates contract.\n\nExpected:\nArray\n\nGot:\n'+i(t));return n(e.apply(a,t))}))};for(f in t.methodCalls)if(t.methodCalls.hasOwnProperty(f)){s=u(f);var p=s.name,h=a[p];if(void 0===h)return r(w.MethodDoesNotExistError.createError(p));l(h)}return e(Promise.all(c).then(function(){function e(e){if(!O(e))throw new TypeError("Function return value violates contract.\n\nExpected:\nService\n\nGot:\n"+i(e));return e}return e(a)}))})}))}},{key:"_locateServiceClassConstructor",value:function(e){function t(e){if("function"!=typeof e)throw new TypeError("Function return value violates contract.\n\nExpected:\nFunction\n\nGot:\n"+i(e));return e}if("string"!=typeof e)throw new TypeError('Value of argument "identifier" violates contract.\n\nExpected:\nstring\n\nGot:\n'+i(e));var n=void 0,r=void 0;for(n in this._classConstructorLocators)if(this._classConstructorLocators.hasOwnProperty(n)&&(r=this._classConstructorLocators[n](e),void 0!==r))return t(r);throw w.CannotLocateServiceClassConstructorError.createError(e)}},{key:"_locateInstance",value:function(e){function t(e){if(null!=e&&!O(e))throw new TypeError("Function return value violates contract.\n\nExpected:\n?Service\n\nGot:\n"+i(e));return e}if("string"!=typeof e)throw new TypeError('Value of argument "identifier" violates contract.\n\nExpected:\nstring\n\nGot:\n'+i(e));var n=void 0,r=void 0;for(n in this._instanceLocators)if(this._instanceLocators.hasOwnProperty(n)&&(r=this._instanceLocators[n](e),void 0!==r))return t(r)}},{key:"_resolveArgs",value:function(t,n){function r(e){if(!(e instanceof Promise))throw new TypeError("Function return value violates contract.\n\nExpected:\nPromise<Array<Service | ParameterValue>>\n\nGot:\n"+i(e));return e}var o=this;if(!A(t))throw new TypeError('Value of argument "args" violates contract.\n\nExpected:\nInjectableArguments\n\nGot:\n'+i(t));if(!T(n))throw new TypeError('Value of argument "loading" violates contract.\n\nExpected:\nLoadingObject\n\nGot:\n'+i(n));var u=[];return r(new Promise(function(r,a){function c(e){if(null!=e)throw new TypeError("Function return value violates contract.\n\nExpected:\nvoid\n\nGot:\n"+i(e));return e}if("function"!=typeof r)throw new TypeError('Value of argument "resolve" violates contract.\n\nExpected:\nFunction\n\nGot:\n'+i(r));if("function"!=typeof a)throw new TypeError('Value of argument "reject" violates contract.\n\nExpected:\nFunction\n\nGot:\n'+i(a));var f=void 0,s=void 0;for(f in t)if(t.hasOwnProperty(f))if(s=t[f],s instanceof d.default){var l=s.id;u.push(o._doGetService(l,e._deepCopyLoading(n)))}else{if(!(s instanceof g.default))return c(a(w.UnsupportedArgumentTypeError.createError(s)));u.push(o.getParameter(s.id))}return c(r(Promise.all(u)))}))}},{key:"_doGetService",value:function(e,t){function n(e){if(!(e instanceof Promise))throw new TypeError("Function return value violates contract.\n\nExpected:\nPromise<Service | CircularDependencyError | UndefinedServiceDefinitionAndInstanceError>\n\nGot:\n"+i(e));return e}if("string"!=typeof e)throw new TypeError('Value of argument "identifier" violates contract.\n\nExpected:\nstring\n\nGot:\n'+i(e));if(!T(t))throw new TypeError('Value of argument "loading" violates contract.\n\nExpected:\nLoadingObject\n\nGot:\n'+i(t));if(void 0!==t.obj[e]){var r=[].concat(t.arr).concat([e]);return n(Promise.reject(w.CircularDependencyError.createError(r)))}if(!this.hasInstance(e)){if(!this.hasDefinition(e)){var o=this._locateInstance(e);return n(void 0!==o?Promise.resolve(o).then(function(t){function n(e){if(!(e instanceof Promise))throw new TypeError("Function return value violates contract.\n\nExpected:\nPromise<Service | UndefinedServiceDefinitionAndInstanceError>\n\nGot:\n"+i(e));return e}if(null!=t&&!O(t))throw new TypeError('Value of argument "instance" violates contract.\n\nExpected:\n?Service\n\nGot:\n'+i(t));return n(void 0===t?Promise.reject(w.UndefinedServiceDefinitionAndInstanceError.createError(e)):Promise.resolve(t))}):Promise.reject(w.UndefinedServiceDefinitionAndInstanceError.createError(e)))}t.obj[e]=!0,t.arr.push(e);try{var u=this._instantiate(e,this.getDefinition(e),t);this._serviceDefinitionsAlreadyUsedToInstantiateByIdentifier[e]=!0,this._servicesByIdentifier[e]=u}catch(e){return n(Promise.reject(e))}}return n(Promise.resolve(this._servicesByIdentifier[e]))}}],[{key:"_deepCopyLoading",value:function(e){function t(e){if(!T(e))throw new TypeError("Function return value violates contract.\n\nExpected:\nLoadingObject\n\nGot:\n"+i(e));return e}if(!T(e))throw new TypeError('Value of argument "loading" violates contract.\n\nExpected:\nLoadingObject\n\nGot:\n'+i(e));var n={obj:{},arr:[].concat(e.arr)};for(var r in e.obj)e.obj.hasOwnProperty(r)&&(n.obj[r]=e.obj[r]);return t(n)}}]),e}();t.default=k},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){var n=4,r=15;if(void 0===t&&(t=0),t+=1,null===e)return"null";if(void 0===e)return"void";if("string"==typeof e||"number"==typeof e||"boolean"==typeof e)return"undefined"==typeof e?"undefined":u(e);if(!Array.isArray(e)){var o=Object.keys(e);if(!o.length)return e.constructor&&e.constructor.name&&"Object"!==e.constructor.name?e.constructor.name:"Object";if(t>n)return"{...}";var a="  ".repeat(t-1),c=o.slice(0,r).map(function(n){return(/^([A-Z_$][A-Z0-9_$]*)$/i.test(n)?n:JSON.stringify(n))+": "+i(e[n],t)+";"}).join("\n  "+a);return o.length>=r&&(c+="\n  "+a+"..."),e.constructor&&e.constructor.name&&"Object"!==e.constructor.name?e.constructor.name+" {\n  "+a+c+"\n"+a+"}":"{\n  "+a+c+"\n"+a+"}"}if(!(e.length>0))return"Array";var f=function(){if(t>n)return{v:"[...]"};var o=i(e[0],t);return e.every(function(e){return i(e,t)===o})?{v:o.trim()+"[]"}:{v:"["+e.slice(0,r).map(function(e){return i(e,t)}).join(", ")+(e.length>=r?", ...":"")+"]"}}();return"object"===("undefined"==typeof f?"undefined":u(f))?f.v:void 0}Object.defineProperty(t,"__esModule",{value:!0});var u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),c=n(3),f=r(c),s=n(4),l=s.InjectableArguments,p=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];if(o(this,e),null!=t&&!l(t))throw new TypeError('Value of argument "args" violates contract.\n\nExpected:\n?InjectableArguments\n\nGot:\n'+i(t));this._methodCalls=[],this._args=t}return a(e,[{key:"methodCalls",set:function(e){if(!Array.isArray(e)||!e.every(function(e){return e instanceof f.default}))throw new TypeError('Value of argument "methodCalls" violates contract.\n\nExpected:\nArray<MethodCall>\n\nGot:\n'+i(e));this._methodCalls=e},get:function(){function e(e){if(!Array.isArray(e)||!e.every(function(e){return e instanceof f.default}))throw new TypeError("Function return value violates contract.\n\nExpected:\nArray<MethodCall>\n\nGot:\n"+i(e));return e}return e(this._methodCalls)}},{key:"args",get:function(){function e(e){if(!l(e))throw new TypeError("Function return value violates contract.\n\nExpected:\nInjectableArguments\n\nGot:\n"+i(e));return e}return e(this._args)}}]),e}();t.default=p},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){var n=4,r=15;if(void 0===t&&(t=0),t+=1,null===e)return"null";if(void 0===e)return"void";if("string"==typeof e||"number"==typeof e||"boolean"==typeof e)return"undefined"==typeof e?"undefined":i(e);if(!Array.isArray(e)){var u=Object.keys(e);if(!u.length)return e.constructor&&e.constructor.name&&"Object"!==e.constructor.name?e.constructor.name:"Object";if(t>n)return"{...}";var a="  ".repeat(t-1),c=u.slice(0,r).map(function(n){return(/^([A-Z_$][A-Z0-9_$]*)$/i.test(n)?n:JSON.stringify(n))+": "+o(e[n],t)+";"}).join("\n  "+a);return u.length>=r&&(c+="\n  "+a+"..."),e.constructor&&e.constructor.name&&"Object"!==e.constructor.name?e.constructor.name+" {\n  "+a+c+"\n"+a+"}":"{\n  "+a+c+"\n"+a+"}"}if(!(e.length>0))return"Array";var f=function(){if(t>n)return{v:"[...]"};var i=o(e[0],t);return e.every(function(e){return o(e,t)===i})?{v:i.trim()+"[]"}:{v:"["+e.slice(0,r).map(function(e){return o(e,t)}).join(", ")+(e.length>=r?", ...":"")+"]"}}();return"object"===("undefined"==typeof f?"undefined":i(f))?f.v:void 0}Object.defineProperty(t,"__esModule",{value:!0});var i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},u=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(4),c=a.InjectableArguments,f=function(){function e(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];if(r(this,e),"string"!=typeof t)throw new TypeError('Value of argument "name" violates contract.\n\nExpected:\nstring\n\nGot:\n'+o(t));if(null!=n&&!c(n))throw new TypeError('Value of argument "args" violates contract.\n\nExpected:\n?InjectableArguments\n\nGot:\n'+o(n));this._name=t,this._args=n}return u(e,[{key:"name",get:function(){function e(e){if("string"!=typeof e)throw new TypeError("Function return value violates contract.\n\nExpected:\nstring\n\nGot:\n"+o(e));return e}return e(this._name)}},{key:"args",get:function(){function e(e){if(!c(e))throw new TypeError("Function return value violates contract.\n\nExpected:\nInjectableArguments\n\nGot:\n"+o(e));return e}return e(this._args)}}]),e}();t.default=f},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0}),t.InjectableArguments=void 0;var o=n(5),i=r(o),u=n(6),a=r(u);t.InjectableArguments=function(){function e(e){return Array.isArray(e)&&e.every(function(e){return e instanceof i.default||e instanceof a.default})}return Object.defineProperty(e,Symbol.hasInstance,{value:function(t){return e(t)}}),e}()},function(e,t){"use strict";function n(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function r(e,t){var n=4,i=15;if(void 0===t&&(t=0),t+=1,null===e)return"null";if(void 0===e)return"void";if("string"==typeof e||"number"==typeof e||"boolean"==typeof e)return"undefined"==typeof e?"undefined":o(e);if(!Array.isArray(e)){var u=Object.keys(e);if(!u.length)return e.constructor&&e.constructor.name&&"Object"!==e.constructor.name?e.constructor.name:"Object";if(t>n)return"{...}";var a="  ".repeat(t-1),c=u.slice(0,i).map(function(n){return(/^([A-Z_$][A-Z0-9_$]*)$/i.test(n)?n:JSON.stringify(n))+": "+r(e[n],t)+";"}).join("\n  "+a);return u.length>=i&&(c+="\n  "+a+"..."),e.constructor&&e.constructor.name&&"Object"!==e.constructor.name?e.constructor.name+" {\n  "+a+c+"\n"+a+"}":"{\n  "+a+c+"\n"+a+"}"}if(!(e.length>0))return"Array";var f=function(){if(t>n)return{v:"[...]"};var o=r(e[0],t);return e.every(function(e){return r(e,t)===o})?{v:o.trim()+"[]"}:{v:"["+e.slice(0,i).map(function(e){return r(e,t)}).join(", ")+(e.length>=i?", ...":"")+"]"}}();return"object"===("undefined"==typeof f?"undefined":o(f))?f.v:void 0}Object.defineProperty(t,"__esModule",{value:!0});var o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),u=function(){function e(t){if(n(this,e),"string"!=typeof t)throw new TypeError('Value of argument "id" violates contract.\n\nExpected:\nstring\n\nGot:\n'+r(t));this._id=t}return i(e,[{key:"id",get:function(){function e(e){if("string"!=typeof e)throw new TypeError("Function return value violates contract.\n\nExpected:\nstring\n\nGot:\n"+r(e));return e}return e(this._id)}}]),e}();t.default=u},function(e,t){"use strict";function n(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function r(e,t){var n=4,i=15;if(void 0===t&&(t=0),t+=1,null===e)return"null";if(void 0===e)return"void";if("string"==typeof e||"number"==typeof e||"boolean"==typeof e)return"undefined"==typeof e?"undefined":o(e);if(!Array.isArray(e)){var u=Object.keys(e);if(!u.length)return e.constructor&&e.constructor.name&&"Object"!==e.constructor.name?e.constructor.name:"Object";if(t>n)return"{...}";var a="  ".repeat(t-1),c=u.slice(0,i).map(function(n){return(/^([A-Z_$][A-Z0-9_$]*)$/i.test(n)?n:JSON.stringify(n))+": "+r(e[n],t)+";"}).join("\n  "+a);return u.length>=i&&(c+="\n  "+a+"..."),e.constructor&&e.constructor.name&&"Object"!==e.constructor.name?e.constructor.name+" {\n  "+a+c+"\n"+a+"}":"{\n  "+a+c+"\n"+a+"}"}if(!(e.length>0))return"Array";var f=function(){if(t>n)return{v:"[...]"};var o=r(e[0],t);return e.every(function(e){return r(e,t)===o})?{v:o.trim()+"[]"}:{v:"["+e.slice(0,i).map(function(e){return r(e,t)}).join(", ")+(e.length>=i?", ...":"")+"]"}}();return"object"===("undefined"==typeof f?"undefined":o(f))?f.v:void 0}Object.defineProperty(t,"__esModule",{value:!0});var o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),u=function(){function e(t){if(n(this,e),"string"!=typeof t)throw new TypeError('Value of argument "id" violates contract.\n\nExpected:\nstring\n\nGot:\n'+r(t));this._id=t}return i(e,[{key:"id",get:function(){function e(e){if("string"!=typeof e)throw new TypeError("Function return value violates contract.\n\nExpected:\nstring\n\nGot:\n"+r(e));return e}return e(this._id)}}]),e}();t.default=u},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function u(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function a(e,t){var n=4,r=15;if(void 0===t&&(t=0),t+=1,null===e)return"null";if(void 0===e)return"void";if("string"==typeof e||"number"==typeof e||"boolean"==typeof e)return"undefined"==typeof e?"undefined":c(e);if(!Array.isArray(e)){var o=Object.keys(e);if(!o.length)return e.constructor&&e.constructor.name&&"Object"!==e.constructor.name?e.constructor.name:"Object";if(t>n)return"{...}";var i="  ".repeat(t-1),u=o.slice(0,r).map(function(n){return(/^([A-Z_$][A-Z0-9_$]*)$/i.test(n)?n:JSON.stringify(n))+": "+a(e[n],t)+";"}).join("\n  "+i);return o.length>=r&&(u+="\n  "+i+"..."),e.constructor&&e.constructor.name&&"Object"!==e.constructor.name?e.constructor.name+" {\n  "+i+u+"\n"+i+"}":"{\n  "+i+u+"\n"+i+"}"}if(!(e.length>0))return"Array";var f=function(){if(t>n)return{v:"[...]"};var o=a(e[0],t);return e.every(function(e){return a(e,t)===o})?{v:o.trim()+"[]"}:{v:"["+e.slice(0,r).map(function(e){return a(e,t)}).join(", ")+(e.length>=r?", ...":"")+"]"}}();return"object"===("undefined"==typeof f?"undefined":c(f))?f.v:void 0}Object.defineProperty(t,"__esModule",{value:!0});var c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},f=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),s=n(2),l=r(s),p=n(4),h=p.InjectableArguments,y=function(e){function t(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];if(o(this,t),"string"!=typeof e)throw new TypeError('Value of argument "classConstructorIdentifier" violates contract.\n\nExpected:\nstring\n\nGot:\n'+a(e));if(null!=n&&!h(n))throw new TypeError('Value of argument "args" violates contract.\n\nExpected:\n?InjectableArguments\n\nGot:\n'+a(n));var r=i(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,n));return r._classConstructorIdentifier=e,r}return u(t,e),f(t,[{key:"classConstructorIdentifier",get:function(){function e(e){if("string"!=typeof e)throw new TypeError("Function return value violates contract.\n\nExpected:\nstring\n\nGot:\n"+a(e));return e}return e(this._classConstructorIdentifier)}}]),t}(l.default);t.default=y},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function u(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function a(e,t){var n=4,r=15;if(void 0===t&&(t=0),t+=1,null===e)return"null";if(void 0===e)return"void";if("string"==typeof e||"number"==typeof e||"boolean"==typeof e)return"undefined"==typeof e?"undefined":c(e);if(!Array.isArray(e)){var o=Object.keys(e);if(!o.length)return e.constructor&&e.constructor.name&&"Object"!==e.constructor.name?e.constructor.name:"Object";if(t>n)return"{...}";var i="  ".repeat(t-1),u=o.slice(0,r).map(function(n){return(/^([A-Z_$][A-Z0-9_$]*)$/i.test(n)?n:JSON.stringify(n))+": "+a(e[n],t)+";"}).join("\n  "+i);return o.length>=r&&(u+="\n  "+i+"..."),e.constructor&&e.constructor.name&&"Object"!==e.constructor.name?e.constructor.name+" {\n  "+i+u+"\n"+i+"}":"{\n  "+i+u+"\n"+i+"}"}if(!(e.length>0))return"Array";var f=function(){if(t>n)return{v:"[...]"};var o=a(e[0],t);return e.every(function(e){return a(e,t)===o})?{v:o.trim()+"[]"}:{v:"["+e.slice(0,r).map(function(e){return a(e,t)}).join(", ")+(e.length>=r?", ...":"")+"]"}}();return"object"===("undefined"==typeof f?"undefined":c(f))?f.v:void 0}Object.defineProperty(t,"__esModule",{value:!0});var c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},f=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),s=n(2),l=r(s),p=n(4),h=p.InjectableArguments,y=function(e){function t(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];if(o(this,t),"function"!=typeof e)throw new TypeError('Value of argument "factory" violates contract.\n\nExpected:\nFunction\n\nGot:\n'+a(e));if(null!=n&&!h(n))throw new TypeError('Value of argument "args" violates contract.\n\nExpected:\n?InjectableArguments\n\nGot:\n'+a(n));var r=i(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,n));return r._factory=e,r}return u(t,e),f(t,[{key:"factory",get:function(){function e(e){if("function"!=typeof e)throw new TypeError("Function return value violates contract.\n\nExpected:\nFunction\n\nGot:\n"+a(e));return e}return e(this._factory)}}]),t}(l.default);t.default=y},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}var o=n(10),i=r(o),u=n(43),a=r(u),c=n(11),f=r(c),s=n(44),l=r(s),p=n(45),h=r(p),y=n(46),d=r(y),v=n(47),g=r(v),b=n(48),m=r(b),w=n(49),E=r(w),_=n(50),j=r(_),O=n(51),S=r(O);e.exports={CannotLocateServiceClassConstructorError:i.default,CircularDependencyError:a.default,DislError:f.default,FactoryMethodReturnsNothingError:l.default,MethodDoesNotExistError:h.default,ServiceDefinitionAlreadyUsedError:d.default,UndefinedParameterError:g.default,
UndefinedServiceDefinitionAndInstanceError:m.default,UndefinedServiceDefinitionError:E.default,UnsupportedArgumentTypeError:j.default,GetServiceError:S.default}},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function u(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function a(e,t){var n=4,r=15;if(void 0===t&&(t=0),t+=1,null===e)return"null";if(void 0===e)return"void";if("string"==typeof e||"number"==typeof e||"boolean"==typeof e)return"undefined"==typeof e?"undefined":c(e);if(!Array.isArray(e)){var o=Object.keys(e);if(!o.length)return e.constructor&&e.constructor.name&&"Object"!==e.constructor.name?e.constructor.name:"Object";if(t>n)return"{...}";var i="  ".repeat(t-1),u=o.slice(0,r).map(function(n){return(/^([A-Z_$][A-Z0-9_$]*)$/i.test(n)?n:JSON.stringify(n))+": "+a(e[n],t)+";"}).join("\n  "+i);return o.length>=r&&(u+="\n  "+i+"..."),e.constructor&&e.constructor.name&&"Object"!==e.constructor.name?e.constructor.name+" {\n  "+i+u+"\n"+i+"}":"{\n  "+i+u+"\n"+i+"}"}if(!(e.length>0))return"Array";var f=function(){if(t>n)return{v:"[...]"};var o=a(e[0],t);return e.every(function(e){return a(e,t)===o})?{v:o.trim()+"[]"}:{v:"["+e.slice(0,r).map(function(e){return a(e,t)}).join(", ")+(e.length>=r?", ...":"")+"]"}}();return"object"===("undefined"==typeof f?"undefined":c(f))?f.v:void 0}Object.defineProperty(t,"__esModule",{value:!0});var c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},f=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),s=n(11),l=r(s),p=function(e){function t(){return o(this,t),i(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return u(t,e),f(t,null,[{key:"createError",value:function(e){if("string"!=typeof e)throw new TypeError('Value of argument "className" violates contract.\n\nExpected:\nstring\n\nGot:\n'+a(e));return new t({className:e},'Cannot locate service class constructor for class "%s"',e)}}]),t}(l.default);t.default=p},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function u(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var a=n(12),c=r(a),f=function(e){function t(){return o(this,t),i(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return u(t,e),t}(c.default);t.default=f},function(e,t,n){function r(e){var t,n,r,o,i;if(c.object(e,"args"),c.bool(e.strict,"args.strict"),c.array(e.argv,"args.argv"),t=e.argv,0===t.length)n={},r=[];else if(l(t[0]))n={cause:t[0]},r=t.slice(1);else if("object"==typeof t[0]){n={};for(i in t[0])n[i]=t[0][i];r=t.slice(1)}else c.string(t[0],"first argument to VError, SError, or WError constructor must be a string, object, or Error"),n={},r=t;return c.object(n),n.strict||e.strict||(r=r.map(function(e){return null===e?"null":void 0===e?"undefined":e})),o=0===r.length?"":p.apply(null,r),{options:n,shortmessage:o}}function o(){var e,t,n,i,u,a,f;if(e=Array.prototype.slice.call(arguments,0),!(this instanceof o))return t=Object.create(o.prototype),o.apply(t,arguments),t;if(n=r({argv:e,strict:!1}),n.options.name&&(c.string(n.options.name,'error\'s "name" must be a string'),this.name=n.options.name),this.jse_shortmsg=n.shortmessage,a=n.shortmessage,i=n.options.cause,i&&(c.ok(l(i),"cause is not an Error"),this.jse_cause=i,n.options.skipCauseMessage||(a+=": "+i.message)),this.jse_info={},n.options.info)for(f in n.options.info)this.jse_info[f]=n.options.info[f];return this.message=a,Error.call(this,a),Error.captureStackTrace&&(u=n.options.constructorOpt||this.constructor,Error.captureStackTrace(this,u)),this}function i(){var e,t,n,u;return e=Array.prototype.slice.call(arguments,0),this instanceof i?(n=r({argv:e,strict:!0}),u=n.options,o.call(this,u,"%s",n.shortmessage),this):(t=Object.create(i.prototype),i.apply(t,arguments),t)}function u(e){c.array(e,"list of errors"),c.ok(e.length>0,"must be at least one error"),this.ase_errors=e,o.call(this,{cause:e[0]},"first of %d error%s",e.length,1==e.length?"":"s")}function a(){var e,t,n,i;return e=Array.prototype.slice.call(arguments,0),this instanceof a?(n=r({argv:e,strict:!1}),i=n.options,i.skipCauseMessage=!0,o.call(this,i,"%s",n.shortmessage),this):(t=Object.create(a.prototype),a.apply(t,e),t)}var c=n(13),f=n(20),s=n(41),l=n(42).isError,p=s.sprintf;e.exports=o,o.VError=o,o.SError=i,o.WError=a,o.MultiError=u,f.inherits(o,Error),o.prototype.name="VError",o.prototype.toString=function(){var e=this.hasOwnProperty("name")&&this.name||this.constructor.name||this.constructor.prototype.name;return this.message&&(e+=": "+this.message),e},o.prototype.cause=function(){var e=o.cause(this);return null===e?void 0:e},o.cause=function(e){return c.ok(l(e),"err must be an Error"),l(e.jse_cause)?e.jse_cause:null},o.info=function(e){var t,n,r;if(c.ok(l(e),"err must be an Error"),n=o.cause(e),t=null!==n?o.info(n):{},"object"==typeof e.jse_info&&null!==e.jse_info)for(r in e.jse_info)t[r]=e.jse_info[r];return t},o.findCauseByName=function(e,t){var n;for(c.ok(l(e),"err must be an Error"),c.string(t),c.ok(t.length>0,"name cannot be empty"),n=e;null!==n;n=o.cause(n))if(c.ok(l(n)),n.name==t)return n;return null},o.fullStack=function(e){c.ok(l(e),"err must be an Error");var t=o.cause(e);return t?e.stack+"\ncaused by: "+o.fullStack(t):e.stack},f.inherits(i,o),f.inherits(u,o),u.prototype.name="MultiError",u.prototype.errors=function(){return this.ase_errors.slice(0)},f.inherits(a,o),a.prototype.name="WError",a.prototype.toString=function(){var e=this.hasOwnProperty("name")&&this.name||this.constructor.name||this.constructor.prototype.name;return this.message&&(e+=": "+this.message),this.jse_cause&&this.jse_cause.message&&(e+="; caused by "+this.jse_cause.toString()),e},a.prototype.cause=function(e){return l(e)&&(this.jse_cause=e),this.jse_cause}},function(e,t,n){(function(t,r){function o(e){return e.charAt(0).toUpperCase()+e.slice(1)}function i(e,t,n,r,o){throw new f.AssertionError({message:l.format("%s (%s) is required",e,t),actual:void 0===o?typeof r:o(r),expected:t,operator:n||"===",stackStartFunction:i.caller})}function u(e){return Object.prototype.toString.call(e).slice(8,-1)}function a(){}function c(e){var t,n=Object.keys(h);return t=r.env.NODE_NDEBUG?a:function(e,t){e||i(t,"true",e)},n.forEach(function(n){if(e)return void(t[n]=a);var r=h[n];t[n]=function(e,t){r.check(e)||i(t,n,r.operator,e,r.actual)}}),n.forEach(function(n){var r="optional"+o(n);if(e)return void(t[r]=a);var u=h[n];t[r]=function(e,t){void 0!==e&&null!==e&&(u.check(e)||i(t,n,u.operator,e,u.actual))}}),n.forEach(function(n){var r="arrayOf"+o(n);if(e)return void(t[r]=a);var u=h[n],c="["+n+"]";t[r]=function(e,t){Array.isArray(e)||i(t,c,u.operator,e,u.actual);var n;for(n=0;n<e.length;n++)u.check(e[n])||i(t,c,u.operator,e,u.actual)}}),n.forEach(function(n){var r="optionalArrayOf"+o(n);if(e)return void(t[r]=a);var u=h[n],c="["+n+"]";t[r]=function(e,t){if(void 0!==e&&null!==e){Array.isArray(e)||i(t,c,u.operator,e,u.actual);var n;for(n=0;n<e.length;n++)u.check(e[n])||i(t,c,u.operator,e,u.actual)}}}),Object.keys(f).forEach(function(n){return"AssertionError"===n?void(t[n]=f[n]):e?void(t[n]=a):void(t[n]=f[n])}),t._setExports=c,t}var f=n(19),s=n(23).Stream,l=n(20),p=/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/,h={bool:{check:function(e){return"boolean"==typeof e}},func:{check:function(e){return"function"==typeof e}},string:{check:function(e){return"string"==typeof e}},object:{check:function(e){return"object"==typeof e&&null!==e}},number:{check:function(e){return"number"==typeof e&&!isNaN(e)}},finite:{check:function(e){return"number"==typeof e&&!isNaN(e)&&isFinite(e)}},buffer:{check:function(e){return t.isBuffer(e)},operator:"Buffer.isBuffer"},array:{check:function(e){return Array.isArray(e)},operator:"Array.isArray"},stream:{check:function(e){return e instanceof s},operator:"instanceof",actual:u},date:{check:function(e){return e instanceof Date},operator:"instanceof",actual:u},regexp:{check:function(e){return e instanceof RegExp},operator:"instanceof",actual:u},uuid:{check:function(e){return"string"==typeof e&&p.test(e)},operator:"isUUID"}};e.exports=c(r.env.NODE_NDEBUG)}).call(t,n(14).Buffer,n(18))},function(e,t,n){(function(e,r){/*!
	 * The buffer module from node.js, for the browser.
	 *
	 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
	 * @license  MIT
	 */
"use strict";function o(){try{var e=new Uint8Array(1);return e.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===e.foo()&&"function"==typeof e.subarray&&0===e.subarray(1,1).byteLength}catch(e){return!1}}function i(){return e.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function u(t,n){if(i()<n)throw new RangeError("Invalid typed array length");return e.TYPED_ARRAY_SUPPORT?(t=new Uint8Array(n),t.__proto__=e.prototype):(null===t&&(t=new e(n)),t.length=n),t}function e(t,n,r){if(!(e.TYPED_ARRAY_SUPPORT||this instanceof e))return new e(t,n,r);if("number"==typeof t){if("string"==typeof n)throw new Error("If encoding is specified then the first argument must be a string");return s(this,t)}return a(this,t,n,r)}function a(e,t,n,r){if("number"==typeof t)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&t instanceof ArrayBuffer?h(e,t,n,r):"string"==typeof t?l(e,t,n):y(e,t)}function c(e){if("number"!=typeof e)throw new TypeError('"size" argument must be a number');if(e<0)throw new RangeError('"size" argument must not be negative')}function f(e,t,n,r){return c(t),t<=0?u(e,t):void 0!==n?"string"==typeof r?u(e,t).fill(n,r):u(e,t).fill(n):u(e,t)}function s(t,n){if(c(n),t=u(t,n<0?0:0|d(n)),!e.TYPED_ARRAY_SUPPORT)for(var r=0;r<n;++r)t[r]=0;return t}function l(t,n,r){if("string"==typeof r&&""!==r||(r="utf8"),!e.isEncoding(r))throw new TypeError('"encoding" must be a valid string encoding');var o=0|g(n,r);t=u(t,o);var i=t.write(n,r);return i!==o&&(t=t.slice(0,i)),t}function p(e,t){var n=t.length<0?0:0|d(t.length);e=u(e,n);for(var r=0;r<n;r+=1)e[r]=255&t[r];return e}function h(t,n,r,o){if(n.byteLength,r<0||n.byteLength<r)throw new RangeError("'offset' is out of bounds");if(n.byteLength<r+(o||0))throw new RangeError("'length' is out of bounds");return n=void 0===r&&void 0===o?new Uint8Array(n):void 0===o?new Uint8Array(n,r):new Uint8Array(n,r,o),e.TYPED_ARRAY_SUPPORT?(t=n,t.__proto__=e.prototype):t=p(t,n),t}function y(t,n){if(e.isBuffer(n)){var r=0|d(n.length);return t=u(t,r),0===t.length?t:(n.copy(t,0,0,r),t)}if(n){if("undefined"!=typeof ArrayBuffer&&n.buffer instanceof ArrayBuffer||"length"in n)return"number"!=typeof n.length||H(n.length)?u(t,0):p(t,n);if("Buffer"===n.type&&Q(n.data))return p(t,n.data)}throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}function d(e){if(e>=i())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+i().toString(16)+" bytes");return 0|e}function v(t){return+t!=t&&(t=0),e.alloc(+t)}function g(t,n){if(e.isBuffer(t))return t.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(t)||t instanceof ArrayBuffer))return t.byteLength;"string"!=typeof t&&(t=""+t);var r=t.length;if(0===r)return 0;for(var o=!1;;)switch(n){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":case void 0:return z(t).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return J(t).length;default:if(o)return z(t).length;n=(""+n).toLowerCase(),o=!0}}function b(e,t,n){var r=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if(n>>>=0,t>>>=0,n<=t)return"";for(e||(e="utf8");;)switch(e){case"hex":return C(this,t,n);case"utf8":case"utf-8":return k(this,t,n);case"ascii":return R(this,t,n);case"latin1":case"binary":return M(this,t,n);case"base64":return x(this,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return L(this,t,n);default:if(r)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),r=!0}}function m(e,t,n){var r=e[t];e[t]=e[n],e[n]=r}function w(t,n,r,o,i){if(0===t.length)return-1;if("string"==typeof r?(o=r,r=0):r>2147483647?r=2147483647:r<-2147483648&&(r=-2147483648),r=+r,isNaN(r)&&(r=i?0:t.length-1),r<0&&(r=t.length+r),r>=t.length){if(i)return-1;r=t.length-1}else if(r<0){if(!i)return-1;r=0}if("string"==typeof n&&(n=e.from(n,o)),e.isBuffer(n))return 0===n.length?-1:E(t,n,r,o,i);if("number"==typeof n)return n&=255,e.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?i?Uint8Array.prototype.indexOf.call(t,n,r):Uint8Array.prototype.lastIndexOf.call(t,n,r):E(t,[n],r,o,i);throw new TypeError("val must be string, number or Buffer")}function E(e,t,n,r,o){function i(e,t){return 1===u?e[t]:e.readUInt16BE(t*u)}var u=1,a=e.length,c=t.length;if(void 0!==r&&(r=String(r).toLowerCase(),"ucs2"===r||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(e.length<2||t.length<2)return-1;u=2,a/=2,c/=2,n/=2}var f;if(o){var s=-1;for(f=n;f<a;f++)if(i(e,f)===i(t,s===-1?0:f-s)){if(s===-1&&(s=f),f-s+1===c)return s*u}else s!==-1&&(f-=f-s),s=-1}else for(n+c>a&&(n=a-c),f=n;f>=0;f--){for(var l=!0,p=0;p<c;p++)if(i(e,f+p)!==i(t,p)){l=!1;break}if(l)return f}return-1}function _(e,t,n,r){n=Number(n)||0;var o=e.length-n;r?(r=Number(r),r>o&&(r=o)):r=o;var i=t.length;if(i%2!==0)throw new TypeError("Invalid hex string");r>i/2&&(r=i/2);for(var u=0;u<r;++u){var a=parseInt(t.substr(2*u,2),16);if(isNaN(a))return u;e[n+u]=a}return u}function j(e,t,n,r){return q(z(t,e.length-n),e,n,r)}function O(e,t,n,r){return q(Z(t),e,n,r)}function S(e,t,n,r){return O(e,t,n,r)}function A(e,t,n,r){return q(J(t),e,n,r)}function T(e,t,n,r){return q(W(t,e.length-n),e,n,r)}function x(e,t,n){return 0===t&&n===e.length?X.fromByteArray(e):X.fromByteArray(e.slice(t,n))}function k(e,t,n){n=Math.min(e.length,n);for(var r=[],o=t;o<n;){var i=e[o],u=null,a=i>239?4:i>223?3:i>191?2:1;if(o+a<=n){var c,f,s,l;switch(a){case 1:i<128&&(u=i);break;case 2:c=e[o+1],128===(192&c)&&(l=(31&i)<<6|63&c,l>127&&(u=l));break;case 3:c=e[o+1],f=e[o+2],128===(192&c)&&128===(192&f)&&(l=(15&i)<<12|(63&c)<<6|63&f,l>2047&&(l<55296||l>57343)&&(u=l));break;case 4:c=e[o+1],f=e[o+2],s=e[o+3],128===(192&c)&&128===(192&f)&&128===(192&s)&&(l=(15&i)<<18|(63&c)<<12|(63&f)<<6|63&s,l>65535&&l<1114112&&(u=l))}}null===u?(u=65533,a=1):u>65535&&(u-=65536,r.push(u>>>10&1023|55296),u=56320|1023&u),r.push(u),o+=a}return P(r)}function P(e){var t=e.length;if(t<=ee)return String.fromCharCode.apply(String,e);for(var n="",r=0;r<t;)n+=String.fromCharCode.apply(String,e.slice(r,r+=ee));return n}function R(e,t,n){var r="";n=Math.min(e.length,n);for(var o=t;o<n;++o)r+=String.fromCharCode(127&e[o]);return r}function M(e,t,n){var r="";n=Math.min(e.length,n);for(var o=t;o<n;++o)r+=String.fromCharCode(e[o]);return r}function C(e,t,n){var r=e.length;(!t||t<0)&&(t=0),(!n||n<0||n>r)&&(n=r);for(var o="",i=t;i<n;++i)o+=Y(e[i]);return o}function L(e,t,n){for(var r=e.slice(t,n),o="",i=0;i<r.length;i+=2)o+=String.fromCharCode(r[i]+256*r[i+1]);return o}function B(e,t,n){if(e%1!==0||e<0)throw new RangeError("offset is not uint");if(e+t>n)throw new RangeError("Trying to access beyond buffer length")}function I(t,n,r,o,i,u){if(!e.isBuffer(t))throw new TypeError('"buffer" argument must be a Buffer instance');if(n>i||n<u)throw new RangeError('"value" argument is out of bounds');if(r+o>t.length)throw new RangeError("Index out of range")}function D(e,t,n,r){t<0&&(t=65535+t+1);for(var o=0,i=Math.min(e.length-n,2);o<i;++o)e[n+o]=(t&255<<8*(r?o:1-o))>>>8*(r?o:1-o)}function U(e,t,n,r){t<0&&(t=4294967295+t+1);for(var o=0,i=Math.min(e.length-n,4);o<i;++o)e[n+o]=t>>>8*(r?o:3-o)&255}function G(e,t,n,r,o,i){if(n+r>e.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function N(e,t,n,r,o){return o||G(e,t,n,4,3.4028234663852886e38,-3.4028234663852886e38),K.write(e,t,n,r,23,4),n+4}function F(e,t,n,r,o){return o||G(e,t,n,8,1.7976931348623157e308,-1.7976931348623157e308),K.write(e,t,n,r,52,8),n+8}function V(e){if(e=$(e).replace(te,""),e.length<2)return"";for(;e.length%4!==0;)e+="=";return e}function $(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")}function Y(e){return e<16?"0"+e.toString(16):e.toString(16)}function z(e,t){t=t||1/0;for(var n,r=e.length,o=null,i=[],u=0;u<r;++u){if(n=e.charCodeAt(u),n>55295&&n<57344){if(!o){if(n>56319){(t-=3)>-1&&i.push(239,191,189);continue}if(u+1===r){(t-=3)>-1&&i.push(239,191,189);continue}o=n;continue}if(n<56320){(t-=3)>-1&&i.push(239,191,189),o=n;continue}n=(o-55296<<10|n-56320)+65536}else o&&(t-=3)>-1&&i.push(239,191,189);if(o=null,n<128){if((t-=1)<0)break;i.push(n)}else if(n<2048){if((t-=2)<0)break;i.push(n>>6|192,63&n|128)}else if(n<65536){if((t-=3)<0)break;i.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;i.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return i}function Z(e){for(var t=[],n=0;n<e.length;++n)t.push(255&e.charCodeAt(n));return t}function W(e,t){for(var n,r,o,i=[],u=0;u<e.length&&!((t-=2)<0);++u)n=e.charCodeAt(u),r=n>>8,o=n%256,i.push(o),i.push(r);return i}function J(e){return X.toByteArray(V(e))}function q(e,t,n,r){for(var o=0;o<r&&!(o+n>=t.length||o>=e.length);++o)t[o+n]=e[o];return o}function H(e){return e!==e}var X=n(15),K=n(16),Q=n(17);t.Buffer=e,t.SlowBuffer=v,t.INSPECT_MAX_BYTES=50,e.TYPED_ARRAY_SUPPORT=void 0!==r.TYPED_ARRAY_SUPPORT?r.TYPED_ARRAY_SUPPORT:o(),t.kMaxLength=i(),e.poolSize=8192,e._augment=function(t){return t.__proto__=e.prototype,t},e.from=function(e,t,n){return a(null,e,t,n)},e.TYPED_ARRAY_SUPPORT&&(e.prototype.__proto__=Uint8Array.prototype,e.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&e[Symbol.species]===e&&Object.defineProperty(e,Symbol.species,{value:null,configurable:!0})),e.alloc=function(e,t,n){return f(null,e,t,n)},e.allocUnsafe=function(e){return s(null,e)},e.allocUnsafeSlow=function(e){return s(null,e)},e.isBuffer=function(e){return!(null==e||!e._isBuffer)},e.compare=function(t,n){if(!e.isBuffer(t)||!e.isBuffer(n))throw new TypeError("Arguments must be Buffers");if(t===n)return 0;for(var r=t.length,o=n.length,i=0,u=Math.min(r,o);i<u;++i)if(t[i]!==n[i]){r=t[i],o=n[i];break}return r<o?-1:o<r?1:0},e.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},e.concat=function(t,n){if(!Q(t))throw new TypeError('"list" argument must be an Array of Buffers');if(0===t.length)return e.alloc(0);var r;if(void 0===n)for(n=0,r=0;r<t.length;++r)n+=t[r].length;var o=e.allocUnsafe(n),i=0;for(r=0;r<t.length;++r){var u=t[r];if(!e.isBuffer(u))throw new TypeError('"list" argument must be an Array of Buffers');u.copy(o,i),i+=u.length}return o},e.byteLength=g,e.prototype._isBuffer=!0,e.prototype.swap16=function(){var e=this.length;if(e%2!==0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var t=0;t<e;t+=2)m(this,t,t+1);return this},e.prototype.swap32=function(){var e=this.length;if(e%4!==0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var t=0;t<e;t+=4)m(this,t,t+3),m(this,t+1,t+2);return this},e.prototype.swap64=function(){var e=this.length;if(e%8!==0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var t=0;t<e;t+=8)m(this,t,t+7),m(this,t+1,t+6),m(this,t+2,t+5),m(this,t+3,t+4);return this},e.prototype.toString=function(){var e=0|this.length;return 0===e?"":0===arguments.length?k(this,0,e):b.apply(this,arguments)},e.prototype.equals=function(t){if(!e.isBuffer(t))throw new TypeError("Argument must be a Buffer");return this===t||0===e.compare(this,t)},e.prototype.inspect=function(){var e="",n=t.INSPECT_MAX_BYTES;return this.length>0&&(e=this.toString("hex",0,n).match(/.{2}/g).join(" "),this.length>n&&(e+=" ... ")),"<Buffer "+e+">"},e.prototype.compare=function(t,n,r,o,i){if(!e.isBuffer(t))throw new TypeError("Argument must be a Buffer");if(void 0===n&&(n=0),void 0===r&&(r=t?t.length:0),void 0===o&&(o=0),void 0===i&&(i=this.length),n<0||r>t.length||o<0||i>this.length)throw new RangeError("out of range index");if(o>=i&&n>=r)return 0;if(o>=i)return-1;if(n>=r)return 1;if(n>>>=0,r>>>=0,o>>>=0,i>>>=0,this===t)return 0;for(var u=i-o,a=r-n,c=Math.min(u,a),f=this.slice(o,i),s=t.slice(n,r),l=0;l<c;++l)if(f[l]!==s[l]){u=f[l],a=s[l];break}return u<a?-1:a<u?1:0},e.prototype.includes=function(e,t,n){return this.indexOf(e,t,n)!==-1},e.prototype.indexOf=function(e,t,n){return w(this,e,t,n,!0)},e.prototype.lastIndexOf=function(e,t,n){return w(this,e,t,n,!1)},e.prototype.write=function(e,t,n,r){if(void 0===t)r="utf8",n=this.length,t=0;else if(void 0===n&&"string"==typeof t)r=t,n=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t|=0,isFinite(n)?(n|=0,void 0===r&&(r="utf8")):(r=n,n=void 0)}var o=this.length-t;if((void 0===n||n>o)&&(n=o),e.length>0&&(n<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");r||(r="utf8");for(var i=!1;;)switch(r){case"hex":return _(this,e,t,n);case"utf8":case"utf-8":return j(this,e,t,n);case"ascii":return O(this,e,t,n);case"latin1":case"binary":return S(this,e,t,n);case"base64":return A(this,e,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return T(this,e,t,n);default:if(i)throw new TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),i=!0}},e.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var ee=4096;e.prototype.slice=function(t,n){var r=this.length;t=~~t,n=void 0===n?r:~~n,t<0?(t+=r,t<0&&(t=0)):t>r&&(t=r),n<0?(n+=r,n<0&&(n=0)):n>r&&(n=r),n<t&&(n=t);var o;if(e.TYPED_ARRAY_SUPPORT)o=this.subarray(t,n),o.__proto__=e.prototype;else{var i=n-t;o=new e(i,void 0);for(var u=0;u<i;++u)o[u]=this[u+t]}return o},e.prototype.readUIntLE=function(e,t,n){e|=0,t|=0,n||B(e,t,this.length);for(var r=this[e],o=1,i=0;++i<t&&(o*=256);)r+=this[e+i]*o;return r},e.prototype.readUIntBE=function(e,t,n){e|=0,t|=0,n||B(e,t,this.length);for(var r=this[e+--t],o=1;t>0&&(o*=256);)r+=this[e+--t]*o;return r},e.prototype.readUInt8=function(e,t){return t||B(e,1,this.length),this[e]},e.prototype.readUInt16LE=function(e,t){return t||B(e,2,this.length),this[e]|this[e+1]<<8},e.prototype.readUInt16BE=function(e,t){return t||B(e,2,this.length),this[e]<<8|this[e+1]},e.prototype.readUInt32LE=function(e,t){return t||B(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},e.prototype.readUInt32BE=function(e,t){return t||B(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},e.prototype.readIntLE=function(e,t,n){e|=0,t|=0,n||B(e,t,this.length);for(var r=this[e],o=1,i=0;++i<t&&(o*=256);)r+=this[e+i]*o;return o*=128,r>=o&&(r-=Math.pow(2,8*t)),r},e.prototype.readIntBE=function(e,t,n){e|=0,t|=0,n||B(e,t,this.length);for(var r=t,o=1,i=this[e+--r];r>0&&(o*=256);)i+=this[e+--r]*o;return o*=128,i>=o&&(i-=Math.pow(2,8*t)),i},e.prototype.readInt8=function(e,t){return t||B(e,1,this.length),128&this[e]?(255-this[e]+1)*-1:this[e]},e.prototype.readInt16LE=function(e,t){t||B(e,2,this.length);var n=this[e]|this[e+1]<<8;return 32768&n?4294901760|n:n},e.prototype.readInt16BE=function(e,t){t||B(e,2,this.length);var n=this[e+1]|this[e]<<8;return 32768&n?4294901760|n:n},e.prototype.readInt32LE=function(e,t){return t||B(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},e.prototype.readInt32BE=function(e,t){return t||B(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},e.prototype.readFloatLE=function(e,t){return t||B(e,4,this.length),K.read(this,e,!0,23,4)},e.prototype.readFloatBE=function(e,t){return t||B(e,4,this.length),K.read(this,e,!1,23,4)},e.prototype.readDoubleLE=function(e,t){return t||B(e,8,this.length),K.read(this,e,!0,52,8)},e.prototype.readDoubleBE=function(e,t){return t||B(e,8,this.length),K.read(this,e,!1,52,8)},e.prototype.writeUIntLE=function(e,t,n,r){if(e=+e,t|=0,n|=0,!r){var o=Math.pow(2,8*n)-1;I(this,e,t,n,o,0)}var i=1,u=0;for(this[t]=255&e;++u<n&&(i*=256);)this[t+u]=e/i&255;return t+n},e.prototype.writeUIntBE=function(e,t,n,r){if(e=+e,t|=0,n|=0,!r){var o=Math.pow(2,8*n)-1;I(this,e,t,n,o,0)}var i=n-1,u=1;for(this[t+i]=255&e;--i>=0&&(u*=256);)this[t+i]=e/u&255;return t+n},e.prototype.writeUInt8=function(t,n,r){return t=+t,n|=0,r||I(this,t,n,1,255,0),e.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),this[n]=255&t,n+1},e.prototype.writeUInt16LE=function(t,n,r){return t=+t,n|=0,r||I(this,t,n,2,65535,0),e.TYPED_ARRAY_SUPPORT?(this[n]=255&t,this[n+1]=t>>>8):D(this,t,n,!0),n+2},e.prototype.writeUInt16BE=function(t,n,r){return t=+t,n|=0,r||I(this,t,n,2,65535,0),e.TYPED_ARRAY_SUPPORT?(this[n]=t>>>8,this[n+1]=255&t):D(this,t,n,!1),n+2},e.prototype.writeUInt32LE=function(t,n,r){return t=+t,n|=0,r||I(this,t,n,4,4294967295,0),e.TYPED_ARRAY_SUPPORT?(this[n+3]=t>>>24,this[n+2]=t>>>16,this[n+1]=t>>>8,this[n]=255&t):U(this,t,n,!0),n+4},e.prototype.writeUInt32BE=function(t,n,r){return t=+t,n|=0,r||I(this,t,n,4,4294967295,0),e.TYPED_ARRAY_SUPPORT?(this[n]=t>>>24,this[n+1]=t>>>16,this[n+2]=t>>>8,this[n+3]=255&t):U(this,t,n,!1),n+4},e.prototype.writeIntLE=function(e,t,n,r){if(e=+e,t|=0,!r){var o=Math.pow(2,8*n-1);I(this,e,t,n,o-1,-o)}var i=0,u=1,a=0;for(this[t]=255&e;++i<n&&(u*=256);)e<0&&0===a&&0!==this[t+i-1]&&(a=1),this[t+i]=(e/u>>0)-a&255;return t+n},e.prototype.writeIntBE=function(e,t,n,r){if(e=+e,t|=0,!r){var o=Math.pow(2,8*n-1);I(this,e,t,n,o-1,-o)}var i=n-1,u=1,a=0;for(this[t+i]=255&e;--i>=0&&(u*=256);)e<0&&0===a&&0!==this[t+i+1]&&(a=1),this[t+i]=(e/u>>0)-a&255;return t+n},e.prototype.writeInt8=function(t,n,r){return t=+t,n|=0,r||I(this,t,n,1,127,-128),e.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),t<0&&(t=255+t+1),this[n]=255&t,n+1},e.prototype.writeInt16LE=function(t,n,r){return t=+t,n|=0,r||I(this,t,n,2,32767,-32768),e.TYPED_ARRAY_SUPPORT?(this[n]=255&t,this[n+1]=t>>>8):D(this,t,n,!0),n+2},e.prototype.writeInt16BE=function(t,n,r){return t=+t,n|=0,r||I(this,t,n,2,32767,-32768),e.TYPED_ARRAY_SUPPORT?(this[n]=t>>>8,this[n+1]=255&t):D(this,t,n,!1),n+2},e.prototype.writeInt32LE=function(t,n,r){return t=+t,n|=0,r||I(this,t,n,4,2147483647,-2147483648),e.TYPED_ARRAY_SUPPORT?(this[n]=255&t,this[n+1]=t>>>8,this[n+2]=t>>>16,this[n+3]=t>>>24):U(this,t,n,!0),n+4},e.prototype.writeInt32BE=function(t,n,r){return t=+t,n|=0,r||I(this,t,n,4,2147483647,-2147483648),t<0&&(t=4294967295+t+1),e.TYPED_ARRAY_SUPPORT?(this[n]=t>>>24,this[n+1]=t>>>16,this[n+2]=t>>>8,this[n+3]=255&t):U(this,t,n,!1),n+4},e.prototype.writeFloatLE=function(e,t,n){return N(this,e,t,!0,n)},e.prototype.writeFloatBE=function(e,t,n){return N(this,e,t,!1,n)},e.prototype.writeDoubleLE=function(e,t,n){return F(this,e,t,!0,n)},e.prototype.writeDoubleBE=function(e,t,n){return F(this,e,t,!1,n)},e.prototype.copy=function(t,n,r,o){if(r||(r=0),o||0===o||(o=this.length),n>=t.length&&(n=t.length),n||(n=0),o>0&&o<r&&(o=r),o===r)return 0;if(0===t.length||0===this.length)return 0;if(n<0)throw new RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw new RangeError("sourceStart out of bounds");if(o<0)throw new RangeError("sourceEnd out of bounds");o>this.length&&(o=this.length),t.length-n<o-r&&(o=t.length-n+r);var i,u=o-r;if(this===t&&r<n&&n<o)for(i=u-1;i>=0;--i)t[i+n]=this[i+r];else if(u<1e3||!e.TYPED_ARRAY_SUPPORT)for(i=0;i<u;++i)t[i+n]=this[i+r];else Uint8Array.prototype.set.call(t,this.subarray(r,r+u),n);return u},e.prototype.fill=function(t,n,r,o){if("string"==typeof t){if("string"==typeof n?(o=n,n=0,r=this.length):"string"==typeof r&&(o=r,r=this.length),1===t.length){var i=t.charCodeAt(0);i<256&&(t=i)}if(void 0!==o&&"string"!=typeof o)throw new TypeError("encoding must be a string");if("string"==typeof o&&!e.isEncoding(o))throw new TypeError("Unknown encoding: "+o)}else"number"==typeof t&&(t&=255);if(n<0||this.length<n||this.length<r)throw new RangeError("Out of range index");if(r<=n)return this;n>>>=0,r=void 0===r?this.length:r>>>0,t||(t=0);var u;if("number"==typeof t)for(u=n;u<r;++u)this[u]=t;else{var a=e.isBuffer(t)?t:z(new e(t,o).toString()),c=a.length;for(u=0;u<r-n;++u)this[u+n]=a[u%c]}return this};var te=/[^+\/0-9A-Za-z-_]/g}).call(t,n(14).Buffer,function(){return this}())},function(e,t){"use strict";function n(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");return"="===e[t-2]?2:"="===e[t-1]?1:0}function r(e){return 3*e.length/4-n(e)}function o(e){var t,r,o,i,u,a,c=e.length;u=n(e),a=new s(3*c/4-u),o=u>0?c-4:c;var l=0;for(t=0,r=0;t<o;t+=4,r+=3)i=f[e.charCodeAt(t)]<<18|f[e.charCodeAt(t+1)]<<12|f[e.charCodeAt(t+2)]<<6|f[e.charCodeAt(t+3)],a[l++]=i>>16&255,a[l++]=i>>8&255,a[l++]=255&i;return 2===u?(i=f[e.charCodeAt(t)]<<2|f[e.charCodeAt(t+1)]>>4,a[l++]=255&i):1===u&&(i=f[e.charCodeAt(t)]<<10|f[e.charCodeAt(t+1)]<<4|f[e.charCodeAt(t+2)]>>2,a[l++]=i>>8&255,a[l++]=255&i),a}function i(e){return c[e>>18&63]+c[e>>12&63]+c[e>>6&63]+c[63&e]}function u(e,t,n){for(var r,o=[],u=t;u<n;u+=3)r=(e[u]<<16)+(e[u+1]<<8)+e[u+2],o.push(i(r));return o.join("")}function a(e){for(var t,n=e.length,r=n%3,o="",i=[],a=16383,f=0,s=n-r;f<s;f+=a)i.push(u(e,f,f+a>s?s:f+a));return 1===r?(t=e[n-1],o+=c[t>>2],o+=c[t<<4&63],o+="=="):2===r&&(t=(e[n-2]<<8)+e[n-1],o+=c[t>>10],o+=c[t>>4&63],o+=c[t<<2&63],o+="="),i.push(o),i.join("")}t.byteLength=r,t.toByteArray=o,t.fromByteArray=a;for(var c=[],f=[],s="undefined"!=typeof Uint8Array?Uint8Array:Array,l="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",p=0,h=l.length;p<h;++p)c[p]=l[p],f[l.charCodeAt(p)]=p;f["-".charCodeAt(0)]=62,f["_".charCodeAt(0)]=63},function(e,t){t.read=function(e,t,n,r,o){var i,u,a=8*o-r-1,c=(1<<a)-1,f=c>>1,s=-7,l=n?o-1:0,p=n?-1:1,h=e[t+l];for(l+=p,i=h&(1<<-s)-1,h>>=-s,s+=a;s>0;i=256*i+e[t+l],l+=p,s-=8);for(u=i&(1<<-s)-1,i>>=-s,s+=r;s>0;u=256*u+e[t+l],l+=p,s-=8);if(0===i)i=1-f;else{if(i===c)return u?NaN:(h?-1:1)*(1/0);u+=Math.pow(2,r),i-=f}return(h?-1:1)*u*Math.pow(2,i-r)},t.write=function(e,t,n,r,o,i){var u,a,c,f=8*i-o-1,s=(1<<f)-1,l=s>>1,p=23===o?Math.pow(2,-24)-Math.pow(2,-77):0,h=r?0:i-1,y=r?1:-1,d=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(a=isNaN(t)?1:0,u=s):(u=Math.floor(Math.log(t)/Math.LN2),t*(c=Math.pow(2,-u))<1&&(u--,c*=2),t+=u+l>=1?p/c:p*Math.pow(2,1-l),t*c>=2&&(u++,c/=2),u+l>=s?(a=0,u=s):u+l>=1?(a=(t*c-1)*Math.pow(2,o),u+=l):(a=t*Math.pow(2,l-1)*Math.pow(2,o),u=0));o>=8;e[n+h]=255&a,h+=y,a/=256,o-=8);for(u=u<<o|a,f+=o;f>0;e[n+h]=255&u,h+=y,u/=256,f-=8);e[n+h-y]|=128*d}},function(e,t){var n={}.toString;e.exports=Array.isArray||function(e){return"[object Array]"==n.call(e)}},function(e,t){function n(){throw new Error("setTimeout has not been defined")}function r(){throw new Error("clearTimeout has not been defined")}function o(e){if(s===setTimeout)return setTimeout(e,0);if((s===n||!s)&&setTimeout)return s=setTimeout,setTimeout(e,0);try{return s(e,0)}catch(t){try{return s.call(null,e,0)}catch(t){return s.call(this,e,0)}}}function i(e){if(l===clearTimeout)return clearTimeout(e);if((l===r||!l)&&clearTimeout)return l=clearTimeout,clearTimeout(e);try{return l(e)}catch(t){try{return l.call(null,e)}catch(t){return l.call(this,e)}}}function u(){d&&h&&(d=!1,h.length?y=h.concat(y):v=-1,y.length&&a())}function a(){if(!d){var e=o(u);d=!0;for(var t=y.length;t;){for(h=y,y=[];++v<t;)h&&h[v].run();v=-1,t=y.length}h=null,d=!1,i(e)}}function c(e,t){this.fun=e,this.array=t}function f(){}var s,l,p=e.exports={};!function(){try{s="function"==typeof setTimeout?setTimeout:n}catch(e){s=n}try{l="function"==typeof clearTimeout?clearTimeout:r}catch(e){l=r}}();var h,y=[],d=!1,v=-1;p.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];y.push(new c(e,t)),1!==y.length||d||o(a)},c.prototype.run=function(){this.fun.apply(null,this.array)},p.title="browser",p.browser=!0,p.env={},p.argv=[],p.version="",p.versions={},p.on=f,p.addListener=f,p.once=f,p.off=f,p.removeListener=f,p.removeAllListeners=f,p.emit=f,p.binding=function(e){throw new Error("process.binding is not supported")},p.cwd=function(){return"/"},p.chdir=function(e){throw new Error("process.chdir is not supported")},p.umask=function(){return 0}},function(e,t,n){(function(t){"use strict";/*!
	 * The buffer module from node.js, for the browser.
	 *
	 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
	 * @license  MIT
	 */
function r(e,t){if(e===t)return 0;for(var n=e.length,r=t.length,o=0,i=Math.min(n,r);o<i;++o)if(e[o]!==t[o]){n=e[o],r=t[o];break}return n<r?-1:r<n?1:0}function o(e){return t.Buffer&&"function"==typeof t.Buffer.isBuffer?t.Buffer.isBuffer(e):!(null==e||!e._isBuffer)}function i(e){return Object.prototype.toString.call(e)}function u(e){return!o(e)&&("function"==typeof t.ArrayBuffer&&("function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(e):!!e&&(e instanceof DataView||!!(e.buffer&&e.buffer instanceof ArrayBuffer))))}function a(e){if(w.isFunction(e)){if(j)return e.name;var t=e.toString(),n=t.match(S);return n&&n[1]}}function c(e,t){return"string"==typeof e?e.length<t?e:e.slice(0,t):e}function f(e){if(j||!w.isFunction(e))return w.inspect(e);var t=a(e),n=t?": "+t:"";return"[Function"+n+"]"}function s(e){return c(f(e.actual),128)+" "+e.operator+" "+c(f(e.expected),128)}function l(e,t,n,r,o){throw new O.AssertionError({message:n,actual:e,expected:t,operator:r,stackStartFunction:o})}function p(e,t){e||l(e,!0,t,"==",O.ok)}function h(e,t,n,a){if(e===t)return!0;if(o(e)&&o(t))return 0===r(e,t);if(w.isDate(e)&&w.isDate(t))return e.getTime()===t.getTime();if(w.isRegExp(e)&&w.isRegExp(t))return e.source===t.source&&e.global===t.global&&e.multiline===t.multiline&&e.lastIndex===t.lastIndex&&e.ignoreCase===t.ignoreCase;if(null!==e&&"object"==typeof e||null!==t&&"object"==typeof t){if(u(e)&&u(t)&&i(e)===i(t)&&!(e instanceof Float32Array||e instanceof Float64Array))return 0===r(new Uint8Array(e.buffer),new Uint8Array(t.buffer));if(o(e)!==o(t))return!1;a=a||{actual:[],expected:[]};var c=a.actual.indexOf(e);return c!==-1&&c===a.expected.indexOf(t)||(a.actual.push(e),a.expected.push(t),d(e,t,n,a))}return n?e===t:e==t}function y(e){return"[object Arguments]"==Object.prototype.toString.call(e)}function d(e,t,n,r){if(null===e||void 0===e||null===t||void 0===t)return!1;if(w.isPrimitive(e)||w.isPrimitive(t))return e===t;if(n&&Object.getPrototypeOf(e)!==Object.getPrototypeOf(t))return!1;var o=y(e),i=y(t);if(o&&!i||!o&&i)return!1;if(o)return e=_.call(e),t=_.call(t),h(e,t,n);var u,a,c=A(e),f=A(t);if(c.length!==f.length)return!1;for(c.sort(),f.sort(),a=c.length-1;a>=0;a--)if(c[a]!==f[a])return!1;for(a=c.length-1;a>=0;a--)if(u=c[a],!h(e[u],t[u],n,r))return!1;return!0}function v(e,t,n){h(e,t,!0)&&l(e,t,n,"notDeepStrictEqual",v)}function g(e,t){if(!e||!t)return!1;if("[object RegExp]"==Object.prototype.toString.call(t))return t.test(e);try{if(e instanceof t)return!0}catch(e){}return!Error.isPrototypeOf(t)&&t.call({},e)===!0}function b(e){var t;try{e()}catch(e){t=e}return t}function m(e,t,n,r){var o;if("function"!=typeof t)throw new TypeError('"block" argument must be a function');"string"==typeof n&&(r=n,n=null),o=b(t),r=(n&&n.name?" ("+n.name+").":".")+(r?" "+r:"."),e&&!o&&l(o,n,"Missing expected exception"+r);var i="string"==typeof r,u=!e&&w.isError(o),a=!e&&o&&!n;if((u&&i&&g(o,n)||a)&&l(o,n,"Got unwanted exception"+r),e&&o&&n&&!g(o,n)||!e&&o)throw o}var w=n(20),E=Object.prototype.hasOwnProperty,_=Array.prototype.slice,j=function(){return"foo"===function(){}.name}(),O=e.exports=p,S=/\s*function\s+([^\(\s]*)\s*/;O.AssertionError=function(e){this.name="AssertionError",this.actual=e.actual,this.expected=e.expected,this.operator=e.operator,e.message?(this.message=e.message,this.generatedMessage=!1):(this.message=s(this),this.generatedMessage=!0);var t=e.stackStartFunction||l;if(Error.captureStackTrace)Error.captureStackTrace(this,t);else{var n=new Error;if(n.stack){var r=n.stack,o=a(t),i=r.indexOf("\n"+o);if(i>=0){var u=r.indexOf("\n",i+1);r=r.substring(u+1)}this.stack=r}}},w.inherits(O.AssertionError,Error),O.fail=l,O.ok=p,O.equal=function(e,t,n){e!=t&&l(e,t,n,"==",O.equal)},O.notEqual=function(e,t,n){e==t&&l(e,t,n,"!=",O.notEqual)},O.deepEqual=function(e,t,n){h(e,t,!1)||l(e,t,n,"deepEqual",O.deepEqual)},O.deepStrictEqual=function(e,t,n){h(e,t,!0)||l(e,t,n,"deepStrictEqual",O.deepStrictEqual)},O.notDeepEqual=function(e,t,n){h(e,t,!1)&&l(e,t,n,"notDeepEqual",O.notDeepEqual)},O.notDeepStrictEqual=v,O.strictEqual=function(e,t,n){e!==t&&l(e,t,n,"===",O.strictEqual)},O.notStrictEqual=function(e,t,n){e===t&&l(e,t,n,"!==",O.notStrictEqual)},O.throws=function(e,t,n){m(!0,e,t,n)},O.doesNotThrow=function(e,t,n){m(!1,e,t,n)},O.ifError=function(e){if(e)throw e};var A=Object.keys||function(e){var t=[];for(var n in e)E.call(e,n)&&t.push(n);return t}}).call(t,function(){return this}())},function(e,t,n){(function(e,r){function o(e,n){var r={seen:[],stylize:u};return arguments.length>=3&&(r.depth=arguments[2]),arguments.length>=4&&(r.colors=arguments[3]),d(n)?r.showHidden=n:n&&t._extend(r,n),E(r.showHidden)&&(r.showHidden=!1),E(r.depth)&&(r.depth=2),E(r.colors)&&(r.colors=!1),E(r.customInspect)&&(r.customInspect=!0),r.colors&&(r.stylize=i),c(r,e,r.depth)}function i(e,t){var n=o.styles[t];return n?"["+o.colors[n][0]+"m"+e+"["+o.colors[n][1]+"m":e}function u(e,t){return e}function a(e){var t={};return e.forEach(function(e,n){t[e]=!0}),t}function c(e,n,r){if(e.customInspect&&n&&A(n.inspect)&&n.inspect!==t.inspect&&(!n.constructor||n.constructor.prototype!==n)){var o=n.inspect(r,e);return m(o)||(o=c(e,o,r)),o}var i=f(e,n);if(i)return i;var u=Object.keys(n),d=a(u);if(e.showHidden&&(u=Object.getOwnPropertyNames(n)),S(n)&&(u.indexOf("message")>=0||u.indexOf("description")>=0))return s(n);if(0===u.length){if(A(n)){var v=n.name?": "+n.name:"";return e.stylize("[Function"+v+"]","special")}if(_(n))return e.stylize(RegExp.prototype.toString.call(n),"regexp");if(O(n))return e.stylize(Date.prototype.toString.call(n),"date");if(S(n))return s(n)}var g="",b=!1,w=["{","}"];if(y(n)&&(b=!0,w=["[","]"]),A(n)){var E=n.name?": "+n.name:"";g=" [Function"+E+"]"}if(_(n)&&(g=" "+RegExp.prototype.toString.call(n)),O(n)&&(g=" "+Date.prototype.toUTCString.call(n)),S(n)&&(g=" "+s(n)),0===u.length&&(!b||0==n.length))return w[0]+g+w[1];if(r<0)return _(n)?e.stylize(RegExp.prototype.toString.call(n),"regexp"):e.stylize("[Object]","special");e.seen.push(n);var j;return j=b?l(e,n,r,d,u):u.map(function(t){return p(e,n,r,d,t,b)}),e.seen.pop(),h(j,g,w)}function f(e,t){if(E(t))return e.stylize("undefined","undefined");if(m(t)){var n="'"+JSON.stringify(t).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return e.stylize(n,"string")}return b(t)?e.stylize(""+t,"number"):d(t)?e.stylize(""+t,"boolean"):v(t)?e.stylize("null","null"):void 0}function s(e){return"["+Error.prototype.toString.call(e)+"]"}function l(e,t,n,r,o){for(var i=[],u=0,a=t.length;u<a;++u)R(t,String(u))?i.push(p(e,t,n,r,String(u),!0)):i.push("");return o.forEach(function(o){o.match(/^\d+$/)||i.push(p(e,t,n,r,o,!0))}),i}function p(e,t,n,r,o,i){var u,a,f;if(f=Object.getOwnPropertyDescriptor(t,o)||{value:t[o]},f.get?a=f.set?e.stylize("[Getter/Setter]","special"):e.stylize("[Getter]","special"):f.set&&(a=e.stylize("[Setter]","special")),R(r,o)||(u="["+o+"]"),a||(e.seen.indexOf(f.value)<0?(a=v(n)?c(e,f.value,null):c(e,f.value,n-1),a.indexOf("\n")>-1&&(a=i?a.split("\n").map(function(e){return"  "+e}).join("\n").substr(2):"\n"+a.split("\n").map(function(e){return"   "+e}).join("\n"))):a=e.stylize("[Circular]","special")),E(u)){if(i&&o.match(/^\d+$/))return a;u=JSON.stringify(""+o),u.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(u=u.substr(1,u.length-2),u=e.stylize(u,"name")):(u=u.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),u=e.stylize(u,"string"))}return u+": "+a}function h(e,t,n){var r=0,o=e.reduce(function(e,t){return r++,t.indexOf("\n")>=0&&r++,e+t.replace(/\u001b\[\d\d?m/g,"").length+1},0);return o>60?n[0]+(""===t?"":t+"\n ")+" "+e.join(",\n  ")+" "+n[1]:n[0]+t+" "+e.join(", ")+" "+n[1]}function y(e){return Array.isArray(e)}function d(e){return"boolean"==typeof e}function v(e){return null===e}function g(e){return null==e}function b(e){return"number"==typeof e}function m(e){return"string"==typeof e}function w(e){return"symbol"==typeof e}function E(e){return void 0===e}function _(e){return j(e)&&"[object RegExp]"===x(e)}function j(e){return"object"==typeof e&&null!==e}function O(e){return j(e)&&"[object Date]"===x(e)}function S(e){return j(e)&&("[object Error]"===x(e)||e instanceof Error)}function A(e){return"function"==typeof e}function T(e){return null===e||"boolean"==typeof e||"number"==typeof e||"string"==typeof e||"symbol"==typeof e||"undefined"==typeof e}function x(e){return Object.prototype.toString.call(e)}function k(e){return e<10?"0"+e.toString(10):e.toString(10)}function P(){var e=new Date,t=[k(e.getHours()),k(e.getMinutes()),k(e.getSeconds())].join(":");return[e.getDate(),B[e.getMonth()],t].join(" ")}function R(e,t){return Object.prototype.hasOwnProperty.call(e,t)}var M=/%[sdj%]/g;t.format=function(e){if(!m(e)){for(var t=[],n=0;n<arguments.length;n++)t.push(o(arguments[n]));return t.join(" ")}for(var n=1,r=arguments,i=r.length,u=String(e).replace(M,function(e){if("%%"===e)return"%";if(n>=i)return e;switch(e){case"%s":return String(r[n++]);case"%d":return Number(r[n++]);case"%j":try{return JSON.stringify(r[n++])}catch(e){return"[Circular]"}default:return e}}),a=r[n];n<i;a=r[++n])u+=v(a)||!j(a)?" "+a:" "+o(a);return u},t.deprecate=function(n,o){function i(){if(!u){if(r.throwDeprecation)throw new Error(o);r.traceDeprecation?console.trace(o):console.error(o),u=!0}return n.apply(this,arguments)}if(E(e.process))return function(){return t.deprecate(n,o).apply(this,arguments)};if(r.noDeprecation===!0)return n;var u=!1;return i};var C,L={};t.debuglog=function(e){if(E(C)&&(C=r.env.NODE_DEBUG||""),e=e.toUpperCase(),!L[e])if(new RegExp("\\b"+e+"\\b","i").test(C)){var n=r.pid;L[e]=function(){var r=t.format.apply(t,arguments);console.error("%s %d: %s",e,n,r)}}else L[e]=function(){};return L[e]},t.inspect=o,o.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},o.styles={special:"cyan",number:"yellow",boolean:"yellow",undefined:"grey",null:"bold",string:"green",date:"magenta",regexp:"red"},t.isArray=y,t.isBoolean=d,t.isNull=v,t.isNullOrUndefined=g,t.isNumber=b,t.isString=m,t.isSymbol=w,t.isUndefined=E,t.isRegExp=_,t.isObject=j,t.isDate=O,t.isError=S,t.isFunction=A,t.isPrimitive=T,t.isBuffer=n(21);var B=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];t.log=function(){console.log("%s - %s",P(),t.format.apply(t,arguments))},t.inherits=n(22),t._extend=function(e,t){if(!t||!j(t))return e;for(var n=Object.keys(t),r=n.length;r--;)e[n[r]]=t[n[r]];return e}}).call(t,function(){return this}(),n(18))},function(e,t){e.exports=function(e){return e&&"object"==typeof e&&"function"==typeof e.copy&&"function"==typeof e.fill&&"function"==typeof e.readUInt8}},function(e,t){"function"==typeof Object.create?e.exports=function(e,t){e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}})}:e.exports=function(e,t){e.super_=t;var n=function(){};n.prototype=t.prototype,e.prototype=new n,e.prototype.constructor=e}},function(e,t,n){function r(){o.call(this)}e.exports=r;var o=n(24).EventEmitter,i=n(25);i(r,o),r.Readable=n(26),r.Writable=n(37),r.Duplex=n(38),r.Transform=n(39),r.PassThrough=n(40),r.Stream=r,r.prototype.pipe=function(e,t){function n(t){e.writable&&!1===e.write(t)&&f.pause&&f.pause()}function r(){f.readable&&f.resume&&f.resume()}function i(){s||(s=!0,e.end())}function u(){s||(s=!0,"function"==typeof e.destroy&&e.destroy())}function a(e){if(c(),0===o.listenerCount(this,"error"))throw e}function c(){f.removeListener("data",n),e.removeListener("drain",r),f.removeListener("end",i),f.removeListener("close",u),f.removeListener("error",a),e.removeListener("error",a),f.removeListener("end",c),f.removeListener("close",c),e.removeListener("close",c)}var f=this;f.on("data",n),e.on("drain",r),e._isStdio||t&&t.end===!1||(f.on("end",i),f.on("close",u));var s=!1;return f.on("error",a),e.on("error",a),f.on("end",c),f.on("close",c),e.on("close",c),e.emit("pipe",f),e}},function(e,t){function n(){this._events=this._events||{},this._maxListeners=this._maxListeners||void 0}function r(e){return"function"==typeof e}function o(e){return"number"==typeof e}function i(e){return"object"==typeof e&&null!==e}function u(e){return void 0===e}e.exports=n,n.EventEmitter=n,n.prototype._events=void 0,n.prototype._maxListeners=void 0,n.defaultMaxListeners=10,n.prototype.setMaxListeners=function(e){if(!o(e)||e<0||isNaN(e))throw TypeError("n must be a positive number");return this._maxListeners=e,this},n.prototype.emit=function(e){var t,n,o,a,c,f;if(this._events||(this._events={}),"error"===e&&(!this._events.error||i(this._events.error)&&!this._events.error.length)){if(t=arguments[1],t instanceof Error)throw t;var s=new Error('Uncaught, unspecified "error" event. ('+t+")");throw s.context=t,s}if(n=this._events[e],u(n))return!1;if(r(n))switch(arguments.length){case 1:n.call(this);break;case 2:n.call(this,arguments[1]);break;case 3:n.call(this,arguments[1],arguments[2]);break;default:a=Array.prototype.slice.call(arguments,1),n.apply(this,a)}else if(i(n))for(a=Array.prototype.slice.call(arguments,1),f=n.slice(),o=f.length,c=0;c<o;c++)f[c].apply(this,a);return!0},n.prototype.addListener=function(e,t){var o;if(!r(t))throw TypeError("listener must be a function");return this._events||(this._events={}),this._events.newListener&&this.emit("newListener",e,r(t.listener)?t.listener:t),this._events[e]?i(this._events[e])?this._events[e].push(t):this._events[e]=[this._events[e],t]:this._events[e]=t,i(this._events[e])&&!this._events[e].warned&&(o=u(this._maxListeners)?n.defaultMaxListeners:this._maxListeners,o&&o>0&&this._events[e].length>o&&(this._events[e].warned=!0,console.error("(node) warning: possible EventEmitter memory leak detected. %d listeners added. Use emitter.setMaxListeners() to increase limit.",this._events[e].length),"function"==typeof console.trace&&console.trace())),this},n.prototype.on=n.prototype.addListener,n.prototype.once=function(e,t){function n(){this.removeListener(e,n),o||(o=!0,t.apply(this,arguments))}if(!r(t))throw TypeError("listener must be a function");var o=!1;return n.listener=t,this.on(e,n),this},n.prototype.removeListener=function(e,t){var n,o,u,a;if(!r(t))throw TypeError("listener must be a function");if(!this._events||!this._events[e])return this;if(n=this._events[e],u=n.length,o=-1,n===t||r(n.listener)&&n.listener===t)delete this._events[e],this._events.removeListener&&this.emit("removeListener",e,t);else if(i(n)){for(a=u;a-- >0;)if(n[a]===t||n[a].listener&&n[a].listener===t){o=a;break}if(o<0)return this;1===n.length?(n.length=0,delete this._events[e]):n.splice(o,1),this._events.removeListener&&this.emit("removeListener",e,t)}return this},n.prototype.removeAllListeners=function(e){var t,n;if(!this._events)return this;if(!this._events.removeListener)return 0===arguments.length?this._events={}:this._events[e]&&delete this._events[e],this;if(0===arguments.length){for(t in this._events)"removeListener"!==t&&this.removeAllListeners(t);return this.removeAllListeners("removeListener"),this._events={},this}if(n=this._events[e],r(n))this.removeListener(e,n);else if(n)for(;n.length;)this.removeListener(e,n[n.length-1]);return delete this._events[e],this},n.prototype.listeners=function(e){var t;return t=this._events&&this._events[e]?r(this._events[e])?[this._events[e]]:this._events[e].slice():[]},n.prototype.listenerCount=function(e){if(this._events){var t=this._events[e];if(r(t))return 1;if(t)return t.length}return 0},n.listenerCount=function(e,t){return e.listenerCount(t)}},function(e,t){"function"==typeof Object.create?e.exports=function(e,t){e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}})}:e.exports=function(e,t){e.super_=t;var n=function(){};n.prototype=t.prototype,e.prototype=new n,e.prototype.constructor=e}},function(e,t,n){(function(r){t=e.exports=n(27),t.Stream=n(23),t.Readable=t,t.Writable=n(33),t.Duplex=n(32),t.Transform=n(35),t.PassThrough=n(36),r.browser||"disable"!==r.env.READABLE_STREAM||(e.exports=n(23))}).call(t,n(18))},function(e,t,n){(function(t){function r(e,t){var r=n(32);e=e||{};var o=e.highWaterMark,i=e.objectMode?16:16384;this.highWaterMark=o||0===o?o:i,this.highWaterMark=~~this.highWaterMark,this.buffer=[],this.length=0,this.pipes=null,this.pipesCount=0,this.flowing=null,this.ended=!1,this.endEmitted=!1,this.reading=!1,this.sync=!0,this.needReadable=!1,this.emittedReadable=!1,this.readableListening=!1,this.objectMode=!!e.objectMode,t instanceof r&&(this.objectMode=this.objectMode||!!e.readableObjectMode),this.defaultEncoding=e.defaultEncoding||"utf8",this.ranOut=!1,this.awaitDrain=0,this.readingMore=!1,this.decoder=null,this.encoding=null,e.encoding&&(x||(x=n(34).StringDecoder),this.decoder=new x(e.encoding),this.encoding=e.encoding)}function o(e){n(32);return this instanceof o?(this._readableState=new r(e,this),this.readable=!0,void A.call(this)):new o(e)}function i(e,t,n,r,o){var i=f(t,n);if(i)e.emit("error",i);else if(T.isNullOrUndefined(n))t.reading=!1,t.ended||s(e,t);else if(t.objectMode||n&&n.length>0)if(t.ended&&!o){var a=new Error("stream.push() after EOF");e.emit("error",a)}else if(t.endEmitted&&o){var a=new Error("stream.unshift() after end event");e.emit("error",a)}else!t.decoder||o||r||(n=t.decoder.write(n)),o||(t.reading=!1),t.flowing&&0===t.length&&!t.sync?(e.emit("data",n),e.read(0)):(t.length+=t.objectMode?1:n.length,o?t.buffer.unshift(n):t.buffer.push(n),t.needReadable&&l(e)),h(e,t);else o||(t.reading=!1);return u(t)}function u(e){return!e.ended&&(e.needReadable||e.length<e.highWaterMark||0===e.length)}function a(e){if(e>=P)e=P;else{e--;for(var t=1;t<32;t<<=1)e|=e>>t;e++}return e}function c(e,t){return 0===t.length&&t.ended?0:t.objectMode?0===e?0:1:isNaN(e)||T.isNull(e)?t.flowing&&t.buffer.length?t.buffer[0].length:t.length:e<=0?0:(e>t.highWaterMark&&(t.highWaterMark=a(e)),e>t.length?t.ended?t.length:(t.needReadable=!0,0):e)}function f(e,t){var n=null;return T.isBuffer(t)||T.isString(t)||T.isNullOrUndefined(t)||e.objectMode||(n=new TypeError("Invalid non-string/buffer chunk")),n}function s(e,t){if(t.decoder&&!t.ended){var n=t.decoder.end();n&&n.length&&(t.buffer.push(n),t.length+=t.objectMode?1:n.length)}t.ended=!0,l(e)}function l(e){var n=e._readableState;n.needReadable=!1,n.emittedReadable||(k("emitReadable",n.flowing),n.emittedReadable=!0,n.sync?t.nextTick(function(){p(e)}):p(e))}function p(e){k("emit readable"),e.emit("readable"),b(e)}function h(e,n){n.readingMore||(n.readingMore=!0,t.nextTick(function(){y(e,n)}))}function y(e,t){for(var n=t.length;!t.reading&&!t.flowing&&!t.ended&&t.length<t.highWaterMark&&(k("maybeReadMore read 0"),e.read(0),n!==t.length);)n=t.length;t.readingMore=!1}function d(e){return function(){var t=e._readableState;k("pipeOnDrain",t.awaitDrain),t.awaitDrain&&t.awaitDrain--,0===t.awaitDrain&&S.listenerCount(e,"data")&&(t.flowing=!0,b(e))}}function v(e,n){n.resumeScheduled||(n.resumeScheduled=!0,t.nextTick(function(){g(e,n)}))}function g(e,t){t.resumeScheduled=!1,e.emit("resume"),b(e),t.flowing&&!t.reading&&e.read(0)}function b(e){var t=e._readableState;if(k("flow",t.flowing),t.flowing)do var n=e.read();while(null!==n&&t.flowing)}function m(e,t){var n,r=t.buffer,o=t.length,i=!!t.decoder,u=!!t.objectMode;if(0===r.length)return null;if(0===o)n=null;else if(u)n=r.shift();else if(!e||e>=o)n=i?r.join(""):O.concat(r,o),r.length=0;else if(e<r[0].length){var a=r[0];n=a.slice(0,e),r[0]=a.slice(e)}else if(e===r[0].length)n=r.shift();else{n=i?"":new O(e);for(var c=0,f=0,s=r.length;f<s&&c<e;f++){var a=r[0],l=Math.min(e-c,a.length);i?n+=a.slice(0,l):a.copy(n,c,0,l),l<a.length?r[0]=a.slice(l):r.shift(),c+=l}}return n}function w(e){var n=e._readableState;if(n.length>0)throw new Error("endReadable called on non-empty stream");n.endEmitted||(n.ended=!0,t.nextTick(function(){n.endEmitted||0!==n.length||(n.endEmitted=!0,e.readable=!1,e.emit("end"))}))}function E(e,t){for(var n=0,r=e.length;n<r;n++)t(e[n],n)}function _(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1}e.exports=o;var j=n(28),O=n(14).Buffer;o.ReadableState=r;var S=n(24).EventEmitter;S.listenerCount||(S.listenerCount=function(e,t){return e.listeners(t).length});var A=n(23),T=n(29);T.inherits=n(30);var x,k=n(31);k=k&&k.debuglog?k.debuglog("stream"):function(){},T.inherits(o,A),o.prototype.push=function(e,t){var n=this._readableState;return T.isString(e)&&!n.objectMode&&(t=t||n.defaultEncoding,t!==n.encoding&&(e=new O(e,t),t="")),i(this,n,e,t,!1)},o.prototype.unshift=function(e){var t=this._readableState;return i(this,t,e,"",!0)},o.prototype.setEncoding=function(e){return x||(x=n(34).StringDecoder),this._readableState.decoder=new x(e),this._readableState.encoding=e,this};var P=8388608;o.prototype.read=function(e){k("read",e);var t=this._readableState,n=e;if((!T.isNumber(e)||e>0)&&(t.emittedReadable=!1),0===e&&t.needReadable&&(t.length>=t.highWaterMark||t.ended))return k("read: emitReadable",t.length,t.ended),0===t.length&&t.ended?w(this):l(this),null;if(e=c(e,t),0===e&&t.ended)return 0===t.length&&w(this),null;var r=t.needReadable;k("need readable",r),(0===t.length||t.length-e<t.highWaterMark)&&(r=!0,k("length less than watermark",r)),(t.ended||t.reading)&&(r=!1,k("reading or ended",r)),r&&(k("do read"),t.reading=!0,t.sync=!0,0===t.length&&(t.needReadable=!0),this._read(t.highWaterMark),t.sync=!1),r&&!t.reading&&(e=c(n,t));var o;return o=e>0?m(e,t):null,T.isNull(o)&&(t.needReadable=!0,e=0),t.length-=e,0!==t.length||t.ended||(t.needReadable=!0),n!==e&&t.ended&&0===t.length&&w(this),T.isNull(o)||this.emit("data",o),o},o.prototype._read=function(e){this.emit("error",new Error("not implemented"))},o.prototype.pipe=function(e,n){function r(e){k("onunpipe"),e===l&&i()}function o(){k("onend"),e.end()}function i(){k("cleanup"),e.removeListener("close",c),e.removeListener("finish",f),e.removeListener("drain",v),e.removeListener("error",a),e.removeListener("unpipe",r),l.removeListener("end",o),l.removeListener("end",i),l.removeListener("data",u),!p.awaitDrain||e._writableState&&!e._writableState.needDrain||v()}function u(t){k("ondata");var n=e.write(t);!1===n&&(k("false write response, pause",l._readableState.awaitDrain),l._readableState.awaitDrain++,l.pause())}function a(t){k("onerror",t),s(),e.removeListener("error",a),0===S.listenerCount(e,"error")&&e.emit("error",t)}function c(){e.removeListener("finish",f),s()}function f(){k("onfinish"),e.removeListener("close",c),s()}function s(){k("unpipe"),l.unpipe(e)}var l=this,p=this._readableState;switch(p.pipesCount){case 0:p.pipes=e;break;case 1:p.pipes=[p.pipes,e];break;default:p.pipes.push(e)}p.pipesCount+=1,k("pipe count=%d opts=%j",p.pipesCount,n);var h=(!n||n.end!==!1)&&e!==t.stdout&&e!==t.stderr,y=h?o:i;p.endEmitted?t.nextTick(y):l.once("end",y),e.on("unpipe",r);var v=d(l);return e.on("drain",v),l.on("data",u),e._events&&e._events.error?j(e._events.error)?e._events.error.unshift(a):e._events.error=[a,e._events.error]:e.on("error",a),e.once("close",c),e.once("finish",f),e.emit("pipe",l),p.flowing||(k("pipe resume"),l.resume()),e},o.prototype.unpipe=function(e){var t=this._readableState;if(0===t.pipesCount)return this;if(1===t.pipesCount)return e&&e!==t.pipes?this:(e||(e=t.pipes),t.pipes=null,t.pipesCount=0,t.flowing=!1,e&&e.emit("unpipe",this),this);if(!e){var n=t.pipes,r=t.pipesCount;t.pipes=null,t.pipesCount=0,t.flowing=!1;for(var o=0;o<r;o++)n[o].emit("unpipe",this);return this}var o=_(t.pipes,e);return o===-1?this:(t.pipes.splice(o,1),t.pipesCount-=1,1===t.pipesCount&&(t.pipes=t.pipes[0]),e.emit("unpipe",this),this)},o.prototype.on=function(e,n){var r=A.prototype.on.call(this,e,n);if("data"===e&&!1!==this._readableState.flowing&&this.resume(),"readable"===e&&this.readable){var o=this._readableState;if(!o.readableListening)if(o.readableListening=!0,o.emittedReadable=!1,o.needReadable=!0,o.reading)o.length&&l(this,o);else{var i=this;t.nextTick(function(){k("readable nexttick read 0"),i.read(0)})}}return r},o.prototype.addListener=o.prototype.on,o.prototype.resume=function(){var e=this._readableState;return e.flowing||(k("resume"),e.flowing=!0,e.reading||(k("resume read 0"),this.read(0)),v(this,e)),this},o.prototype.pause=function(){return k("call pause flowing=%j",this._readableState.flowing),!1!==this._readableState.flowing&&(k("pause"),this._readableState.flowing=!1,this.emit("pause")),this},o.prototype.wrap=function(e){var t=this._readableState,n=!1,r=this;e.on("end",function(){if(k("wrapped end"),t.decoder&&!t.ended){var e=t.decoder.end();e&&e.length&&r.push(e)}r.push(null)}),e.on("data",function(o){if(k("wrapped data"),t.decoder&&(o=t.decoder.write(o)),o&&(t.objectMode||o.length)){var i=r.push(o);i||(n=!0,e.pause())}});for(var o in e)T.isFunction(e[o])&&T.isUndefined(this[o])&&(this[o]=function(t){return function(){return e[t].apply(e,arguments)}}(o));var i=["error","close","destroy","pause","resume"];return E(i,function(t){e.on(t,r.emit.bind(r,t))}),r._read=function(t){k("wrapped _read",t),n&&(n=!1,e.resume())},r},o._fromList=m}).call(t,n(18))},function(e,t){e.exports=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)}},function(e,t,n){(function(e){function n(e){return Array.isArray?Array.isArray(e):"[object Array]"===v(e)}function r(e){return"boolean"==typeof e}function o(e){return null===e}function i(e){return null==e}function u(e){return"number"==typeof e}function a(e){return"string"==typeof e}function c(e){return"symbol"==typeof e}function f(e){return void 0===e}function s(e){return"[object RegExp]"===v(e)}function l(e){return"object"==typeof e&&null!==e}function p(e){return"[object Date]"===v(e)}function h(e){return"[object Error]"===v(e)||e instanceof Error}function y(e){return"function"==typeof e}function d(e){return null===e||"boolean"==typeof e||"number"==typeof e||"string"==typeof e||"symbol"==typeof e||"undefined"==typeof e}function v(e){return Object.prototype.toString.call(e)}t.isArray=n,t.isBoolean=r,t.isNull=o,t.isNullOrUndefined=i,t.isNumber=u,t.isString=a,t.isSymbol=c,t.isUndefined=f,t.isRegExp=s,t.isObject=l,t.isDate=p,t.isError=h,t.isFunction=y,t.isPrimitive=d,t.isBuffer=e.isBuffer}).call(t,n(14).Buffer)},function(e,t){"function"==typeof Object.create?e.exports=function(e,t){e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}})}:e.exports=function(e,t){e.super_=t;var n=function(){};n.prototype=t.prototype,e.prototype=new n,e.prototype.constructor=e}},function(e,t){},function(e,t,n){(function(t){function r(e){return this instanceof r?(c.call(this,e),f.call(this,e),e&&e.readable===!1&&(this.readable=!1),e&&e.writable===!1&&(this.writable=!1),this.allowHalfOpen=!0,e&&e.allowHalfOpen===!1&&(this.allowHalfOpen=!1),void this.once("end",o)):new r(e)}function o(){this.allowHalfOpen||this._writableState.ended||t.nextTick(this.end.bind(this))}function i(e,t){for(var n=0,r=e.length;n<r;n++)t(e[n],n)}e.exports=r;var u=Object.keys||function(e){var t=[];for(var n in e)t.push(n);return t},a=n(29);a.inherits=n(30);var c=n(27),f=n(33);a.inherits(r,c),i(u(f.prototype),function(e){r.prototype[e]||(r.prototype[e]=f.prototype[e])})}).call(t,n(18))},function(e,t,n){(function(t){function r(e,t,n){this.chunk=e,this.encoding=t,this.callback=n}function o(e,t){var r=n(32);e=e||{};var o=e.highWaterMark,i=e.objectMode?16:16384;this.highWaterMark=o||0===o?o:i,this.objectMode=!!e.objectMode,t instanceof r&&(this.objectMode=this.objectMode||!!e.writableObjectMode),this.highWaterMark=~~this.highWaterMark,this.needDrain=!1,this.ending=!1,this.ended=!1,this.finished=!1;var u=e.decodeStrings===!1;this.decodeStrings=!u,this.defaultEncoding=e.defaultEncoding||"utf8",this.length=0,this.writing=!1,this.corked=0,this.sync=!0,this.bufferProcessing=!1,this.onwrite=function(e){h(t,e)},this.writecb=null,this.writelen=0,this.buffer=[],this.pendingcb=0,this.prefinished=!1,this.errorEmitted=!1}function i(e){var t=n(32);return this instanceof i||this instanceof t?(this._writableState=new o(e,this),this.writable=!0,void j.call(this)):new i(e)}function u(e,n,r){var o=new Error("write after end");e.emit("error",o),t.nextTick(function(){r(o)})}function a(e,n,r,o){var i=!0;if(!(_.isBuffer(r)||_.isString(r)||_.isNullOrUndefined(r)||n.objectMode)){var u=new TypeError("Invalid non-string/buffer chunk");e.emit("error",u),t.nextTick(function(){o(u)}),i=!1}return i}function c(e,t,n){return!e.objectMode&&e.decodeStrings!==!1&&_.isString(t)&&(t=new E(t,n)),t}function f(e,t,n,o,i){n=c(t,n,o),_.isBuffer(n)&&(o="buffer");var u=t.objectMode?1:n.length;t.length+=u;var a=t.length<t.highWaterMark;return a||(t.needDrain=!0),t.writing||t.corked?t.buffer.push(new r(n,o,i)):s(e,t,!1,u,n,o,i),a}function s(e,t,n,r,o,i,u){t.writelen=r,t.writecb=u,t.writing=!0,t.sync=!0,n?e._writev(o,t.onwrite):e._write(o,i,t.onwrite),t.sync=!1}function l(e,n,r,o,i){r?t.nextTick(function(){n.pendingcb--,i(o)}):(n.pendingcb--,i(o)),e._writableState.errorEmitted=!0,e.emit("error",o)}function p(e){e.writing=!1,e.writecb=null,e.length-=e.writelen,e.writelen=0}function h(e,n){var r=e._writableState,o=r.sync,i=r.writecb;if(p(r),n)l(e,r,o,n,i);else{var u=g(e,r);u||r.corked||r.bufferProcessing||!r.buffer.length||v(e,r),o?t.nextTick(function(){y(e,r,u,i)}):y(e,r,u,i)}}function y(e,t,n,r){n||d(e,t),t.pendingcb--,r(),m(e,t)}function d(e,t){0===t.length&&t.needDrain&&(t.needDrain=!1,e.emit("drain"))}function v(e,t){if(t.bufferProcessing=!0,e._writev&&t.buffer.length>1){for(var n=[],r=0;r<t.buffer.length;r++)n.push(t.buffer[r].callback);t.pendingcb++,s(e,t,!0,t.length,t.buffer,"",function(e){for(var r=0;r<n.length;r++)t.pendingcb--,n[r](e)}),t.buffer=[]}else{for(var r=0;r<t.buffer.length;r++){var o=t.buffer[r],i=o.chunk,u=o.encoding,a=o.callback,c=t.objectMode?1:i.length;if(s(e,t,!1,c,i,u,a),t.writing){r++;break}}r<t.buffer.length?t.buffer=t.buffer.slice(r):t.buffer.length=0}t.bufferProcessing=!1}function g(e,t){return t.ending&&0===t.length&&!t.finished&&!t.writing}function b(e,t){t.prefinished||(t.prefinished=!0,e.emit("prefinish"))}function m(e,t){var n=g(e,t);return n&&(0===t.pendingcb?(b(e,t),t.finished=!0,e.emit("finish")):b(e,t)),n}function w(e,n,r){n.ending=!0,m(e,n),r&&(n.finished?t.nextTick(r):e.once("finish",r)),n.ended=!0}e.exports=i;var E=n(14).Buffer;i.WritableState=o;var _=n(29);_.inherits=n(30);var j=n(23);_.inherits(i,j),i.prototype.pipe=function(){this.emit("error",new Error("Cannot pipe. Not readable."))},i.prototype.write=function(e,t,n){var r=this._writableState,o=!1;return _.isFunction(t)&&(n=t,t=null),_.isBuffer(e)?t="buffer":t||(t=r.defaultEncoding),_.isFunction(n)||(n=function(){}),r.ended?u(this,r,n):a(this,r,e,n)&&(r.pendingcb++,o=f(this,r,e,t,n)),o},i.prototype.cork=function(){var e=this._writableState;e.corked++},i.prototype.uncork=function(){var e=this._writableState;e.corked&&(e.corked--,e.writing||e.corked||e.finished||e.bufferProcessing||!e.buffer.length||v(this,e))},i.prototype._write=function(e,t,n){n(new Error("not implemented"))},i.prototype._writev=null,i.prototype.end=function(e,t,n){var r=this._writableState;_.isFunction(e)?(n=e,e=null,t=null):_.isFunction(t)&&(n=t,t=null),_.isNullOrUndefined(e)||this.write(e,t),r.corked&&(r.corked=1,this.uncork()),r.ending||r.finished||w(this,r,n)}}).call(t,n(18))},function(e,t,n){function r(e){if(e&&!c(e))throw new Error("Unknown encoding: "+e)}function o(e){return e.toString(this.encoding)}function i(e){this.charReceived=e.length%2,this.charLength=this.charReceived?2:0}function u(e){this.charReceived=e.length%3,this.charLength=this.charReceived?3:0}var a=n(14).Buffer,c=a.isEncoding||function(e){switch(e&&e.toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":case"raw":return!0;default:return!1}},f=t.StringDecoder=function(e){switch(this.encoding=(e||"utf8").toLowerCase().replace(/[-_]/,""),r(e),this.encoding){case"utf8":this.surrogateSize=3;break;case"ucs2":case"utf16le":this.surrogateSize=2,this.detectIncompleteChar=i;
break;case"base64":this.surrogateSize=3,this.detectIncompleteChar=u;break;default:return void(this.write=o)}this.charBuffer=new a(6),this.charReceived=0,this.charLength=0};f.prototype.write=function(e){for(var t="";this.charLength;){var n=e.length>=this.charLength-this.charReceived?this.charLength-this.charReceived:e.length;if(e.copy(this.charBuffer,this.charReceived,0,n),this.charReceived+=n,this.charReceived<this.charLength)return"";e=e.slice(n,e.length),t=this.charBuffer.slice(0,this.charLength).toString(this.encoding);var r=t.charCodeAt(t.length-1);if(!(r>=55296&&r<=56319)){if(this.charReceived=this.charLength=0,0===e.length)return t;break}this.charLength+=this.surrogateSize,t=""}this.detectIncompleteChar(e);var o=e.length;this.charLength&&(e.copy(this.charBuffer,0,e.length-this.charReceived,o),o-=this.charReceived),t+=e.toString(this.encoding,0,o);var o=t.length-1,r=t.charCodeAt(o);if(r>=55296&&r<=56319){var i=this.surrogateSize;return this.charLength+=i,this.charReceived+=i,this.charBuffer.copy(this.charBuffer,i,0,i),e.copy(this.charBuffer,0,0,i),t.substring(0,o)}return t},f.prototype.detectIncompleteChar=function(e){for(var t=e.length>=3?3:e.length;t>0;t--){var n=e[e.length-t];if(1==t&&n>>5==6){this.charLength=2;break}if(t<=2&&n>>4==14){this.charLength=3;break}if(t<=3&&n>>3==30){this.charLength=4;break}}this.charReceived=t},f.prototype.end=function(e){var t="";if(e&&e.length&&(t=this.write(e)),this.charReceived){var n=this.charReceived,r=this.charBuffer,o=this.encoding;t+=r.slice(0,n).toString(o)}return t}},function(e,t,n){function r(e,t){this.afterTransform=function(e,n){return o(t,e,n)},this.needTransform=!1,this.transforming=!1,this.writecb=null,this.writechunk=null}function o(e,t,n){var r=e._transformState;r.transforming=!1;var o=r.writecb;if(!o)return e.emit("error",new Error("no writecb in Transform class"));r.writechunk=null,r.writecb=null,c.isNullOrUndefined(n)||e.push(n),o&&o(t);var i=e._readableState;i.reading=!1,(i.needReadable||i.length<i.highWaterMark)&&e._read(i.highWaterMark)}function i(e){if(!(this instanceof i))return new i(e);a.call(this,e),this._transformState=new r(e,this);var t=this;this._readableState.needReadable=!0,this._readableState.sync=!1,this.once("prefinish",function(){c.isFunction(this._flush)?this._flush(function(e){u(t,e)}):u(t)})}function u(e,t){if(t)return e.emit("error",t);var n=e._writableState,r=e._transformState;if(n.length)throw new Error("calling transform done when ws.length != 0");if(r.transforming)throw new Error("calling transform done when still transforming");return e.push(null)}e.exports=i;var a=n(32),c=n(29);c.inherits=n(30),c.inherits(i,a),i.prototype.push=function(e,t){return this._transformState.needTransform=!1,a.prototype.push.call(this,e,t)},i.prototype._transform=function(e,t,n){throw new Error("not implemented")},i.prototype._write=function(e,t,n){var r=this._transformState;if(r.writecb=n,r.writechunk=e,r.writeencoding=t,!r.transforming){var o=this._readableState;(r.needTransform||o.needReadable||o.length<o.highWaterMark)&&this._read(o.highWaterMark)}},i.prototype._read=function(e){var t=this._transformState;c.isNull(t.writechunk)||!t.writecb||t.transforming?t.needTransform=!0:(t.transforming=!0,this._transform(t.writechunk,t.writeencoding,t.afterTransform))}},function(e,t,n){function r(e){return this instanceof r?void o.call(this,e):new r(e)}e.exports=r;var o=n(35),i=n(29);i.inherits=n(30),i.inherits(r,o),r.prototype._transform=function(e,t,n){n(null,e)}},function(e,t,n){e.exports=n(33)},function(e,t,n){e.exports=n(32)},function(e,t,n){e.exports=n(35)},function(e,t,n){e.exports=n(36)},function(e,t,n){(function(e){function r(e){var t,n,r,o,i,s,l,p,h,y=["([^%]*)","%","(['\\-+ #0]*?)","([1-9]\\d*)?","(\\.([1-9]\\d*))?","[lhjztL]*?","([diouxXfFeEgGaAcCsSp%jr])"].join(""),d=new RegExp(y),v=Array.prototype.slice.call(arguments,1),g="",b=1;for(c.equal("string",typeof e);null!==(h=d.exec(e));)if(g+=h[1],e=e.substring(h[0].length),t=h[2]||"",n=h[3]||0,r=h[4]||"",o=h[6],i=!1,l=!1,s=" ","%"!=o){if(0===v.length)throw new Error("too few args to sprintf");if(p=v.shift(),b++,t.match(/[\' #]/))throw new Error("unsupported flags: "+t);if(r.length>0)throw new Error("non-zero precision not supported");switch(t.match(/-/)&&(i=!0),t.match(/0/)&&(s="0"),t.match(/\+/)&&(l=!0),o){case"s":if(void 0===p||null===p)throw new Error("argument "+b+": attempted to print undefined or null as a string");g+=u(s,n,i,p.toString());break;case"d":p=Math.floor(p);case"f":l=l&&p>0?"+":"",g+=l+u(s,n,i,p.toString());break;case"x":g+=u(s,n,i,p.toString(16));break;case"j":0===n&&(n=10),g+=f.inspect(p,!1,n);break;case"r":g+=a(p);break;default:throw new Error("unsupported conversion: "+o)}}else g+="%";return g+=e}function o(){var t=Array.prototype.slice.call(arguments);t.unshift(e.stdout),i.apply(null,t)}function i(e){var t=Array.prototype.slice.call(arguments,1);return e.write(r.apply(this,t))}function u(e,t,n,r){for(var o=r;o.length<t;)n?o+=e:o=e+o;return o}function a(e){var t;if(!(e instanceof Error))throw new Error(r("invalid type for %%r: %j",e));if(t="EXCEPTION: "+e.constructor.name+": "+e.stack,e.cause&&"function"==typeof e.cause){var n=e.cause();n&&(t+="\nCaused by: "+a(n))}return t}var c=n(19),f=n(20);t.sprintf=r,t.printf=o,t.fprintf=i}).call(t,n(18))},function(e,t,n){(function(e){function n(e){return Array.isArray?Array.isArray(e):"[object Array]"===v(e)}function r(e){return"boolean"==typeof e}function o(e){return null===e}function i(e){return null==e}function u(e){return"number"==typeof e}function a(e){return"string"==typeof e}function c(e){return"symbol"==typeof e}function f(e){return void 0===e}function s(e){return"[object RegExp]"===v(e)}function l(e){return"object"==typeof e&&null!==e}function p(e){return"[object Date]"===v(e)}function h(e){return"[object Error]"===v(e)||e instanceof Error}function y(e){return"function"==typeof e}function d(e){return null===e||"boolean"==typeof e||"number"==typeof e||"string"==typeof e||"symbol"==typeof e||"undefined"==typeof e}function v(e){return Object.prototype.toString.call(e)}t.isArray=n,t.isBoolean=r,t.isNull=o,t.isNullOrUndefined=i,t.isNumber=u,t.isString=a,t.isSymbol=c,t.isUndefined=f,t.isRegExp=s,t.isObject=l,t.isDate=p,t.isError=h,t.isFunction=y,t.isPrimitive=d,t.isBuffer=e.isBuffer}).call(t,n(14).Buffer)},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function u(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function a(e,t){var n=4,r=15;if(void 0===t&&(t=0),t+=1,null===e)return"null";if(void 0===e)return"void";if("string"==typeof e||"number"==typeof e||"boolean"==typeof e)return"undefined"==typeof e?"undefined":c(e);if(!Array.isArray(e)){var o=Object.keys(e);if(!o.length)return e.constructor&&e.constructor.name&&"Object"!==e.constructor.name?e.constructor.name:"Object";if(t>n)return"{...}";var i="  ".repeat(t-1),u=o.slice(0,r).map(function(n){return(/^([A-Z_$][A-Z0-9_$]*)$/i.test(n)?n:JSON.stringify(n))+": "+a(e[n],t)+";"}).join("\n  "+i);return o.length>=r&&(u+="\n  "+i+"..."),e.constructor&&e.constructor.name&&"Object"!==e.constructor.name?e.constructor.name+" {\n  "+i+u+"\n"+i+"}":"{\n  "+i+u+"\n"+i+"}"}if(!(e.length>0))return"Array";var f=function(){if(t>n)return{v:"[...]"};var o=a(e[0],t);return e.every(function(e){return a(e,t)===o})?{v:o.trim()+"[]"}:{v:"["+e.slice(0,r).map(function(e){return a(e,t)}).join(", ")+(e.length>=r?", ...":"")+"]"}}();return"object"===("undefined"==typeof f?"undefined":c(f))?f.v:void 0}Object.defineProperty(t,"__esModule",{value:!0});var c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},f=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),s=n(11),l=r(s),p=function(e){function t(){return o(this,t),i(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return u(t,e),f(t,null,[{key:"createError",value:function(e){if(!Array.isArray(e)||!e.every(function(e){return"string"==typeof e}))throw new TypeError('Value of argument "services" violates contract.\n\nExpected:\nArray<string>\n\nGot:\n'+a(e));var n=[].concat(e).reverse().join(" <- ");return new t({services:e},"Circular dependency found: %s",n)}}]),t}(l.default);t.default=p},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function u(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function a(e,t){var n=4,r=15;if(void 0===t&&(t=0),t+=1,null===e)return"null";if(void 0===e)return"void";if("string"==typeof e||"number"==typeof e||"boolean"==typeof e)return"undefined"==typeof e?"undefined":c(e);if(!Array.isArray(e)){var o=Object.keys(e);if(!o.length)return e.constructor&&e.constructor.name&&"Object"!==e.constructor.name?e.constructor.name:"Object";if(t>n)return"{...}";var i="  ".repeat(t-1),u=o.slice(0,r).map(function(n){return(/^([A-Z_$][A-Z0-9_$]*)$/i.test(n)?n:JSON.stringify(n))+": "+a(e[n],t)+";"}).join("\n  "+i);return o.length>=r&&(u+="\n  "+i+"..."),e.constructor&&e.constructor.name&&"Object"!==e.constructor.name?e.constructor.name+" {\n  "+i+u+"\n"+i+"}":"{\n  "+i+u+"\n"+i+"}"}if(!(e.length>0))return"Array";var f=function(){if(t>n)return{v:"[...]"};var o=a(e[0],t);return e.every(function(e){return a(e,t)===o})?{v:o.trim()+"[]"}:{v:"["+e.slice(0,r).map(function(e){return a(e,t)}).join(", ")+(e.length>=r?", ...":"")+"]"}}();return"object"===("undefined"==typeof f?"undefined":c(f))?f.v:void 0}Object.defineProperty(t,"__esModule",{value:!0});var c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},f=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),s=n(11),l=r(s),p=function(e){function t(){return o(this,t),i(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return u(t,e),f(t,null,[{key:"createError",value:function(e){if("string"!=typeof e)throw new TypeError('Value of argument "identifier" violates contract.\n\nExpected:\nstring\n\nGot:\n'+a(e));return new t({identifier:e},'Factory method for identifier "%s" returns nothing',e)}}]),t}(l.default);t.default=p},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function u(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function a(e,t){var n=4,r=15;if(void 0===t&&(t=0),t+=1,null===e)return"null";if(void 0===e)return"void";if("string"==typeof e||"number"==typeof e||"boolean"==typeof e)return"undefined"==typeof e?"undefined":c(e);if(!Array.isArray(e)){var o=Object.keys(e);if(!o.length)return e.constructor&&e.constructor.name&&"Object"!==e.constructor.name?e.constructor.name:"Object";if(t>n)return"{...}";var i="  ".repeat(t-1),u=o.slice(0,r).map(function(n){return(/^([A-Z_$][A-Z0-9_$]*)$/i.test(n)?n:JSON.stringify(n))+": "+a(e[n],t)+";"}).join("\n  "+i);return o.length>=r&&(u+="\n  "+i+"..."),e.constructor&&e.constructor.name&&"Object"!==e.constructor.name?e.constructor.name+" {\n  "+i+u+"\n"+i+"}":"{\n  "+i+u+"\n"+i+"}"}if(!(e.length>0))return"Array";var f=function(){if(t>n)return{v:"[...]"};var o=a(e[0],t);return e.every(function(e){return a(e,t)===o})?{v:o.trim()+"[]"}:{v:"["+e.slice(0,r).map(function(e){return a(e,t)}).join(", ")+(e.length>=r?", ...":"")+"]"}}();return"object"===("undefined"==typeof f?"undefined":c(f))?f.v:void 0}Object.defineProperty(t,"__esModule",{value:!0});var c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},f=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),s=n(11),l=r(s),p=function(e){function t(){return o(this,t),i(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return u(t,e),f(t,null,[{key:"createError",value:function(e){if("string"!=typeof e)throw new TypeError('Value of argument "methodName" violates contract.\n\nExpected:\nstring\n\nGot:\n'+a(e));return new t({methodName:e},'Method "%s" does not exist',e)}}]),t}(l.default);t.default=p},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function u(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function a(e,t){var n=4,r=15;if(void 0===t&&(t=0),t+=1,null===e)return"null";if(void 0===e)return"void";if("string"==typeof e||"number"==typeof e||"boolean"==typeof e)return"undefined"==typeof e?"undefined":c(e);if(!Array.isArray(e)){var o=Object.keys(e);if(!o.length)return e.constructor&&e.constructor.name&&"Object"!==e.constructor.name?e.constructor.name:"Object";if(t>n)return"{...}";var i="  ".repeat(t-1),u=o.slice(0,r).map(function(n){return(/^([A-Z_$][A-Z0-9_$]*)$/i.test(n)?n:JSON.stringify(n))+": "+a(e[n],t)+";"}).join("\n  "+i);return o.length>=r&&(u+="\n  "+i+"..."),e.constructor&&e.constructor.name&&"Object"!==e.constructor.name?e.constructor.name+" {\n  "+i+u+"\n"+i+"}":"{\n  "+i+u+"\n"+i+"}"}if(!(e.length>0))return"Array";var f=function(){if(t>n)return{v:"[...]"};var o=a(e[0],t);return e.every(function(e){return a(e,t)===o})?{v:o.trim()+"[]"}:{v:"["+e.slice(0,r).map(function(e){return a(e,t)}).join(", ")+(e.length>=r?", ...":"")+"]"}}();return"object"===("undefined"==typeof f?"undefined":c(f))?f.v:void 0}Object.defineProperty(t,"__esModule",{value:!0});var c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},f=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),s=n(11),l=r(s),p=function(e){function t(){return o(this,t),i(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return u(t,e),f(t,null,[{key:"createError",value:function(e){if("string"!=typeof e)throw new TypeError('Value of argument "identifier" violates contract.\n\nExpected:\nstring\n\nGot:\n'+a(e));return new t({identifier:e},'Service definition for "%s" has already been used to instantiate a service, refusing to modify it',e)}}]),t}(l.default);t.default=p},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function u(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function a(e,t){var n=4,r=15;if(void 0===t&&(t=0),t+=1,null===e)return"null";if(void 0===e)return"void";if("string"==typeof e||"number"==typeof e||"boolean"==typeof e)return"undefined"==typeof e?"undefined":c(e);if(!Array.isArray(e)){var o=Object.keys(e);if(!o.length)return e.constructor&&e.constructor.name&&"Object"!==e.constructor.name?e.constructor.name:"Object";if(t>n)return"{...}";var i="  ".repeat(t-1),u=o.slice(0,r).map(function(n){return(/^([A-Z_$][A-Z0-9_$]*)$/i.test(n)?n:JSON.stringify(n))+": "+a(e[n],t)+";"}).join("\n  "+i);return o.length>=r&&(u+="\n  "+i+"..."),e.constructor&&e.constructor.name&&"Object"!==e.constructor.name?e.constructor.name+" {\n  "+i+u+"\n"+i+"}":"{\n  "+i+u+"\n"+i+"}"}if(!(e.length>0))return"Array";var f=function(){if(t>n)return{v:"[...]"};var o=a(e[0],t);return e.every(function(e){return a(e,t)===o})?{v:o.trim()+"[]"}:{v:"["+e.slice(0,r).map(function(e){return a(e,t)}).join(", ")+(e.length>=r?", ...":"")+"]"}}();return"object"===("undefined"==typeof f?"undefined":c(f))?f.v:void 0}Object.defineProperty(t,"__esModule",{value:!0});var c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},f=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),s=n(11),l=r(s),p=function(e){function t(){return o(this,t),i(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return u(t,e),f(t,null,[{key:"createError",value:function(e){if("string"!=typeof e)throw new TypeError('Value of argument "identifier" violates contract.\n\nExpected:\nstring\n\nGot:\n'+a(e));return new t({identifier:e},'Undefined parameter for identifier "%s"',e)}}]),t}(l.default);t.default=p},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function u(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function a(e,t){var n=4,r=15;if(void 0===t&&(t=0),t+=1,null===e)return"null";if(void 0===e)return"void";if("string"==typeof e||"number"==typeof e||"boolean"==typeof e)return"undefined"==typeof e?"undefined":c(e);if(!Array.isArray(e)){var o=Object.keys(e);if(!o.length)return e.constructor&&e.constructor.name&&"Object"!==e.constructor.name?e.constructor.name:"Object";if(t>n)return"{...}";var i="  ".repeat(t-1),u=o.slice(0,r).map(function(n){return(/^([A-Z_$][A-Z0-9_$]*)$/i.test(n)?n:JSON.stringify(n))+": "+a(e[n],t)+";"}).join("\n  "+i);return o.length>=r&&(u+="\n  "+i+"..."),e.constructor&&e.constructor.name&&"Object"!==e.constructor.name?e.constructor.name+" {\n  "+i+u+"\n"+i+"}":"{\n  "+i+u+"\n"+i+"}"}if(!(e.length>0))return"Array";var f=function(){if(t>n)return{v:"[...]"};var o=a(e[0],t);return e.every(function(e){return a(e,t)===o})?{v:o.trim()+"[]"}:{v:"["+e.slice(0,r).map(function(e){return a(e,t)}).join(", ")+(e.length>=r?", ...":"")+"]"}}();return"object"===("undefined"==typeof f?"undefined":c(f))?f.v:void 0}Object.defineProperty(t,"__esModule",{value:!0});var c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},f=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),s=n(11),l=r(s),p=function(e){function t(){return o(this,t),i(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return u(t,e),f(t,null,[{key:"createError",value:function(e){if("string"!=typeof e)throw new TypeError('Value of argument "identifier" violates contract.\n\nExpected:\nstring\n\nGot:\n'+a(e));return new t({identifier:e},'Undefined service definition and instance for identifier "%s"',e)}}]),t}(l.default);t.default=p},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function u(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function a(e,t){var n=4,r=15;if(void 0===t&&(t=0),t+=1,null===e)return"null";if(void 0===e)return"void";if("string"==typeof e||"number"==typeof e||"boolean"==typeof e)return"undefined"==typeof e?"undefined":c(e);if(!Array.isArray(e)){var o=Object.keys(e);if(!o.length)return e.constructor&&e.constructor.name&&"Object"!==e.constructor.name?e.constructor.name:"Object";if(t>n)return"{...}";var i="  ".repeat(t-1),u=o.slice(0,r).map(function(n){return(/^([A-Z_$][A-Z0-9_$]*)$/i.test(n)?n:JSON.stringify(n))+": "+a(e[n],t)+";"}).join("\n  "+i);return o.length>=r&&(u+="\n  "+i+"..."),e.constructor&&e.constructor.name&&"Object"!==e.constructor.name?e.constructor.name+" {\n  "+i+u+"\n"+i+"}":"{\n  "+i+u+"\n"+i+"}"}if(!(e.length>0))return"Array";var f=function(){if(t>n)return{v:"[...]"};var o=a(e[0],t);return e.every(function(e){return a(e,t)===o})?{v:o.trim()+"[]"}:{v:"["+e.slice(0,r).map(function(e){return a(e,t)}).join(", ")+(e.length>=r?", ...":"")+"]"}}();return"object"===("undefined"==typeof f?"undefined":c(f))?f.v:void 0}Object.defineProperty(t,"__esModule",{value:!0});var c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},f=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),s=n(11),l=r(s),p=function(e){function t(){return o(this,t),i(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return u(t,e),f(t,null,[{key:"createError",value:function(e){if("string"!=typeof e)throw new TypeError('Value of argument "identifier" violates contract.\n\nExpected:\nstring\n\nGot:\n'+a(e));return new t({identifier:e},'Undefined service definition for identifier "%s"',e)}}]),t}(l.default);t.default=p},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function u(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},c=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),f=n(11),s=r(f),l=function(e){function t(){return o(this,t),i(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return u(t,e),c(t,null,[{key:"createError",value:function(e){return new t({arg:e},'Unsupported arg of type "%s"',"undefined"==typeof e?"undefined":a(e))}}]),t}(s.default);t.default=l},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function u(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function a(e,t){var n=4,r=15;if(void 0===t&&(t=0),t+=1,null===e)return"null";if(void 0===e)return"void";if("string"==typeof e||"number"==typeof e||"boolean"==typeof e)return"undefined"==typeof e?"undefined":c(e);if(!Array.isArray(e)){var o=Object.keys(e);if(!o.length)return e.constructor&&e.constructor.name&&"Object"!==e.constructor.name?e.constructor.name:"Object";if(t>n)return"{...}";var i="  ".repeat(t-1),u=o.slice(0,r).map(function(n){return(/^([A-Z_$][A-Z0-9_$]*)$/i.test(n)?n:JSON.stringify(n))+": "+a(e[n],t)+";"}).join("\n  "+i);return o.length>=r&&(u+="\n  "+i+"..."),e.constructor&&e.constructor.name&&"Object"!==e.constructor.name?e.constructor.name+" {\n  "+i+u+"\n"+i+"}":"{\n  "+i+u+"\n"+i+"}"}if(!(e.length>0))return"Array";var f=function(){if(t>n)return{v:"[...]"};var o=a(e[0],t);return e.every(function(e){return a(e,t)===o})?{v:o.trim()+"[]"}:{v:"["+e.slice(0,r).map(function(e){return a(e,t)}).join(", ")+(e.length>=r?", ...":"")+"]"}}();return"object"===("undefined"==typeof f?"undefined":c(f))?f.v:void 0}Object.defineProperty(t,"__esModule",{value:!0});var c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},f=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),s=n(11),l=r(s),p=function(e){function t(){return o(this,t),i(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return u(t,e),f(t,null,[{key:"createError",value:function(e,n){if("string"!=typeof e)throw new TypeError('Value of argument "identifier" violates contract.\n\nExpected:\nstring\n\nGot:\n'+a(e));if(!(n instanceof Error))throw new TypeError('Value of argument "cause" violates contract.\n\nExpected:\nError\n\nGot:\n'+a(n));return new t({cause:n,info:{identifier:e}},'Error getting service "%s"',e)}}]),t}(l.default);t.default=p},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.Service=function(){function e(e){return e instanceof Object||"function"==typeof e}return Object.defineProperty(e,Symbol.hasInstance,{value:function(t){return e(t)}}),e}()},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.ParameterValue=function(){function e(e){return"string"==typeof e||"number"==typeof e||"boolean"==typeof e||null==e}return Object.defineProperty(e,Symbol.hasInstance,{value:function(t){return e(t)}}),e}()}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwid2VicGFjazovLy9kaS1kZXYuanMiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svYm9vdHN0cmFwIGUyZTkwYzhiMzRkMWM2MGY5YWJjIiwid2VicGFjazovLy8uL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9jb250YWluZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2RlZmluaXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21ldGhvZC1jYWxsLmpzIiwid2VicGFjazovLy8uL3NyYy90eXBlcy9pbmplY3RhYmxlLWFyZ3VtZW50cy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcmVmZXJlbmNlLmpzIiwid2VicGFjazovLy8uL3NyYy9wYXJhbWV0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NsYXNzLWNvbnN0cnVjdG9yLWRlZmluaXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2ZhY3RvcnktZGVmaW5pdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZXJyb3JzLmpzIiwid2VicGFjazovLy8uL3NyYy9lcnJvcnMvY2Fubm90LWxvY2F0ZS1zZXJ2aWNlLWNsYXNzLWNvbnN0cnVjdG9yLWVycm9yLmpzIiwid2VicGFjazovLy8uL3NyYy9lcnJvcnMvZGlzbC1lcnJvci5qcyIsIndlYnBhY2s6Ly8vLi9+L3ZlcnJvci9saWIvdmVycm9yLmpzIiwid2VicGFjazovLy8uL34vdmVycm9yL34vYXNzZXJ0LXBsdXMvYXNzZXJ0LmpzIiwid2VicGFjazovLy8od2VicGFjaykvfi9ub2RlLWxpYnMtYnJvd3Nlci9+L2J1ZmZlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL34vbm9kZS1saWJzLWJyb3dzZXIvfi9idWZmZXIvfi9iYXNlNjQtanMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9+L25vZGUtbGlicy1icm93c2VyL34vYnVmZmVyL34vaWVlZTc1NC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL34vbm9kZS1saWJzLWJyb3dzZXIvfi9idWZmZXIvfi9pc2FycmF5L2luZGV4LmpzIiwid2VicGFjazovLy8od2VicGFjaykvfi9ub2RlLWxpYnMtYnJvd3Nlci9+L3Byb2Nlc3MvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL34vbm9kZS1saWJzLWJyb3dzZXIvfi9hc3NlcnQvYXNzZXJ0LmpzIiwid2VicGFjazovLy8od2VicGFjaykvfi9ub2RlLWxpYnMtYnJvd3Nlci9+L3V0aWwvdXRpbC5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL34vbm9kZS1saWJzLWJyb3dzZXIvfi91dGlsL3N1cHBvcnQvaXNCdWZmZXJCcm93c2VyLmpzIiwid2VicGFjazovLy8od2VicGFjaykvfi9ub2RlLWxpYnMtYnJvd3Nlci9+L3V0aWwvfi9pbmhlcml0cy9pbmhlcml0c19icm93c2VyLmpzIiwid2VicGFjazovLy8od2VicGFjaykvfi9ub2RlLWxpYnMtYnJvd3Nlci9+L3N0cmVhbS1icm93c2VyaWZ5L2luZGV4LmpzIiwid2VicGFjazovLy8od2VicGFjaykvfi9ub2RlLWxpYnMtYnJvd3Nlci9+L2V2ZW50cy9ldmVudHMuanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9+L25vZGUtbGlicy1icm93c2VyL34vc3RyZWFtLWJyb3dzZXJpZnkvfi9pbmhlcml0cy9pbmhlcml0c19icm93c2VyLmpzIiwid2VicGFjazovLy8od2VicGFjaykvfi9ub2RlLWxpYnMtYnJvd3Nlci9+L3JlYWRhYmxlLXN0cmVhbS9yZWFkYWJsZS5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL34vbm9kZS1saWJzLWJyb3dzZXIvfi9yZWFkYWJsZS1zdHJlYW0vbGliL19zdHJlYW1fcmVhZGFibGUuanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9+L25vZGUtbGlicy1icm93c2VyL34vcmVhZGFibGUtc3RyZWFtL34vaXNhcnJheS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL34vbm9kZS1saWJzLWJyb3dzZXIvfi9yZWFkYWJsZS1zdHJlYW0vfi9jb3JlLXV0aWwtaXMvbGliL3V0aWwuanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9+L25vZGUtbGlicy1icm93c2VyL34vcmVhZGFibGUtc3RyZWFtL34vaW5oZXJpdHMvaW5oZXJpdHNfYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL34vbm9kZS1saWJzLWJyb3dzZXIvfi9yZWFkYWJsZS1zdHJlYW0vbGliL19zdHJlYW1fZHVwbGV4LmpzIiwid2VicGFjazovLy8od2VicGFjaykvfi9ub2RlLWxpYnMtYnJvd3Nlci9+L3JlYWRhYmxlLXN0cmVhbS9saWIvX3N0cmVhbV93cml0YWJsZS5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL34vbm9kZS1saWJzLWJyb3dzZXIvfi9zdHJpbmdfZGVjb2Rlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL34vbm9kZS1saWJzLWJyb3dzZXIvfi9yZWFkYWJsZS1zdHJlYW0vbGliL19zdHJlYW1fdHJhbnNmb3JtLmpzIiwid2VicGFjazovLy8od2VicGFjaykvfi9ub2RlLWxpYnMtYnJvd3Nlci9+L3JlYWRhYmxlLXN0cmVhbS9saWIvX3N0cmVhbV9wYXNzdGhyb3VnaC5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL34vbm9kZS1saWJzLWJyb3dzZXIvfi9yZWFkYWJsZS1zdHJlYW0vd3JpdGFibGUuanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9+L25vZGUtbGlicy1icm93c2VyL34vcmVhZGFibGUtc3RyZWFtL2R1cGxleC5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL34vbm9kZS1saWJzLWJyb3dzZXIvfi9yZWFkYWJsZS1zdHJlYW0vdHJhbnNmb3JtLmpzIiwid2VicGFjazovLy8od2VicGFjaykvfi9ub2RlLWxpYnMtYnJvd3Nlci9+L3JlYWRhYmxlLXN0cmVhbS9wYXNzdGhyb3VnaC5qcyIsIndlYnBhY2s6Ly8vLi9+L3ZlcnJvci9+L2V4dHNwcmludGYvbGliL2V4dHNwcmludGYuanMiLCJ3ZWJwYWNrOi8vLy4vfi92ZXJyb3Ivfi9jb3JlLXV0aWwtaXMvbGliL3V0aWwuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Vycm9ycy9jaXJjdWxhci1kZXBlbmRlbmN5LWVycm9yLmpzIiwid2VicGFjazovLy8uL3NyYy9lcnJvcnMvZmFjdG9yeS1tZXRob2QtcmV0dXJucy1ub3RoaW5nLWVycm9yLmpzIiwid2VicGFjazovLy8uL3NyYy9lcnJvcnMvbWV0aG9kLWRvZXMtbm90LWV4aXN0LWVycm9yLmpzIiwid2VicGFjazovLy8uL3NyYy9lcnJvcnMvc2VydmljZS1kZWZpbml0aW9uLWFscmVhZHktdXNlZC1lcnJvci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZXJyb3JzL3VuZGVmaW5lZC1wYXJhbWV0ZXItZXJyb3IuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Vycm9ycy91bmRlZmluZWQtc2VydmljZS1kZWZpbml0aW9uLWFuZC1pbnN0YW5jZS1lcnJvci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZXJyb3JzL3VuZGVmaW5lZC1zZXJ2aWNlLWRlZmluaXRpb24tZXJyb3IuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Vycm9ycy91bnN1cHBvcnRlZC1hcmd1bWVudC10eXBlLWVycm9yLmpzIiwid2VicGFjazovLy8uL3NyYy9lcnJvcnMvZ2V0LXNlcnZpY2UtZXJyb3IuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3R5cGVzL3NlcnZpY2UuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3R5cGVzL3BhcmFtZXRlci12YWx1ZS5qcyJdLCJuYW1lcyI6WyJyb290IiwiZmFjdG9yeSIsImV4cG9ydHMiLCJtb2R1bGUiLCJkZWZpbmUiLCJhbWQiLCJhIiwiaSIsInRoaXMiLCJtb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiaW5zdGFsbGVkTW9kdWxlcyIsImlkIiwibG9hZGVkIiwiY2FsbCIsIm0iLCJjIiwicCIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJvYmoiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsIl9jb250YWluZXIiLCJfY29udGFpbmVyMiIsIl9jbGFzc0NvbnN0cnVjdG9yRGVmaW5pdGlvbiIsIl9jbGFzc0NvbnN0cnVjdG9yRGVmaW5pdGlvbjIiLCJfZmFjdG9yeURlZmluaXRpb24iLCJfZmFjdG9yeURlZmluaXRpb24yIiwiX3JlZmVyZW5jZSIsIl9yZWZlcmVuY2UyIiwiX3BhcmFtZXRlciIsIl9wYXJhbWV0ZXIyIiwiX21ldGhvZENhbGwiLCJfbWV0aG9kQ2FsbDIiLCJfZXJyb3JzIiwiX2Vycm9yczIiLCJDb250YWluZXIiLCJDbGFzc0NvbnN0cnVjdG9yRGVmaW5pdGlvbiIsIkZhY3RvcnlEZWZpbml0aW9uIiwiUmVmZXJlbmNlIiwiUGFyYW1ldGVyIiwiTWV0aG9kQ2FsbCIsImhhc093blByb3BlcnR5IiwiX2NsYXNzQ2FsbENoZWNrIiwiaW5zdGFuY2UiLCJDb25zdHJ1Y3RvciIsIlR5cGVFcnJvciIsIl9pbnNwZWN0IiwiaW5wdXQiLCJkZXB0aCIsIm1heERlcHRoIiwibWF4S2V5cyIsInVuZGVmaW5lZCIsIl90eXBlb2YiLCJBcnJheSIsImlzQXJyYXkiLCJrZXlzIiwiT2JqZWN0IiwibGVuZ3RoIiwiY29uc3RydWN0b3IiLCJuYW1lIiwiaW5kZW50IiwicmVwZWF0IiwiZW50cmllcyIsInNsaWNlIiwibWFwIiwia2V5IiwidGVzdCIsIkpTT04iLCJzdHJpbmdpZnkiLCJqb2luIiwiX3JldCIsInYiLCJmaXJzdCIsImV2ZXJ5IiwiaXRlbSIsInRyaW0iLCJkZWZpbmVQcm9wZXJ0eSIsInZhbHVlIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJwcm90b3R5cGUiLCJfY3JlYXRlQ2xhc3MiLCJkZWZpbmVQcm9wZXJ0aWVzIiwidGFyZ2V0IiwicHJvcHMiLCJkZXNjcmlwdG9yIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwiX2RlZmluaXRpb24iLCJfZGVmaW5pdGlvbjIiLCJfc2VydmljZSIsIl9wYXJhbWV0ZXJWYWx1ZSIsIl9pbmplY3RhYmxlQXJndW1lbnRzIiwiU2VydmljZSIsIlBhcmFtZXRlclZhbHVlIiwiSW5qZWN0YWJsZUFyZ3VtZW50cyIsIkxvYWRpbmdPYmplY3QiLCJhcnIiLCJoYXNJbnN0YW5jZSIsIkxvY2F0b3JDYWxsYmFjayIsIl9zZXJ2aWNlc0J5SWRlbnRpZmllciIsIl9zZXJ2aWNlRGVmaW5pdGlvbnNCeUlkZW50aWZpZXIiLCJfcGFyYW1ldGVyc0J5SWRlbnRpZmllciIsIl9zZXJ2aWNlRGVmaW5pdGlvbnNBbHJlYWR5VXNlZFRvSW5zdGFudGlhdGVCeUlkZW50aWZpZXIiLCJfY2xhc3NDb25zdHJ1Y3RvckxvY2F0b3JzIiwiX2luc3RhbmNlTG9jYXRvcnMiLCJfcmVmIiwiX2lkIiwiUHJvbWlzZSIsIl90aGlzIiwiX2xlbiIsImFyZ3VtZW50cyIsImlkZW50aWZpZXJzIiwiX2tleSIsInByb21pc2VzIiwiZm9yRWFjaCIsImlkZW50aWZpZXIiLCJwdXNoIiwiX2RvR2V0U2VydmljZSIsImNhdGNoIiwiZSIsIkVycm9yIiwiR2V0U2VydmljZUVycm9yIiwiY3JlYXRlRXJyb3IiLCJhbGwiLCJfcmVmNCIsIl9pZDQiLCJfcmVmNSIsIl9pZDUiLCJoYXNEZWZpbml0aW9uIiwiX3JlZjYiLCJfaWQ2IiwiX3JlZjciLCJfaWQ3IiwiX3JlZjgiLCJfaWQ4IiwiZGVmaW5pdGlvbiIsIlVuZGVmaW5lZFNlcnZpY2VEZWZpbml0aW9uRXJyb3IiLCJfcmVmOSIsIl9pZDkiLCJTZXJ2aWNlRGVmaW5pdGlvbkFscmVhZHlVc2VkRXJyb3IiLCJfcmVmMTAiLCJfaWQxMCIsIlVuZGVmaW5lZFBhcmFtZXRlckVycm9yIiwiX3JlZjExIiwiX2lkMTEiLCJfcmVmMTIiLCJfaWQxMiIsImxvY2F0b3IiLCJfcmVmMTMiLCJfaWQxMyIsIl9yZWYxNCIsIl9pZDE0IiwibG9hZGluZyIsIl9yZWYxNSIsIl9pZDE1IiwiX3RoaXMyIiwiX3Jlc29sdmVBcmdzIiwiYXJncyIsInRoZW4iLCJfcmVmMTYiLCJfaWQxNiIsImNsYXNzQ29uc3RydWN0b3IiLCJfbG9jYXRlU2VydmljZUNsYXNzQ29uc3RydWN0b3IiLCJjbGFzc0NvbnN0cnVjdG9ySWRlbnRpZmllciIsIkZ1bmN0aW9uIiwiYmluZCIsImFwcGx5IiwiY29uY2F0IiwicmVqZWN0IiwiRmFjdG9yeU1ldGhvZFJldHVybnNOb3RoaW5nRXJyb3IiLCJyZXNvbHZlIiwiZ2V0TWV0aG9kQ2FsbCIsIl9yZWYxOSIsIl9pZDE5IiwibWV0aG9kQ2FsbHMiLCJtZXRob2RDYWxsc1Byb21pc2VzIiwibWV0aG9kQ2FsbCIsImNhbGxNZXRob2QiLCJtZXRob2RUb0NhbGwiLCJfcmVmMTgiLCJfaWQxOCIsIm1ldGhvZE5hbWUiLCJNZXRob2REb2VzTm90RXhpc3RFcnJvciIsIl9yZWYyMCIsIl9pZDIwIiwiX3JlZjIxIiwiX2lkMjEiLCJDYW5ub3RMb2NhdGVTZXJ2aWNlQ2xhc3NDb25zdHJ1Y3RvckVycm9yIiwiX3JlZjIyIiwiX2lkMjIiLCJfcmVmMjMiLCJfaWQyMyIsIl90aGlzMyIsIl9yZWYyNCIsIl9pZDI0IiwiYXJnIiwiX2RlZXBDb3B5TG9hZGluZyIsIlVuc3VwcG9ydGVkQXJndW1lbnRUeXBlRXJyb3IiLCJnZXRQYXJhbWV0ZXIiLCJfcmVmMjUiLCJfaWQyNSIsInNlcnZpY2VzIiwiQ2lyY3VsYXJEZXBlbmRlbmN5RXJyb3IiLCJyZXN1bHQiLCJfbG9jYXRlSW5zdGFuY2UiLCJfcmVmMjYiLCJfaWQyNiIsIlVuZGVmaW5lZFNlcnZpY2VEZWZpbml0aW9uQW5kSW5zdGFuY2VFcnJvciIsInByb21pc2UiLCJfaW5zdGFudGlhdGUiLCJnZXREZWZpbml0aW9uIiwiX3JlZjI3IiwiX2lkMjciLCJuZXdMb2FkaW5nIiwiRGVmaW5pdGlvbiIsIl9tZXRob2RDYWxscyIsIl9hcmdzIiwic2V0IiwiZ2V0IiwiX3JlZjIiLCJfaWQyIiwiX3JlZjMiLCJfaWQzIiwiX25hbWUiLCJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsInNlbGYiLCJSZWZlcmVuY2VFcnJvciIsIl9pbmhlcml0cyIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsImNyZWF0ZSIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiX0RlZmluaXRpb24iLCJnZXRQcm90b3R5cGVPZiIsIl9jbGFzc0NvbnN0cnVjdG9ySWRlbnRpZmllciIsIl9mYWN0b3J5IiwiX2Nhbm5vdExvY2F0ZVNlcnZpY2VDbGFzc0NvbnN0cnVjdG9yRXJyb3IiLCJfY2Fubm90TG9jYXRlU2VydmljZUNsYXNzQ29uc3RydWN0b3JFcnJvcjIiLCJfY2lyY3VsYXJEZXBlbmRlbmN5RXJyb3IiLCJfY2lyY3VsYXJEZXBlbmRlbmN5RXJyb3IyIiwiX2Rpc2xFcnJvciIsIl9kaXNsRXJyb3IyIiwiX2ZhY3RvcnlNZXRob2RSZXR1cm5zTm90aGluZ0Vycm9yIiwiX2ZhY3RvcnlNZXRob2RSZXR1cm5zTm90aGluZ0Vycm9yMiIsIl9tZXRob2REb2VzTm90RXhpc3RFcnJvciIsIl9tZXRob2REb2VzTm90RXhpc3RFcnJvcjIiLCJfc2VydmljZURlZmluaXRpb25BbHJlYWR5VXNlZEVycm9yIiwiX3NlcnZpY2VEZWZpbml0aW9uQWxyZWFkeVVzZWRFcnJvcjIiLCJfdW5kZWZpbmVkUGFyYW1ldGVyRXJyb3IiLCJfdW5kZWZpbmVkUGFyYW1ldGVyRXJyb3IyIiwiX3VuZGVmaW5lZFNlcnZpY2VEZWZpbml0aW9uQW5kSW5zdGFuY2VFcnJvciIsIl91bmRlZmluZWRTZXJ2aWNlRGVmaW5pdGlvbkFuZEluc3RhbmNlRXJyb3IyIiwiX3VuZGVmaW5lZFNlcnZpY2VEZWZpbml0aW9uRXJyb3IiLCJfdW5kZWZpbmVkU2VydmljZURlZmluaXRpb25FcnJvcjIiLCJfdW5zdXBwb3J0ZWRBcmd1bWVudFR5cGVFcnJvciIsIl91bnN1cHBvcnRlZEFyZ3VtZW50VHlwZUVycm9yMiIsIl9nZXRTZXJ2aWNlRXJyb3IiLCJfZ2V0U2VydmljZUVycm9yMiIsIkRpc2xFcnJvciIsIl9EaXNsRXJyb3IiLCJjbGFzc05hbWUiLCJfdmVycm9yIiwiX3ZlcnJvcjIiLCJfVkVycm9yIiwicGFyc2VDb25zdHJ1Y3RvckFyZ3VtZW50cyIsImFyZ3YiLCJvcHRpb25zIiwic3ByaW50Zl9hcmdzIiwic2hvcnRtZXNzYWdlIiwiayIsIm1vZF9hc3NlcnRwbHVzIiwib2JqZWN0IiwiYm9vbCIsInN0cmljdCIsImFycmF5IiwibW9kX2lzRXJyb3IiLCJjYXVzZSIsInN0cmluZyIsInNwcmludGYiLCJWRXJyb3IiLCJwYXJzZWQiLCJjdG9yIiwibWVzc2FnZSIsImpzZV9zaG9ydG1zZyIsIm9rIiwianNlX2NhdXNlIiwic2tpcENhdXNlTWVzc2FnZSIsImpzZV9pbmZvIiwiaW5mbyIsImNhcHR1cmVTdGFja1RyYWNlIiwiY29uc3RydWN0b3JPcHQiLCJTRXJyb3IiLCJNdWx0aUVycm9yIiwiZXJyb3JzIiwiYXNlX2Vycm9ycyIsIldFcnJvciIsIm1vZF91dGlsIiwibW9kX2V4dHNwcmludGYiLCJpc0Vycm9yIiwiaW5oZXJpdHMiLCJ0b1N0cmluZyIsInN0ciIsImVyciIsInJ2IiwiZmluZENhdXNlQnlOYW1lIiwiZnVsbFN0YWNrIiwic3RhY2siLCJCdWZmZXIiLCJwcm9jZXNzIiwiX2NhcGl0YWxpemUiLCJjaGFyQXQiLCJ0b1VwcGVyQ2FzZSIsIl90b3NzIiwiZXhwZWN0ZWQiLCJvcGVyIiwiYWN0dWFsIiwiYXNzZXJ0IiwiQXNzZXJ0aW9uRXJyb3IiLCJ1dGlsIiwiZm9ybWF0Iiwib3BlcmF0b3IiLCJzdGFja1N0YXJ0RnVuY3Rpb24iLCJjYWxsZXIiLCJfZ2V0Q2xhc3MiLCJub29wIiwiX3NldEV4cG9ydHMiLCJuZGVidWciLCJvdXQiLCJ0eXBlcyIsImVudiIsIk5PREVfTkRFQlVHIiwibXNnIiwidHlwZSIsImNoZWNrIiwiU3RyZWFtIiwiVVVJRF9SRUdFWFAiLCJmdW5jIiwibnVtYmVyIiwiaXNOYU4iLCJmaW5pdGUiLCJpc0Zpbml0ZSIsImJ1ZmZlciIsImlzQnVmZmVyIiwic3RyZWFtIiwiZGF0ZSIsIkRhdGUiLCJyZWdleHAiLCJSZWdFeHAiLCJ1dWlkIiwiZ2xvYmFsIiwidHlwZWRBcnJheVN1cHBvcnQiLCJVaW50OEFycmF5IiwiZm9vIiwic3ViYXJyYXkiLCJieXRlTGVuZ3RoIiwia01heExlbmd0aCIsIlRZUEVEX0FSUkFZX1NVUFBPUlQiLCJjcmVhdGVCdWZmZXIiLCJ0aGF0IiwiUmFuZ2VFcnJvciIsImVuY29kaW5nT3JPZmZzZXQiLCJhbGxvY1Vuc2FmZSIsImZyb20iLCJBcnJheUJ1ZmZlciIsImZyb21BcnJheUJ1ZmZlciIsImZyb21TdHJpbmciLCJmcm9tT2JqZWN0IiwiYXNzZXJ0U2l6ZSIsInNpemUiLCJhbGxvYyIsImZpbGwiLCJlbmNvZGluZyIsImNoZWNrZWQiLCJpc0VuY29kaW5nIiwid3JpdGUiLCJmcm9tQXJyYXlMaWtlIiwiYnl0ZU9mZnNldCIsImxlbiIsImNvcHkiLCJpc25hbiIsImRhdGEiLCJTbG93QnVmZmVyIiwiaXNWaWV3IiwibG93ZXJlZENhc2UiLCJ1dGY4VG9CeXRlcyIsImJhc2U2NFRvQnl0ZXMiLCJ0b0xvd2VyQ2FzZSIsInNsb3dUb1N0cmluZyIsInN0YXJ0IiwiZW5kIiwiaGV4U2xpY2UiLCJ1dGY4U2xpY2UiLCJhc2NpaVNsaWNlIiwibGF0aW4xU2xpY2UiLCJiYXNlNjRTbGljZSIsInV0ZjE2bGVTbGljZSIsInN3YXAiLCJiIiwibiIsImJpZGlyZWN0aW9uYWxJbmRleE9mIiwidmFsIiwiZGlyIiwiYXJyYXlJbmRleE9mIiwiaW5kZXhPZiIsImxhc3RJbmRleE9mIiwicmVhZCIsImJ1ZiIsImluZGV4U2l6ZSIsInJlYWRVSW50MTZCRSIsImFyckxlbmd0aCIsInZhbExlbmd0aCIsIlN0cmluZyIsImZvdW5kSW5kZXgiLCJmb3VuZCIsImoiLCJoZXhXcml0ZSIsIm9mZnNldCIsIk51bWJlciIsInJlbWFpbmluZyIsInN0ckxlbiIsInBhcnNlSW50Iiwic3Vic3RyIiwidXRmOFdyaXRlIiwiYmxpdEJ1ZmZlciIsImFzY2lpV3JpdGUiLCJhc2NpaVRvQnl0ZXMiLCJsYXRpbjFXcml0ZSIsImJhc2U2NFdyaXRlIiwidWNzMldyaXRlIiwidXRmMTZsZVRvQnl0ZXMiLCJiYXNlNjQiLCJmcm9tQnl0ZUFycmF5IiwiTWF0aCIsIm1pbiIsInJlcyIsImZpcnN0Qnl0ZSIsImNvZGVQb2ludCIsImJ5dGVzUGVyU2VxdWVuY2UiLCJzZWNvbmRCeXRlIiwidGhpcmRCeXRlIiwiZm91cnRoQnl0ZSIsInRlbXBDb2RlUG9pbnQiLCJkZWNvZGVDb2RlUG9pbnRzQXJyYXkiLCJjb2RlUG9pbnRzIiwiTUFYX0FSR1VNRU5UU19MRU5HVEgiLCJmcm9tQ2hhckNvZGUiLCJyZXQiLCJ0b0hleCIsImJ5dGVzIiwiY2hlY2tPZmZzZXQiLCJleHQiLCJjaGVja0ludCIsIm1heCIsIm9iamVjdFdyaXRlVUludDE2IiwibGl0dGxlRW5kaWFuIiwib2JqZWN0V3JpdGVVSW50MzIiLCJjaGVja0lFRUU3NTQiLCJ3cml0ZUZsb2F0Iiwibm9Bc3NlcnQiLCJpZWVlNzU0Iiwid3JpdGVEb3VibGUiLCJiYXNlNjRjbGVhbiIsInN0cmluZ3RyaW0iLCJyZXBsYWNlIiwiSU5WQUxJRF9CQVNFNjRfUkUiLCJ1bml0cyIsIkluZmluaXR5IiwibGVhZFN1cnJvZ2F0ZSIsImNoYXJDb2RlQXQiLCJieXRlQXJyYXkiLCJoaSIsImxvIiwidG9CeXRlQXJyYXkiLCJzcmMiLCJkc3QiLCJJTlNQRUNUX01BWF9CWVRFUyIsInBvb2xTaXplIiwiX2F1Z21lbnQiLCJzcGVjaWVzIiwiYWxsb2NVbnNhZmVTbG93IiwiX2lzQnVmZmVyIiwiY29tcGFyZSIsIngiLCJ5IiwibGlzdCIsInBvcyIsInN3YXAxNiIsInN3YXAzMiIsInN3YXA2NCIsImVxdWFscyIsImluc3BlY3QiLCJtYXRjaCIsInRoaXNTdGFydCIsInRoaXNFbmQiLCJ0aGlzQ29weSIsInRhcmdldENvcHkiLCJpbmNsdWRlcyIsInRvSlNPTiIsIl9hcnIiLCJuZXdCdWYiLCJzbGljZUxlbiIsInJlYWRVSW50TEUiLCJtdWwiLCJyZWFkVUludEJFIiwicmVhZFVJbnQ4IiwicmVhZFVJbnQxNkxFIiwicmVhZFVJbnQzMkxFIiwicmVhZFVJbnQzMkJFIiwicmVhZEludExFIiwicG93IiwicmVhZEludEJFIiwicmVhZEludDgiLCJyZWFkSW50MTZMRSIsInJlYWRJbnQxNkJFIiwicmVhZEludDMyTEUiLCJyZWFkSW50MzJCRSIsInJlYWRGbG9hdExFIiwicmVhZEZsb2F0QkUiLCJyZWFkRG91YmxlTEUiLCJyZWFkRG91YmxlQkUiLCJ3cml0ZVVJbnRMRSIsIm1heEJ5dGVzIiwid3JpdGVVSW50QkUiLCJ3cml0ZVVJbnQ4IiwiZmxvb3IiLCJ3cml0ZVVJbnQxNkxFIiwid3JpdGVVSW50MTZCRSIsIndyaXRlVUludDMyTEUiLCJ3cml0ZVVJbnQzMkJFIiwid3JpdGVJbnRMRSIsImxpbWl0Iiwic3ViIiwid3JpdGVJbnRCRSIsIndyaXRlSW50OCIsIndyaXRlSW50MTZMRSIsIndyaXRlSW50MTZCRSIsIndyaXRlSW50MzJMRSIsIndyaXRlSW50MzJCRSIsIndyaXRlRmxvYXRMRSIsIndyaXRlRmxvYXRCRSIsIndyaXRlRG91YmxlTEUiLCJ3cml0ZURvdWJsZUJFIiwidGFyZ2V0U3RhcnQiLCJjb2RlIiwicGxhY2VIb2xkZXJzQ291bnQiLCJiNjQiLCJsIiwidG1wIiwicGxhY2VIb2xkZXJzIiwiQXJyIiwiTCIsInJldkxvb2t1cCIsInRyaXBsZXRUb0Jhc2U2NCIsIm51bSIsImxvb2t1cCIsImVuY29kZUNodW5rIiwidWludDgiLCJvdXRwdXQiLCJleHRyYUJ5dGVzIiwicGFydHMiLCJtYXhDaHVua0xlbmd0aCIsImxlbjIiLCJpc0xFIiwibUxlbiIsIm5CeXRlcyIsImVMZW4iLCJlTWF4IiwiZUJpYXMiLCJuQml0cyIsImQiLCJzIiwiTmFOIiwicnQiLCJhYnMiLCJsb2ciLCJMTjIiLCJkZWZhdWx0U2V0VGltb3V0IiwiZGVmYXVsdENsZWFyVGltZW91dCIsInJ1blRpbWVvdXQiLCJmdW4iLCJjYWNoZWRTZXRUaW1lb3V0Iiwic2V0VGltZW91dCIsInJ1bkNsZWFyVGltZW91dCIsIm1hcmtlciIsImNhY2hlZENsZWFyVGltZW91dCIsImNsZWFyVGltZW91dCIsImNsZWFuVXBOZXh0VGljayIsImRyYWluaW5nIiwiY3VycmVudFF1ZXVlIiwicXVldWUiLCJxdWV1ZUluZGV4IiwiZHJhaW5RdWV1ZSIsInRpbWVvdXQiLCJydW4iLCJJdGVtIiwibmV4dFRpY2siLCJ0aXRsZSIsImJyb3dzZXIiLCJ2ZXJzaW9uIiwidmVyc2lvbnMiLCJvbiIsImFkZExpc3RlbmVyIiwib25jZSIsIm9mZiIsInJlbW92ZUxpc3RlbmVyIiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwiZW1pdCIsImJpbmRpbmciLCJjd2QiLCJjaGRpciIsInVtYXNrIiwicFRvU3RyaW5nIiwiYXJyYnVmIiwiRGF0YVZpZXciLCJnZXROYW1lIiwiaXNGdW5jdGlvbiIsImZ1bmN0aW9uc0hhdmVOYW1lcyIsInJlZ2V4IiwidHJ1bmNhdGUiLCJzb21ldGhpbmciLCJyYXduYW1lIiwiZ2V0TWVzc2FnZSIsImZhaWwiLCJfZGVlcEVxdWFsIiwibWVtb3MiLCJpc0RhdGUiLCJnZXRUaW1lIiwiaXNSZWdFeHAiLCJzb3VyY2UiLCJtdWx0aWxpbmUiLCJsYXN0SW5kZXgiLCJpZ25vcmVDYXNlIiwiRmxvYXQzMkFycmF5IiwiRmxvYXQ2NEFycmF5IiwiYWN0dWFsSW5kZXgiLCJvYmpFcXVpdiIsImlzQXJndW1lbnRzIiwiYWN0dWFsVmlzaXRlZE9iamVjdHMiLCJpc1ByaW1pdGl2ZSIsImFJc0FyZ3MiLCJiSXNBcmdzIiwicFNsaWNlIiwia2EiLCJvYmplY3RLZXlzIiwia2IiLCJzb3J0Iiwibm90RGVlcFN0cmljdEVxdWFsIiwiZXhwZWN0ZWRFeGNlcHRpb24iLCJpc1Byb3RvdHlwZU9mIiwiX3RyeUJsb2NrIiwiYmxvY2siLCJlcnJvciIsIl90aHJvd3MiLCJzaG91bGRUaHJvdyIsInVzZXJQcm92aWRlZE1lc3NhZ2UiLCJpc1Vud2FudGVkRXhjZXB0aW9uIiwiaXNVbmV4cGVjdGVkRXhjZXB0aW9uIiwiaGFzT3duIiwiZ2VuZXJhdGVkTWVzc2FnZSIsImZuX25hbWUiLCJpZHgiLCJuZXh0X2xpbmUiLCJzdWJzdHJpbmciLCJlcXVhbCIsIm5vdEVxdWFsIiwiZGVlcEVxdWFsIiwiZGVlcFN0cmljdEVxdWFsIiwibm90RGVlcEVxdWFsIiwic3RyaWN0RXF1YWwiLCJub3RTdHJpY3RFcXVhbCIsInRocm93cyIsImRvZXNOb3RUaHJvdyIsImlmRXJyb3IiLCJvcHRzIiwiY3R4Iiwic2VlbiIsInN0eWxpemUiLCJzdHlsaXplTm9Db2xvciIsImNvbG9ycyIsImlzQm9vbGVhbiIsInNob3dIaWRkZW4iLCJfZXh0ZW5kIiwiaXNVbmRlZmluZWQiLCJjdXN0b21JbnNwZWN0Iiwic3R5bGl6ZVdpdGhDb2xvciIsImZvcm1hdFZhbHVlIiwic3R5bGVUeXBlIiwic3R5bGUiLCJzdHlsZXMiLCJhcnJheVRvSGFzaCIsImhhc2giLCJyZWN1cnNlVGltZXMiLCJpc1N0cmluZyIsInByaW1pdGl2ZSIsImZvcm1hdFByaW1pdGl2ZSIsInZpc2libGVLZXlzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImZvcm1hdEVycm9yIiwiYmFzZSIsImJyYWNlcyIsInRvVVRDU3RyaW5nIiwiZm9ybWF0QXJyYXkiLCJmb3JtYXRQcm9wZXJ0eSIsInBvcCIsInJlZHVjZVRvU2luZ2xlU3RyaW5nIiwic2ltcGxlIiwiaXNOdW1iZXIiLCJpc051bGwiLCJkZXNjIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwic3BsaXQiLCJsaW5lIiwibnVtTGluZXNFc3QiLCJyZWR1Y2UiLCJwcmV2IiwiY3VyIiwiYXIiLCJpc051bGxPclVuZGVmaW5lZCIsImlzU3ltYm9sIiwicmUiLCJpc09iamVjdCIsIm9iamVjdFRvU3RyaW5nIiwibyIsInBhZCIsInRpbWVzdGFtcCIsInRpbWUiLCJnZXRIb3VycyIsImdldE1pbnV0ZXMiLCJnZXRTZWNvbmRzIiwiZ2V0RGF0ZSIsIm1vbnRocyIsImdldE1vbnRoIiwicHJvcCIsImZvcm1hdFJlZ0V4cCIsImYiLCJvYmplY3RzIiwiXyIsImRlcHJlY2F0ZSIsImZuIiwiZGVwcmVjYXRlZCIsIndhcm5lZCIsInRocm93RGVwcmVjYXRpb24iLCJ0cmFjZURlcHJlY2F0aW9uIiwiY29uc29sZSIsInRyYWNlIiwibm9EZXByZWNhdGlvbiIsImRlYnVnRW52aXJvbiIsImRlYnVncyIsImRlYnVnbG9nIiwiTk9ERV9ERUJVRyIsInBpZCIsImJvbGQiLCJpdGFsaWMiLCJ1bmRlcmxpbmUiLCJpbnZlcnNlIiwid2hpdGUiLCJncmV5IiwiYmxhY2siLCJibHVlIiwiY3lhbiIsImdyZWVuIiwibWFnZW50YSIsInJlZCIsInllbGxvdyIsInNwZWNpYWwiLCJib29sZWFuIiwibnVsbCIsIm9yaWdpbiIsImFkZCIsInN1cGVyQ3RvciIsInN1cGVyXyIsIlRlbXBDdG9yIiwiRUUiLCJFdmVudEVtaXR0ZXIiLCJSZWFkYWJsZSIsIldyaXRhYmxlIiwiRHVwbGV4IiwiVHJhbnNmb3JtIiwiUGFzc1Rocm91Z2giLCJwaXBlIiwiZGVzdCIsIm9uZGF0YSIsImNodW5rIiwicGF1c2UiLCJvbmRyYWluIiwicmVhZGFibGUiLCJyZXN1bWUiLCJvbmVuZCIsImRpZE9uRW5kIiwib25jbG9zZSIsImRlc3Ryb3kiLCJvbmVycm9yIiwiZXIiLCJjbGVhbnVwIiwibGlzdGVuZXJDb3VudCIsIl9pc1N0ZGlvIiwiX2V2ZW50cyIsIl9tYXhMaXN0ZW5lcnMiLCJkZWZhdWx0TWF4TGlzdGVuZXJzIiwic2V0TWF4TGlzdGVuZXJzIiwiaGFuZGxlciIsImxpc3RlbmVycyIsImNvbnRleHQiLCJsaXN0ZW5lciIsIm5ld0xpc3RlbmVyIiwiZyIsImZpcmVkIiwicG9zaXRpb24iLCJzcGxpY2UiLCJldmxpc3RlbmVyIiwiZW1pdHRlciIsIlJFQURBQkxFX1NUUkVBTSIsIlJlYWRhYmxlU3RhdGUiLCJod20iLCJoaWdoV2F0ZXJNYXJrIiwiZGVmYXVsdEh3bSIsIm9iamVjdE1vZGUiLCJwaXBlcyIsInBpcGVzQ291bnQiLCJmbG93aW5nIiwiZW5kZWQiLCJlbmRFbWl0dGVkIiwicmVhZGluZyIsInN5bmMiLCJuZWVkUmVhZGFibGUiLCJlbWl0dGVkUmVhZGFibGUiLCJyZWFkYWJsZUxpc3RlbmluZyIsInJlYWRhYmxlT2JqZWN0TW9kZSIsImRlZmF1bHRFbmNvZGluZyIsInJhbk91dCIsImF3YWl0RHJhaW4iLCJyZWFkaW5nTW9yZSIsImRlY29kZXIiLCJTdHJpbmdEZWNvZGVyIiwiX3JlYWRhYmxlU3RhdGUiLCJyZWFkYWJsZUFkZENodW5rIiwic3RhdGUiLCJhZGRUb0Zyb250IiwiY2h1bmtJbnZhbGlkIiwib25Fb2ZDaHVuayIsInVuc2hpZnQiLCJlbWl0UmVhZGFibGUiLCJtYXliZVJlYWRNb3JlIiwibmVlZE1vcmVEYXRhIiwicm91bmRVcFRvTmV4dFBvd2VyT2YyIiwiTUFYX0hXTSIsImhvd011Y2hUb1JlYWQiLCJkZWJ1ZyIsImVtaXRSZWFkYWJsZV8iLCJmbG93IiwibWF5YmVSZWFkTW9yZV8iLCJwaXBlT25EcmFpbiIsInJlc3VtZVNjaGVkdWxlZCIsInJlc3VtZV8iLCJmcm9tTGlzdCIsInN0cmluZ01vZGUiLCJzaGlmdCIsImNweSIsImVuZFJlYWRhYmxlIiwieHMiLCJzZXRFbmNvZGluZyIsImVuYyIsIm5PcmlnIiwiZG9SZWFkIiwiX3JlYWQiLCJwaXBlT3B0cyIsIm9udW5waXBlIiwib25maW5pc2giLCJfd3JpdGFibGVTdGF0ZSIsIm5lZWREcmFpbiIsInVucGlwZSIsImRvRW5kIiwic3Rkb3V0Iiwic3RkZXJyIiwiZW5kRm4iLCJkZXN0cyIsImV2Iiwid3JhcCIsInBhdXNlZCIsIm1ldGhvZCIsImV2ZW50cyIsIl9mcm9tTGlzdCIsImFsbG93SGFsZk9wZW4iLCJXcml0ZVJlcSIsImNiIiwiY2FsbGJhY2siLCJXcml0YWJsZVN0YXRlIiwid3JpdGFibGVPYmplY3RNb2RlIiwiZW5kaW5nIiwiZmluaXNoZWQiLCJub0RlY29kZSIsImRlY29kZVN0cmluZ3MiLCJ3cml0aW5nIiwiY29ya2VkIiwiYnVmZmVyUHJvY2Vzc2luZyIsIm9ud3JpdGUiLCJ3cml0ZWNiIiwid3JpdGVsZW4iLCJwZW5kaW5nY2IiLCJwcmVmaW5pc2hlZCIsImVycm9yRW1pdHRlZCIsIndyaXRlQWZ0ZXJFbmQiLCJ2YWxpZENodW5rIiwidmFsaWQiLCJkZWNvZGVDaHVuayIsIndyaXRlT3JCdWZmZXIiLCJkb1dyaXRlIiwid3JpdGV2IiwiX3dyaXRldiIsIl93cml0ZSIsIm9ud3JpdGVFcnJvciIsIm9ud3JpdGVTdGF0ZVVwZGF0ZSIsIm5lZWRGaW5pc2giLCJjbGVhckJ1ZmZlciIsImFmdGVyV3JpdGUiLCJvbndyaXRlRHJhaW4iLCJmaW5pc2hNYXliZSIsImNicyIsImVudHJ5IiwicHJlZmluaXNoIiwibmVlZCIsImVuZFdyaXRhYmxlIiwiY29yayIsInVuY29yayIsImFzc2VydEVuY29kaW5nIiwiaXNCdWZmZXJFbmNvZGluZyIsInBhc3NUaHJvdWdoV3JpdGUiLCJ1dGYxNkRldGVjdEluY29tcGxldGVDaGFyIiwiY2hhclJlY2VpdmVkIiwiY2hhckxlbmd0aCIsImJhc2U2NERldGVjdEluY29tcGxldGVDaGFyIiwic3Vycm9nYXRlU2l6ZSIsImRldGVjdEluY29tcGxldGVDaGFyIiwiY2hhckJ1ZmZlciIsImNoYXJTdHIiLCJhdmFpbGFibGUiLCJjaGFyQ29kZSIsImNyIiwiVHJhbnNmb3JtU3RhdGUiLCJhZnRlclRyYW5zZm9ybSIsIm5lZWRUcmFuc2Zvcm0iLCJ0cmFuc2Zvcm1pbmciLCJ3cml0ZWNodW5rIiwidHMiLCJfdHJhbnNmb3JtU3RhdGUiLCJycyIsIl9mbHVzaCIsImRvbmUiLCJ3cyIsIl90cmFuc2Zvcm0iLCJ3cml0ZWVuY29kaW5nIiwianNTcHJpbnRmIiwiZm10IiwiZmxhZ3MiLCJ3aWR0aCIsInByZWNpc2lvbiIsImNvbnZlcnNpb24iLCJsZWZ0Iiwic2lnbiIsImFyZ24iLCJtb2RfYXNzZXJ0IiwiZXhlYyIsImRvUGFkIiwiZHVtcEV4Y2VwdGlvbiIsImpzUHJpbnRmIiwianNGcHJpbnRmIiwiY2hyIiwiZXgiLCJjZXgiLCJwcmludGYiLCJmcHJpbnRmIiwicGF0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bnQiOlsiKGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuXHRlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZClcblx0XHRkZWZpbmUoW10sIGZhY3RvcnkpO1xuXHRlbHNlIHtcblx0XHR2YXIgYSA9IGZhY3RvcnkoKTtcblx0XHRmb3IodmFyIGkgaW4gYSkgKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyA/IGV4cG9ydHMgOiByb290KVtpXSA9IGFbaV07XG5cdH1cbn0pKHRoaXMsIGZ1bmN0aW9uKCkge1xucmV0dXJuIFxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyB3ZWJwYWNrL3VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24iLCIoZnVuY3Rpb24gd2VicGFja1VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24ocm9vdCwgZmFjdG9yeSkge1xuXHRpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG5cdGVsc2UgaWYodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKVxuXHRcdGRlZmluZShbXSwgZmFjdG9yeSk7XG5cdGVsc2Uge1xuXHRcdHZhciBhID0gZmFjdG9yeSgpO1xuXHRcdGZvcih2YXIgaSBpbiBhKSAodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnID8gZXhwb3J0cyA6IHJvb3QpW2ldID0gYVtpXTtcblx0fVxufSkodGhpcywgZnVuY3Rpb24oKSB7XG5yZXR1cm4gLyoqKioqKi8gKGZ1bmN0aW9uKG1vZHVsZXMpIHsgLy8gd2VicGFja0Jvb3RzdHJhcFxuLyoqKioqKi8gXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuLyoqKioqKi8gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuLyoqKioqKi8gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKVxuLyoqKioqKi8gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4vKioqKioqLyBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuLyoqKioqKi8gXHRcdFx0ZXhwb3J0czoge30sXG4vKioqKioqLyBcdFx0XHRpZDogbW9kdWxlSWQsXG4vKioqKioqLyBcdFx0XHRsb2FkZWQ6IGZhbHNlXG4vKioqKioqLyBcdFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4vKioqKioqLyBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbi8qKioqKiovIFx0XHRtb2R1bGUubG9hZGVkID0gdHJ1ZTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbi8qKioqKiovIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4vKioqKioqLyBcdH1cbi8qKioqKiovXG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8qKioqKiovIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oMCk7XG4vKioqKioqLyB9KVxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKioqKiovIChbXG4vKiAwICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHR2YXIgX2NvbnRhaW5lciA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG5cdFxuXHR2YXIgX2NvbnRhaW5lcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jb250YWluZXIpO1xuXHRcblx0dmFyIF9jbGFzc0NvbnN0cnVjdG9yRGVmaW5pdGlvbiA9IF9fd2VicGFja19yZXF1aXJlX18oNyk7XG5cdFxuXHR2YXIgX2NsYXNzQ29uc3RydWN0b3JEZWZpbml0aW9uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsYXNzQ29uc3RydWN0b3JEZWZpbml0aW9uKTtcblx0XG5cdHZhciBfZmFjdG9yeURlZmluaXRpb24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpO1xuXHRcblx0dmFyIF9mYWN0b3J5RGVmaW5pdGlvbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9mYWN0b3J5RGVmaW5pdGlvbik7XG5cdFxuXHR2YXIgX3JlZmVyZW5jZSA9IF9fd2VicGFja19yZXF1aXJlX18oNSk7XG5cdFxuXHR2YXIgX3JlZmVyZW5jZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWZlcmVuY2UpO1xuXHRcblx0dmFyIF9wYXJhbWV0ZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYpO1xuXHRcblx0dmFyIF9wYXJhbWV0ZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcGFyYW1ldGVyKTtcblx0XG5cdHZhciBfbWV0aG9kQ2FsbCA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7XG5cdFxuXHR2YXIgX21ldGhvZENhbGwyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfbWV0aG9kQ2FsbCk7XG5cdFxuXHR2YXIgX2Vycm9ycyA9IF9fd2VicGFja19yZXF1aXJlX18oOSk7XG5cdFxuXHR2YXIgX2Vycm9yczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9lcnJvcnMpO1xuXHRcblx0ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblx0XG5cdHZhciBfZXhwb3J0cyA9IHtcblx0ICBDb250YWluZXI6IF9jb250YWluZXIyLmRlZmF1bHQsXG5cdCAgQ2xhc3NDb25zdHJ1Y3RvckRlZmluaXRpb246IF9jbGFzc0NvbnN0cnVjdG9yRGVmaW5pdGlvbjIuZGVmYXVsdCxcblx0ICBGYWN0b3J5RGVmaW5pdGlvbjogX2ZhY3RvcnlEZWZpbml0aW9uMi5kZWZhdWx0LFxuXHQgIFJlZmVyZW5jZTogX3JlZmVyZW5jZTIuZGVmYXVsdCxcblx0ICBQYXJhbWV0ZXI6IF9wYXJhbWV0ZXIyLmRlZmF1bHQsXG5cdCAgTWV0aG9kQ2FsbDogX21ldGhvZENhbGwyLmRlZmF1bHRcblx0fTtcblx0XG5cdGZvciAodmFyIGkgaW4gX2Vycm9yczIuZGVmYXVsdCkge1xuXHQgIGlmIChfZXJyb3JzMi5kZWZhdWx0Lmhhc093blByb3BlcnR5KGkpKSB7XG5cdCAgICBfZXhwb3J0c1tpXSA9IF9lcnJvcnMyLmRlZmF1bHRbaV07XG5cdCAgfVxuXHR9XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IF9leHBvcnRzO1xuXG4vKioqLyB9LFxuLyogMSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgdmFsdWU6IHRydWVcblx0fSk7XG5cdFxuXHR2YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cdFxuXHR2YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXHRcblx0dmFyIF9kZWZpbml0aW9uID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcblx0XG5cdHZhciBfZGVmaW5pdGlvbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kZWZpbml0aW9uKTtcblx0XG5cdHZhciBfY2xhc3NDb25zdHJ1Y3RvckRlZmluaXRpb24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcpO1xuXHRcblx0dmFyIF9jbGFzc0NvbnN0cnVjdG9yRGVmaW5pdGlvbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc0NvbnN0cnVjdG9yRGVmaW5pdGlvbik7XG5cdFxuXHR2YXIgX2ZhY3RvcnlEZWZpbml0aW9uID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4KTtcblx0XG5cdHZhciBfZmFjdG9yeURlZmluaXRpb24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZmFjdG9yeURlZmluaXRpb24pO1xuXHRcblx0dmFyIF9yZWZlcmVuY2UgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpO1xuXHRcblx0dmFyIF9yZWZlcmVuY2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVmZXJlbmNlKTtcblx0XG5cdHZhciBfcGFyYW1ldGVyID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2KTtcblx0XG5cdHZhciBfcGFyYW1ldGVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3BhcmFtZXRlcik7XG5cdFxuXHR2YXIgX21ldGhvZENhbGwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xuXHRcblx0dmFyIF9tZXRob2RDYWxsMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX21ldGhvZENhbGwpO1xuXHRcblx0dmFyIF9lcnJvcnMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkpO1xuXHRcblx0dmFyIF9zZXJ2aWNlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1Mik7XG5cdFxuXHR2YXIgX3BhcmFtZXRlclZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1Myk7XG5cdFxuXHR2YXIgX2luamVjdGFibGVBcmd1bWVudHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpO1xuXHRcblx0ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblx0XG5cdGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cdFxuXHR2YXIgU2VydmljZSA9IF9zZXJ2aWNlLlNlcnZpY2U7XG5cdHZhciBQYXJhbWV0ZXJWYWx1ZSA9IF9wYXJhbWV0ZXJWYWx1ZS5QYXJhbWV0ZXJWYWx1ZTtcblx0dmFyIEluamVjdGFibGVBcmd1bWVudHMgPSBfaW5qZWN0YWJsZUFyZ3VtZW50cy5JbmplY3RhYmxlQXJndW1lbnRzO1xuXHRcblx0dmFyIExvYWRpbmdPYmplY3QgPSBmdW5jdGlvbiAoKSB7XG5cdCAgZnVuY3Rpb24gTG9hZGluZ09iamVjdChpbnB1dCkge1xuXHQgICAgcmV0dXJuIGlucHV0ICE9IG51bGwgJiYgaW5wdXQub2JqIGluc3RhbmNlb2YgT2JqZWN0ICYmIEFycmF5LmlzQXJyYXkoaW5wdXQuYXJyKSAmJiBpbnB1dC5hcnIuZXZlcnkoZnVuY3Rpb24gKGl0ZW0pIHtcblx0ICAgICAgcmV0dXJuIHR5cGVvZiBpdGVtID09PSAnc3RyaW5nJztcblx0ICAgIH0pO1xuXHQgIH1cblx0XG5cdCAgO1xuXHQgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShMb2FkaW5nT2JqZWN0LCBTeW1ib2wuaGFzSW5zdGFuY2UsIHtcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiB2YWx1ZShpbnB1dCkge1xuXHQgICAgICByZXR1cm4gTG9hZGluZ09iamVjdChpbnB1dCk7XG5cdCAgICB9XG5cdCAgfSk7XG5cdCAgcmV0dXJuIExvYWRpbmdPYmplY3Q7XG5cdH0oKTtcblx0XG5cdHZhciBMb2NhdG9yQ2FsbGJhY2sgPSBmdW5jdGlvbiAoKSB7XG5cdCAgZnVuY3Rpb24gTG9jYXRvckNhbGxiYWNrKGlucHV0KSB7XG5cdCAgICByZXR1cm4gdHlwZW9mIGlucHV0ID09PSAnZnVuY3Rpb24nO1xuXHQgIH1cblx0XG5cdCAgO1xuXHQgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShMb2NhdG9yQ2FsbGJhY2ssIFN5bWJvbC5oYXNJbnN0YW5jZSwge1xuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIHZhbHVlKGlucHV0KSB7XG5cdCAgICAgIHJldHVybiBMb2NhdG9yQ2FsbGJhY2soaW5wdXQpO1xuXHQgICAgfVxuXHQgIH0pO1xuXHQgIHJldHVybiBMb2NhdG9yQ2FsbGJhY2s7XG5cdH0oKTtcblx0XG5cdC8qKlxuXHQgKiBAYXV0aG9yIEJlbmphbWluIE1pY2hhbHNraSA8YmVuamFtaW4ubWljaGFsc2tpQGdtYWlsLmNvbT5cblx0ICpcblx0ICogQHB1YmxpY1xuXHQgKi9cblx0XG5cdFxuXHR2YXIgQ29udGFpbmVyID0gZnVuY3Rpb24gKCkge1xuXHRcblx0ICAvKipcblx0ICAgKiBDb25zdHJ1Y3RvclxuXHQgICAqL1xuXHQgIGZ1bmN0aW9uIENvbnRhaW5lcigpIHtcblx0ICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDb250YWluZXIpO1xuXHRcblx0ICAgIHRoaXMuX3NlcnZpY2VzQnlJZGVudGlmaWVyID0ge307XG5cdCAgICB0aGlzLl9zZXJ2aWNlRGVmaW5pdGlvbnNCeUlkZW50aWZpZXIgPSB7fTtcblx0ICAgIHRoaXMuX3BhcmFtZXRlcnNCeUlkZW50aWZpZXIgPSB7fTtcblx0ICAgIHRoaXMuX3NlcnZpY2VEZWZpbml0aW9uc0FscmVhZHlVc2VkVG9JbnN0YW50aWF0ZUJ5SWRlbnRpZmllciA9IHt9O1xuXHQgICAgdGhpcy5fY2xhc3NDb25zdHJ1Y3RvckxvY2F0b3JzID0gW107XG5cdCAgICB0aGlzLl9pbnN0YW5jZUxvY2F0b3JzID0gW107XG5cdCAgfVxuXHRcblx0ICAvKipcblx0ICAgKiBHZXRzIHNlcnZpY2UgYXNzb2NpYXRlZCB3aXRoIGlkZW50aWZpZXJcblx0ICAgKlxuXHQgICAqIEBwYXJhbSB7Li4uc3RyaW5nfSBpZGVudGlmaWVyc1xuXHQgICAqXG5cdCAgICogQHByb21pc2Vcblx0ICAgKiBAcmVzb2x2ZSB7QXJyYXk8U2VydmljZT59XG5cdCAgICogQHJlamVjdCB7R2V0U2VydmljZUVycm9yfSBpbiBjYXNlIGFueSBFcnJvciBpcyByYWlzZWQgd2hlbiBpbnN0YW50aWF0aW5nIHNlcnZpY2Vcblx0ICAgKlxuXHQgICAqIEBwdWJsaWNcblx0ICAgKi9cblx0XG5cdFxuXHQgIF9jcmVhdGVDbGFzcyhDb250YWluZXIsIFt7XG5cdCAgICBrZXk6ICdnZXQnLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGdldCgpIHtcblx0ICAgICAgdmFyIF90aGlzID0gdGhpcztcblx0XG5cdCAgICAgIGZ1bmN0aW9uIF9yZWYoX2lkKSB7XG5cdCAgICAgICAgaWYgKCEoX2lkIGluc3RhbmNlb2YgUHJvbWlzZSkpIHtcblx0ICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0Z1bmN0aW9uIHJldHVybiB2YWx1ZSB2aW9sYXRlcyBjb250cmFjdC5cXG5cXG5FeHBlY3RlZDpcXG5Qcm9taXNlPEFycmF5PFNlcnZpY2U+PlxcblxcbkdvdDpcXG4nICsgX2luc3BlY3QoX2lkKSk7XG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICByZXR1cm4gX2lkO1xuXHQgICAgICB9XG5cdFxuXHQgICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgaWRlbnRpZmllcnMgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcblx0ICAgICAgICBpZGVudGlmaWVyc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcblx0ICAgICAgfVxuXHRcblx0ICAgICAgaWYgKCEoQXJyYXkuaXNBcnJheShpZGVudGlmaWVycykgJiYgaWRlbnRpZmllcnMuZXZlcnkoZnVuY3Rpb24gKGl0ZW0pIHtcblx0ICAgICAgICByZXR1cm4gdHlwZW9mIGl0ZW0gPT09ICdzdHJpbmcnO1xuXHQgICAgICB9KSkpIHtcblx0ICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdWYWx1ZSBvZiBhcmd1bWVudCBcImlkZW50aWZpZXJzXCIgdmlvbGF0ZXMgY29udHJhY3QuXFxuXFxuRXhwZWN0ZWQ6XFxuQXJyYXk8c3RyaW5nPlxcblxcbkdvdDpcXG4nICsgX2luc3BlY3QoaWRlbnRpZmllcnMpKTtcblx0ICAgICAgfVxuXHRcblx0ICAgICAgdmFyIHByb21pc2VzID0gW107XG5cdFxuXHQgICAgICBpZGVudGlmaWVycy5mb3JFYWNoKGZ1bmN0aW9uIChpZGVudGlmaWVyKSB7XG5cdCAgICAgICAgaWYgKCEodHlwZW9mIGlkZW50aWZpZXIgPT09ICdzdHJpbmcnKSkge1xuXHQgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVmFsdWUgb2YgYXJndW1lbnQgXCJpZGVudGlmaWVyXCIgdmlvbGF0ZXMgY29udHJhY3QuXFxuXFxuRXhwZWN0ZWQ6XFxuc3RyaW5nXFxuXFxuR290OlxcbicgKyBfaW5zcGVjdChpZGVudGlmaWVyKSk7XG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICBwcm9taXNlcy5wdXNoKF90aGlzLl9kb0dldFNlcnZpY2UoaWRlbnRpZmllciwgeyBvYmo6IHt9LCBhcnI6IFtdIH0pLmNhdGNoKGZ1bmN0aW9uIChlKSB7XG5cdCAgICAgICAgICBpZiAoIShlIGluc3RhbmNlb2YgRXJyb3IpKSB7XG5cdCAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1ZhbHVlIG9mIGFyZ3VtZW50IFwiZVwiIHZpb2xhdGVzIGNvbnRyYWN0LlxcblxcbkV4cGVjdGVkOlxcbkVycm9yXFxuXFxuR290OlxcbicgKyBfaW5zcGVjdChlKSk7XG5cdCAgICAgICAgICB9XG5cdFxuXHQgICAgICAgICAgdGhyb3cgX2Vycm9ycy5HZXRTZXJ2aWNlRXJyb3IuY3JlYXRlRXJyb3IoaWRlbnRpZmllciwgZSk7XG5cdCAgICAgICAgfSkpO1xuXHQgICAgICB9KTtcblx0XG5cdCAgICAgIHJldHVybiBfcmVmKFByb21pc2UuYWxsKHByb21pc2VzKSk7XG5cdCAgICB9XG5cdFxuXHQgICAgLyoqXG5cdCAgICAgKiBBc3NvY2lhdGVzIHNlcnZpY2Ugd2l0aCBpZGVudGlmaWVyXG5cdCAgICAgKlxuXHQgICAgICogQHBhcmFtIHtzdHJpbmd9IGlkZW50aWZpZXJcblx0ICAgICAqIEBwYXJhbSB7U2VydmljZX0gaW5zdGFuY2Ugc2VydmljZSBpbnN0YW5jZVxuXHQgICAgICpcblx0ICAgICAqIEByZXR1cm5zIHtDb250YWluZXJ9IGN1cnJlbnQgQ29udGFpbmVyIGluc3RhbmNlXG5cdCAgICAgKlxuXHQgICAgICogQHB1YmxpY1xuXHQgICAgICovXG5cdFxuXHQgIH0sIHtcblx0ICAgIGtleTogJ3NldCcsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gc2V0KGlkZW50aWZpZXIsIGluc3RhbmNlKSB7XG5cdCAgICAgIGZ1bmN0aW9uIF9yZWY0KF9pZDQpIHtcblx0ICAgICAgICBpZiAoIShfaWQ0IGluc3RhbmNlb2YgQ29udGFpbmVyKSkge1xuXHQgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRnVuY3Rpb24gcmV0dXJuIHZhbHVlIHZpb2xhdGVzIGNvbnRyYWN0LlxcblxcbkV4cGVjdGVkOlxcbkNvbnRhaW5lclxcblxcbkdvdDpcXG4nICsgX2luc3BlY3QoX2lkNCkpO1xuXHQgICAgICAgIH1cblx0XG5cdCAgICAgICAgcmV0dXJuIF9pZDQ7XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIGlmICghKHR5cGVvZiBpZGVudGlmaWVyID09PSAnc3RyaW5nJykpIHtcblx0ICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdWYWx1ZSBvZiBhcmd1bWVudCBcImlkZW50aWZpZXJcIiB2aW9sYXRlcyBjb250cmFjdC5cXG5cXG5FeHBlY3RlZDpcXG5zdHJpbmdcXG5cXG5Hb3Q6XFxuJyArIF9pbnNwZWN0KGlkZW50aWZpZXIpKTtcblx0ICAgICAgfVxuXHRcblx0ICAgICAgaWYgKCFTZXJ2aWNlKGluc3RhbmNlKSkge1xuXHQgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1ZhbHVlIG9mIGFyZ3VtZW50IFwiaW5zdGFuY2VcIiB2aW9sYXRlcyBjb250cmFjdC5cXG5cXG5FeHBlY3RlZDpcXG5TZXJ2aWNlXFxuXFxuR290OlxcbicgKyBfaW5zcGVjdChpbnN0YW5jZSkpO1xuXHQgICAgICB9XG5cdFxuXHQgICAgICB0aGlzLl9zZXJ2aWNlc0J5SWRlbnRpZmllcltpZGVudGlmaWVyXSA9IGluc3RhbmNlO1xuXHRcblx0ICAgICAgcmV0dXJuIF9yZWY0KHRoaXMpO1xuXHQgICAgfVxuXHRcblx0ICAgIC8qKlxuXHQgICAgICogUmV0dXJucyB0cnVlIGlmIGNvbnRhaW5lciBoYXMgc2VydmljZSwgdGhhdCBpcyBlaXRoZXIgaWY6XG5cdCAgICAgKiAqIGl0IGhhcyBhIHtAbGluayBEZWZpbml0aW9ufVxuXHQgICAgICogKiBpdCBoYXMgYmVlbiBpbnN0YW50aWF0ZWRcblx0ICAgICAqXG5cdCAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWRlbnRpZmllclxuXHQgICAgICpcblx0ICAgICAqIEByZXR1cm5zIHtib29sZWFufVxuXHQgICAgICovXG5cdFxuXHQgIH0sIHtcblx0ICAgIGtleTogJ2hhcycsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gaGFzKGlkZW50aWZpZXIpIHtcblx0ICAgICAgZnVuY3Rpb24gX3JlZjUoX2lkNSkge1xuXHQgICAgICAgIGlmICghKHR5cGVvZiBfaWQ1ID09PSAnYm9vbGVhbicpKSB7XG5cdCAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdGdW5jdGlvbiByZXR1cm4gdmFsdWUgdmlvbGF0ZXMgY29udHJhY3QuXFxuXFxuRXhwZWN0ZWQ6XFxuYm9vbGVhblxcblxcbkdvdDpcXG4nICsgX2luc3BlY3QoX2lkNSkpO1xuXHQgICAgICAgIH1cblx0XG5cdCAgICAgICAgcmV0dXJuIF9pZDU7XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIGlmICghKHR5cGVvZiBpZGVudGlmaWVyID09PSAnc3RyaW5nJykpIHtcblx0ICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdWYWx1ZSBvZiBhcmd1bWVudCBcImlkZW50aWZpZXJcIiB2aW9sYXRlcyBjb250cmFjdC5cXG5cXG5FeHBlY3RlZDpcXG5zdHJpbmdcXG5cXG5Hb3Q6XFxuJyArIF9pbnNwZWN0KGlkZW50aWZpZXIpKTtcblx0ICAgICAgfVxuXHRcblx0ICAgICAgcmV0dXJuIF9yZWY1KHRoaXMuaGFzRGVmaW5pdGlvbihpZGVudGlmaWVyKSB8fCB0aGlzLmhhc0luc3RhbmNlKGlkZW50aWZpZXIpKTtcblx0ICAgIH1cblx0XG5cdCAgICAvKipcblx0ICAgICAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgc2VydmljZSBoYXMgYSBkZWZpbml0aW9uXG5cdCAgICAgKlxuXHQgICAgICogQHBhcmFtIHtzdHJpbmd9IGlkZW50aWZpZXJcblx0ICAgICAqXG5cdCAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cblx0ICAgICAqXG5cdCAgICAgKiBAcHVibGljXG5cdCAgICAgKi9cblx0XG5cdCAgfSwge1xuXHQgICAga2V5OiAnaGFzRGVmaW5pdGlvbicsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gaGFzRGVmaW5pdGlvbihpZGVudGlmaWVyKSB7XG5cdCAgICAgIGZ1bmN0aW9uIF9yZWY2KF9pZDYpIHtcblx0ICAgICAgICBpZiAoISh0eXBlb2YgX2lkNiA9PT0gJ2Jvb2xlYW4nKSkge1xuXHQgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRnVuY3Rpb24gcmV0dXJuIHZhbHVlIHZpb2xhdGVzIGNvbnRyYWN0LlxcblxcbkV4cGVjdGVkOlxcbmJvb2xlYW5cXG5cXG5Hb3Q6XFxuJyArIF9pbnNwZWN0KF9pZDYpKTtcblx0ICAgICAgICB9XG5cdFxuXHQgICAgICAgIHJldHVybiBfaWQ2O1xuXHQgICAgICB9XG5cdFxuXHQgICAgICBpZiAoISh0eXBlb2YgaWRlbnRpZmllciA9PT0gJ3N0cmluZycpKSB7XG5cdCAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVmFsdWUgb2YgYXJndW1lbnQgXCJpZGVudGlmaWVyXCIgdmlvbGF0ZXMgY29udHJhY3QuXFxuXFxuRXhwZWN0ZWQ6XFxuc3RyaW5nXFxuXFxuR290OlxcbicgKyBfaW5zcGVjdChpZGVudGlmaWVyKSk7XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIHJldHVybiBfcmVmNih1bmRlZmluZWQgIT09IHRoaXMuX3NlcnZpY2VEZWZpbml0aW9uc0J5SWRlbnRpZmllcltpZGVudGlmaWVyXSk7XG5cdCAgICB9XG5cdFxuXHQgICAgLyoqXG5cdCAgICAgKiBSZXR1cm5zIHRydWUgaWYgdGhlIHNlcnZpY2UgaGFzIGFuIGluc3RhbmNlLCBlaXRoZXIgYmVjYXVzZTpcblx0ICAgICAqICogaXQgaGFzIGJlZW4gaW5zdGFudGlhdGVkIHZpYSBpdHMge0BsaW5rIERlZmluaXRpb259XG5cdCAgICAgKiAqIGl0IGhhcyBiZWVuIHNldCBkaXJlY3RseSB2aWEge0BsaW5rIHNldH0gbWV0aG9kXG5cdCAgICAgKlxuXHQgICAgICogQHBhcmFtIHtzdHJpbmd9IGlkZW50aWZpZXJcblx0ICAgICAqXG5cdCAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cblx0ICAgICAqXG5cdCAgICAgKiBAcHVibGljXG5cdCAgICAgKi9cblx0XG5cdCAgfSwge1xuXHQgICAga2V5OiAnaGFzSW5zdGFuY2UnLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGhhc0luc3RhbmNlKGlkZW50aWZpZXIpIHtcblx0ICAgICAgZnVuY3Rpb24gX3JlZjcoX2lkNykge1xuXHQgICAgICAgIGlmICghKHR5cGVvZiBfaWQ3ID09PSAnYm9vbGVhbicpKSB7XG5cdCAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdGdW5jdGlvbiByZXR1cm4gdmFsdWUgdmlvbGF0ZXMgY29udHJhY3QuXFxuXFxuRXhwZWN0ZWQ6XFxuYm9vbGVhblxcblxcbkdvdDpcXG4nICsgX2luc3BlY3QoX2lkNykpO1xuXHQgICAgICAgIH1cblx0XG5cdCAgICAgICAgcmV0dXJuIF9pZDc7XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIGlmICghKHR5cGVvZiBpZGVudGlmaWVyID09PSAnc3RyaW5nJykpIHtcblx0ICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdWYWx1ZSBvZiBhcmd1bWVudCBcImlkZW50aWZpZXJcIiB2aW9sYXRlcyBjb250cmFjdC5cXG5cXG5FeHBlY3RlZDpcXG5zdHJpbmdcXG5cXG5Hb3Q6XFxuJyArIF9pbnNwZWN0KGlkZW50aWZpZXIpKTtcblx0ICAgICAgfVxuXHRcblx0ICAgICAgcmV0dXJuIF9yZWY3KHVuZGVmaW5lZCAhPT0gdGhpcy5fc2VydmljZXNCeUlkZW50aWZpZXJbaWRlbnRpZmllcl0pO1xuXHQgICAgfVxuXHRcblx0ICAgIC8qKlxuXHQgICAgICogR2V0cyBzZXJ2aWNlIHtAbGluayBEZWZpbml0aW9ufSBhc3NvY2lhdGVkIHdpdGggaWRlbnRpZmllclxuXHQgICAgICpcblx0ICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZGVudGlmaWVyXG5cdCAgICAgKlxuXHQgICAgICogQHJldHVybnMge0RlZmluaXRpb259XG5cdCAgICAgKlxuXHQgICAgICogQHRocm93cyB7VW5kZWZpbmVkU2VydmljZURlZmluaXRpb25FcnJvcn0gaWYgdGhlcmUgaXMgbm8gc2VydmljZSBkZWZpbml0aW9uIGZvciBnaXZlbiBpZGVudGlmaWVyXG5cdCAgICAgKlxuXHQgICAgICogQHB1YmxpY1xuXHQgICAgICovXG5cdFxuXHQgIH0sIHtcblx0ICAgIGtleTogJ2dldERlZmluaXRpb24nLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGdldERlZmluaXRpb24oaWRlbnRpZmllcikge1xuXHQgICAgICBmdW5jdGlvbiBfcmVmOChfaWQ4KSB7XG5cdCAgICAgICAgaWYgKCEoX2lkOCBpbnN0YW5jZW9mIF9kZWZpbml0aW9uMi5kZWZhdWx0KSkge1xuXHQgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRnVuY3Rpb24gcmV0dXJuIHZhbHVlIHZpb2xhdGVzIGNvbnRyYWN0LlxcblxcbkV4cGVjdGVkOlxcbkRlZmluaXRpb25cXG5cXG5Hb3Q6XFxuJyArIF9pbnNwZWN0KF9pZDgpKTtcblx0ICAgICAgICB9XG5cdFxuXHQgICAgICAgIHJldHVybiBfaWQ4O1xuXHQgICAgICB9XG5cdFxuXHQgICAgICBpZiAoISh0eXBlb2YgaWRlbnRpZmllciA9PT0gJ3N0cmluZycpKSB7XG5cdCAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVmFsdWUgb2YgYXJndW1lbnQgXCJpZGVudGlmaWVyXCIgdmlvbGF0ZXMgY29udHJhY3QuXFxuXFxuRXhwZWN0ZWQ6XFxuc3RyaW5nXFxuXFxuR290OlxcbicgKyBfaW5zcGVjdChpZGVudGlmaWVyKSk7XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIHZhciBkZWZpbml0aW9uID0gdGhpcy5fc2VydmljZURlZmluaXRpb25zQnlJZGVudGlmaWVyW2lkZW50aWZpZXJdO1xuXHRcblx0ICAgICAgaWYgKHVuZGVmaW5lZCA9PT0gZGVmaW5pdGlvbikge1xuXHQgICAgICAgIHRocm93IF9lcnJvcnMuVW5kZWZpbmVkU2VydmljZURlZmluaXRpb25FcnJvci5jcmVhdGVFcnJvcihpZGVudGlmaWVyKTtcblx0ICAgICAgfVxuXHRcblx0ICAgICAgcmV0dXJuIF9yZWY4KGRlZmluaXRpb24pO1xuXHQgICAgfVxuXHRcblx0ICAgIC8qKlxuXHQgICAgICogQXNzb2NpYXRlcyBzZXJ2aWNlIHtAbGluayBEZWZpbml0aW9ufSB3aXRoIGlkZW50aWZpZXJcblx0ICAgICAqXG5cdCAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWRlbnRpZmllciBzZXJ2aWNlIGlkZW50aWZpZXJcblx0ICAgICAqIEBwYXJhbSB7RGVmaW5pdGlvbn0gZGVmaW5pdGlvbiBzZXJ2aWNlIGRlZmluaXRpb25cblx0ICAgICAqXG5cdCAgICAgKiBAcmV0dXJucyB7Q29udGFpbmVyfSBjdXJyZW50IENvbnRhaW5lciBpbnN0YW5jZVxuXHQgICAgICpcblx0ICAgICAqIEB0aHJvd3Mge1NlcnZpY2VEZWZpbml0aW9uQWxyZWFkeVVzZWRFcnJvcn0gaWYgdGhlIHNlcnZpY2UgZGVmaW5pdGlvbiBoYXMgYWxyZWFkeSBiZWVuIHVzZWQgdG8gaW5zdGFudGlhdGUgYSBzZXJ2aWNlXG5cdCAgICAgKlxuXHQgICAgICogQHB1YmxpY1xuXHQgICAgICovXG5cdFxuXHQgIH0sIHtcblx0ICAgIGtleTogJ3NldERlZmluaXRpb24nLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIHNldERlZmluaXRpb24oaWRlbnRpZmllciwgZGVmaW5pdGlvbikge1xuXHQgICAgICBmdW5jdGlvbiBfcmVmOShfaWQ5KSB7XG5cdCAgICAgICAgaWYgKCEoX2lkOSBpbnN0YW5jZW9mIENvbnRhaW5lcikpIHtcblx0ICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0Z1bmN0aW9uIHJldHVybiB2YWx1ZSB2aW9sYXRlcyBjb250cmFjdC5cXG5cXG5FeHBlY3RlZDpcXG5Db250YWluZXJcXG5cXG5Hb3Q6XFxuJyArIF9pbnNwZWN0KF9pZDkpKTtcblx0ICAgICAgICB9XG5cdFxuXHQgICAgICAgIHJldHVybiBfaWQ5O1xuXHQgICAgICB9XG5cdFxuXHQgICAgICBpZiAoISh0eXBlb2YgaWRlbnRpZmllciA9PT0gJ3N0cmluZycpKSB7XG5cdCAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVmFsdWUgb2YgYXJndW1lbnQgXCJpZGVudGlmaWVyXCIgdmlvbGF0ZXMgY29udHJhY3QuXFxuXFxuRXhwZWN0ZWQ6XFxuc3RyaW5nXFxuXFxuR290OlxcbicgKyBfaW5zcGVjdChpZGVudGlmaWVyKSk7XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIGlmICghKGRlZmluaXRpb24gaW5zdGFuY2VvZiBfZGVmaW5pdGlvbjIuZGVmYXVsdCkpIHtcblx0ICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdWYWx1ZSBvZiBhcmd1bWVudCBcImRlZmluaXRpb25cIiB2aW9sYXRlcyBjb250cmFjdC5cXG5cXG5FeHBlY3RlZDpcXG5EZWZpbml0aW9uXFxuXFxuR290OlxcbicgKyBfaW5zcGVjdChkZWZpbml0aW9uKSk7XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIGlmICh0aGlzLl9zZXJ2aWNlRGVmaW5pdGlvbnNBbHJlYWR5VXNlZFRvSW5zdGFudGlhdGVCeUlkZW50aWZpZXJbaWRlbnRpZmllcl0pIHtcblx0ICAgICAgICB0aHJvdyBfZXJyb3JzLlNlcnZpY2VEZWZpbml0aW9uQWxyZWFkeVVzZWRFcnJvci5jcmVhdGVFcnJvcihpZGVudGlmaWVyKTtcblx0ICAgICAgfVxuXHRcblx0ICAgICAgdGhpcy5fc2VydmljZURlZmluaXRpb25zQWxyZWFkeVVzZWRUb0luc3RhbnRpYXRlQnlJZGVudGlmaWVyW2lkZW50aWZpZXJdID0gZmFsc2U7XG5cdCAgICAgIHRoaXMuX3NlcnZpY2VEZWZpbml0aW9uc0J5SWRlbnRpZmllcltpZGVudGlmaWVyXSA9IGRlZmluaXRpb247XG5cdFxuXHQgICAgICByZXR1cm4gX3JlZjkodGhpcyk7XG5cdCAgICB9XG5cdFxuXHQgICAgLyoqXG5cdCAgICAgKiBHZXRzIHBhcmFtZXRlciBhc3NvY2lhdGVkIHdpdGggaWRlbnRpZmllclxuXHQgICAgICpcblx0ICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZGVudGlmaWVyIHBhcmFtZXRlciBpZGVudGlmaWVyXG5cdCAgICAgKlxuXHQgICAgICogQHJldHVybnMge1BhcmFtZXRlclZhbHVlfSBwYXJhbWV0ZXIgdmFsdWVcblx0ICAgICAqXG5cdCAgICAgKiBAdGhyb3dzIHtVbmRlZmluZWRQYXJhbWV0ZXJFcnJvcn0gaWYgdGhlcmUgaXMgbm8gcGFyYW1ldGVyIGZvciBnaXZlbiBpZGVudGlmaWVyXG5cdCAgICAgKlxuXHQgICAgICogQHB1YmxpY1xuXHQgICAgICovXG5cdFxuXHQgIH0sIHtcblx0ICAgIGtleTogJ2dldFBhcmFtZXRlcicsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0UGFyYW1ldGVyKGlkZW50aWZpZXIpIHtcblx0ICAgICAgZnVuY3Rpb24gX3JlZjEwKF9pZDEwKSB7XG5cdCAgICAgICAgaWYgKCFQYXJhbWV0ZXJWYWx1ZShfaWQxMCkpIHtcblx0ICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0Z1bmN0aW9uIHJldHVybiB2YWx1ZSB2aW9sYXRlcyBjb250cmFjdC5cXG5cXG5FeHBlY3RlZDpcXG5QYXJhbWV0ZXJWYWx1ZVxcblxcbkdvdDpcXG4nICsgX2luc3BlY3QoX2lkMTApKTtcblx0ICAgICAgICB9XG5cdFxuXHQgICAgICAgIHJldHVybiBfaWQxMDtcblx0ICAgICAgfVxuXHRcblx0ICAgICAgaWYgKCEodHlwZW9mIGlkZW50aWZpZXIgPT09ICdzdHJpbmcnKSkge1xuXHQgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1ZhbHVlIG9mIGFyZ3VtZW50IFwiaWRlbnRpZmllclwiIHZpb2xhdGVzIGNvbnRyYWN0LlxcblxcbkV4cGVjdGVkOlxcbnN0cmluZ1xcblxcbkdvdDpcXG4nICsgX2luc3BlY3QoaWRlbnRpZmllcikpO1xuXHQgICAgICB9XG5cdFxuXHQgICAgICBpZiAodW5kZWZpbmVkID09PSB0aGlzLl9wYXJhbWV0ZXJzQnlJZGVudGlmaWVyW2lkZW50aWZpZXJdKSB7XG5cdCAgICAgICAgdGhyb3cgX2Vycm9ycy5VbmRlZmluZWRQYXJhbWV0ZXJFcnJvci5jcmVhdGVFcnJvcihpZGVudGlmaWVyKTtcblx0ICAgICAgfVxuXHRcblx0ICAgICAgcmV0dXJuIF9yZWYxMCh0aGlzLl9wYXJhbWV0ZXJzQnlJZGVudGlmaWVyW2lkZW50aWZpZXJdKTtcblx0ICAgIH1cblx0XG5cdCAgICAvKipcblx0ICAgICAqIEFzc29jaWF0ZXMgcGFyYW1ldGVyIHdpdGggaWRlbnRpZmllclxuXHQgICAgICpcblx0ICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZGVudGlmaWVyXG5cdCAgICAgKiBAcGFyYW0ge1BhcmFtZXRlclZhbHVlfSB2YWx1ZVxuXHQgICAgICpcblx0ICAgICAqIEByZXR1cm5zIHtDb250YWluZXJ9IGN1cnJlbnQgQ29udGFpbmVyIGluc3RhbmNlXG5cdCAgICAgKlxuXHQgICAgICogQHB1YmxpY1xuXHQgICAgICovXG5cdFxuXHQgIH0sIHtcblx0ICAgIGtleTogJ3NldFBhcmFtZXRlcicsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gc2V0UGFyYW1ldGVyKGlkZW50aWZpZXIsIHZhbHVlKSB7XG5cdCAgICAgIGZ1bmN0aW9uIF9yZWYxMShfaWQxMSkge1xuXHQgICAgICAgIGlmICghKF9pZDExIGluc3RhbmNlb2YgQ29udGFpbmVyKSkge1xuXHQgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRnVuY3Rpb24gcmV0dXJuIHZhbHVlIHZpb2xhdGVzIGNvbnRyYWN0LlxcblxcbkV4cGVjdGVkOlxcbkNvbnRhaW5lclxcblxcbkdvdDpcXG4nICsgX2luc3BlY3QoX2lkMTEpKTtcblx0ICAgICAgICB9XG5cdFxuXHQgICAgICAgIHJldHVybiBfaWQxMTtcblx0ICAgICAgfVxuXHRcblx0ICAgICAgaWYgKCEodHlwZW9mIGlkZW50aWZpZXIgPT09ICdzdHJpbmcnKSkge1xuXHQgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1ZhbHVlIG9mIGFyZ3VtZW50IFwiaWRlbnRpZmllclwiIHZpb2xhdGVzIGNvbnRyYWN0LlxcblxcbkV4cGVjdGVkOlxcbnN0cmluZ1xcblxcbkdvdDpcXG4nICsgX2luc3BlY3QoaWRlbnRpZmllcikpO1xuXHQgICAgICB9XG5cdFxuXHQgICAgICBpZiAoIVBhcmFtZXRlclZhbHVlKHZhbHVlKSkge1xuXHQgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1ZhbHVlIG9mIGFyZ3VtZW50IFwidmFsdWVcIiB2aW9sYXRlcyBjb250cmFjdC5cXG5cXG5FeHBlY3RlZDpcXG5QYXJhbWV0ZXJWYWx1ZVxcblxcbkdvdDpcXG4nICsgX2luc3BlY3QodmFsdWUpKTtcblx0ICAgICAgfVxuXHRcblx0ICAgICAgdGhpcy5fcGFyYW1ldGVyc0J5SWRlbnRpZmllcltpZGVudGlmaWVyXSA9IHZhbHVlO1xuXHRcblx0ICAgICAgcmV0dXJuIF9yZWYxMSh0aGlzKTtcblx0ICAgIH1cblx0XG5cdCAgICAvKipcblx0ICAgICAqIFJldHVybnMgdHJ1ZSBpZiBjb250YWluZXIgaGFzIHBhcmFtZXRlciwgZmFsc2Ugb3RoZXJ3aXNlXG5cdCAgICAgKlxuXHQgICAgICogQHBhcmFtIHtzdHJpbmd9IGlkZW50aWZpZXJcblx0ICAgICAqXG5cdCAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cblx0ICAgICAqL1xuXHRcblx0ICB9LCB7XG5cdCAgICBrZXk6ICdoYXNQYXJhbWV0ZXInLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGhhc1BhcmFtZXRlcihpZGVudGlmaWVyKSB7XG5cdCAgICAgIGZ1bmN0aW9uIF9yZWYxMihfaWQxMikge1xuXHQgICAgICAgIGlmICghKHR5cGVvZiBfaWQxMiA9PT0gJ2Jvb2xlYW4nKSkge1xuXHQgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRnVuY3Rpb24gcmV0dXJuIHZhbHVlIHZpb2xhdGVzIGNvbnRyYWN0LlxcblxcbkV4cGVjdGVkOlxcbmJvb2xlYW5cXG5cXG5Hb3Q6XFxuJyArIF9pbnNwZWN0KF9pZDEyKSk7XG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICByZXR1cm4gX2lkMTI7XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIGlmICghKHR5cGVvZiBpZGVudGlmaWVyID09PSAnc3RyaW5nJykpIHtcblx0ICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdWYWx1ZSBvZiBhcmd1bWVudCBcImlkZW50aWZpZXJcIiB2aW9sYXRlcyBjb250cmFjdC5cXG5cXG5FeHBlY3RlZDpcXG5zdHJpbmdcXG5cXG5Hb3Q6XFxuJyArIF9pbnNwZWN0KGlkZW50aWZpZXIpKTtcblx0ICAgICAgfVxuXHRcblx0ICAgICAgcmV0dXJuIF9yZWYxMih1bmRlZmluZWQgIT09IHRoaXMuX3BhcmFtZXRlcnNCeUlkZW50aWZpZXJbaWRlbnRpZmllcl0pO1xuXHQgICAgfVxuXHRcblx0ICAgIC8qKlxuXHQgICAgICogUmVnaXN0ZXJzIFxuXHQgICAgICogXG5cdCAgICAgKiBAcGFyYW0ge0xvY2F0b3JDYWxsYmFja30gbG9jYXRvclxuXHQgICAgICpcblx0ICAgICAqIEByZXR1cm5zIHtDb250YWluZXJ9IGN1cnJlbnQgQ29udGFpbmVyIGluc3RhbmNlXG5cdCAgICAgKlxuXHQgICAgICogQHB1YmxpY1xuXHQgICAgICovXG5cdFxuXHQgIH0sIHtcblx0ICAgIGtleTogJ3JlZ2lzdGVyQ2xhc3NDb25zdHJ1Y3RvckxvY2F0b3InLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIHJlZ2lzdGVyQ2xhc3NDb25zdHJ1Y3RvckxvY2F0b3IobG9jYXRvcikge1xuXHQgICAgICBmdW5jdGlvbiBfcmVmMTMoX2lkMTMpIHtcblx0ICAgICAgICBpZiAoIShfaWQxMyBpbnN0YW5jZW9mIENvbnRhaW5lcikpIHtcblx0ICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0Z1bmN0aW9uIHJldHVybiB2YWx1ZSB2aW9sYXRlcyBjb250cmFjdC5cXG5cXG5FeHBlY3RlZDpcXG5Db250YWluZXJcXG5cXG5Hb3Q6XFxuJyArIF9pbnNwZWN0KF9pZDEzKSk7XG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICByZXR1cm4gX2lkMTM7XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIGlmICghTG9jYXRvckNhbGxiYWNrKGxvY2F0b3IpKSB7XG5cdCAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVmFsdWUgb2YgYXJndW1lbnQgXCJsb2NhdG9yXCIgdmlvbGF0ZXMgY29udHJhY3QuXFxuXFxuRXhwZWN0ZWQ6XFxuTG9jYXRvckNhbGxiYWNrXFxuXFxuR290OlxcbicgKyBfaW5zcGVjdChsb2NhdG9yKSk7XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIHRoaXMuX2NsYXNzQ29uc3RydWN0b3JMb2NhdG9ycy5wdXNoKGxvY2F0b3IpO1xuXHRcblx0ICAgICAgcmV0dXJuIF9yZWYxMyh0aGlzKTtcblx0ICAgIH1cblx0XG5cdCAgICAvKipcblx0ICAgICAqIEBwYXJhbSB7TG9jYXRvckNhbGxiYWNrfSBsb2NhdG9yXG5cdCAgICAgKlxuXHQgICAgICogQHJldHVybnMge0NvbnRhaW5lcn0gY3VycmVudCBDb250YWluZXIgaW5zdGFuY2Vcblx0ICAgICAqXG5cdCAgICAgKiBAcHVibGljXG5cdCAgICAgKi9cblx0XG5cdCAgfSwge1xuXHQgICAga2V5OiAncmVnaXN0ZXJJbnN0YW5jZUxvY2F0b3InLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIHJlZ2lzdGVySW5zdGFuY2VMb2NhdG9yKGxvY2F0b3IpIHtcblx0ICAgICAgZnVuY3Rpb24gX3JlZjE0KF9pZDE0KSB7XG5cdCAgICAgICAgaWYgKCEoX2lkMTQgaW5zdGFuY2VvZiBDb250YWluZXIpKSB7XG5cdCAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdGdW5jdGlvbiByZXR1cm4gdmFsdWUgdmlvbGF0ZXMgY29udHJhY3QuXFxuXFxuRXhwZWN0ZWQ6XFxuQ29udGFpbmVyXFxuXFxuR290OlxcbicgKyBfaW5zcGVjdChfaWQxNCkpO1xuXHQgICAgICAgIH1cblx0XG5cdCAgICAgICAgcmV0dXJuIF9pZDE0O1xuXHQgICAgICB9XG5cdFxuXHQgICAgICBpZiAoIUxvY2F0b3JDYWxsYmFjayhsb2NhdG9yKSkge1xuXHQgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1ZhbHVlIG9mIGFyZ3VtZW50IFwibG9jYXRvclwiIHZpb2xhdGVzIGNvbnRyYWN0LlxcblxcbkV4cGVjdGVkOlxcbkxvY2F0b3JDYWxsYmFja1xcblxcbkdvdDpcXG4nICsgX2luc3BlY3QobG9jYXRvcikpO1xuXHQgICAgICB9XG5cdFxuXHQgICAgICB0aGlzLl9pbnN0YW5jZUxvY2F0b3JzLnB1c2gobG9jYXRvcik7XG5cdFxuXHQgICAgICByZXR1cm4gX3JlZjE0KHRoaXMpO1xuXHQgICAgfVxuXHRcblx0ICAgIC8qKlxuXHQgICAgICogUmVzb2x2ZXMgc2VydmljZSBkZWZpbml0aW9uIGFyZ3VtZW50cywgdGhlbiB1c2VzIHRoZW0gdG8gaW5zdGFudGlhdGUgdGhlIHNlcnZpY2UuXG5cdCAgICAgKlxuXHQgICAgICogQHBhcmFtIHtzdHJpbmd9IGlkZW50aWZpZXJcblx0ICAgICAqIEBwYXJhbSB7RGVmaW5pdGlvbn0gZGVmaW5pdGlvblxuXHQgICAgICogQHBhcmFtIHtMb2FkaW5nT2JqZWN0fSBsb2FkaW5nIGFuIG9iamVjdCB0aGF0IGtlZXBzIHRyYWNrIG9mIHNlcnZpY2UgaW5zdGFudGlhdGlvbnMsXG5cdCAgICAgKiB1c2VkIHRvIHByZXZlbnQgY2lyY3VsYXIgZGVwZW5kZW5jeSByZWxhdGVkIGluZmluaXRlIGxvb3BzXG5cdCAgICAgKlxuXHQgICAgICogQHByb21pc2Vcblx0ICAgICAqIEByZXNvbHZlIHtTZXJ2aWNlfVxuXHQgICAgICogQHJlamVjdCB7RmFjdG9yeU1ldGhvZFJldHVybnNOb3RoaW5nRXJyb3J9IGluIGNhc2UgYSBmYWN0b3J5IG1ldGhvZCByZXR1cm5zIG5vdGhpbmdcblx0ICAgICAqIEByZWplY3Qge01ldGhvZERvZXNOb3RFeGlzdEVycm9yfSBpbiBjYXNlIGEgbWV0aG9kIGNhbGwgY2FsbHMgYSBtZXRob2QgdGhhdCBkb2VzIG5vdCBleGlzdFxuXHQgICAgICpcblx0ICAgICAqIEBwcml2YXRlXG5cdCAgICAgKi9cblx0XG5cdCAgfSwge1xuXHQgICAga2V5OiAnX2luc3RhbnRpYXRlJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBfaW5zdGFudGlhdGUoaWRlbnRpZmllciwgZGVmaW5pdGlvbiwgbG9hZGluZykge1xuXHQgICAgICB2YXIgX3RoaXMyID0gdGhpcztcblx0XG5cdCAgICAgIGZ1bmN0aW9uIF9yZWYxNShfaWQxNSkge1xuXHQgICAgICAgIGlmICghKF9pZDE1IGluc3RhbmNlb2YgUHJvbWlzZSkpIHtcblx0ICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0Z1bmN0aW9uIHJldHVybiB2YWx1ZSB2aW9sYXRlcyBjb250cmFjdC5cXG5cXG5FeHBlY3RlZDpcXG5Qcm9taXNlPFNlcnZpY2U+XFxuXFxuR290OlxcbicgKyBfaW5zcGVjdChfaWQxNSkpO1xuXHQgICAgICAgIH1cblx0XG5cdCAgICAgICAgcmV0dXJuIF9pZDE1O1xuXHQgICAgICB9XG5cdFxuXHQgICAgICBpZiAoISh0eXBlb2YgaWRlbnRpZmllciA9PT0gJ3N0cmluZycpKSB7XG5cdCAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVmFsdWUgb2YgYXJndW1lbnQgXCJpZGVudGlmaWVyXCIgdmlvbGF0ZXMgY29udHJhY3QuXFxuXFxuRXhwZWN0ZWQ6XFxuc3RyaW5nXFxuXFxuR290OlxcbicgKyBfaW5zcGVjdChpZGVudGlmaWVyKSk7XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIGlmICghKGRlZmluaXRpb24gaW5zdGFuY2VvZiBfZGVmaW5pdGlvbjIuZGVmYXVsdCkpIHtcblx0ICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdWYWx1ZSBvZiBhcmd1bWVudCBcImRlZmluaXRpb25cIiB2aW9sYXRlcyBjb250cmFjdC5cXG5cXG5FeHBlY3RlZDpcXG5EZWZpbml0aW9uXFxuXFxuR290OlxcbicgKyBfaW5zcGVjdChkZWZpbml0aW9uKSk7XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIGlmICghTG9hZGluZ09iamVjdChsb2FkaW5nKSkge1xuXHQgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1ZhbHVlIG9mIGFyZ3VtZW50IFwibG9hZGluZ1wiIHZpb2xhdGVzIGNvbnRyYWN0LlxcblxcbkV4cGVjdGVkOlxcbkxvYWRpbmdPYmplY3RcXG5cXG5Hb3Q6XFxuJyArIF9pbnNwZWN0KGxvYWRpbmcpKTtcblx0ICAgICAgfVxuXHRcblx0ICAgICAgcmV0dXJuIF9yZWYxNSh0aGlzLl9yZXNvbHZlQXJncyhkZWZpbml0aW9uLmFyZ3MsIGxvYWRpbmcpLnRoZW4oZnVuY3Rpb24gKGFyZ3MpIHtcblx0ICAgICAgICBmdW5jdGlvbiBfcmVmMTYoX2lkMTYpIHtcblx0ICAgICAgICAgIGlmICghKF9pZDE2IGluc3RhbmNlb2YgUHJvbWlzZSkpIHtcblx0ICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRnVuY3Rpb24gcmV0dXJuIHZhbHVlIHZpb2xhdGVzIGNvbnRyYWN0LlxcblxcbkV4cGVjdGVkOlxcblByb21pc2VcXG5cXG5Hb3Q6XFxuJyArIF9pbnNwZWN0KF9pZDE2KSk7XG5cdCAgICAgICAgICB9XG5cdFxuXHQgICAgICAgICAgcmV0dXJuIF9pZDE2O1xuXHQgICAgICAgIH1cblx0XG5cdCAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGFyZ3MpKSB7XG5cdCAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdWYWx1ZSBvZiBhcmd1bWVudCBcImFyZ3NcIiB2aW9sYXRlcyBjb250cmFjdC5cXG5cXG5FeHBlY3RlZDpcXG5BcnJheVxcblxcbkdvdDpcXG4nICsgX2luc3BlY3QoYXJncykpO1xuXHQgICAgICAgIH1cblx0XG5cdCAgICAgICAgdmFyIGluc3RhbmNlID0gdm9pZCAwO1xuXHRcblx0ICAgICAgICBpZiAoZGVmaW5pdGlvbiBpbnN0YW5jZW9mIF9jbGFzc0NvbnN0cnVjdG9yRGVmaW5pdGlvbjIuZGVmYXVsdCkge1xuXHQgICAgICAgICAgdmFyIGNsYXNzQ29uc3RydWN0b3IgPSBfdGhpczIuX2xvY2F0ZVNlcnZpY2VDbGFzc0NvbnN0cnVjdG9yKGRlZmluaXRpb24uY2xhc3NDb25zdHJ1Y3RvcklkZW50aWZpZXIpO1xuXHRcblx0ICAgICAgICAgIGluc3RhbmNlID0gbmV3IChGdW5jdGlvbi5wcm90b3R5cGUuYmluZC5hcHBseShjbGFzc0NvbnN0cnVjdG9yLCBbdW5kZWZpbmVkXS5jb25jYXQoYXJncykpKSgpO1xuXHQgICAgICAgIH0gZWxzZSBpZiAoZGVmaW5pdGlvbiBpbnN0YW5jZW9mIF9mYWN0b3J5RGVmaW5pdGlvbjIuZGVmYXVsdCkge1xuXHQgICAgICAgICAgaW5zdGFuY2UgPSBkZWZpbml0aW9uLmZhY3RvcnkuYXBwbHkodW5kZWZpbmVkLCBhcmdzKTtcblx0XG5cdCAgICAgICAgICBpZiAodW5kZWZpbmVkID09PSBpbnN0YW5jZSkge1xuXHQgICAgICAgICAgICByZXR1cm4gX3JlZjE2KFByb21pc2UucmVqZWN0KF9lcnJvcnMuRmFjdG9yeU1ldGhvZFJldHVybnNOb3RoaW5nRXJyb3IuY3JlYXRlRXJyb3IoaWRlbnRpZmllcikpKTtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdFxuXHQgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG5cdCAgICAgICAgICB2YXIgbWV0aG9kQ2FsbHNQcm9taXNlcyA9IFtdO1xuXHRcblx0ICAgICAgICAgIHZhciBpID0gdm9pZCAwLFxuXHQgICAgICAgICAgICAgIG1ldGhvZENhbGwgPSB2b2lkIDA7XG5cdFxuXHQgICAgICAgICAgdmFyIGNhbGxNZXRob2QgPSBmdW5jdGlvbiBjYWxsTWV0aG9kKG1ldGhvZFRvQ2FsbCkge1xuXHQgICAgICAgICAgICBpZiAoISh0eXBlb2YgbWV0aG9kVG9DYWxsID09PSAnZnVuY3Rpb24nKSkge1xuXHQgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1ZhbHVlIG9mIGFyZ3VtZW50IFwibWV0aG9kVG9DYWxsXCIgdmlvbGF0ZXMgY29udHJhY3QuXFxuXFxuRXhwZWN0ZWQ6XFxuRnVuY3Rpb25cXG5cXG5Hb3Q6XFxuJyArIF9pbnNwZWN0KG1ldGhvZFRvQ2FsbCkpO1xuXHQgICAgICAgICAgICB9XG5cdFxuXHQgICAgICAgICAgICBtZXRob2RDYWxsc1Byb21pc2VzLnB1c2goX3RoaXMyLl9yZXNvbHZlQXJncyhtZXRob2RDYWxsLmFyZ3MsIGxvYWRpbmcpLnRoZW4oZnVuY3Rpb24gKGFyZ3MpIHtcblx0ICAgICAgICAgICAgICBmdW5jdGlvbiBfcmVmMTgoX2lkMTgpIHtcblx0ICAgICAgICAgICAgICAgIGlmICghKF9pZDE4ID09IG51bGwgfHwgX2lkMTggaW5zdGFuY2VvZiBQcm9taXNlKSkge1xuXHQgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdGdW5jdGlvbiByZXR1cm4gdmFsdWUgdmlvbGF0ZXMgY29udHJhY3QuXFxuXFxuRXhwZWN0ZWQ6XFxuP1Byb21pc2UgfCBtaXhlZFxcblxcbkdvdDpcXG4nICsgX2luc3BlY3QoX2lkMTgpKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gX2lkMTg7XG5cdCAgICAgICAgICAgICAgfVxuXHRcblx0ICAgICAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoYXJncykpIHtcblx0ICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1ZhbHVlIG9mIGFyZ3VtZW50IFwiYXJnc1wiIHZpb2xhdGVzIGNvbnRyYWN0LlxcblxcbkV4cGVjdGVkOlxcbkFycmF5XFxuXFxuR290OlxcbicgKyBfaW5zcGVjdChhcmdzKSk7XG5cdCAgICAgICAgICAgICAgfVxuXHRcblx0ICAgICAgICAgICAgICByZXR1cm4gX3JlZjE4KG1ldGhvZFRvQ2FsbC5hcHBseShpbnN0YW5jZSwgYXJncykpO1xuXHQgICAgICAgICAgICB9KSk7XG5cdCAgICAgICAgICB9O1xuXHRcblx0ICAgICAgICAgIGZ1bmN0aW9uIGdldE1ldGhvZENhbGwoaSkge1xuXHQgICAgICAgICAgICBmdW5jdGlvbiBfcmVmMTkoX2lkMTkpIHtcblx0ICAgICAgICAgICAgICBpZiAoIShfaWQxOSBpbnN0YW5jZW9mIF9tZXRob2RDYWxsMi5kZWZhdWx0KSkge1xuXHQgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRnVuY3Rpb24gXCJnZXRNZXRob2RDYWxsXCIgcmV0dXJuIHZhbHVlIHZpb2xhdGVzIGNvbnRyYWN0LlxcblxcbkV4cGVjdGVkOlxcbk1ldGhvZENhbGxcXG5cXG5Hb3Q6XFxuJyArIF9pbnNwZWN0KF9pZDE5KSk7XG5cdCAgICAgICAgICAgICAgfVxuXHRcblx0ICAgICAgICAgICAgICByZXR1cm4gX2lkMTk7XG5cdCAgICAgICAgICAgIH1cblx0XG5cdCAgICAgICAgICAgIHJldHVybiBfcmVmMTkoZGVmaW5pdGlvbi5tZXRob2RDYWxsc1tpXSk7XG5cdCAgICAgICAgICB9XG5cdFxuXHQgICAgICAgICAgZm9yIChpIGluIGRlZmluaXRpb24ubWV0aG9kQ2FsbHMpIHtcblx0ICAgICAgICAgICAgaWYgKGRlZmluaXRpb24ubWV0aG9kQ2FsbHMuaGFzT3duUHJvcGVydHkoaSkpIHtcblx0ICAgICAgICAgICAgICBtZXRob2RDYWxsID0gZ2V0TWV0aG9kQ2FsbChpKTtcblx0XG5cdCAgICAgICAgICAgICAgdmFyIG1ldGhvZE5hbWUgPSBtZXRob2RDYWxsLm5hbWU7XG5cdCAgICAgICAgICAgICAgdmFyIG1ldGhvZFRvQ2FsbCA9IGluc3RhbmNlW21ldGhvZE5hbWVdO1xuXHRcblx0ICAgICAgICAgICAgICBpZiAodW5kZWZpbmVkID09PSBtZXRob2RUb0NhbGwpIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiByZWplY3QoX2Vycm9ycy5NZXRob2REb2VzTm90RXhpc3RFcnJvci5jcmVhdGVFcnJvcihtZXRob2ROYW1lKSk7XG5cdCAgICAgICAgICAgICAgfVxuXHRcblx0ICAgICAgICAgICAgICBjYWxsTWV0aG9kKG1ldGhvZFRvQ2FsbCk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgIH1cblx0XG5cdCAgICAgICAgICByZXR1cm4gcmVzb2x2ZShQcm9taXNlLmFsbChtZXRob2RDYWxsc1Byb21pc2VzKS50aGVuKGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgZnVuY3Rpb24gX3JlZjIwKF9pZDIwKSB7XG5cdCAgICAgICAgICAgICAgaWYgKCFTZXJ2aWNlKF9pZDIwKSkge1xuXHQgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRnVuY3Rpb24gcmV0dXJuIHZhbHVlIHZpb2xhdGVzIGNvbnRyYWN0LlxcblxcbkV4cGVjdGVkOlxcblNlcnZpY2VcXG5cXG5Hb3Q6XFxuJyArIF9pbnNwZWN0KF9pZDIwKSk7XG5cdCAgICAgICAgICAgICAgfVxuXHRcblx0ICAgICAgICAgICAgICByZXR1cm4gX2lkMjA7XG5cdCAgICAgICAgICAgIH1cblx0XG5cdCAgICAgICAgICAgIHJldHVybiBfcmVmMjAoaW5zdGFuY2UpO1xuXHQgICAgICAgICAgfSkpO1xuXHQgICAgICAgIH0pO1xuXHQgICAgICB9KSk7XG5cdCAgICB9XG5cdFxuXHQgICAgLyoqXG5cdCAgICAgKiBVc2VkIGludGVybmFsbHkgdG8gbG9jYXRlIGEgc2VydmljZSBjbGFzcyBjb25zdHJ1Y3RvciwgaWYgaXQgaGFzIGJlZW4gbWFkZSBhdmFpbGFibGUgdG8gdGhlIGNvbnRhaW5lciBpbnN0YW5jZS5cblx0ICAgICAqXG5cdCAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWRlbnRpZmllclxuXHQgICAgICpcblx0ICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gYSBzZXJ2aWNlIGNsYXNzIGNvbnN0cnVjdG9yXG5cdCAgICAgKlxuXHQgICAgICogQHRocm93cyB7Q2Fubm90TG9jYXRlU2VydmljZUNsYXNzQ29uc3RydWN0b3JFcnJvcn0gaWYgdGhlIHNlcnZpY2UgY2xhc3MgY29uc3RydWN0b3IgY2Fubm90IGJlIGZvdW5kXG5cdCAgICAgKlxuXHQgICAgICogQHByaXZhdGVcblx0ICAgICAqL1xuXHRcblx0ICB9LCB7XG5cdCAgICBrZXk6ICdfbG9jYXRlU2VydmljZUNsYXNzQ29uc3RydWN0b3InLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIF9sb2NhdGVTZXJ2aWNlQ2xhc3NDb25zdHJ1Y3RvcihpZGVudGlmaWVyKSB7XG5cdCAgICAgIGZ1bmN0aW9uIF9yZWYyMShfaWQyMSkge1xuXHQgICAgICAgIGlmICghKHR5cGVvZiBfaWQyMSA9PT0gJ2Z1bmN0aW9uJykpIHtcblx0ICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0Z1bmN0aW9uIHJldHVybiB2YWx1ZSB2aW9sYXRlcyBjb250cmFjdC5cXG5cXG5FeHBlY3RlZDpcXG5GdW5jdGlvblxcblxcbkdvdDpcXG4nICsgX2luc3BlY3QoX2lkMjEpKTtcblx0ICAgICAgICB9XG5cdFxuXHQgICAgICAgIHJldHVybiBfaWQyMTtcblx0ICAgICAgfVxuXHRcblx0ICAgICAgaWYgKCEodHlwZW9mIGlkZW50aWZpZXIgPT09ICdzdHJpbmcnKSkge1xuXHQgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1ZhbHVlIG9mIGFyZ3VtZW50IFwiaWRlbnRpZmllclwiIHZpb2xhdGVzIGNvbnRyYWN0LlxcblxcbkV4cGVjdGVkOlxcbnN0cmluZ1xcblxcbkdvdDpcXG4nICsgX2luc3BlY3QoaWRlbnRpZmllcikpO1xuXHQgICAgICB9XG5cdFxuXHQgICAgICB2YXIgaSA9IHZvaWQgMCxcblx0ICAgICAgICAgIGNsYXNzQ29uc3RydWN0b3IgPSB2b2lkIDA7XG5cdFxuXHQgICAgICBmb3IgKGkgaW4gdGhpcy5fY2xhc3NDb25zdHJ1Y3RvckxvY2F0b3JzKSB7XG5cdCAgICAgICAgaWYgKHRoaXMuX2NsYXNzQ29uc3RydWN0b3JMb2NhdG9ycy5oYXNPd25Qcm9wZXJ0eShpKSkge1xuXHQgICAgICAgICAgY2xhc3NDb25zdHJ1Y3RvciA9IHRoaXMuX2NsYXNzQ29uc3RydWN0b3JMb2NhdG9yc1tpXShpZGVudGlmaWVyKTtcblx0XG5cdCAgICAgICAgICBpZiAodW5kZWZpbmVkICE9PSBjbGFzc0NvbnN0cnVjdG9yKSB7XG5cdCAgICAgICAgICAgIHJldHVybiBfcmVmMjEoY2xhc3NDb25zdHJ1Y3Rvcik7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdFxuXHQgICAgICB0aHJvdyBfZXJyb3JzLkNhbm5vdExvY2F0ZVNlcnZpY2VDbGFzc0NvbnN0cnVjdG9yRXJyb3IuY3JlYXRlRXJyb3IoaWRlbnRpZmllcik7XG5cdCAgICB9XG5cdFxuXHQgICAgLyoqXG5cdCAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWRlbnRpZmllclxuXHQgICAgICpcblx0ICAgICAqIEByZXR1cm5zIHs/U2VydmljZX1cblx0ICAgICAqXG5cdCAgICAgKiBAcHJpdmF0ZVxuXHQgICAgICovXG5cdFxuXHQgIH0sIHtcblx0ICAgIGtleTogJ19sb2NhdGVJbnN0YW5jZScsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gX2xvY2F0ZUluc3RhbmNlKGlkZW50aWZpZXIpIHtcblx0ICAgICAgZnVuY3Rpb24gX3JlZjIyKF9pZDIyKSB7XG5cdCAgICAgICAgaWYgKCEoX2lkMjIgPT0gbnVsbCB8fCBTZXJ2aWNlKF9pZDIyKSkpIHtcblx0ICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0Z1bmN0aW9uIHJldHVybiB2YWx1ZSB2aW9sYXRlcyBjb250cmFjdC5cXG5cXG5FeHBlY3RlZDpcXG4/U2VydmljZVxcblxcbkdvdDpcXG4nICsgX2luc3BlY3QoX2lkMjIpKTtcblx0ICAgICAgICB9XG5cdFxuXHQgICAgICAgIHJldHVybiBfaWQyMjtcblx0ICAgICAgfVxuXHRcblx0ICAgICAgaWYgKCEodHlwZW9mIGlkZW50aWZpZXIgPT09ICdzdHJpbmcnKSkge1xuXHQgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1ZhbHVlIG9mIGFyZ3VtZW50IFwiaWRlbnRpZmllclwiIHZpb2xhdGVzIGNvbnRyYWN0LlxcblxcbkV4cGVjdGVkOlxcbnN0cmluZ1xcblxcbkdvdDpcXG4nICsgX2luc3BlY3QoaWRlbnRpZmllcikpO1xuXHQgICAgICB9XG5cdFxuXHQgICAgICB2YXIgaSA9IHZvaWQgMDtcblx0ICAgICAgdmFyIGluc3RhbmNlID0gdm9pZCAwO1xuXHRcblx0ICAgICAgZm9yIChpIGluIHRoaXMuX2luc3RhbmNlTG9jYXRvcnMpIHtcblx0ICAgICAgICBpZiAodGhpcy5faW5zdGFuY2VMb2NhdG9ycy5oYXNPd25Qcm9wZXJ0eShpKSkge1xuXHQgICAgICAgICAgaW5zdGFuY2UgPSB0aGlzLl9pbnN0YW5jZUxvY2F0b3JzW2ldKGlkZW50aWZpZXIpO1xuXHRcblx0ICAgICAgICAgIGlmICh1bmRlZmluZWQgIT09IGluc3RhbmNlKSB7XG5cdCAgICAgICAgICAgIHJldHVybiBfcmVmMjIoaW5zdGFuY2UpO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgfVxuXHRcblx0ICAgIC8qKlxuXHQgICAgICogUmVzb2x2ZXMgZ2l2ZW4gYXJndW1lbnRzLlxuXHQgICAgICpcblx0ICAgICAqIEBwYXJhbSB7SW5qZWN0YWJsZUFyZ3VtZW50c30gYXJnc1xuXHQgICAgICogQHBhcmFtIHtMb2FkaW5nT2JqZWN0fSBsb2FkaW5nIGFuIG9iamVjdCB0aGF0IGtlZXBzIHRyYWNrIG9mIHNlcnZpY2UgaW5zdGFudGlhdGlvbnMsXG5cdCAgICAgKiB1c2VkIHRvIHByZXZlbnQgY2lyY3VsYXIgZGVwZW5kZW5jeSByZWxhdGVkIGluZmluaXRlIGxvb3BzXG5cdCAgICAgKlxuXHQgICAgICogQHByb21pc2Uge0FycmF5PFNlcnZpY2V8UGFyYW1ldGVyVmFsdWU+fSBhbiBhcnJheSBvZiBzZXJ2aWNlIGluc3RhbmNlcyBvciBwYXJhbWV0ZXIgdmFsdWVzXG5cdCAgICAgKiBAcmVqZWN0IHtVbnN1cHBvcnRlZEFyZ3VtZW50VHlwZUVycm9yfVxuXHQgICAgICpcblx0ICAgICAqIEBwcml2YXRlXG5cdCAgICAgKi9cblx0XG5cdCAgfSwge1xuXHQgICAga2V5OiAnX3Jlc29sdmVBcmdzJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBfcmVzb2x2ZUFyZ3MoYXJncywgbG9hZGluZykge1xuXHQgICAgICB2YXIgX3RoaXMzID0gdGhpcztcblx0XG5cdCAgICAgIGZ1bmN0aW9uIF9yZWYyMyhfaWQyMykge1xuXHQgICAgICAgIGlmICghKF9pZDIzIGluc3RhbmNlb2YgUHJvbWlzZSkpIHtcblx0ICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0Z1bmN0aW9uIHJldHVybiB2YWx1ZSB2aW9sYXRlcyBjb250cmFjdC5cXG5cXG5FeHBlY3RlZDpcXG5Qcm9taXNlPEFycmF5PFNlcnZpY2UgfCBQYXJhbWV0ZXJWYWx1ZT4+XFxuXFxuR290OlxcbicgKyBfaW5zcGVjdChfaWQyMykpO1xuXHQgICAgICAgIH1cblx0XG5cdCAgICAgICAgcmV0dXJuIF9pZDIzO1xuXHQgICAgICB9XG5cdFxuXHQgICAgICBpZiAoIUluamVjdGFibGVBcmd1bWVudHMoYXJncykpIHtcblx0ICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdWYWx1ZSBvZiBhcmd1bWVudCBcImFyZ3NcIiB2aW9sYXRlcyBjb250cmFjdC5cXG5cXG5FeHBlY3RlZDpcXG5JbmplY3RhYmxlQXJndW1lbnRzXFxuXFxuR290OlxcbicgKyBfaW5zcGVjdChhcmdzKSk7XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIGlmICghTG9hZGluZ09iamVjdChsb2FkaW5nKSkge1xuXHQgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1ZhbHVlIG9mIGFyZ3VtZW50IFwibG9hZGluZ1wiIHZpb2xhdGVzIGNvbnRyYWN0LlxcblxcbkV4cGVjdGVkOlxcbkxvYWRpbmdPYmplY3RcXG5cXG5Hb3Q6XFxuJyArIF9pbnNwZWN0KGxvYWRpbmcpKTtcblx0ICAgICAgfVxuXHRcblx0ICAgICAgdmFyIHByb21pc2VzID0gW107XG5cdFxuXHQgICAgICByZXR1cm4gX3JlZjIzKG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcblx0ICAgICAgICBmdW5jdGlvbiBfcmVmMjQoX2lkMjQpIHtcblx0ICAgICAgICAgIGlmICghKF9pZDI0ID09IG51bGwpKSB7XG5cdCAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0Z1bmN0aW9uIHJldHVybiB2YWx1ZSB2aW9sYXRlcyBjb250cmFjdC5cXG5cXG5FeHBlY3RlZDpcXG52b2lkXFxuXFxuR290OlxcbicgKyBfaW5zcGVjdChfaWQyNCkpO1xuXHQgICAgICAgICAgfVxuXHRcblx0ICAgICAgICAgIHJldHVybiBfaWQyNDtcblx0ICAgICAgICB9XG5cdFxuXHQgICAgICAgIGlmICghKHR5cGVvZiByZXNvbHZlID09PSAnZnVuY3Rpb24nKSkge1xuXHQgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVmFsdWUgb2YgYXJndW1lbnQgXCJyZXNvbHZlXCIgdmlvbGF0ZXMgY29udHJhY3QuXFxuXFxuRXhwZWN0ZWQ6XFxuRnVuY3Rpb25cXG5cXG5Hb3Q6XFxuJyArIF9pbnNwZWN0KHJlc29sdmUpKTtcblx0ICAgICAgICB9XG5cdFxuXHQgICAgICAgIGlmICghKHR5cGVvZiByZWplY3QgPT09ICdmdW5jdGlvbicpKSB7XG5cdCAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdWYWx1ZSBvZiBhcmd1bWVudCBcInJlamVjdFwiIHZpb2xhdGVzIGNvbnRyYWN0LlxcblxcbkV4cGVjdGVkOlxcbkZ1bmN0aW9uXFxuXFxuR290OlxcbicgKyBfaW5zcGVjdChyZWplY3QpKTtcblx0ICAgICAgICB9XG5cdFxuXHQgICAgICAgIHZhciBpID0gdm9pZCAwLFxuXHQgICAgICAgICAgICBhcmcgPSB2b2lkIDA7XG5cdFxuXHQgICAgICAgIGZvciAoaSBpbiBhcmdzKSB7XG5cdCAgICAgICAgICBpZiAoYXJncy5oYXNPd25Qcm9wZXJ0eShpKSkge1xuXHQgICAgICAgICAgICBhcmcgPSBhcmdzW2ldO1xuXHRcblx0ICAgICAgICAgICAgaWYgKGFyZyBpbnN0YW5jZW9mIF9yZWZlcmVuY2UyLmRlZmF1bHQpIHtcblx0ICAgICAgICAgICAgICB2YXIgaWQgPSBhcmcuaWQ7XG5cdFxuXHQgICAgICAgICAgICAgIHByb21pc2VzLnB1c2goX3RoaXMzLl9kb0dldFNlcnZpY2UoaWQsIENvbnRhaW5lci5fZGVlcENvcHlMb2FkaW5nKGxvYWRpbmcpKSk7XG5cdCAgICAgICAgICAgIH0gZWxzZSBpZiAoYXJnIGluc3RhbmNlb2YgX3BhcmFtZXRlcjIuZGVmYXVsdCkge1xuXHQgICAgICAgICAgICAgIHByb21pc2VzLnB1c2goX3RoaXMzLmdldFBhcmFtZXRlcihhcmcuaWQpKTtcblx0ICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICByZXR1cm4gX3JlZjI0KHJlamVjdChfZXJyb3JzLlVuc3VwcG9ydGVkQXJndW1lbnRUeXBlRXJyb3IuY3JlYXRlRXJyb3IoYXJnKSkpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICByZXR1cm4gX3JlZjI0KHJlc29sdmUoUHJvbWlzZS5hbGwocHJvbWlzZXMpKSk7XG5cdCAgICAgIH0pKTtcblx0ICAgIH1cblx0XG5cdCAgICAvKipcblx0ICAgICAqIFVzZWQgaW50ZXJuYWxseSB0byByZXRyaWV2ZSBhIHNlcnZpY2UgYnkgaXRzIGlkZW50aWZpZXIuXG5cdCAgICAgKlxuXHQgICAgICogQHBhcmFtIHtzdHJpbmd9IGlkZW50aWZpZXIgdGhlIGlkZW50aWZpZXIgb2YgdGhlIHNlcnZpY2Vcblx0ICAgICAqIEBwYXJhbSB7TG9hZGluZ09iamVjdH0gbG9hZGluZyBhbiBvYmplY3QgdGhhdCBrZWVwcyB0cmFjayBvZiBzZXJ2aWNlIGluc3RhbnRpYXRpb25zLFxuXHQgICAgICogdXNlZCB0byBwcmV2ZW50IGNpcmN1bGFyIGRlcGVuZGVuY3kgcmVsYXRlZCBpbmZpbml0ZSBsb29wc1xuXHQgICAgICpcblx0ICAgICAqIEBwcm9taXNlXG5cdCAgICAgKiBAcmVzb2x2ZSB7U2VydmljZX0gYSBzZXJ2aWNlIGluc3RhbmNlXG5cdCAgICAgKiBAcmVqZWN0IHtDaXJjdWxhckRlcGVuZGVuY3lFcnJvcn0gaW4gY2FzZSBvZiBhIGNpcmN1bGFyIGRlcGVuZGVuY3lcblx0ICAgICAqIEByZWplY3Qge1VuZGVmaW5lZFNlcnZpY2VEZWZpbml0aW9uQW5kSW5zdGFuY2VFcnJvcn0gaW4gY2FzZSBuZWl0aGVyIGFuIGluc3RhbmNlIG5vciBhIGRlZmluaXRpb24gaXMgZm91bmRcblx0ICAgICAqXG5cdCAgICAgKiBAcHJpdmF0ZVxuXHQgICAgICovXG5cdFxuXHQgIH0sIHtcblx0ICAgIGtleTogJ19kb0dldFNlcnZpY2UnLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIF9kb0dldFNlcnZpY2UoaWRlbnRpZmllciwgbG9hZGluZykge1xuXHQgICAgICBmdW5jdGlvbiBfcmVmMjUoX2lkMjUpIHtcblx0ICAgICAgICBpZiAoIShfaWQyNSBpbnN0YW5jZW9mIFByb21pc2UpKSB7XG5cdCAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdGdW5jdGlvbiByZXR1cm4gdmFsdWUgdmlvbGF0ZXMgY29udHJhY3QuXFxuXFxuRXhwZWN0ZWQ6XFxuUHJvbWlzZTxTZXJ2aWNlIHwgQ2lyY3VsYXJEZXBlbmRlbmN5RXJyb3IgfCBVbmRlZmluZWRTZXJ2aWNlRGVmaW5pdGlvbkFuZEluc3RhbmNlRXJyb3I+XFxuXFxuR290OlxcbicgKyBfaW5zcGVjdChfaWQyNSkpO1xuXHQgICAgICAgIH1cblx0XG5cdCAgICAgICAgcmV0dXJuIF9pZDI1O1xuXHQgICAgICB9XG5cdFxuXHQgICAgICBpZiAoISh0eXBlb2YgaWRlbnRpZmllciA9PT0gJ3N0cmluZycpKSB7XG5cdCAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVmFsdWUgb2YgYXJndW1lbnQgXCJpZGVudGlmaWVyXCIgdmlvbGF0ZXMgY29udHJhY3QuXFxuXFxuRXhwZWN0ZWQ6XFxuc3RyaW5nXFxuXFxuR290OlxcbicgKyBfaW5zcGVjdChpZGVudGlmaWVyKSk7XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIGlmICghTG9hZGluZ09iamVjdChsb2FkaW5nKSkge1xuXHQgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1ZhbHVlIG9mIGFyZ3VtZW50IFwibG9hZGluZ1wiIHZpb2xhdGVzIGNvbnRyYWN0LlxcblxcbkV4cGVjdGVkOlxcbkxvYWRpbmdPYmplY3RcXG5cXG5Hb3Q6XFxuJyArIF9pbnNwZWN0KGxvYWRpbmcpKTtcblx0ICAgICAgfVxuXHRcblx0ICAgICAgaWYgKHVuZGVmaW5lZCAhPT0gbG9hZGluZy5vYmpbaWRlbnRpZmllcl0pIHtcblx0ICAgICAgICB2YXIgc2VydmljZXMgPSBbXS5jb25jYXQobG9hZGluZy5hcnIpLmNvbmNhdChbaWRlbnRpZmllcl0pO1xuXHRcblx0ICAgICAgICByZXR1cm4gX3JlZjI1KFByb21pc2UucmVqZWN0KF9lcnJvcnMuQ2lyY3VsYXJEZXBlbmRlbmN5RXJyb3IuY3JlYXRlRXJyb3Ioc2VydmljZXMpKSk7XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIGlmICghdGhpcy5oYXNJbnN0YW5jZShpZGVudGlmaWVyKSkge1xuXHQgICAgICAgIGlmICghdGhpcy5oYXNEZWZpbml0aW9uKGlkZW50aWZpZXIpKSB7XG5cdCAgICAgICAgICB2YXIgcmVzdWx0ID0gdGhpcy5fbG9jYXRlSW5zdGFuY2UoaWRlbnRpZmllcik7XG5cdFxuXHQgICAgICAgICAgaWYgKHVuZGVmaW5lZCAhPT0gcmVzdWx0KSB7XG5cdCAgICAgICAgICAgIC8qKlxuXHQgICAgICAgICAgICAgKiBJbiBjYXNlIGxvY2F0ZSBpbnN0YW5jZSByZXR1cm5zIGEgcHJvbWlzZSwgcmVzb2x2ZSBwcm9taXNlXG5cdCAgICAgICAgICAgICAqL1xuXHQgICAgICAgICAgICByZXR1cm4gX3JlZjI1KFByb21pc2UucmVzb2x2ZShyZXN1bHQpLnRoZW4oZnVuY3Rpb24gKGluc3RhbmNlKSB7XG5cdCAgICAgICAgICAgICAgZnVuY3Rpb24gX3JlZjI2KF9pZDI2KSB7XG5cdCAgICAgICAgICAgICAgICBpZiAoIShfaWQyNiBpbnN0YW5jZW9mIFByb21pc2UpKSB7XG5cdCAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0Z1bmN0aW9uIHJldHVybiB2YWx1ZSB2aW9sYXRlcyBjb250cmFjdC5cXG5cXG5FeHBlY3RlZDpcXG5Qcm9taXNlPFNlcnZpY2UgfCBVbmRlZmluZWRTZXJ2aWNlRGVmaW5pdGlvbkFuZEluc3RhbmNlRXJyb3I+XFxuXFxuR290OlxcbicgKyBfaW5zcGVjdChfaWQyNikpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHRcblx0ICAgICAgICAgICAgICAgIHJldHVybiBfaWQyNjtcblx0ICAgICAgICAgICAgICB9XG5cdFxuXHQgICAgICAgICAgICAgIGlmICghKGluc3RhbmNlID09IG51bGwgfHwgU2VydmljZShpbnN0YW5jZSkpKSB7XG5cdCAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdWYWx1ZSBvZiBhcmd1bWVudCBcImluc3RhbmNlXCIgdmlvbGF0ZXMgY29udHJhY3QuXFxuXFxuRXhwZWN0ZWQ6XFxuP1NlcnZpY2VcXG5cXG5Hb3Q6XFxuJyArIF9pbnNwZWN0KGluc3RhbmNlKSk7XG5cdCAgICAgICAgICAgICAgfVxuXHRcblx0ICAgICAgICAgICAgICBpZiAodW5kZWZpbmVkID09PSBpbnN0YW5jZSkge1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuIF9yZWYyNihQcm9taXNlLnJlamVjdChfZXJyb3JzLlVuZGVmaW5lZFNlcnZpY2VEZWZpbml0aW9uQW5kSW5zdGFuY2VFcnJvci5jcmVhdGVFcnJvcihpZGVudGlmaWVyKSkpO1xuXHQgICAgICAgICAgICAgIH1cblx0XG5cdCAgICAgICAgICAgICAgcmV0dXJuIF9yZWYyNihQcm9taXNlLnJlc29sdmUoaW5zdGFuY2UpKTtcblx0ICAgICAgICAgICAgfSkpO1xuXHQgICAgICAgICAgfVxuXHRcblx0ICAgICAgICAgIHJldHVybiBfcmVmMjUoUHJvbWlzZS5yZWplY3QoX2Vycm9ycy5VbmRlZmluZWRTZXJ2aWNlRGVmaW5pdGlvbkFuZEluc3RhbmNlRXJyb3IuY3JlYXRlRXJyb3IoaWRlbnRpZmllcikpKTtcblx0ICAgICAgICB9XG5cdFxuXHQgICAgICAgIGxvYWRpbmcub2JqW2lkZW50aWZpZXJdID0gdHJ1ZTtcblx0ICAgICAgICBsb2FkaW5nLmFyci5wdXNoKGlkZW50aWZpZXIpO1xuXHRcblx0ICAgICAgICB0cnkge1xuXHQgICAgICAgICAgdmFyIHByb21pc2UgPSB0aGlzLl9pbnN0YW50aWF0ZShpZGVudGlmaWVyLCB0aGlzLmdldERlZmluaXRpb24oaWRlbnRpZmllciksIGxvYWRpbmcpO1xuXHRcblx0ICAgICAgICAgIHRoaXMuX3NlcnZpY2VEZWZpbml0aW9uc0FscmVhZHlVc2VkVG9JbnN0YW50aWF0ZUJ5SWRlbnRpZmllcltpZGVudGlmaWVyXSA9IHRydWU7XG5cdFxuXHQgICAgICAgICAgdGhpcy5fc2VydmljZXNCeUlkZW50aWZpZXJbaWRlbnRpZmllcl0gPSBwcm9taXNlO1xuXHQgICAgICAgIH0gY2F0Y2ggKGUpIHtcblx0ICAgICAgICAgIHJldHVybiBfcmVmMjUoUHJvbWlzZS5yZWplY3QoZSkpO1xuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHRcblx0ICAgICAgcmV0dXJuIF9yZWYyNShQcm9taXNlLnJlc29sdmUodGhpcy5fc2VydmljZXNCeUlkZW50aWZpZXJbaWRlbnRpZmllcl0pKTtcblx0ICAgIH1cblx0XG5cdCAgICAvKipcblx0ICAgICAqIE1ha2VzIGEgZGVlcCBjb3B5IG9mIGxvYWRpbmcgb2JqZWN0IHNvIGFzIG5vdCB0byBtb2RpZnkgaXQgYnkgcmVmZXJlbmNlLlxuXHQgICAgICpcblx0ICAgICAqIEBwYXJhbSB7TG9hZGluZ09iamVjdH0gbG9hZGluZyBsb2FkaW5nIG9iamVjdCBpbnN0YW5jZVxuXHQgICAgICpcblx0ICAgICAqIEByZXR1cm5zIHtMb2FkaW5nT2JqZWN0fSBsb2FkaW5nIGEgZGVlcCBjb3B5IG9mIHRoZSBvcmlnaW5hbCBsb2FkaW5nIHBhcmFtZXRlclxuXHQgICAgICpcblx0ICAgICAqIEBwcml2YXRlXG5cdCAgICAgKi9cblx0XG5cdCAgfV0sIFt7XG5cdCAgICBrZXk6ICdfZGVlcENvcHlMb2FkaW5nJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBfZGVlcENvcHlMb2FkaW5nKGxvYWRpbmcpIHtcblx0ICAgICAgZnVuY3Rpb24gX3JlZjI3KF9pZDI3KSB7XG5cdCAgICAgICAgaWYgKCFMb2FkaW5nT2JqZWN0KF9pZDI3KSkge1xuXHQgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRnVuY3Rpb24gcmV0dXJuIHZhbHVlIHZpb2xhdGVzIGNvbnRyYWN0LlxcblxcbkV4cGVjdGVkOlxcbkxvYWRpbmdPYmplY3RcXG5cXG5Hb3Q6XFxuJyArIF9pbnNwZWN0KF9pZDI3KSk7XG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICByZXR1cm4gX2lkMjc7XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIGlmICghTG9hZGluZ09iamVjdChsb2FkaW5nKSkge1xuXHQgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1ZhbHVlIG9mIGFyZ3VtZW50IFwibG9hZGluZ1wiIHZpb2xhdGVzIGNvbnRyYWN0LlxcblxcbkV4cGVjdGVkOlxcbkxvYWRpbmdPYmplY3RcXG5cXG5Hb3Q6XFxuJyArIF9pbnNwZWN0KGxvYWRpbmcpKTtcblx0ICAgICAgfVxuXHRcblx0ICAgICAgdmFyIG5ld0xvYWRpbmcgPSB7XG5cdCAgICAgICAgb2JqOiB7fSxcblx0ICAgICAgICBhcnI6IFtdLmNvbmNhdChsb2FkaW5nLmFycilcblx0ICAgICAgfTtcblx0XG5cdCAgICAgIGZvciAodmFyIGkgaW4gbG9hZGluZy5vYmopIHtcblx0ICAgICAgICBpZiAobG9hZGluZy5vYmouaGFzT3duUHJvcGVydHkoaSkpIHtcblx0ICAgICAgICAgIG5ld0xvYWRpbmcub2JqW2ldID0gbG9hZGluZy5vYmpbaV07XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdFxuXHQgICAgICByZXR1cm4gX3JlZjI3KG5ld0xvYWRpbmcpO1xuXHQgICAgfVxuXHQgIH1dKTtcblx0XG5cdCAgcmV0dXJuIENvbnRhaW5lcjtcblx0fSgpO1xuXHRcblx0ZXhwb3J0cy5kZWZhdWx0ID0gQ29udGFpbmVyO1xuXHRcblx0ZnVuY3Rpb24gX2luc3BlY3QoaW5wdXQsIGRlcHRoKSB7XG5cdCAgdmFyIG1heERlcHRoID0gNDtcblx0ICB2YXIgbWF4S2V5cyA9IDE1O1xuXG5cdCAgaWYgKGRlcHRoID09PSB1bmRlZmluZWQpIHtcblx0ICAgIGRlcHRoID0gMDtcblx0ICB9XG5cblx0ICBkZXB0aCArPSAxO1xuXG5cdCAgaWYgKGlucHV0ID09PSBudWxsKSB7XG5cdCAgICByZXR1cm4gJ251bGwnO1xuXHQgIH0gZWxzZSBpZiAoaW5wdXQgPT09IHVuZGVmaW5lZCkge1xuXHQgICAgcmV0dXJuICd2b2lkJztcblx0ICB9IGVsc2UgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIGlucHV0ID09PSAnbnVtYmVyJyB8fCB0eXBlb2YgaW5wdXQgPT09ICdib29sZWFuJykge1xuXHQgICAgcmV0dXJuIHR5cGVvZiBpbnB1dCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YoaW5wdXQpO1xuXHQgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShpbnB1dCkpIHtcblx0ICAgIGlmIChpbnB1dC5sZW5ndGggPiAwKSB7XG5cdCAgICAgIHZhciBfcmV0ID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIGlmIChkZXB0aCA+IG1heERlcHRoKSByZXR1cm4ge1xuXHQgICAgICAgICAgICB2OiAnWy4uLl0nXG5cdCAgICAgICAgICB9O1xuXG5cdCAgICAgICAgdmFyIGZpcnN0ID0gX2luc3BlY3QoaW5wdXRbMF0sIGRlcHRoKTtcblxuXHQgICAgICAgIGlmIChpbnB1dC5ldmVyeShmdW5jdGlvbiAoaXRlbSkge1xuXHQgICAgICAgICAgcmV0dXJuIF9pbnNwZWN0KGl0ZW0sIGRlcHRoKSA9PT0gZmlyc3Q7XG5cdCAgICAgICAgfSkpIHtcblx0ICAgICAgICAgIHJldHVybiB7XG5cdCAgICAgICAgICAgIHY6IGZpcnN0LnRyaW0oKSArICdbXSdcblx0ICAgICAgICAgIH07XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgIHJldHVybiB7XG5cdCAgICAgICAgICAgIHY6ICdbJyArIGlucHV0LnNsaWNlKDAsIG1heEtleXMpLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuXHQgICAgICAgICAgICAgIHJldHVybiBfaW5zcGVjdChpdGVtLCBkZXB0aCk7XG5cdCAgICAgICAgICAgIH0pLmpvaW4oJywgJykgKyAoaW5wdXQubGVuZ3RoID49IG1heEtleXMgPyAnLCAuLi4nIDogJycpICsgJ10nXG5cdCAgICAgICAgICB9O1xuXHQgICAgICAgIH1cblx0ICAgICAgfSgpO1xuXG5cdCAgICAgIGlmICgodHlwZW9mIF9yZXQgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKF9yZXQpKSA9PT0gXCJvYmplY3RcIikgcmV0dXJuIF9yZXQudjtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIHJldHVybiAnQXJyYXknO1xuXHQgICAgfVxuXHQgIH0gZWxzZSB7XG5cdCAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGlucHV0KTtcblxuXHQgICAgaWYgKCFrZXlzLmxlbmd0aCkge1xuXHQgICAgICBpZiAoaW5wdXQuY29uc3RydWN0b3IgJiYgaW5wdXQuY29uc3RydWN0b3IubmFtZSAmJiBpbnB1dC5jb25zdHJ1Y3Rvci5uYW1lICE9PSAnT2JqZWN0Jykge1xuXHQgICAgICAgIHJldHVybiBpbnB1dC5jb25zdHJ1Y3Rvci5uYW1lO1xuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIHJldHVybiAnT2JqZWN0Jztcblx0ICAgICAgfVxuXHQgICAgfVxuXG5cdCAgICBpZiAoZGVwdGggPiBtYXhEZXB0aCkgcmV0dXJuICd7Li4ufSc7XG5cdCAgICB2YXIgaW5kZW50ID0gJyAgJy5yZXBlYXQoZGVwdGggLSAxKTtcblx0ICAgIHZhciBlbnRyaWVzID0ga2V5cy5zbGljZSgwLCBtYXhLZXlzKS5tYXAoZnVuY3Rpb24gKGtleSkge1xuXHQgICAgICByZXR1cm4gKC9eKFtBLVpfJF1bQS1aMC05XyRdKikkL2kudGVzdChrZXkpID8ga2V5IDogSlNPTi5zdHJpbmdpZnkoa2V5KSkgKyAnOiAnICsgX2luc3BlY3QoaW5wdXRba2V5XSwgZGVwdGgpICsgJzsnO1xuXHQgICAgfSkuam9pbignXFxuICAnICsgaW5kZW50KTtcblxuXHQgICAgaWYgKGtleXMubGVuZ3RoID49IG1heEtleXMpIHtcblx0ICAgICAgZW50cmllcyArPSAnXFxuICAnICsgaW5kZW50ICsgJy4uLic7XG5cdCAgICB9XG5cblx0ICAgIGlmIChpbnB1dC5jb25zdHJ1Y3RvciAmJiBpbnB1dC5jb25zdHJ1Y3Rvci5uYW1lICYmIGlucHV0LmNvbnN0cnVjdG9yLm5hbWUgIT09ICdPYmplY3QnKSB7XG5cdCAgICAgIHJldHVybiBpbnB1dC5jb25zdHJ1Y3Rvci5uYW1lICsgJyB7XFxuICAnICsgaW5kZW50ICsgZW50cmllcyArICdcXG4nICsgaW5kZW50ICsgJ30nO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgcmV0dXJuICd7XFxuICAnICsgaW5kZW50ICsgZW50cmllcyArICdcXG4nICsgaW5kZW50ICsgJ30nO1xuXHQgICAgfVxuXHQgIH1cblx0fVxuXG4vKioqLyB9LFxuLyogMiAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgdmFsdWU6IHRydWVcblx0fSk7XG5cdFxuXHR2YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cdFxuXHR2YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXHRcblx0dmFyIF9tZXRob2RDYWxsID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTtcblx0XG5cdHZhciBfbWV0aG9kQ2FsbDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9tZXRob2RDYWxsKTtcblx0XG5cdHZhciBfaW5qZWN0YWJsZUFyZ3VtZW50cyA9IF9fd2VicGFja19yZXF1aXJlX18oNCk7XG5cdFxuXHRmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXHRcblx0ZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblx0XG5cdHZhciBJbmplY3RhYmxlQXJndW1lbnRzID0gX2luamVjdGFibGVBcmd1bWVudHMuSW5qZWN0YWJsZUFyZ3VtZW50cztcblx0XG5cdC8qKlxuXHQgKiBAYXV0aG9yIEJlbmphbWluIE1pY2hhbHNraSA8YmVuamFtaW4ubWljaGFsc2tpQGdtYWlsLmNvbT5cblx0ICpcblx0ICogQHByaXZhdGVcblx0ICovXG5cdFxuXHR2YXIgRGVmaW5pdGlvbiA9IGZ1bmN0aW9uICgpIHtcblx0XG5cdCAgLyoqXG5cdCAgICogQ29uc3RydWN0b3Jcblx0ICAgKlxuXHQgICAqIEBwYXJhbSB7P0luamVjdGFibGVBcmd1bWVudHN9IFthcmdzPVtdXVxuXHQgICAqL1xuXHQgIGZ1bmN0aW9uIERlZmluaXRpb24oKSB7XG5cdCAgICB2YXIgYXJncyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogW107XG5cdFxuXHQgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIERlZmluaXRpb24pO1xuXHRcblx0ICAgIGlmICghKGFyZ3MgPT0gbnVsbCB8fCBJbmplY3RhYmxlQXJndW1lbnRzKGFyZ3MpKSkge1xuXHQgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdWYWx1ZSBvZiBhcmd1bWVudCBcImFyZ3NcIiB2aW9sYXRlcyBjb250cmFjdC5cXG5cXG5FeHBlY3RlZDpcXG4/SW5qZWN0YWJsZUFyZ3VtZW50c1xcblxcbkdvdDpcXG4nICsgX2luc3BlY3QoYXJncykpO1xuXHQgICAgfVxuXHRcblx0ICAgIHRoaXMuX21ldGhvZENhbGxzID0gW107XG5cdCAgICB0aGlzLl9hcmdzID0gYXJncztcblx0ICB9XG5cdFxuXHQgIC8qKlxuXHQgICAqIFNldHMgbWV0aG9kQ2FsbHNcblx0ICAgKlxuXHQgICAqIEBwYXJhbSB7QXJyYXk8TWV0aG9kQ2FsbD59IG1ldGhvZENhbGxzXG5cdCAgICovXG5cdFxuXHRcblx0ICBfY3JlYXRlQ2xhc3MoRGVmaW5pdGlvbiwgW3tcblx0ICAgIGtleTogJ21ldGhvZENhbGxzJyxcblx0ICAgIHNldDogZnVuY3Rpb24gc2V0KG1ldGhvZENhbGxzKSB7XG5cdCAgICAgIGlmICghKEFycmF5LmlzQXJyYXkobWV0aG9kQ2FsbHMpICYmIG1ldGhvZENhbGxzLmV2ZXJ5KGZ1bmN0aW9uIChpdGVtKSB7XG5cdCAgICAgICAgcmV0dXJuIGl0ZW0gaW5zdGFuY2VvZiBfbWV0aG9kQ2FsbDIuZGVmYXVsdDtcblx0ICAgICAgfSkpKSB7XG5cdCAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVmFsdWUgb2YgYXJndW1lbnQgXCJtZXRob2RDYWxsc1wiIHZpb2xhdGVzIGNvbnRyYWN0LlxcblxcbkV4cGVjdGVkOlxcbkFycmF5PE1ldGhvZENhbGw+XFxuXFxuR290OlxcbicgKyBfaW5zcGVjdChtZXRob2RDYWxscykpO1xuXHQgICAgICB9XG5cdFxuXHQgICAgICB0aGlzLl9tZXRob2RDYWxscyA9IG1ldGhvZENhbGxzO1xuXHQgICAgfVxuXHRcblx0ICAgIC8qKlxuXHQgICAgICogR2V0cyBtZXRob2RDYWxsc1xuXHQgICAgICpcblx0ICAgICAqIEByZXR1cm5zIHtBcnJheTxNZXRob2RDYWxsPn1cblx0ICAgICAqL1xuXHQgICAgLFxuXHQgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdCAgICAgIGZ1bmN0aW9uIF9yZWYyKF9pZDIpIHtcblx0ICAgICAgICBpZiAoIShBcnJheS5pc0FycmF5KF9pZDIpICYmIF9pZDIuZXZlcnkoZnVuY3Rpb24gKGl0ZW0pIHtcblx0ICAgICAgICAgIHJldHVybiBpdGVtIGluc3RhbmNlb2YgX21ldGhvZENhbGwyLmRlZmF1bHQ7XG5cdCAgICAgICAgfSkpKSB7XG5cdCAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdGdW5jdGlvbiByZXR1cm4gdmFsdWUgdmlvbGF0ZXMgY29udHJhY3QuXFxuXFxuRXhwZWN0ZWQ6XFxuQXJyYXk8TWV0aG9kQ2FsbD5cXG5cXG5Hb3Q6XFxuJyArIF9pbnNwZWN0KF9pZDIpKTtcblx0ICAgICAgICB9XG5cdFxuXHQgICAgICAgIHJldHVybiBfaWQyO1xuXHQgICAgICB9XG5cdFxuXHQgICAgICByZXR1cm4gX3JlZjIodGhpcy5fbWV0aG9kQ2FsbHMpO1xuXHQgICAgfVxuXHRcblx0ICAgIC8qKlxuXHQgICAgICogR2V0cyBhcmdzXG5cdCAgICAgKlxuXHQgICAgICogQHJldHVybnMge0luamVjdGFibGVBcmd1bWVudHN9XG5cdCAgICAgKi9cblx0XG5cdCAgfSwge1xuXHQgICAga2V5OiAnYXJncycsXG5cdCAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcblx0ICAgICAgZnVuY3Rpb24gX3JlZjMoX2lkMykge1xuXHQgICAgICAgIGlmICghSW5qZWN0YWJsZUFyZ3VtZW50cyhfaWQzKSkge1xuXHQgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRnVuY3Rpb24gcmV0dXJuIHZhbHVlIHZpb2xhdGVzIGNvbnRyYWN0LlxcblxcbkV4cGVjdGVkOlxcbkluamVjdGFibGVBcmd1bWVudHNcXG5cXG5Hb3Q6XFxuJyArIF9pbnNwZWN0KF9pZDMpKTtcblx0ICAgICAgICB9XG5cdFxuXHQgICAgICAgIHJldHVybiBfaWQzO1xuXHQgICAgICB9XG5cdFxuXHQgICAgICByZXR1cm4gX3JlZjModGhpcy5fYXJncyk7XG5cdCAgICB9XG5cdCAgfV0pO1xuXHRcblx0ICByZXR1cm4gRGVmaW5pdGlvbjtcblx0fSgpO1xuXHRcblx0ZXhwb3J0cy5kZWZhdWx0ID0gRGVmaW5pdGlvbjtcblx0XG5cdGZ1bmN0aW9uIF9pbnNwZWN0KGlucHV0LCBkZXB0aCkge1xuXHQgIHZhciBtYXhEZXB0aCA9IDQ7XG5cdCAgdmFyIG1heEtleXMgPSAxNTtcblxuXHQgIGlmIChkZXB0aCA9PT0gdW5kZWZpbmVkKSB7XG5cdCAgICBkZXB0aCA9IDA7XG5cdCAgfVxuXG5cdCAgZGVwdGggKz0gMTtcblxuXHQgIGlmIChpbnB1dCA9PT0gbnVsbCkge1xuXHQgICAgcmV0dXJuICdudWxsJztcblx0ICB9IGVsc2UgaWYgKGlucHV0ID09PSB1bmRlZmluZWQpIHtcblx0ICAgIHJldHVybiAndm9pZCc7XG5cdCAgfSBlbHNlIGlmICh0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBpbnB1dCA9PT0gJ251bWJlcicgfHwgdHlwZW9mIGlucHV0ID09PSAnYm9vbGVhbicpIHtcblx0ICAgIHJldHVybiB0eXBlb2YgaW5wdXQgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKGlucHV0KTtcblx0ICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoaW5wdXQpKSB7XG5cdCAgICBpZiAoaW5wdXQubGVuZ3RoID4gMCkge1xuXHQgICAgICB2YXIgX3JldCA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICBpZiAoZGVwdGggPiBtYXhEZXB0aCkgcmV0dXJuIHtcblx0ICAgICAgICAgICAgdjogJ1suLi5dJ1xuXHQgICAgICAgICAgfTtcblxuXHQgICAgICAgIHZhciBmaXJzdCA9IF9pbnNwZWN0KGlucHV0WzBdLCBkZXB0aCk7XG5cblx0ICAgICAgICBpZiAoaW5wdXQuZXZlcnkoZnVuY3Rpb24gKGl0ZW0pIHtcblx0ICAgICAgICAgIHJldHVybiBfaW5zcGVjdChpdGVtLCBkZXB0aCkgPT09IGZpcnN0O1xuXHQgICAgICAgIH0pKSB7XG5cdCAgICAgICAgICByZXR1cm4ge1xuXHQgICAgICAgICAgICB2OiBmaXJzdC50cmltKCkgKyAnW10nXG5cdCAgICAgICAgICB9O1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICByZXR1cm4ge1xuXHQgICAgICAgICAgICB2OiAnWycgKyBpbnB1dC5zbGljZSgwLCBtYXhLZXlzKS5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcblx0ICAgICAgICAgICAgICByZXR1cm4gX2luc3BlY3QoaXRlbSwgZGVwdGgpO1xuXHQgICAgICAgICAgICB9KS5qb2luKCcsICcpICsgKGlucHV0Lmxlbmd0aCA+PSBtYXhLZXlzID8gJywgLi4uJyA6ICcnKSArICddJ1xuXHQgICAgICAgICAgfTtcblx0ICAgICAgICB9XG5cdCAgICAgIH0oKTtcblxuXHQgICAgICBpZiAoKHR5cGVvZiBfcmV0ID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihfcmV0KSkgPT09IFwib2JqZWN0XCIpIHJldHVybiBfcmV0LnY7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICByZXR1cm4gJ0FycmF5Jztcblx0ICAgIH1cblx0ICB9IGVsc2Uge1xuXHQgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhpbnB1dCk7XG5cblx0ICAgIGlmICgha2V5cy5sZW5ndGgpIHtcblx0ICAgICAgaWYgKGlucHV0LmNvbnN0cnVjdG9yICYmIGlucHV0LmNvbnN0cnVjdG9yLm5hbWUgJiYgaW5wdXQuY29uc3RydWN0b3IubmFtZSAhPT0gJ09iamVjdCcpIHtcblx0ICAgICAgICByZXR1cm4gaW5wdXQuY29uc3RydWN0b3IubmFtZTtcblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICByZXR1cm4gJ09iamVjdCc7XG5cdCAgICAgIH1cblx0ICAgIH1cblxuXHQgICAgaWYgKGRlcHRoID4gbWF4RGVwdGgpIHJldHVybiAney4uLn0nO1xuXHQgICAgdmFyIGluZGVudCA9ICcgICcucmVwZWF0KGRlcHRoIC0gMSk7XG5cdCAgICB2YXIgZW50cmllcyA9IGtleXMuc2xpY2UoMCwgbWF4S2V5cykubWFwKGZ1bmN0aW9uIChrZXkpIHtcblx0ICAgICAgcmV0dXJuICgvXihbQS1aXyRdW0EtWjAtOV8kXSopJC9pLnRlc3Qoa2V5KSA/IGtleSA6IEpTT04uc3RyaW5naWZ5KGtleSkpICsgJzogJyArIF9pbnNwZWN0KGlucHV0W2tleV0sIGRlcHRoKSArICc7Jztcblx0ICAgIH0pLmpvaW4oJ1xcbiAgJyArIGluZGVudCk7XG5cblx0ICAgIGlmIChrZXlzLmxlbmd0aCA+PSBtYXhLZXlzKSB7XG5cdCAgICAgIGVudHJpZXMgKz0gJ1xcbiAgJyArIGluZGVudCArICcuLi4nO1xuXHQgICAgfVxuXG5cdCAgICBpZiAoaW5wdXQuY29uc3RydWN0b3IgJiYgaW5wdXQuY29uc3RydWN0b3IubmFtZSAmJiBpbnB1dC5jb25zdHJ1Y3Rvci5uYW1lICE9PSAnT2JqZWN0Jykge1xuXHQgICAgICByZXR1cm4gaW5wdXQuY29uc3RydWN0b3IubmFtZSArICcge1xcbiAgJyArIGluZGVudCArIGVudHJpZXMgKyAnXFxuJyArIGluZGVudCArICd9Jztcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIHJldHVybiAne1xcbiAgJyArIGluZGVudCArIGVudHJpZXMgKyAnXFxuJyArIGluZGVudCArICd9Jztcblx0ICAgIH1cblx0ICB9XG5cdH1cblxuLyoqKi8gfSxcbi8qIDMgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHQgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRcblx0dmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXHRcblx0dmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblx0XG5cdHZhciBfaW5qZWN0YWJsZUFyZ3VtZW50cyA9IF9fd2VicGFja19yZXF1aXJlX18oNCk7XG5cdFxuXHRmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXHRcblx0dmFyIEluamVjdGFibGVBcmd1bWVudHMgPSBfaW5qZWN0YWJsZUFyZ3VtZW50cy5JbmplY3RhYmxlQXJndW1lbnRzO1xuXHRcblx0LyoqXG5cdCAqIEBhdXRob3IgQmVuamFtaW4gTWljaGFsc2tpIDxiZW5qYW1pbi5taWNoYWxza2lAZ21haWwuY29tPlxuXHQgKlxuXHQgKiBAcHVibGljXG5cdCAqL1xuXHRcblx0dmFyIE1ldGhvZENhbGwgPSBmdW5jdGlvbiAoKSB7XG5cdFxuXHQgIC8qKlxuXHQgICAqIENvbnN0cnVjdG9yXG5cdCAgICpcblx0ICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBtZXRob2QgbmFtZVxuXHQgICAqIEBwYXJhbSB7P0luamVjdGFibGVBcmd1bWVudHN9IFthcmdzPVtdXVxuXHQgICAqXG5cdCAgICogQHB1YmxpY1xuXHQgICAqL1xuXHQgIGZ1bmN0aW9uIE1ldGhvZENhbGwobmFtZSkge1xuXHQgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IFtdO1xuXHRcblx0ICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBNZXRob2RDYWxsKTtcblx0XG5cdCAgICBpZiAoISh0eXBlb2YgbmFtZSA9PT0gJ3N0cmluZycpKSB7XG5cdCAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1ZhbHVlIG9mIGFyZ3VtZW50IFwibmFtZVwiIHZpb2xhdGVzIGNvbnRyYWN0LlxcblxcbkV4cGVjdGVkOlxcbnN0cmluZ1xcblxcbkdvdDpcXG4nICsgX2luc3BlY3QobmFtZSkpO1xuXHQgICAgfVxuXHRcblx0ICAgIGlmICghKGFyZ3MgPT0gbnVsbCB8fCBJbmplY3RhYmxlQXJndW1lbnRzKGFyZ3MpKSkge1xuXHQgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdWYWx1ZSBvZiBhcmd1bWVudCBcImFyZ3NcIiB2aW9sYXRlcyBjb250cmFjdC5cXG5cXG5FeHBlY3RlZDpcXG4/SW5qZWN0YWJsZUFyZ3VtZW50c1xcblxcbkdvdDpcXG4nICsgX2luc3BlY3QoYXJncykpO1xuXHQgICAgfVxuXHRcblx0ICAgIHRoaXMuX25hbWUgPSBuYW1lO1xuXHQgICAgdGhpcy5fYXJncyA9IGFyZ3M7XG5cdCAgfVxuXHRcblx0ICAvKipcblx0ICAgKiBHZXRzIG5hbWVcblx0ICAgKlxuXHQgICAqIEByZXR1cm5zIHtzdHJpbmd9XG5cdCAgICpcblx0ICAgKiBAcHVibGljXG5cdCAgICovXG5cdFxuXHRcblx0ICBfY3JlYXRlQ2xhc3MoTWV0aG9kQ2FsbCwgW3tcblx0ICAgIGtleTogJ25hbWUnLFxuXHQgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdCAgICAgIGZ1bmN0aW9uIF9yZWYoX2lkKSB7XG5cdCAgICAgICAgaWYgKCEodHlwZW9mIF9pZCA9PT0gJ3N0cmluZycpKSB7XG5cdCAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdGdW5jdGlvbiByZXR1cm4gdmFsdWUgdmlvbGF0ZXMgY29udHJhY3QuXFxuXFxuRXhwZWN0ZWQ6XFxuc3RyaW5nXFxuXFxuR290OlxcbicgKyBfaW5zcGVjdChfaWQpKTtcblx0ICAgICAgICB9XG5cdFxuXHQgICAgICAgIHJldHVybiBfaWQ7XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIHJldHVybiBfcmVmKHRoaXMuX25hbWUpO1xuXHQgICAgfVxuXHRcblx0ICAgIC8qKlxuXHQgICAgICogR2V0cyBhcmdzXG5cdCAgICAgKlxuXHQgICAgICogQHJldHVybnMge0luamVjdGFibGVBcmd1bWVudHN9XG5cdCAgICAgKlxuXHQgICAgICogQHB1YmxpY1xuXHQgICAgICovXG5cdFxuXHQgIH0sIHtcblx0ICAgIGtleTogJ2FyZ3MnLFxuXHQgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdCAgICAgIGZ1bmN0aW9uIF9yZWYyKF9pZDIpIHtcblx0ICAgICAgICBpZiAoIUluamVjdGFibGVBcmd1bWVudHMoX2lkMikpIHtcblx0ICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0Z1bmN0aW9uIHJldHVybiB2YWx1ZSB2aW9sYXRlcyBjb250cmFjdC5cXG5cXG5FeHBlY3RlZDpcXG5JbmplY3RhYmxlQXJndW1lbnRzXFxuXFxuR290OlxcbicgKyBfaW5zcGVjdChfaWQyKSk7XG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICByZXR1cm4gX2lkMjtcblx0ICAgICAgfVxuXHRcblx0ICAgICAgcmV0dXJuIF9yZWYyKHRoaXMuX2FyZ3MpO1xuXHQgICAgfVxuXHQgIH1dKTtcblx0XG5cdCAgcmV0dXJuIE1ldGhvZENhbGw7XG5cdH0oKTtcblx0XG5cdGV4cG9ydHMuZGVmYXVsdCA9IE1ldGhvZENhbGw7XG5cdFxuXHRmdW5jdGlvbiBfaW5zcGVjdChpbnB1dCwgZGVwdGgpIHtcblx0ICB2YXIgbWF4RGVwdGggPSA0O1xuXHQgIHZhciBtYXhLZXlzID0gMTU7XG5cblx0ICBpZiAoZGVwdGggPT09IHVuZGVmaW5lZCkge1xuXHQgICAgZGVwdGggPSAwO1xuXHQgIH1cblxuXHQgIGRlcHRoICs9IDE7XG5cblx0ICBpZiAoaW5wdXQgPT09IG51bGwpIHtcblx0ICAgIHJldHVybiAnbnVsbCc7XG5cdCAgfSBlbHNlIGlmIChpbnB1dCA9PT0gdW5kZWZpbmVkKSB7XG5cdCAgICByZXR1cm4gJ3ZvaWQnO1xuXHQgIH0gZWxzZSBpZiAodHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgaW5wdXQgPT09ICdudW1iZXInIHx8IHR5cGVvZiBpbnB1dCA9PT0gJ2Jvb2xlYW4nKSB7XG5cdCAgICByZXR1cm4gdHlwZW9mIGlucHV0ID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihpbnB1dCk7XG5cdCAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGlucHV0KSkge1xuXHQgICAgaWYgKGlucHV0Lmxlbmd0aCA+IDApIHtcblx0ICAgICAgdmFyIF9yZXQgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgaWYgKGRlcHRoID4gbWF4RGVwdGgpIHJldHVybiB7XG5cdCAgICAgICAgICAgIHY6ICdbLi4uXSdcblx0ICAgICAgICAgIH07XG5cblx0ICAgICAgICB2YXIgZmlyc3QgPSBfaW5zcGVjdChpbnB1dFswXSwgZGVwdGgpO1xuXG5cdCAgICAgICAgaWYgKGlucHV0LmV2ZXJ5KGZ1bmN0aW9uIChpdGVtKSB7XG5cdCAgICAgICAgICByZXR1cm4gX2luc3BlY3QoaXRlbSwgZGVwdGgpID09PSBmaXJzdDtcblx0ICAgICAgICB9KSkge1xuXHQgICAgICAgICAgcmV0dXJuIHtcblx0ICAgICAgICAgICAgdjogZmlyc3QudHJpbSgpICsgJ1tdJ1xuXHQgICAgICAgICAgfTtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgcmV0dXJuIHtcblx0ICAgICAgICAgICAgdjogJ1snICsgaW5wdXQuc2xpY2UoMCwgbWF4S2V5cykubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG5cdCAgICAgICAgICAgICAgcmV0dXJuIF9pbnNwZWN0KGl0ZW0sIGRlcHRoKTtcblx0ICAgICAgICAgICAgfSkuam9pbignLCAnKSArIChpbnB1dC5sZW5ndGggPj0gbWF4S2V5cyA/ICcsIC4uLicgOiAnJykgKyAnXSdcblx0ICAgICAgICAgIH07XG5cdCAgICAgICAgfVxuXHQgICAgICB9KCk7XG5cblx0ICAgICAgaWYgKCh0eXBlb2YgX3JldCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YoX3JldCkpID09PSBcIm9iamVjdFwiKSByZXR1cm4gX3JldC52O1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgcmV0dXJuICdBcnJheSc7XG5cdCAgICB9XG5cdCAgfSBlbHNlIHtcblx0ICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoaW5wdXQpO1xuXG5cdCAgICBpZiAoIWtleXMubGVuZ3RoKSB7XG5cdCAgICAgIGlmIChpbnB1dC5jb25zdHJ1Y3RvciAmJiBpbnB1dC5jb25zdHJ1Y3Rvci5uYW1lICYmIGlucHV0LmNvbnN0cnVjdG9yLm5hbWUgIT09ICdPYmplY3QnKSB7XG5cdCAgICAgICAgcmV0dXJuIGlucHV0LmNvbnN0cnVjdG9yLm5hbWU7XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgcmV0dXJuICdPYmplY3QnO1xuXHQgICAgICB9XG5cdCAgICB9XG5cblx0ICAgIGlmIChkZXB0aCA+IG1heERlcHRoKSByZXR1cm4gJ3suLi59Jztcblx0ICAgIHZhciBpbmRlbnQgPSAnICAnLnJlcGVhdChkZXB0aCAtIDEpO1xuXHQgICAgdmFyIGVudHJpZXMgPSBrZXlzLnNsaWNlKDAsIG1heEtleXMpLm1hcChmdW5jdGlvbiAoa2V5KSB7XG5cdCAgICAgIHJldHVybiAoL14oW0EtWl8kXVtBLVowLTlfJF0qKSQvaS50ZXN0KGtleSkgPyBrZXkgOiBKU09OLnN0cmluZ2lmeShrZXkpKSArICc6ICcgKyBfaW5zcGVjdChpbnB1dFtrZXldLCBkZXB0aCkgKyAnOyc7XG5cdCAgICB9KS5qb2luKCdcXG4gICcgKyBpbmRlbnQpO1xuXG5cdCAgICBpZiAoa2V5cy5sZW5ndGggPj0gbWF4S2V5cykge1xuXHQgICAgICBlbnRyaWVzICs9ICdcXG4gICcgKyBpbmRlbnQgKyAnLi4uJztcblx0ICAgIH1cblxuXHQgICAgaWYgKGlucHV0LmNvbnN0cnVjdG9yICYmIGlucHV0LmNvbnN0cnVjdG9yLm5hbWUgJiYgaW5wdXQuY29uc3RydWN0b3IubmFtZSAhPT0gJ09iamVjdCcpIHtcblx0ICAgICAgcmV0dXJuIGlucHV0LmNvbnN0cnVjdG9yLm5hbWUgKyAnIHtcXG4gICcgKyBpbmRlbnQgKyBlbnRyaWVzICsgJ1xcbicgKyBpbmRlbnQgKyAnfSc7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICByZXR1cm4gJ3tcXG4gICcgKyBpbmRlbnQgKyBlbnRyaWVzICsgJ1xcbicgKyBpbmRlbnQgKyAnfSc7XG5cdCAgICB9XG5cdCAgfVxuXHR9XG5cbi8qKiovIH0sXG4vKiA0ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0ZXhwb3J0cy5JbmplY3RhYmxlQXJndW1lbnRzID0gdW5kZWZpbmVkO1xuXHRcblx0dmFyIF9yZWZlcmVuY2UgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpO1xuXHRcblx0dmFyIF9yZWZlcmVuY2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVmZXJlbmNlKTtcblx0XG5cdHZhciBfcGFyYW1ldGVyID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2KTtcblx0XG5cdHZhciBfcGFyYW1ldGVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3BhcmFtZXRlcik7XG5cdFxuXHRmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXHRcblx0dmFyIEluamVjdGFibGVBcmd1bWVudHMgPSBleHBvcnRzLkluamVjdGFibGVBcmd1bWVudHMgPSBmdW5jdGlvbiAoKSB7XG5cdCAgZnVuY3Rpb24gSW5qZWN0YWJsZUFyZ3VtZW50cyhpbnB1dCkge1xuXHQgICAgcmV0dXJuIEFycmF5LmlzQXJyYXkoaW5wdXQpICYmIGlucHV0LmV2ZXJ5KGZ1bmN0aW9uIChpdGVtKSB7XG5cdCAgICAgIHJldHVybiBpdGVtIGluc3RhbmNlb2YgX3JlZmVyZW5jZTIuZGVmYXVsdCB8fCBpdGVtIGluc3RhbmNlb2YgX3BhcmFtZXRlcjIuZGVmYXVsdDtcblx0ICAgIH0pO1xuXHQgIH1cblx0XG5cdCAgO1xuXHQgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShJbmplY3RhYmxlQXJndW1lbnRzLCBTeW1ib2wuaGFzSW5zdGFuY2UsIHtcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiB2YWx1ZShpbnB1dCkge1xuXHQgICAgICByZXR1cm4gSW5qZWN0YWJsZUFyZ3VtZW50cyhpbnB1dCk7XG5cdCAgICB9XG5cdCAgfSk7XG5cdCAgcmV0dXJuIEluamVjdGFibGVBcmd1bWVudHM7XG5cdH0oKTtcblxuLyoqKi8gfSxcbi8qIDUgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgdmFsdWU6IHRydWVcblx0fSk7XG5cdFxuXHR2YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cdFxuXHR2YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXHRcblx0ZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblx0XG5cdC8qKlxuXHQgKiBAYXV0aG9yIEJlbmphbWluIE1pY2hhbHNraSA8YmVuamFtaW4ubWljaGFsc2tpQGdtYWlsLmNvbT5cblx0ICpcblx0ICogQHB1YmxpY1xuXHQgKi9cblx0dmFyIFJlZmVyZW5jZSA9IGZ1bmN0aW9uICgpIHtcblx0XG5cdCAgLyoqXG5cdCAgICogQ29uc3RydWN0b3Jcblx0ICAgKiBcblx0ICAgKiBAcGFyYW0ge3N0cmluZ30gaWRcblx0ICAgKlxuXHQgICAqIEBwdWJsaWNcblx0ICAgKi9cblx0ICBmdW5jdGlvbiBSZWZlcmVuY2UoaWQpIHtcblx0ICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBSZWZlcmVuY2UpO1xuXHRcblx0ICAgIGlmICghKHR5cGVvZiBpZCA9PT0gJ3N0cmluZycpKSB7XG5cdCAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJWYWx1ZSBvZiBhcmd1bWVudCBcXFwiaWRcXFwiIHZpb2xhdGVzIGNvbnRyYWN0LlxcblxcbkV4cGVjdGVkOlxcbnN0cmluZ1xcblxcbkdvdDpcXG5cIiArIF9pbnNwZWN0KGlkKSk7XG5cdCAgICB9XG5cdFxuXHQgICAgdGhpcy5faWQgPSBpZDtcblx0ICB9XG5cdFxuXHQgIC8qKlxuXHQgICAqIEdldHMgaWRcblx0ICAgKlxuXHQgICAqIEByZXR1cm5zIHtzdHJpbmd9XG5cdCAgICpcblx0ICAgKiBAcHVibGljXG5cdCAgICovXG5cdFxuXHRcblx0ICBfY3JlYXRlQ2xhc3MoUmVmZXJlbmNlLCBbe1xuXHQgICAga2V5OiBcImlkXCIsXG5cdCAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcblx0ICAgICAgZnVuY3Rpb24gX3JlZihfaWQpIHtcblx0ICAgICAgICBpZiAoISh0eXBlb2YgX2lkID09PSAnc3RyaW5nJykpIHtcblx0ICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJGdW5jdGlvbiByZXR1cm4gdmFsdWUgdmlvbGF0ZXMgY29udHJhY3QuXFxuXFxuRXhwZWN0ZWQ6XFxuc3RyaW5nXFxuXFxuR290OlxcblwiICsgX2luc3BlY3QoX2lkKSk7XG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICByZXR1cm4gX2lkO1xuXHQgICAgICB9XG5cdFxuXHQgICAgICByZXR1cm4gX3JlZih0aGlzLl9pZCk7XG5cdCAgICB9XG5cdCAgfV0pO1xuXHRcblx0ICByZXR1cm4gUmVmZXJlbmNlO1xuXHR9KCk7XG5cdFxuXHRleHBvcnRzLmRlZmF1bHQgPSBSZWZlcmVuY2U7XG5cdFxuXHRmdW5jdGlvbiBfaW5zcGVjdChpbnB1dCwgZGVwdGgpIHtcblx0ICB2YXIgbWF4RGVwdGggPSA0O1xuXHQgIHZhciBtYXhLZXlzID0gMTU7XG5cblx0ICBpZiAoZGVwdGggPT09IHVuZGVmaW5lZCkge1xuXHQgICAgZGVwdGggPSAwO1xuXHQgIH1cblxuXHQgIGRlcHRoICs9IDE7XG5cblx0ICBpZiAoaW5wdXQgPT09IG51bGwpIHtcblx0ICAgIHJldHVybiAnbnVsbCc7XG5cdCAgfSBlbHNlIGlmIChpbnB1dCA9PT0gdW5kZWZpbmVkKSB7XG5cdCAgICByZXR1cm4gJ3ZvaWQnO1xuXHQgIH0gZWxzZSBpZiAodHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgaW5wdXQgPT09ICdudW1iZXInIHx8IHR5cGVvZiBpbnB1dCA9PT0gJ2Jvb2xlYW4nKSB7XG5cdCAgICByZXR1cm4gdHlwZW9mIGlucHV0ID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2YoaW5wdXQpO1xuXHQgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShpbnB1dCkpIHtcblx0ICAgIGlmIChpbnB1dC5sZW5ndGggPiAwKSB7XG5cdCAgICAgIHZhciBfcmV0ID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIGlmIChkZXB0aCA+IG1heERlcHRoKSByZXR1cm4ge1xuXHQgICAgICAgICAgICB2OiAnWy4uLl0nXG5cdCAgICAgICAgICB9O1xuXG5cdCAgICAgICAgdmFyIGZpcnN0ID0gX2luc3BlY3QoaW5wdXRbMF0sIGRlcHRoKTtcblxuXHQgICAgICAgIGlmIChpbnB1dC5ldmVyeShmdW5jdGlvbiAoaXRlbSkge1xuXHQgICAgICAgICAgcmV0dXJuIF9pbnNwZWN0KGl0ZW0sIGRlcHRoKSA9PT0gZmlyc3Q7XG5cdCAgICAgICAgfSkpIHtcblx0ICAgICAgICAgIHJldHVybiB7XG5cdCAgICAgICAgICAgIHY6IGZpcnN0LnRyaW0oKSArICdbXSdcblx0ICAgICAgICAgIH07XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgIHJldHVybiB7XG5cdCAgICAgICAgICAgIHY6ICdbJyArIGlucHV0LnNsaWNlKDAsIG1heEtleXMpLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuXHQgICAgICAgICAgICAgIHJldHVybiBfaW5zcGVjdChpdGVtLCBkZXB0aCk7XG5cdCAgICAgICAgICAgIH0pLmpvaW4oJywgJykgKyAoaW5wdXQubGVuZ3RoID49IG1heEtleXMgPyAnLCAuLi4nIDogJycpICsgJ10nXG5cdCAgICAgICAgICB9O1xuXHQgICAgICAgIH1cblx0ICAgICAgfSgpO1xuXG5cdCAgICAgIGlmICgodHlwZW9mIF9yZXQgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZihfcmV0KSkgPT09IFwib2JqZWN0XCIpIHJldHVybiBfcmV0LnY7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICByZXR1cm4gJ0FycmF5Jztcblx0ICAgIH1cblx0ICB9IGVsc2Uge1xuXHQgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhpbnB1dCk7XG5cblx0ICAgIGlmICgha2V5cy5sZW5ndGgpIHtcblx0ICAgICAgaWYgKGlucHV0LmNvbnN0cnVjdG9yICYmIGlucHV0LmNvbnN0cnVjdG9yLm5hbWUgJiYgaW5wdXQuY29uc3RydWN0b3IubmFtZSAhPT0gJ09iamVjdCcpIHtcblx0ICAgICAgICByZXR1cm4gaW5wdXQuY29uc3RydWN0b3IubmFtZTtcblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICByZXR1cm4gJ09iamVjdCc7XG5cdCAgICAgIH1cblx0ICAgIH1cblxuXHQgICAgaWYgKGRlcHRoID4gbWF4RGVwdGgpIHJldHVybiAney4uLn0nO1xuXHQgICAgdmFyIGluZGVudCA9ICcgICcucmVwZWF0KGRlcHRoIC0gMSk7XG5cdCAgICB2YXIgZW50cmllcyA9IGtleXMuc2xpY2UoMCwgbWF4S2V5cykubWFwKGZ1bmN0aW9uIChrZXkpIHtcblx0ICAgICAgcmV0dXJuICgvXihbQS1aXyRdW0EtWjAtOV8kXSopJC9pLnRlc3Qoa2V5KSA/IGtleSA6IEpTT04uc3RyaW5naWZ5KGtleSkpICsgJzogJyArIF9pbnNwZWN0KGlucHV0W2tleV0sIGRlcHRoKSArICc7Jztcblx0ICAgIH0pLmpvaW4oJ1xcbiAgJyArIGluZGVudCk7XG5cblx0ICAgIGlmIChrZXlzLmxlbmd0aCA+PSBtYXhLZXlzKSB7XG5cdCAgICAgIGVudHJpZXMgKz0gJ1xcbiAgJyArIGluZGVudCArICcuLi4nO1xuXHQgICAgfVxuXG5cdCAgICBpZiAoaW5wdXQuY29uc3RydWN0b3IgJiYgaW5wdXQuY29uc3RydWN0b3IubmFtZSAmJiBpbnB1dC5jb25zdHJ1Y3Rvci5uYW1lICE9PSAnT2JqZWN0Jykge1xuXHQgICAgICByZXR1cm4gaW5wdXQuY29uc3RydWN0b3IubmFtZSArICcge1xcbiAgJyArIGluZGVudCArIGVudHJpZXMgKyAnXFxuJyArIGluZGVudCArICd9Jztcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIHJldHVybiAne1xcbiAgJyArIGluZGVudCArIGVudHJpZXMgKyAnXFxuJyArIGluZGVudCArICd9Jztcblx0ICAgIH1cblx0ICB9XG5cdH1cblxuLyoqKi8gfSxcbi8qIDYgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgdmFsdWU6IHRydWVcblx0fSk7XG5cdFxuXHR2YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cdFxuXHR2YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXHRcblx0ZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblx0XG5cdC8qKlxuXHQgKiBAYXV0aG9yIEJlbmphbWluIE1pY2hhbHNraSA8YmVuamFtaW4ubWljaGFsc2tpQGdtYWlsLmNvbT5cblx0ICpcblx0ICogQHB1YmxpY1xuXHQgKi9cblx0dmFyIFBhcmFtZXRlciA9IGZ1bmN0aW9uICgpIHtcblx0XG5cdCAgLyoqXG5cdCAgICogQ29uc3RydWN0b3Jcblx0ICAgKlxuXHQgICAqIEBwYXJhbSB7c3RyaW5nfSBpZFxuXHQgICAqXG5cdCAgICogQHB1YmxpY1xuXHQgICAqL1xuXHQgIGZ1bmN0aW9uIFBhcmFtZXRlcihpZCkge1xuXHQgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFBhcmFtZXRlcik7XG5cdFxuXHQgICAgaWYgKCEodHlwZW9mIGlkID09PSAnc3RyaW5nJykpIHtcblx0ICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlZhbHVlIG9mIGFyZ3VtZW50IFxcXCJpZFxcXCIgdmlvbGF0ZXMgY29udHJhY3QuXFxuXFxuRXhwZWN0ZWQ6XFxuc3RyaW5nXFxuXFxuR290OlxcblwiICsgX2luc3BlY3QoaWQpKTtcblx0ICAgIH1cblx0XG5cdCAgICB0aGlzLl9pZCA9IGlkO1xuXHQgIH1cblx0XG5cdCAgLyoqXG5cdCAgICogR2V0cyBpZFxuXHQgICAqXG5cdCAgICogQHJldHVybnMge3N0cmluZ31cblx0ICAgKlxuXHQgICAqIEBwdWJsaWNcblx0ICAgKi9cblx0XG5cdFxuXHQgIF9jcmVhdGVDbGFzcyhQYXJhbWV0ZXIsIFt7XG5cdCAgICBrZXk6IFwiaWRcIixcblx0ICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuXHQgICAgICBmdW5jdGlvbiBfcmVmKF9pZCkge1xuXHQgICAgICAgIGlmICghKHR5cGVvZiBfaWQgPT09ICdzdHJpbmcnKSkge1xuXHQgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkZ1bmN0aW9uIHJldHVybiB2YWx1ZSB2aW9sYXRlcyBjb250cmFjdC5cXG5cXG5FeHBlY3RlZDpcXG5zdHJpbmdcXG5cXG5Hb3Q6XFxuXCIgKyBfaW5zcGVjdChfaWQpKTtcblx0ICAgICAgICB9XG5cdFxuXHQgICAgICAgIHJldHVybiBfaWQ7XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIHJldHVybiBfcmVmKHRoaXMuX2lkKTtcblx0ICAgIH1cblx0ICB9XSk7XG5cdFxuXHQgIHJldHVybiBQYXJhbWV0ZXI7XG5cdH0oKTtcblx0XG5cdGV4cG9ydHMuZGVmYXVsdCA9IFBhcmFtZXRlcjtcblx0XG5cdGZ1bmN0aW9uIF9pbnNwZWN0KGlucHV0LCBkZXB0aCkge1xuXHQgIHZhciBtYXhEZXB0aCA9IDQ7XG5cdCAgdmFyIG1heEtleXMgPSAxNTtcblxuXHQgIGlmIChkZXB0aCA9PT0gdW5kZWZpbmVkKSB7XG5cdCAgICBkZXB0aCA9IDA7XG5cdCAgfVxuXG5cdCAgZGVwdGggKz0gMTtcblxuXHQgIGlmIChpbnB1dCA9PT0gbnVsbCkge1xuXHQgICAgcmV0dXJuICdudWxsJztcblx0ICB9IGVsc2UgaWYgKGlucHV0ID09PSB1bmRlZmluZWQpIHtcblx0ICAgIHJldHVybiAndm9pZCc7XG5cdCAgfSBlbHNlIGlmICh0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBpbnB1dCA9PT0gJ251bWJlcicgfHwgdHlwZW9mIGlucHV0ID09PSAnYm9vbGVhbicpIHtcblx0ICAgIHJldHVybiB0eXBlb2YgaW5wdXQgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZihpbnB1dCk7XG5cdCAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGlucHV0KSkge1xuXHQgICAgaWYgKGlucHV0Lmxlbmd0aCA+IDApIHtcblx0ICAgICAgdmFyIF9yZXQgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgaWYgKGRlcHRoID4gbWF4RGVwdGgpIHJldHVybiB7XG5cdCAgICAgICAgICAgIHY6ICdbLi4uXSdcblx0ICAgICAgICAgIH07XG5cblx0ICAgICAgICB2YXIgZmlyc3QgPSBfaW5zcGVjdChpbnB1dFswXSwgZGVwdGgpO1xuXG5cdCAgICAgICAgaWYgKGlucHV0LmV2ZXJ5KGZ1bmN0aW9uIChpdGVtKSB7XG5cdCAgICAgICAgICByZXR1cm4gX2luc3BlY3QoaXRlbSwgZGVwdGgpID09PSBmaXJzdDtcblx0ICAgICAgICB9KSkge1xuXHQgICAgICAgICAgcmV0dXJuIHtcblx0ICAgICAgICAgICAgdjogZmlyc3QudHJpbSgpICsgJ1tdJ1xuXHQgICAgICAgICAgfTtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgcmV0dXJuIHtcblx0ICAgICAgICAgICAgdjogJ1snICsgaW5wdXQuc2xpY2UoMCwgbWF4S2V5cykubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG5cdCAgICAgICAgICAgICAgcmV0dXJuIF9pbnNwZWN0KGl0ZW0sIGRlcHRoKTtcblx0ICAgICAgICAgICAgfSkuam9pbignLCAnKSArIChpbnB1dC5sZW5ndGggPj0gbWF4S2V5cyA/ICcsIC4uLicgOiAnJykgKyAnXSdcblx0ICAgICAgICAgIH07XG5cdCAgICAgICAgfVxuXHQgICAgICB9KCk7XG5cblx0ICAgICAgaWYgKCh0eXBlb2YgX3JldCA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKF9yZXQpKSA9PT0gXCJvYmplY3RcIikgcmV0dXJuIF9yZXQudjtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIHJldHVybiAnQXJyYXknO1xuXHQgICAgfVxuXHQgIH0gZWxzZSB7XG5cdCAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGlucHV0KTtcblxuXHQgICAgaWYgKCFrZXlzLmxlbmd0aCkge1xuXHQgICAgICBpZiAoaW5wdXQuY29uc3RydWN0b3IgJiYgaW5wdXQuY29uc3RydWN0b3IubmFtZSAmJiBpbnB1dC5jb25zdHJ1Y3Rvci5uYW1lICE9PSAnT2JqZWN0Jykge1xuXHQgICAgICAgIHJldHVybiBpbnB1dC5jb25zdHJ1Y3Rvci5uYW1lO1xuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIHJldHVybiAnT2JqZWN0Jztcblx0ICAgICAgfVxuXHQgICAgfVxuXG5cdCAgICBpZiAoZGVwdGggPiBtYXhEZXB0aCkgcmV0dXJuICd7Li4ufSc7XG5cdCAgICB2YXIgaW5kZW50ID0gJyAgJy5yZXBlYXQoZGVwdGggLSAxKTtcblx0ICAgIHZhciBlbnRyaWVzID0ga2V5cy5zbGljZSgwLCBtYXhLZXlzKS5tYXAoZnVuY3Rpb24gKGtleSkge1xuXHQgICAgICByZXR1cm4gKC9eKFtBLVpfJF1bQS1aMC05XyRdKikkL2kudGVzdChrZXkpID8ga2V5IDogSlNPTi5zdHJpbmdpZnkoa2V5KSkgKyAnOiAnICsgX2luc3BlY3QoaW5wdXRba2V5XSwgZGVwdGgpICsgJzsnO1xuXHQgICAgfSkuam9pbignXFxuICAnICsgaW5kZW50KTtcblxuXHQgICAgaWYgKGtleXMubGVuZ3RoID49IG1heEtleXMpIHtcblx0ICAgICAgZW50cmllcyArPSAnXFxuICAnICsgaW5kZW50ICsgJy4uLic7XG5cdCAgICB9XG5cblx0ICAgIGlmIChpbnB1dC5jb25zdHJ1Y3RvciAmJiBpbnB1dC5jb25zdHJ1Y3Rvci5uYW1lICYmIGlucHV0LmNvbnN0cnVjdG9yLm5hbWUgIT09ICdPYmplY3QnKSB7XG5cdCAgICAgIHJldHVybiBpbnB1dC5jb25zdHJ1Y3Rvci5uYW1lICsgJyB7XFxuICAnICsgaW5kZW50ICsgZW50cmllcyArICdcXG4nICsgaW5kZW50ICsgJ30nO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgcmV0dXJuICd7XFxuICAnICsgaW5kZW50ICsgZW50cmllcyArICdcXG4nICsgaW5kZW50ICsgJ30nO1xuXHQgICAgfVxuXHQgIH1cblx0fVxuXG4vKioqLyB9LFxuLyogNyAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgdmFsdWU6IHRydWVcblx0fSk7XG5cdFxuXHR2YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cdFxuXHR2YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXHRcblx0dmFyIF9kZWZpbml0aW9uID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcblx0XG5cdHZhciBfZGVmaW5pdGlvbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kZWZpbml0aW9uKTtcblx0XG5cdHZhciBfaW5qZWN0YWJsZUFyZ3VtZW50cyA9IF9fd2VicGFja19yZXF1aXJlX18oNCk7XG5cdFxuXHRmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXHRcblx0ZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblx0XG5cdGZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXHRcblx0ZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cdFxuXHR2YXIgSW5qZWN0YWJsZUFyZ3VtZW50cyA9IF9pbmplY3RhYmxlQXJndW1lbnRzLkluamVjdGFibGVBcmd1bWVudHM7XG5cdFxuXHQvKipcblx0ICogQGF1dGhvciBCZW5qYW1pbiBNaWNoYWxza2kgPGJlbmphbWluLm1pY2hhbHNraUBnbWFpbC5jb20+XG5cdCAqXG5cdCAqIEBwdWJsaWNcblx0ICovXG5cdFxuXHR2YXIgQ2xhc3NDb25zdHJ1Y3RvckRlZmluaXRpb24gPSBmdW5jdGlvbiAoX0RlZmluaXRpb24pIHtcblx0ICBfaW5oZXJpdHMoQ2xhc3NDb25zdHJ1Y3RvckRlZmluaXRpb24sIF9EZWZpbml0aW9uKTtcblx0XG5cdCAgLyoqXG5cdCAgICogQ29uc3RydWN0b3Jcblx0ICAgKlxuXHQgICAqIEBwYXJhbSB7c3RyaW5nfSBjbGFzc0NvbnN0cnVjdG9ySWRlbnRpZmllclxuXHQgICAqIEBwYXJhbSB7P0luamVjdGFibGVBcmd1bWVudHN9IFthcmdzPVtdXVxuXHQgICAqL1xuXHQgIGZ1bmN0aW9uIENsYXNzQ29uc3RydWN0b3JEZWZpbml0aW9uKGNsYXNzQ29uc3RydWN0b3JJZGVudGlmaWVyKSB7XG5cdCAgICB2YXIgYXJncyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogW107XG5cdFxuXHQgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENsYXNzQ29uc3RydWN0b3JEZWZpbml0aW9uKTtcblx0XG5cdCAgICBpZiAoISh0eXBlb2YgY2xhc3NDb25zdHJ1Y3RvcklkZW50aWZpZXIgPT09ICdzdHJpbmcnKSkge1xuXHQgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdWYWx1ZSBvZiBhcmd1bWVudCBcImNsYXNzQ29uc3RydWN0b3JJZGVudGlmaWVyXCIgdmlvbGF0ZXMgY29udHJhY3QuXFxuXFxuRXhwZWN0ZWQ6XFxuc3RyaW5nXFxuXFxuR290OlxcbicgKyBfaW5zcGVjdChjbGFzc0NvbnN0cnVjdG9ySWRlbnRpZmllcikpO1xuXHQgICAgfVxuXHRcblx0ICAgIGlmICghKGFyZ3MgPT0gbnVsbCB8fCBJbmplY3RhYmxlQXJndW1lbnRzKGFyZ3MpKSkge1xuXHQgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdWYWx1ZSBvZiBhcmd1bWVudCBcImFyZ3NcIiB2aW9sYXRlcyBjb250cmFjdC5cXG5cXG5FeHBlY3RlZDpcXG4/SW5qZWN0YWJsZUFyZ3VtZW50c1xcblxcbkdvdDpcXG4nICsgX2luc3BlY3QoYXJncykpO1xuXHQgICAgfVxuXHRcblx0ICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChDbGFzc0NvbnN0cnVjdG9yRGVmaW5pdGlvbi5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKENsYXNzQ29uc3RydWN0b3JEZWZpbml0aW9uKSkuY2FsbCh0aGlzLCBhcmdzKSk7XG5cdFxuXHQgICAgX3RoaXMuX2NsYXNzQ29uc3RydWN0b3JJZGVudGlmaWVyID0gY2xhc3NDb25zdHJ1Y3RvcklkZW50aWZpZXI7XG5cdCAgICByZXR1cm4gX3RoaXM7XG5cdCAgfVxuXHRcblx0ICAvKipcblx0ICAgKiBHZXRzIGNsYXNzQ29uc3RydWN0b3JJZGVudGlmaWVyXG5cdCAgICpcblx0ICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuXHQgICAqL1xuXHRcblx0XG5cdCAgX2NyZWF0ZUNsYXNzKENsYXNzQ29uc3RydWN0b3JEZWZpbml0aW9uLCBbe1xuXHQgICAga2V5OiAnY2xhc3NDb25zdHJ1Y3RvcklkZW50aWZpZXInLFxuXHQgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdCAgICAgIGZ1bmN0aW9uIF9yZWYoX2lkKSB7XG5cdCAgICAgICAgaWYgKCEodHlwZW9mIF9pZCA9PT0gJ3N0cmluZycpKSB7XG5cdCAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdGdW5jdGlvbiByZXR1cm4gdmFsdWUgdmlvbGF0ZXMgY29udHJhY3QuXFxuXFxuRXhwZWN0ZWQ6XFxuc3RyaW5nXFxuXFxuR290OlxcbicgKyBfaW5zcGVjdChfaWQpKTtcblx0ICAgICAgICB9XG5cdFxuXHQgICAgICAgIHJldHVybiBfaWQ7XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIHJldHVybiBfcmVmKHRoaXMuX2NsYXNzQ29uc3RydWN0b3JJZGVudGlmaWVyKTtcblx0ICAgIH1cblx0ICB9XSk7XG5cdFxuXHQgIHJldHVybiBDbGFzc0NvbnN0cnVjdG9yRGVmaW5pdGlvbjtcblx0fShfZGVmaW5pdGlvbjIuZGVmYXVsdCk7XG5cdFxuXHRleHBvcnRzLmRlZmF1bHQgPSBDbGFzc0NvbnN0cnVjdG9yRGVmaW5pdGlvbjtcblx0XG5cdGZ1bmN0aW9uIF9pbnNwZWN0KGlucHV0LCBkZXB0aCkge1xuXHQgIHZhciBtYXhEZXB0aCA9IDQ7XG5cdCAgdmFyIG1heEtleXMgPSAxNTtcblxuXHQgIGlmIChkZXB0aCA9PT0gdW5kZWZpbmVkKSB7XG5cdCAgICBkZXB0aCA9IDA7XG5cdCAgfVxuXG5cdCAgZGVwdGggKz0gMTtcblxuXHQgIGlmIChpbnB1dCA9PT0gbnVsbCkge1xuXHQgICAgcmV0dXJuICdudWxsJztcblx0ICB9IGVsc2UgaWYgKGlucHV0ID09PSB1bmRlZmluZWQpIHtcblx0ICAgIHJldHVybiAndm9pZCc7XG5cdCAgfSBlbHNlIGlmICh0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBpbnB1dCA9PT0gJ251bWJlcicgfHwgdHlwZW9mIGlucHV0ID09PSAnYm9vbGVhbicpIHtcblx0ICAgIHJldHVybiB0eXBlb2YgaW5wdXQgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKGlucHV0KTtcblx0ICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoaW5wdXQpKSB7XG5cdCAgICBpZiAoaW5wdXQubGVuZ3RoID4gMCkge1xuXHQgICAgICB2YXIgX3JldCA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICBpZiAoZGVwdGggPiBtYXhEZXB0aCkgcmV0dXJuIHtcblx0ICAgICAgICAgICAgdjogJ1suLi5dJ1xuXHQgICAgICAgICAgfTtcblxuXHQgICAgICAgIHZhciBmaXJzdCA9IF9pbnNwZWN0KGlucHV0WzBdLCBkZXB0aCk7XG5cblx0ICAgICAgICBpZiAoaW5wdXQuZXZlcnkoZnVuY3Rpb24gKGl0ZW0pIHtcblx0ICAgICAgICAgIHJldHVybiBfaW5zcGVjdChpdGVtLCBkZXB0aCkgPT09IGZpcnN0O1xuXHQgICAgICAgIH0pKSB7XG5cdCAgICAgICAgICByZXR1cm4ge1xuXHQgICAgICAgICAgICB2OiBmaXJzdC50cmltKCkgKyAnW10nXG5cdCAgICAgICAgICB9O1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICByZXR1cm4ge1xuXHQgICAgICAgICAgICB2OiAnWycgKyBpbnB1dC5zbGljZSgwLCBtYXhLZXlzKS5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcblx0ICAgICAgICAgICAgICByZXR1cm4gX2luc3BlY3QoaXRlbSwgZGVwdGgpO1xuXHQgICAgICAgICAgICB9KS5qb2luKCcsICcpICsgKGlucHV0Lmxlbmd0aCA+PSBtYXhLZXlzID8gJywgLi4uJyA6ICcnKSArICddJ1xuXHQgICAgICAgICAgfTtcblx0ICAgICAgICB9XG5cdCAgICAgIH0oKTtcblxuXHQgICAgICBpZiAoKHR5cGVvZiBfcmV0ID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihfcmV0KSkgPT09IFwib2JqZWN0XCIpIHJldHVybiBfcmV0LnY7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICByZXR1cm4gJ0FycmF5Jztcblx0ICAgIH1cblx0ICB9IGVsc2Uge1xuXHQgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhpbnB1dCk7XG5cblx0ICAgIGlmICgha2V5cy5sZW5ndGgpIHtcblx0ICAgICAgaWYgKGlucHV0LmNvbnN0cnVjdG9yICYmIGlucHV0LmNvbnN0cnVjdG9yLm5hbWUgJiYgaW5wdXQuY29uc3RydWN0b3IubmFtZSAhPT0gJ09iamVjdCcpIHtcblx0ICAgICAgICByZXR1cm4gaW5wdXQuY29uc3RydWN0b3IubmFtZTtcblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICByZXR1cm4gJ09iamVjdCc7XG5cdCAgICAgIH1cblx0ICAgIH1cblxuXHQgICAgaWYgKGRlcHRoID4gbWF4RGVwdGgpIHJldHVybiAney4uLn0nO1xuXHQgICAgdmFyIGluZGVudCA9ICcgICcucmVwZWF0KGRlcHRoIC0gMSk7XG5cdCAgICB2YXIgZW50cmllcyA9IGtleXMuc2xpY2UoMCwgbWF4S2V5cykubWFwKGZ1bmN0aW9uIChrZXkpIHtcblx0ICAgICAgcmV0dXJuICgvXihbQS1aXyRdW0EtWjAtOV8kXSopJC9pLnRlc3Qoa2V5KSA/IGtleSA6IEpTT04uc3RyaW5naWZ5KGtleSkpICsgJzogJyArIF9pbnNwZWN0KGlucHV0W2tleV0sIGRlcHRoKSArICc7Jztcblx0ICAgIH0pLmpvaW4oJ1xcbiAgJyArIGluZGVudCk7XG5cblx0ICAgIGlmIChrZXlzLmxlbmd0aCA+PSBtYXhLZXlzKSB7XG5cdCAgICAgIGVudHJpZXMgKz0gJ1xcbiAgJyArIGluZGVudCArICcuLi4nO1xuXHQgICAgfVxuXG5cdCAgICBpZiAoaW5wdXQuY29uc3RydWN0b3IgJiYgaW5wdXQuY29uc3RydWN0b3IubmFtZSAmJiBpbnB1dC5jb25zdHJ1Y3Rvci5uYW1lICE9PSAnT2JqZWN0Jykge1xuXHQgICAgICByZXR1cm4gaW5wdXQuY29uc3RydWN0b3IubmFtZSArICcge1xcbiAgJyArIGluZGVudCArIGVudHJpZXMgKyAnXFxuJyArIGluZGVudCArICd9Jztcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIHJldHVybiAne1xcbiAgJyArIGluZGVudCArIGVudHJpZXMgKyAnXFxuJyArIGluZGVudCArICd9Jztcblx0ICAgIH1cblx0ICB9XG5cdH1cblxuLyoqKi8gfSxcbi8qIDggKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHQgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRcblx0dmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXHRcblx0dmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblx0XG5cdHZhciBfZGVmaW5pdGlvbiA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG5cdFxuXHR2YXIgX2RlZmluaXRpb24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZGVmaW5pdGlvbik7XG5cdFxuXHR2YXIgX2luamVjdGFibGVBcmd1bWVudHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpO1xuXHRcblx0ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblx0XG5cdGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cdFxuXHRmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblx0XG5cdGZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXHRcblx0dmFyIEluamVjdGFibGVBcmd1bWVudHMgPSBfaW5qZWN0YWJsZUFyZ3VtZW50cy5JbmplY3RhYmxlQXJndW1lbnRzO1xuXHRcblx0LyoqXG5cdCAqIEBhdXRob3IgQmVuamFtaW4gTWljaGFsc2tpIDxiZW5qYW1pbi5taWNoYWxza2lAZ21haWwuY29tPlxuXHQgKlxuXHQgKiBAcHVibGljXG5cdCAqL1xuXHRcblx0dmFyIEZhY3RvcnlEZWZpbml0aW9uID0gZnVuY3Rpb24gKF9EZWZpbml0aW9uKSB7XG5cdCAgX2luaGVyaXRzKEZhY3RvcnlEZWZpbml0aW9uLCBfRGVmaW5pdGlvbik7XG5cdFxuXHQgIC8qKlxuXHQgICAqIENvbnN0cnVjdG9yXG5cdCAgICpcblx0ICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmYWN0b3J5XG5cdCAgICogQHBhcmFtIHs/SW5qZWN0YWJsZUFyZ3VtZW50c30gW2FyZ3M9W11dXG5cdCAgICovXG5cdCAgZnVuY3Rpb24gRmFjdG9yeURlZmluaXRpb24oZmFjdG9yeSkge1xuXHQgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IFtdO1xuXHRcblx0ICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBGYWN0b3J5RGVmaW5pdGlvbik7XG5cdFxuXHQgICAgaWYgKCEodHlwZW9mIGZhY3RvcnkgPT09ICdmdW5jdGlvbicpKSB7XG5cdCAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1ZhbHVlIG9mIGFyZ3VtZW50IFwiZmFjdG9yeVwiIHZpb2xhdGVzIGNvbnRyYWN0LlxcblxcbkV4cGVjdGVkOlxcbkZ1bmN0aW9uXFxuXFxuR290OlxcbicgKyBfaW5zcGVjdChmYWN0b3J5KSk7XG5cdCAgICB9XG5cdFxuXHQgICAgaWYgKCEoYXJncyA9PSBudWxsIHx8IEluamVjdGFibGVBcmd1bWVudHMoYXJncykpKSB7XG5cdCAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1ZhbHVlIG9mIGFyZ3VtZW50IFwiYXJnc1wiIHZpb2xhdGVzIGNvbnRyYWN0LlxcblxcbkV4cGVjdGVkOlxcbj9JbmplY3RhYmxlQXJndW1lbnRzXFxuXFxuR290OlxcbicgKyBfaW5zcGVjdChhcmdzKSk7XG5cdCAgICB9XG5cdFxuXHQgICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKEZhY3RvcnlEZWZpbml0aW9uLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoRmFjdG9yeURlZmluaXRpb24pKS5jYWxsKHRoaXMsIGFyZ3MpKTtcblx0XG5cdCAgICBfdGhpcy5fZmFjdG9yeSA9IGZhY3Rvcnk7XG5cdCAgICByZXR1cm4gX3RoaXM7XG5cdCAgfVxuXHRcblx0ICAvKipcblx0ICAgKiBHZXRzIGZhY3Rvcnlcblx0ICAgKlxuXHQgICAqIEByZXR1cm5zIHtGdW5jdGlvbn1cblx0ICAgKi9cblx0XG5cdFxuXHQgIF9jcmVhdGVDbGFzcyhGYWN0b3J5RGVmaW5pdGlvbiwgW3tcblx0ICAgIGtleTogJ2ZhY3RvcnknLFxuXHQgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdCAgICAgIGZ1bmN0aW9uIF9yZWYoX2lkKSB7XG5cdCAgICAgICAgaWYgKCEodHlwZW9mIF9pZCA9PT0gJ2Z1bmN0aW9uJykpIHtcblx0ICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0Z1bmN0aW9uIHJldHVybiB2YWx1ZSB2aW9sYXRlcyBjb250cmFjdC5cXG5cXG5FeHBlY3RlZDpcXG5GdW5jdGlvblxcblxcbkdvdDpcXG4nICsgX2luc3BlY3QoX2lkKSk7XG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICByZXR1cm4gX2lkO1xuXHQgICAgICB9XG5cdFxuXHQgICAgICByZXR1cm4gX3JlZih0aGlzLl9mYWN0b3J5KTtcblx0ICAgIH1cblx0ICB9XSk7XG5cdFxuXHQgIHJldHVybiBGYWN0b3J5RGVmaW5pdGlvbjtcblx0fShfZGVmaW5pdGlvbjIuZGVmYXVsdCk7XG5cdFxuXHRleHBvcnRzLmRlZmF1bHQgPSBGYWN0b3J5RGVmaW5pdGlvbjtcblx0XG5cdGZ1bmN0aW9uIF9pbnNwZWN0KGlucHV0LCBkZXB0aCkge1xuXHQgIHZhciBtYXhEZXB0aCA9IDQ7XG5cdCAgdmFyIG1heEtleXMgPSAxNTtcblxuXHQgIGlmIChkZXB0aCA9PT0gdW5kZWZpbmVkKSB7XG5cdCAgICBkZXB0aCA9IDA7XG5cdCAgfVxuXG5cdCAgZGVwdGggKz0gMTtcblxuXHQgIGlmIChpbnB1dCA9PT0gbnVsbCkge1xuXHQgICAgcmV0dXJuICdudWxsJztcblx0ICB9IGVsc2UgaWYgKGlucHV0ID09PSB1bmRlZmluZWQpIHtcblx0ICAgIHJldHVybiAndm9pZCc7XG5cdCAgfSBlbHNlIGlmICh0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBpbnB1dCA9PT0gJ251bWJlcicgfHwgdHlwZW9mIGlucHV0ID09PSAnYm9vbGVhbicpIHtcblx0ICAgIHJldHVybiB0eXBlb2YgaW5wdXQgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKGlucHV0KTtcblx0ICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoaW5wdXQpKSB7XG5cdCAgICBpZiAoaW5wdXQubGVuZ3RoID4gMCkge1xuXHQgICAgICB2YXIgX3JldCA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICBpZiAoZGVwdGggPiBtYXhEZXB0aCkgcmV0dXJuIHtcblx0ICAgICAgICAgICAgdjogJ1suLi5dJ1xuXHQgICAgICAgICAgfTtcblxuXHQgICAgICAgIHZhciBmaXJzdCA9IF9pbnNwZWN0KGlucHV0WzBdLCBkZXB0aCk7XG5cblx0ICAgICAgICBpZiAoaW5wdXQuZXZlcnkoZnVuY3Rpb24gKGl0ZW0pIHtcblx0ICAgICAgICAgIHJldHVybiBfaW5zcGVjdChpdGVtLCBkZXB0aCkgPT09IGZpcnN0O1xuXHQgICAgICAgIH0pKSB7XG5cdCAgICAgICAgICByZXR1cm4ge1xuXHQgICAgICAgICAgICB2OiBmaXJzdC50cmltKCkgKyAnW10nXG5cdCAgICAgICAgICB9O1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICByZXR1cm4ge1xuXHQgICAgICAgICAgICB2OiAnWycgKyBpbnB1dC5zbGljZSgwLCBtYXhLZXlzKS5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcblx0ICAgICAgICAgICAgICByZXR1cm4gX2luc3BlY3QoaXRlbSwgZGVwdGgpO1xuXHQgICAgICAgICAgICB9KS5qb2luKCcsICcpICsgKGlucHV0Lmxlbmd0aCA+PSBtYXhLZXlzID8gJywgLi4uJyA6ICcnKSArICddJ1xuXHQgICAgICAgICAgfTtcblx0ICAgICAgICB9XG5cdCAgICAgIH0oKTtcblxuXHQgICAgICBpZiAoKHR5cGVvZiBfcmV0ID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihfcmV0KSkgPT09IFwib2JqZWN0XCIpIHJldHVybiBfcmV0LnY7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICByZXR1cm4gJ0FycmF5Jztcblx0ICAgIH1cblx0ICB9IGVsc2Uge1xuXHQgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhpbnB1dCk7XG5cblx0ICAgIGlmICgha2V5cy5sZW5ndGgpIHtcblx0ICAgICAgaWYgKGlucHV0LmNvbnN0cnVjdG9yICYmIGlucHV0LmNvbnN0cnVjdG9yLm5hbWUgJiYgaW5wdXQuY29uc3RydWN0b3IubmFtZSAhPT0gJ09iamVjdCcpIHtcblx0ICAgICAgICByZXR1cm4gaW5wdXQuY29uc3RydWN0b3IubmFtZTtcblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICByZXR1cm4gJ09iamVjdCc7XG5cdCAgICAgIH1cblx0ICAgIH1cblxuXHQgICAgaWYgKGRlcHRoID4gbWF4RGVwdGgpIHJldHVybiAney4uLn0nO1xuXHQgICAgdmFyIGluZGVudCA9ICcgICcucmVwZWF0KGRlcHRoIC0gMSk7XG5cdCAgICB2YXIgZW50cmllcyA9IGtleXMuc2xpY2UoMCwgbWF4S2V5cykubWFwKGZ1bmN0aW9uIChrZXkpIHtcblx0ICAgICAgcmV0dXJuICgvXihbQS1aXyRdW0EtWjAtOV8kXSopJC9pLnRlc3Qoa2V5KSA/IGtleSA6IEpTT04uc3RyaW5naWZ5KGtleSkpICsgJzogJyArIF9pbnNwZWN0KGlucHV0W2tleV0sIGRlcHRoKSArICc7Jztcblx0ICAgIH0pLmpvaW4oJ1xcbiAgJyArIGluZGVudCk7XG5cblx0ICAgIGlmIChrZXlzLmxlbmd0aCA+PSBtYXhLZXlzKSB7XG5cdCAgICAgIGVudHJpZXMgKz0gJ1xcbiAgJyArIGluZGVudCArICcuLi4nO1xuXHQgICAgfVxuXG5cdCAgICBpZiAoaW5wdXQuY29uc3RydWN0b3IgJiYgaW5wdXQuY29uc3RydWN0b3IubmFtZSAmJiBpbnB1dC5jb25zdHJ1Y3Rvci5uYW1lICE9PSAnT2JqZWN0Jykge1xuXHQgICAgICByZXR1cm4gaW5wdXQuY29uc3RydWN0b3IubmFtZSArICcge1xcbiAgJyArIGluZGVudCArIGVudHJpZXMgKyAnXFxuJyArIGluZGVudCArICd9Jztcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIHJldHVybiAne1xcbiAgJyArIGluZGVudCArIGVudHJpZXMgKyAnXFxuJyArIGluZGVudCArICd9Jztcblx0ICAgIH1cblx0ICB9XG5cdH1cblxuLyoqKi8gfSxcbi8qIDkgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdHZhciBfY2Fubm90TG9jYXRlU2VydmljZUNsYXNzQ29uc3RydWN0b3JFcnJvciA9IF9fd2VicGFja19yZXF1aXJlX18oMTApO1xuXHRcblx0dmFyIF9jYW5ub3RMb2NhdGVTZXJ2aWNlQ2xhc3NDb25zdHJ1Y3RvckVycm9yMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2Nhbm5vdExvY2F0ZVNlcnZpY2VDbGFzc0NvbnN0cnVjdG9yRXJyb3IpO1xuXHRcblx0dmFyIF9jaXJjdWxhckRlcGVuZGVuY3lFcnJvciA9IF9fd2VicGFja19yZXF1aXJlX18oNDMpO1xuXHRcblx0dmFyIF9jaXJjdWxhckRlcGVuZGVuY3lFcnJvcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jaXJjdWxhckRlcGVuZGVuY3lFcnJvcik7XG5cdFxuXHR2YXIgX2Rpc2xFcnJvciA9IF9fd2VicGFja19yZXF1aXJlX18oMTEpO1xuXHRcblx0dmFyIF9kaXNsRXJyb3IyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZGlzbEVycm9yKTtcblx0XG5cdHZhciBfZmFjdG9yeU1ldGhvZFJldHVybnNOb3RoaW5nRXJyb3IgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ0KTtcblx0XG5cdHZhciBfZmFjdG9yeU1ldGhvZFJldHVybnNOb3RoaW5nRXJyb3IyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZmFjdG9yeU1ldGhvZFJldHVybnNOb3RoaW5nRXJyb3IpO1xuXHRcblx0dmFyIF9tZXRob2REb2VzTm90RXhpc3RFcnJvciA9IF9fd2VicGFja19yZXF1aXJlX18oNDUpO1xuXHRcblx0dmFyIF9tZXRob2REb2VzTm90RXhpc3RFcnJvcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9tZXRob2REb2VzTm90RXhpc3RFcnJvcik7XG5cdFxuXHR2YXIgX3NlcnZpY2VEZWZpbml0aW9uQWxyZWFkeVVzZWRFcnJvciA9IF9fd2VicGFja19yZXF1aXJlX18oNDYpO1xuXHRcblx0dmFyIF9zZXJ2aWNlRGVmaW5pdGlvbkFscmVhZHlVc2VkRXJyb3IyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2VydmljZURlZmluaXRpb25BbHJlYWR5VXNlZEVycm9yKTtcblx0XG5cdHZhciBfdW5kZWZpbmVkUGFyYW1ldGVyRXJyb3IgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ3KTtcblx0XG5cdHZhciBfdW5kZWZpbmVkUGFyYW1ldGVyRXJyb3IyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdW5kZWZpbmVkUGFyYW1ldGVyRXJyb3IpO1xuXHRcblx0dmFyIF91bmRlZmluZWRTZXJ2aWNlRGVmaW5pdGlvbkFuZEluc3RhbmNlRXJyb3IgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ4KTtcblx0XG5cdHZhciBfdW5kZWZpbmVkU2VydmljZURlZmluaXRpb25BbmRJbnN0YW5jZUVycm9yMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3VuZGVmaW5lZFNlcnZpY2VEZWZpbml0aW9uQW5kSW5zdGFuY2VFcnJvcik7XG5cdFxuXHR2YXIgX3VuZGVmaW5lZFNlcnZpY2VEZWZpbml0aW9uRXJyb3IgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ5KTtcblx0XG5cdHZhciBfdW5kZWZpbmVkU2VydmljZURlZmluaXRpb25FcnJvcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF91bmRlZmluZWRTZXJ2aWNlRGVmaW5pdGlvbkVycm9yKTtcblx0XG5cdHZhciBfdW5zdXBwb3J0ZWRBcmd1bWVudFR5cGVFcnJvciA9IF9fd2VicGFja19yZXF1aXJlX18oNTApO1xuXHRcblx0dmFyIF91bnN1cHBvcnRlZEFyZ3VtZW50VHlwZUVycm9yMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Vuc3VwcG9ydGVkQXJndW1lbnRUeXBlRXJyb3IpO1xuXHRcblx0dmFyIF9nZXRTZXJ2aWNlRXJyb3IgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUxKTtcblx0XG5cdHZhciBfZ2V0U2VydmljZUVycm9yMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dldFNlcnZpY2VFcnJvcik7XG5cdFxuXHRmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSB7XG5cdCAgQ2Fubm90TG9jYXRlU2VydmljZUNsYXNzQ29uc3RydWN0b3JFcnJvcjogX2Nhbm5vdExvY2F0ZVNlcnZpY2VDbGFzc0NvbnN0cnVjdG9yRXJyb3IyLmRlZmF1bHQsXG5cdCAgQ2lyY3VsYXJEZXBlbmRlbmN5RXJyb3I6IF9jaXJjdWxhckRlcGVuZGVuY3lFcnJvcjIuZGVmYXVsdCxcblx0ICBEaXNsRXJyb3I6IF9kaXNsRXJyb3IyLmRlZmF1bHQsXG5cdCAgRmFjdG9yeU1ldGhvZFJldHVybnNOb3RoaW5nRXJyb3I6IF9mYWN0b3J5TWV0aG9kUmV0dXJuc05vdGhpbmdFcnJvcjIuZGVmYXVsdCxcblx0ICBNZXRob2REb2VzTm90RXhpc3RFcnJvcjogX21ldGhvZERvZXNOb3RFeGlzdEVycm9yMi5kZWZhdWx0LFxuXHQgIFNlcnZpY2VEZWZpbml0aW9uQWxyZWFkeVVzZWRFcnJvcjogX3NlcnZpY2VEZWZpbml0aW9uQWxyZWFkeVVzZWRFcnJvcjIuZGVmYXVsdCxcblx0ICBVbmRlZmluZWRQYXJhbWV0ZXJFcnJvcjogX3VuZGVmaW5lZFBhcmFtZXRlckVycm9yMi5kZWZhdWx0LFxuXHQgIFVuZGVmaW5lZFNlcnZpY2VEZWZpbml0aW9uQW5kSW5zdGFuY2VFcnJvcjogX3VuZGVmaW5lZFNlcnZpY2VEZWZpbml0aW9uQW5kSW5zdGFuY2VFcnJvcjIuZGVmYXVsdCxcblx0ICBVbmRlZmluZWRTZXJ2aWNlRGVmaW5pdGlvbkVycm9yOiBfdW5kZWZpbmVkU2VydmljZURlZmluaXRpb25FcnJvcjIuZGVmYXVsdCxcblx0ICBVbnN1cHBvcnRlZEFyZ3VtZW50VHlwZUVycm9yOiBfdW5zdXBwb3J0ZWRBcmd1bWVudFR5cGVFcnJvcjIuZGVmYXVsdCxcblx0ICBHZXRTZXJ2aWNlRXJyb3I6IF9nZXRTZXJ2aWNlRXJyb3IyLmRlZmF1bHRcblx0fTtcblxuLyoqKi8gfSxcbi8qIDEwICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0XG5cdHZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblx0XG5cdHZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cdFxuXHR2YXIgX2Rpc2xFcnJvciA9IF9fd2VicGFja19yZXF1aXJlX18oMTEpO1xuXHRcblx0dmFyIF9kaXNsRXJyb3IyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZGlzbEVycm9yKTtcblx0XG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cdFxuXHRmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXHRcblx0ZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cdFxuXHRmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblx0XG5cdC8qKlxuXHQgKiBAYXV0aG9yIEJlbmphbWluIE1pY2hhbHNraSA8YmVuamFtaW4ubWljaGFsc2tpQGdtYWlsLmNvbT5cblx0ICpcblx0ICogQHB1YmxpY1xuXHQgKi9cblx0dmFyIENhbm5vdExvY2F0ZVNlcnZpY2VDbGFzc0NvbnN0cnVjdG9yRXJyb3IgPSBmdW5jdGlvbiAoX0Rpc2xFcnJvcikge1xuXHQgIF9pbmhlcml0cyhDYW5ub3RMb2NhdGVTZXJ2aWNlQ2xhc3NDb25zdHJ1Y3RvckVycm9yLCBfRGlzbEVycm9yKTtcblx0XG5cdCAgZnVuY3Rpb24gQ2Fubm90TG9jYXRlU2VydmljZUNsYXNzQ29uc3RydWN0b3JFcnJvcigpIHtcblx0ICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDYW5ub3RMb2NhdGVTZXJ2aWNlQ2xhc3NDb25zdHJ1Y3RvckVycm9yKTtcblx0XG5cdCAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKENhbm5vdExvY2F0ZVNlcnZpY2VDbGFzc0NvbnN0cnVjdG9yRXJyb3IuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihDYW5ub3RMb2NhdGVTZXJ2aWNlQ2xhc3NDb25zdHJ1Y3RvckVycm9yKSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG5cdCAgfVxuXHRcblx0ICBfY3JlYXRlQ2xhc3MoQ2Fubm90TG9jYXRlU2VydmljZUNsYXNzQ29uc3RydWN0b3JFcnJvciwgbnVsbCwgW3tcblx0ICAgIGtleTogJ2NyZWF0ZUVycm9yJyxcblx0XG5cdFxuXHQgICAgLyoqXG5cdCAgICAgKiBAcGFyYW0ge3N0cmluZ30gY2xhc3NOYW1lXG5cdCAgICAgKlxuXHQgICAgICogQHJldHVybnMge0Nhbm5vdExvY2F0ZVNlcnZpY2VDbGFzc0NvbnN0cnVjdG9yRXJyb3J9XG5cdCAgICAgKi9cblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBjcmVhdGVFcnJvcihjbGFzc05hbWUpIHtcblx0ICAgICAgaWYgKCEodHlwZW9mIGNsYXNzTmFtZSA9PT0gJ3N0cmluZycpKSB7XG5cdCAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVmFsdWUgb2YgYXJndW1lbnQgXCJjbGFzc05hbWVcIiB2aW9sYXRlcyBjb250cmFjdC5cXG5cXG5FeHBlY3RlZDpcXG5zdHJpbmdcXG5cXG5Hb3Q6XFxuJyArIF9pbnNwZWN0KGNsYXNzTmFtZSkpO1xuXHQgICAgICB9XG5cdFxuXHQgICAgICByZXR1cm4gbmV3IENhbm5vdExvY2F0ZVNlcnZpY2VDbGFzc0NvbnN0cnVjdG9yRXJyb3Ioe1xuXHQgICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lXG5cdCAgICAgIH0sICdDYW5ub3QgbG9jYXRlIHNlcnZpY2UgY2xhc3MgY29uc3RydWN0b3IgZm9yIGNsYXNzIFwiJXNcIicsIGNsYXNzTmFtZSk7XG5cdCAgICB9XG5cdCAgfV0pO1xuXHRcblx0ICByZXR1cm4gQ2Fubm90TG9jYXRlU2VydmljZUNsYXNzQ29uc3RydWN0b3JFcnJvcjtcblx0fShfZGlzbEVycm9yMi5kZWZhdWx0KTtcblx0XG5cdGV4cG9ydHMuZGVmYXVsdCA9IENhbm5vdExvY2F0ZVNlcnZpY2VDbGFzc0NvbnN0cnVjdG9yRXJyb3I7XG5cdFxuXHRmdW5jdGlvbiBfaW5zcGVjdChpbnB1dCwgZGVwdGgpIHtcblx0ICB2YXIgbWF4RGVwdGggPSA0O1xuXHQgIHZhciBtYXhLZXlzID0gMTU7XG5cblx0ICBpZiAoZGVwdGggPT09IHVuZGVmaW5lZCkge1xuXHQgICAgZGVwdGggPSAwO1xuXHQgIH1cblxuXHQgIGRlcHRoICs9IDE7XG5cblx0ICBpZiAoaW5wdXQgPT09IG51bGwpIHtcblx0ICAgIHJldHVybiAnbnVsbCc7XG5cdCAgfSBlbHNlIGlmIChpbnB1dCA9PT0gdW5kZWZpbmVkKSB7XG5cdCAgICByZXR1cm4gJ3ZvaWQnO1xuXHQgIH0gZWxzZSBpZiAodHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgaW5wdXQgPT09ICdudW1iZXInIHx8IHR5cGVvZiBpbnB1dCA9PT0gJ2Jvb2xlYW4nKSB7XG5cdCAgICByZXR1cm4gdHlwZW9mIGlucHV0ID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihpbnB1dCk7XG5cdCAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGlucHV0KSkge1xuXHQgICAgaWYgKGlucHV0Lmxlbmd0aCA+IDApIHtcblx0ICAgICAgdmFyIF9yZXQgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgaWYgKGRlcHRoID4gbWF4RGVwdGgpIHJldHVybiB7XG5cdCAgICAgICAgICAgIHY6ICdbLi4uXSdcblx0ICAgICAgICAgIH07XG5cblx0ICAgICAgICB2YXIgZmlyc3QgPSBfaW5zcGVjdChpbnB1dFswXSwgZGVwdGgpO1xuXG5cdCAgICAgICAgaWYgKGlucHV0LmV2ZXJ5KGZ1bmN0aW9uIChpdGVtKSB7XG5cdCAgICAgICAgICByZXR1cm4gX2luc3BlY3QoaXRlbSwgZGVwdGgpID09PSBmaXJzdDtcblx0ICAgICAgICB9KSkge1xuXHQgICAgICAgICAgcmV0dXJuIHtcblx0ICAgICAgICAgICAgdjogZmlyc3QudHJpbSgpICsgJ1tdJ1xuXHQgICAgICAgICAgfTtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgcmV0dXJuIHtcblx0ICAgICAgICAgICAgdjogJ1snICsgaW5wdXQuc2xpY2UoMCwgbWF4S2V5cykubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG5cdCAgICAgICAgICAgICAgcmV0dXJuIF9pbnNwZWN0KGl0ZW0sIGRlcHRoKTtcblx0ICAgICAgICAgICAgfSkuam9pbignLCAnKSArIChpbnB1dC5sZW5ndGggPj0gbWF4S2V5cyA/ICcsIC4uLicgOiAnJykgKyAnXSdcblx0ICAgICAgICAgIH07XG5cdCAgICAgICAgfVxuXHQgICAgICB9KCk7XG5cblx0ICAgICAgaWYgKCh0eXBlb2YgX3JldCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YoX3JldCkpID09PSBcIm9iamVjdFwiKSByZXR1cm4gX3JldC52O1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgcmV0dXJuICdBcnJheSc7XG5cdCAgICB9XG5cdCAgfSBlbHNlIHtcblx0ICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoaW5wdXQpO1xuXG5cdCAgICBpZiAoIWtleXMubGVuZ3RoKSB7XG5cdCAgICAgIGlmIChpbnB1dC5jb25zdHJ1Y3RvciAmJiBpbnB1dC5jb25zdHJ1Y3Rvci5uYW1lICYmIGlucHV0LmNvbnN0cnVjdG9yLm5hbWUgIT09ICdPYmplY3QnKSB7XG5cdCAgICAgICAgcmV0dXJuIGlucHV0LmNvbnN0cnVjdG9yLm5hbWU7XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgcmV0dXJuICdPYmplY3QnO1xuXHQgICAgICB9XG5cdCAgICB9XG5cblx0ICAgIGlmIChkZXB0aCA+IG1heERlcHRoKSByZXR1cm4gJ3suLi59Jztcblx0ICAgIHZhciBpbmRlbnQgPSAnICAnLnJlcGVhdChkZXB0aCAtIDEpO1xuXHQgICAgdmFyIGVudHJpZXMgPSBrZXlzLnNsaWNlKDAsIG1heEtleXMpLm1hcChmdW5jdGlvbiAoa2V5KSB7XG5cdCAgICAgIHJldHVybiAoL14oW0EtWl8kXVtBLVowLTlfJF0qKSQvaS50ZXN0KGtleSkgPyBrZXkgOiBKU09OLnN0cmluZ2lmeShrZXkpKSArICc6ICcgKyBfaW5zcGVjdChpbnB1dFtrZXldLCBkZXB0aCkgKyAnOyc7XG5cdCAgICB9KS5qb2luKCdcXG4gICcgKyBpbmRlbnQpO1xuXG5cdCAgICBpZiAoa2V5cy5sZW5ndGggPj0gbWF4S2V5cykge1xuXHQgICAgICBlbnRyaWVzICs9ICdcXG4gICcgKyBpbmRlbnQgKyAnLi4uJztcblx0ICAgIH1cblxuXHQgICAgaWYgKGlucHV0LmNvbnN0cnVjdG9yICYmIGlucHV0LmNvbnN0cnVjdG9yLm5hbWUgJiYgaW5wdXQuY29uc3RydWN0b3IubmFtZSAhPT0gJ09iamVjdCcpIHtcblx0ICAgICAgcmV0dXJuIGlucHV0LmNvbnN0cnVjdG9yLm5hbWUgKyAnIHtcXG4gICcgKyBpbmRlbnQgKyBlbnRyaWVzICsgJ1xcbicgKyBpbmRlbnQgKyAnfSc7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICByZXR1cm4gJ3tcXG4gICcgKyBpbmRlbnQgKyBlbnRyaWVzICsgJ1xcbicgKyBpbmRlbnQgKyAnfSc7XG5cdCAgICB9XG5cdCAgfVxuXHR9XG5cbi8qKiovIH0sXG4vKiAxMSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgdmFsdWU6IHRydWVcblx0fSk7XG5cdFxuXHR2YXIgX3ZlcnJvciA9IF9fd2VicGFja19yZXF1aXJlX18oMTIpO1xuXHRcblx0dmFyIF92ZXJyb3IyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdmVycm9yKTtcblx0XG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cdFxuXHRmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXHRcblx0ZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cdFxuXHRmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblx0XG5cdC8qKlxuXHQgKiBAYXV0aG9yIEJlbmphbWluIE1pY2hhbHNraSA8YmVuamFtaW4ubWljaGFsc2tpQGdtYWlsLmNvbT5cblx0ICpcblx0ICogQHB1YmxpY1xuXHQgKi9cblx0dmFyIERpc2xFcnJvciA9IGZ1bmN0aW9uIChfVkVycm9yKSB7XG5cdCAgX2luaGVyaXRzKERpc2xFcnJvciwgX1ZFcnJvcik7XG5cdFxuXHQgIGZ1bmN0aW9uIERpc2xFcnJvcigpIHtcblx0ICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBEaXNsRXJyb3IpO1xuXHRcblx0ICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoRGlzbEVycm9yLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoRGlzbEVycm9yKSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG5cdCAgfVxuXHRcblx0ICByZXR1cm4gRGlzbEVycm9yO1xuXHR9KF92ZXJyb3IyLmRlZmF1bHQpO1xuXHRcblx0ZXhwb3J0cy5kZWZhdWx0ID0gRGlzbEVycm9yO1xuXG4vKioqLyB9LFxuLyogMTIgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qXG5cdCAqIHZlcnJvci5qczogcmljaGVyIEphdmFTY3JpcHQgZXJyb3JzXG5cdCAqL1xuXHRcblx0dmFyIG1vZF9hc3NlcnRwbHVzID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMyk7XG5cdHZhciBtb2RfdXRpbCA9IF9fd2VicGFja19yZXF1aXJlX18oMjApO1xuXHRcblx0dmFyIG1vZF9leHRzcHJpbnRmID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0MSk7XG5cdHZhciBtb2RfaXNFcnJvciA9IF9fd2VicGFja19yZXF1aXJlX18oNDIpLmlzRXJyb3I7XG5cdHZhciBzcHJpbnRmID0gbW9kX2V4dHNwcmludGYuc3ByaW50Zjtcblx0XG5cdC8qXG5cdCAqIFB1YmxpYyBpbnRlcmZhY2Vcblx0ICovXG5cdFxuXHQvKiBTbyB5b3UgY2FuICd2YXIgVkVycm9yID0gcmVxdWlyZSgndmVycm9yJyknICovXG5cdG1vZHVsZS5leHBvcnRzID0gVkVycm9yO1xuXHQvKiBGb3IgY29tcGF0aWJpbGl0eSAqL1xuXHRWRXJyb3IuVkVycm9yID0gVkVycm9yO1xuXHQvKiBPdGhlciBleHBvcnRlZCBjbGFzc2VzICovXG5cdFZFcnJvci5TRXJyb3IgPSBTRXJyb3I7XG5cdFZFcnJvci5XRXJyb3IgPSBXRXJyb3I7XG5cdFZFcnJvci5NdWx0aUVycm9yID0gTXVsdGlFcnJvcjtcblx0XG5cdC8qXG5cdCAqIENvbW1vbiBmdW5jdGlvbiB1c2VkIHRvIHBhcnNlIGNvbnN0cnVjdG9yIGFyZ3VtZW50cyBmb3IgVkVycm9yLCBXRXJyb3IsIGFuZFxuXHQgKiBTRXJyb3IuICBOYW1lZCBhcmd1bWVudHMgdG8gdGhpcyBmdW5jdGlvbjpcblx0ICpcblx0ICogICAgIHN0cmljdFx0XHRmb3JjZSBzdHJpY3QgaW50ZXJwcmV0YXRpb24gb2Ygc3ByaW50ZiBhcmd1bWVudHMsIGV2ZW5cblx0ICogICAgIFx0XHRcdGlmIHRoZSBvcHRpb25zIGluIFwiYXJndlwiIGRvbid0IHNheSBzb1xuXHQgKlxuXHQgKiAgICAgYXJndlx0XHRlcnJvcidzIGNvbnN0cnVjdG9yIGFyZ3VtZW50cywgd2hpY2ggYXJlIHRvIGJlXG5cdCAqICAgICBcdFx0XHRpbnRlcnByZXRlZCBhcyBkZXNjcmliZWQgaW4gUkVBRE1FLm1kLiAgRm9yIHF1aWNrXG5cdCAqICAgICBcdFx0XHRyZWZlcmVuY2UsIFwiYXJndlwiIGhhcyBvbmUgb2YgdGhlIGZvbGxvd2luZyBmb3Jtczpcblx0ICpcblx0ICogICAgICAgICAgWyBzcHJpbnRmX2FyZ3MuLi4gXSAgICAgICAgICAgKGFyZ3ZbMF0gaXMgYSBzdHJpbmcpXG5cdCAqICAgICAgICAgIFsgY2F1c2UsIHNwcmludGZfYXJncy4uLiBdICAgIChhcmd2WzBdIGlzIGFuIEVycm9yKVxuXHQgKiAgICAgICAgICBbIG9wdGlvbnMsIHNwcmludGZfYXJncy4uLiBdICAoYXJndlswXSBpcyBhbiBvYmplY3QpXG5cdCAqXG5cdCAqIFRoaXMgZnVuY3Rpb24gbm9ybWFsaXplcyB0aGVzZSBmb3JtcywgcHJvZHVjaW5nIGFuIG9iamVjdCB3aXRoIHRoZSBmb2xsb3dpbmdcblx0ICogcHJvcGVydGllczpcblx0ICpcblx0ICogICAgb3B0aW9ucyAgICAgICAgICAgZXF1aXZhbGVudCB0byBcIm9wdGlvbnNcIiBpbiB0aGlyZCBmb3JtLiAgVGhpcyB3aWxsIG5ldmVyXG5cdCAqICAgIFx0XHRcdGJlIGEgZGlyZWN0IHJlZmVyZW5jZSB0byB3aGF0IHRoZSBjYWxsZXIgcGFzc2VkIGluXG5cdCAqICAgIFx0XHRcdChpLmUuLCBpdCBtYXkgYmUgYSBzaGFsbG93IGNvcHkpLCBzbyBpdCBjYW4gYmUgZnJlZWx5XG5cdCAqICAgIFx0XHRcdG1vZGlmaWVkLlxuXHQgKlxuXHQgKiAgICBzaG9ydG1lc3NhZ2UgICAgICByZXN1bHQgb2Ygc3ByaW50ZihzcHJpbnRmX2FyZ3MpLCB0YWtpbmcgb3B0aW9ucy5zdHJpY3Rcblx0ICogICAgXHRcdFx0aW50byBhY2NvdW50IGFzIGRlc2NyaWJlZCBpbiBSRUFETUUubWQuXG5cdCAqL1xuXHRmdW5jdGlvbiBwYXJzZUNvbnN0cnVjdG9yQXJndW1lbnRzKGFyZ3MpXG5cdHtcblx0XHR2YXIgYXJndiwgb3B0aW9ucywgc3ByaW50Zl9hcmdzLCBzaG9ydG1lc3NhZ2UsIGs7XG5cdFxuXHRcdG1vZF9hc3NlcnRwbHVzLm9iamVjdChhcmdzLCAnYXJncycpO1xuXHRcdG1vZF9hc3NlcnRwbHVzLmJvb2woYXJncy5zdHJpY3QsICdhcmdzLnN0cmljdCcpO1xuXHRcdG1vZF9hc3NlcnRwbHVzLmFycmF5KGFyZ3MuYXJndiwgJ2FyZ3MuYXJndicpO1xuXHRcdGFyZ3YgPSBhcmdzLmFyZ3Y7XG5cdFxuXHRcdC8qXG5cdFx0ICogRmlyc3QsIGZpZ3VyZSBvdXQgd2hpY2ggZm9ybSBvZiBpbnZvY2F0aW9uIHdlJ3ZlIGJlZW4gZ2l2ZW4uXG5cdFx0ICovXG5cdFx0aWYgKGFyZ3YubGVuZ3RoID09PSAwKSB7XG5cdFx0XHRvcHRpb25zID0ge307XG5cdFx0XHRzcHJpbnRmX2FyZ3MgPSBbXTtcblx0XHR9IGVsc2UgaWYgKG1vZF9pc0Vycm9yKGFyZ3ZbMF0pKSB7XG5cdFx0XHRvcHRpb25zID0geyAnY2F1c2UnOiBhcmd2WzBdIH07XG5cdFx0XHRzcHJpbnRmX2FyZ3MgPSBhcmd2LnNsaWNlKDEpO1xuXHRcdH0gZWxzZSBpZiAodHlwZW9mIChhcmd2WzBdKSA9PT0gJ29iamVjdCcpIHtcblx0XHRcdG9wdGlvbnMgPSB7fTtcblx0XHRcdGZvciAoayBpbiBhcmd2WzBdKSB7XG5cdFx0XHRcdG9wdGlvbnNba10gPSBhcmd2WzBdW2tdO1xuXHRcdFx0fVxuXHRcdFx0c3ByaW50Zl9hcmdzID0gYXJndi5zbGljZSgxKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bW9kX2Fzc2VydHBsdXMuc3RyaW5nKGFyZ3ZbMF0sXG5cdFx0XHQgICAgJ2ZpcnN0IGFyZ3VtZW50IHRvIFZFcnJvciwgU0Vycm9yLCBvciBXRXJyb3IgJyArXG5cdFx0XHQgICAgJ2NvbnN0cnVjdG9yIG11c3QgYmUgYSBzdHJpbmcsIG9iamVjdCwgb3IgRXJyb3InKTtcblx0XHRcdG9wdGlvbnMgPSB7fTtcblx0XHRcdHNwcmludGZfYXJncyA9IGFyZ3Y7XG5cdFx0fVxuXHRcblx0XHQvKlxuXHRcdCAqIE5vdyBjb25zdHJ1Y3QgdGhlIGVycm9yJ3MgbWVzc2FnZS5cblx0XHQgKlxuXHRcdCAqIGV4dHNwcmludGYgKHdoaWNoIHdlIGludm9rZSBoZXJlIHdpdGggb3VyIGNhbGxlcidzIGFyZ3VtZW50cyBpbiBvcmRlclxuXHRcdCAqIHRvIGNvbnN0cnVjdCB0aGlzIEVycm9yJ3MgbWVzc2FnZSkgaXMgc3RyaWN0IGluIGl0cyBpbnRlcnByZXRhdGlvbiBvZlxuXHRcdCAqIHZhbHVlcyB0byBiZSBwcm9jZXNzZWQgYnkgdGhlIFwiJXNcIiBzcGVjaWZpZXIuICBUaGUgdmFsdWUgcGFzc2VkIHRvXG5cdFx0ICogZXh0c3ByaW50ZiBtdXN0IGFjdHVhbGx5IGJlIGEgc3RyaW5nIG9yIHNvbWV0aGluZyBjb252ZXJ0aWJsZSB0byBhXG5cdFx0ICogU3RyaW5nIHVzaW5nIC50b1N0cmluZygpLiAgUGFzc2luZyBvdGhlciB2YWx1ZXMgKG5vdGFibHkgXCJudWxsXCIgYW5kXG5cdFx0ICogXCJ1bmRlZmluZWRcIikgaXMgY29uc2lkZXJlZCBhIHByb2dyYW1tZXIgZXJyb3IuICBUaGUgYXNzdW1wdGlvbiBpc1xuXHRcdCAqIHRoYXQgaWYgeW91IGFjdHVhbGx5IHdhbnQgdG8gcHJpbnQgdGhlIHN0cmluZyBcIm51bGxcIiBvciBcInVuZGVmaW5lZFwiLFxuXHRcdCAqIHRoZW4gdGhhdCdzIGVhc3kgdG8gZG8gdGhhdCB3aGVuIHlvdSdyZSBjYWxsaW5nIGV4dHNwcmludGY7IG9uIHRoZVxuXHRcdCAqIG90aGVyIGhhbmQsIGlmIHlvdSBkaWQgTk9UIHdhbnQgdGhhdCAoaS5lLiwgdGhlcmUncyBhY3R1YWxseSBhIGJ1Z1xuXHRcdCAqIHdoZXJlIHRoZSBwcm9ncmFtIGFzc3VtZXMgc29tZSB2YXJpYWJsZSBpcyBub24tbnVsbCBhbmQgdHJpZXMgdG9cblx0XHQgKiBwcmludCBpdCwgd2hpY2ggbWlnaHQgaGFwcGVuIHdoZW4gY29uc3RydWN0aW5nIGEgcGFja2V0IG9yIGZpbGUgaW5cblx0XHQgKiBzb21lIHNwZWNpZmljIGZvcm1hdCksIHRoZW4gaXQncyBiZXR0ZXIgdG8gc3RvcCBpbW1lZGlhdGVseSB0aGFuXG5cdFx0ICogcHJvZHVjZSBib2d1cyBvdXRwdXQuXG5cdFx0ICpcblx0XHQgKiBIb3dldmVyLCBzb21ldGltZXMgdGhlIGJ1ZyBpcyBvbmx5IGluIHRoZSBjb2RlIGNhbGxpbmcgVkVycm9yLCBhbmQgYVxuXHRcdCAqIHByb2dyYW1tZXIgbWlnaHQgcHJlZmVyIHRvIGhhdmUgdGhlIGVycm9yIG1lc3NhZ2UgY29udGFpbiBcIm51bGxcIiBvclxuXHRcdCAqIFwidW5kZWZpbmVkXCIgcmF0aGVyIHRoYW4gaGF2ZSB0aGUgYnVnIGluIHRoZSBlcnJvciBwYXRoIGNyYXNoIHRoZVxuXHRcdCAqIHByb2dyYW0gKG1ha2luZyB0aGUgZmlyc3QgYnVnIGhhcmRlciB0byBpZGVudGlmeSkuICBGb3IgdGhhdCByZWFzb24sXG5cdFx0ICogYnkgZGVmYXVsdCBWRXJyb3IgY29udmVydHMgXCJudWxsXCIgb3IgXCJ1bmRlZmluZWRcIiBhcmd1bWVudHMgdG8gdGhlaXJcblx0XHQgKiBzdHJpbmcgcmVwcmVzZW50YXRpb25zIGFuZCBwYXNzZXMgdGhvc2UgdG8gZXh0c3ByaW50Zi4gIFByb2dyYW1tZXJzXG5cdFx0ICogZGVzaXJpbmcgdGhlIHN0cmljdCBiZWhhdmlvciBjYW4gdXNlIHRoZSBTRXJyb3IgY2xhc3Mgb3IgcGFzcyB0aGVcblx0XHQgKiBcInN0cmljdFwiIG9wdGlvbiB0byB0aGUgVkVycm9yIGNvbnN0cnVjdG9yLlxuXHRcdCAqL1xuXHRcdG1vZF9hc3NlcnRwbHVzLm9iamVjdChvcHRpb25zKTtcblx0XHRpZiAoIW9wdGlvbnMuc3RyaWN0ICYmICFhcmdzLnN0cmljdCkge1xuXHRcdFx0c3ByaW50Zl9hcmdzID0gc3ByaW50Zl9hcmdzLm1hcChmdW5jdGlvbiAoYSkge1xuXHRcdFx0XHRyZXR1cm4gKGEgPT09IG51bGwgPyAnbnVsbCcgOlxuXHRcdFx0XHQgICAgYSA9PT0gdW5kZWZpbmVkID8gJ3VuZGVmaW5lZCcgOiBhKTtcblx0XHRcdH0pO1xuXHRcdH1cblx0XG5cdFx0aWYgKHNwcmludGZfYXJncy5sZW5ndGggPT09IDApIHtcblx0XHRcdHNob3J0bWVzc2FnZSA9ICcnO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRzaG9ydG1lc3NhZ2UgPSBzcHJpbnRmLmFwcGx5KG51bGwsIHNwcmludGZfYXJncyk7XG5cdFx0fVxuXHRcblx0XHRyZXR1cm4gKHtcblx0XHQgICAgJ29wdGlvbnMnOiBvcHRpb25zLFxuXHRcdCAgICAnc2hvcnRtZXNzYWdlJzogc2hvcnRtZXNzYWdlXG5cdFx0fSk7XG5cdH1cblx0XG5cdC8qXG5cdCAqIFNlZSBSRUFETUUubWQgZm9yIHJlZmVyZW5jZSBkb2N1bWVudGF0aW9uLlxuXHQgKi9cblx0ZnVuY3Rpb24gVkVycm9yKClcblx0e1xuXHRcdHZhciBhcmdzLCBvYmosIHBhcnNlZCwgY2F1c2UsIGN0b3IsIG1lc3NhZ2UsIGs7XG5cdFxuXHRcdGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDApO1xuXHRcblx0XHQvKlxuXHRcdCAqIFRoaXMgaXMgYSByZWdyZXR0YWJsZSBwYXR0ZXJuLCBidXQgSmF2YVNjcmlwdCdzIGJ1aWx0LWluIEVycm9yIGNsYXNzXG5cdFx0ICogaXMgZGVmaW5lZCB0byB3b3JrIHRoaXMgd2F5LCBzbyB3ZSBhbGxvdyB0aGUgY29uc3RydWN0b3IgdG8gYmUgY2FsbGVkXG5cdFx0ICogd2l0aG91dCBcIm5ld1wiLlxuXHRcdCAqL1xuXHRcdGlmICghKHRoaXMgaW5zdGFuY2VvZiBWRXJyb3IpKSB7XG5cdFx0XHRvYmogPSBPYmplY3QuY3JlYXRlKFZFcnJvci5wcm90b3R5cGUpO1xuXHRcdFx0VkVycm9yLmFwcGx5KG9iaiwgYXJndW1lbnRzKTtcblx0XHRcdHJldHVybiAob2JqKTtcblx0XHR9XG5cdFxuXHRcdC8qXG5cdFx0ICogRm9yIGNvbnZlbmllbmNlIGFuZCBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSwgd2Ugc3VwcG9ydCBzZXZlcmFsXG5cdFx0ICogZGlmZmVyZW50IGNhbGxpbmcgZm9ybXMuICBOb3JtYWxpemUgdGhlbSBoZXJlLlxuXHRcdCAqL1xuXHRcdHBhcnNlZCA9IHBhcnNlQ29uc3RydWN0b3JBcmd1bWVudHMoe1xuXHRcdCAgICAnYXJndic6IGFyZ3MsXG5cdFx0ICAgICdzdHJpY3QnOiBmYWxzZVxuXHRcdH0pO1xuXHRcblx0XHQvKlxuXHRcdCAqIElmIHdlJ3ZlIGJlZW4gZ2l2ZW4gYSBuYW1lLCBhcHBseSBpdCBub3cuXG5cdFx0ICovXG5cdFx0aWYgKHBhcnNlZC5vcHRpb25zLm5hbWUpIHtcblx0XHRcdG1vZF9hc3NlcnRwbHVzLnN0cmluZyhwYXJzZWQub3B0aW9ucy5uYW1lLFxuXHRcdFx0ICAgICdlcnJvclxcJ3MgXCJuYW1lXCIgbXVzdCBiZSBhIHN0cmluZycpO1xuXHRcdFx0dGhpcy5uYW1lID0gcGFyc2VkLm9wdGlvbnMubmFtZTtcblx0XHR9XG5cdFxuXHRcdC8qXG5cdFx0ICogRm9yIGRlYnVnZ2luZywgd2Uga2VlcCB0cmFjayBvZiB0aGUgb3JpZ2luYWwgc2hvcnQgbWVzc2FnZSAoYXR0YWNoZWRcblx0XHQgKiB0aGlzIEVycm9yIHBhcnRpY3VsYXJseSkgc2VwYXJhdGVseSBmcm9tIHRoZSBjb21wbGV0ZSBtZXNzYWdlICh3aGljaFxuXHRcdCAqIGluY2x1ZGVzIHRoZSBtZXNzYWdlcyBvZiBvdXIgY2F1c2UgY2hhaW4pLlxuXHRcdCAqL1xuXHRcdHRoaXMuanNlX3Nob3J0bXNnID0gcGFyc2VkLnNob3J0bWVzc2FnZTtcblx0XHRtZXNzYWdlID0gcGFyc2VkLnNob3J0bWVzc2FnZTtcblx0XG5cdFx0Lypcblx0XHQgKiBJZiB3ZSd2ZSBiZWVuIGdpdmVuIGEgY2F1c2UsIHJlY29yZCBhIHJlZmVyZW5jZSB0byBpdCBhbmQgdXBkYXRlIG91clxuXHRcdCAqIG1lc3NhZ2UgYXBwcm9wcmlhdGVseS5cblx0XHQgKi9cblx0XHRjYXVzZSA9IHBhcnNlZC5vcHRpb25zLmNhdXNlO1xuXHRcdGlmIChjYXVzZSkge1xuXHRcdFx0bW9kX2Fzc2VydHBsdXMub2sobW9kX2lzRXJyb3IoY2F1c2UpLCAnY2F1c2UgaXMgbm90IGFuIEVycm9yJyk7XG5cdFx0XHR0aGlzLmpzZV9jYXVzZSA9IGNhdXNlO1xuXHRcblx0XHRcdGlmICghcGFyc2VkLm9wdGlvbnMuc2tpcENhdXNlTWVzc2FnZSkge1xuXHRcdFx0XHRtZXNzYWdlICs9ICc6ICcgKyBjYXVzZS5tZXNzYWdlO1xuXHRcdFx0fVxuXHRcdH1cblx0XG5cdFx0Lypcblx0XHQgKiBJZiB3ZSd2ZSBiZWVuIGdpdmVuIGFuIG9iamVjdCB3aXRoIHByb3BlcnRpZXMsIHNoYWxsb3ctY29weSB0aGF0XG5cdFx0ICogaGVyZS4gIFdlIGRvbid0IHdhbnQgdG8gdXNlIGEgZGVlcCBjb3B5IGluIGNhc2UgdGhlcmUgYXJlIG5vbi1wbGFpblxuXHRcdCAqIG9iamVjdHMgaGVyZSwgYnV0IHdlIGRvbid0IHdhbnQgdG8gdXNlIHRoZSBvcmlnaW5hbCBvYmplY3QgaW4gY2FzZVxuXHRcdCAqIHRoZSBjYWxsZXIgbW9kaWZpZXMgaXQgbGF0ZXIuXG5cdFx0ICovXG5cdFx0dGhpcy5qc2VfaW5mbyA9IHt9O1xuXHRcdGlmIChwYXJzZWQub3B0aW9ucy5pbmZvKSB7XG5cdFx0XHRmb3IgKGsgaW4gcGFyc2VkLm9wdGlvbnMuaW5mbykge1xuXHRcdFx0XHR0aGlzLmpzZV9pbmZvW2tdID0gcGFyc2VkLm9wdGlvbnMuaW5mb1trXTtcblx0XHRcdH1cblx0XHR9XG5cdFxuXHRcdHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG5cdFx0RXJyb3IuY2FsbCh0aGlzLCBtZXNzYWdlKTtcblx0XG5cdFx0aWYgKEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKSB7XG5cdFx0XHRjdG9yID0gcGFyc2VkLm9wdGlvbnMuY29uc3RydWN0b3JPcHQgfHwgdGhpcy5jb25zdHJ1Y3Rvcjtcblx0XHRcdEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIGN0b3IpO1xuXHRcdH1cblx0XG5cdFx0cmV0dXJuICh0aGlzKTtcblx0fVxuXHRcblx0bW9kX3V0aWwuaW5oZXJpdHMoVkVycm9yLCBFcnJvcik7XG5cdFZFcnJvci5wcm90b3R5cGUubmFtZSA9ICdWRXJyb3InO1xuXHRcblx0VkVycm9yLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHZlX3RvU3RyaW5nKClcblx0e1xuXHRcdHZhciBzdHIgPSAodGhpcy5oYXNPd25Qcm9wZXJ0eSgnbmFtZScpICYmIHRoaXMubmFtZSB8fFxuXHRcdFx0dGhpcy5jb25zdHJ1Y3Rvci5uYW1lIHx8IHRoaXMuY29uc3RydWN0b3IucHJvdG90eXBlLm5hbWUpO1xuXHRcdGlmICh0aGlzLm1lc3NhZ2UpXG5cdFx0XHRzdHIgKz0gJzogJyArIHRoaXMubWVzc2FnZTtcblx0XG5cdFx0cmV0dXJuIChzdHIpO1xuXHR9O1xuXHRcblx0Lypcblx0ICogVGhpcyBtZXRob2QgaXMgcHJvdmlkZWQgZm9yIGNvbXBhdGliaWxpdHkuICBOZXcgY2FsbGVycyBzaG91bGQgdXNlXG5cdCAqIFZFcnJvci5jYXVzZSgpIGluc3RlYWQuICBUaGF0IG1ldGhvZCBhbHNvIHVzZXMgdGhlIHNhbmVyIGBudWxsYCByZXR1cm4gdmFsdWVcblx0ICogd2hlbiB0aGVyZSBpcyBubyBjYXVzZS5cblx0ICovXG5cdFZFcnJvci5wcm90b3R5cGUuY2F1c2UgPSBmdW5jdGlvbiB2ZV9jYXVzZSgpXG5cdHtcblx0XHR2YXIgY2F1c2UgPSBWRXJyb3IuY2F1c2UodGhpcyk7XG5cdFx0cmV0dXJuIChjYXVzZSA9PT0gbnVsbCA/IHVuZGVmaW5lZCA6IGNhdXNlKTtcblx0fTtcblx0XG5cdC8qXG5cdCAqIFN0YXRpYyBtZXRob2RzXG5cdCAqXG5cdCAqIFRoZXNlIGNsYXNzLWxldmVsIG1ldGhvZHMgYXJlIHByb3ZpZGVkIHNvIHRoYXQgY2FsbGVycyBjYW4gdXNlIHRoZW0gb25cblx0ICogaW5zdGFuY2VzIG9mIEVycm9ycyB0aGF0IGFyZSBub3QgVkVycm9ycy4gIE5ldyBpbnRlcmZhY2VzIHNob3VsZCBiZSBwcm92aWRlZFxuXHQgKiBvbmx5IHVzaW5nIHN0YXRpYyBtZXRob2RzIHRvIGVsaW1pbmF0ZSB0aGUgY2xhc3Mgb2YgcHJvZ3JhbW1pbmcgbWlzdGFrZSB3aGVyZVxuXHQgKiBwZW9wbGUgZmFpbCB0byBjaGVjayB3aGV0aGVyIHRoZSBFcnJvciBvYmplY3QgaGFzIHRoZSBjb3JyZXNwb25kaW5nIG1ldGhvZHMuXG5cdCAqL1xuXHRcblx0VkVycm9yLmNhdXNlID0gZnVuY3Rpb24gKGVycilcblx0e1xuXHRcdG1vZF9hc3NlcnRwbHVzLm9rKG1vZF9pc0Vycm9yKGVyciksICdlcnIgbXVzdCBiZSBhbiBFcnJvcicpO1xuXHRcdHJldHVybiAobW9kX2lzRXJyb3IoZXJyLmpzZV9jYXVzZSkgPyBlcnIuanNlX2NhdXNlIDogbnVsbCk7XG5cdH07XG5cdFxuXHRWRXJyb3IuaW5mbyA9IGZ1bmN0aW9uIChlcnIpXG5cdHtcblx0XHR2YXIgcnYsIGNhdXNlLCBrO1xuXHRcblx0XHRtb2RfYXNzZXJ0cGx1cy5vayhtb2RfaXNFcnJvcihlcnIpLCAnZXJyIG11c3QgYmUgYW4gRXJyb3InKTtcblx0XHRjYXVzZSA9IFZFcnJvci5jYXVzZShlcnIpO1xuXHRcdGlmIChjYXVzZSAhPT0gbnVsbCkge1xuXHRcdFx0cnYgPSBWRXJyb3IuaW5mbyhjYXVzZSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJ2ID0ge307XG5cdFx0fVxuXHRcblx0XHRpZiAodHlwZW9mIChlcnIuanNlX2luZm8pID09ICdvYmplY3QnICYmIGVyci5qc2VfaW5mbyAhPT0gbnVsbCkge1xuXHRcdFx0Zm9yIChrIGluIGVyci5qc2VfaW5mbykge1xuXHRcdFx0XHRydltrXSA9IGVyci5qc2VfaW5mb1trXTtcblx0XHRcdH1cblx0XHR9XG5cdFxuXHRcdHJldHVybiAocnYpO1xuXHR9O1xuXHRcblx0VkVycm9yLmZpbmRDYXVzZUJ5TmFtZSA9IGZ1bmN0aW9uIChlcnIsIG5hbWUpXG5cdHtcblx0XHR2YXIgY2F1c2U7XG5cdFxuXHRcdG1vZF9hc3NlcnRwbHVzLm9rKG1vZF9pc0Vycm9yKGVyciksICdlcnIgbXVzdCBiZSBhbiBFcnJvcicpO1xuXHRcdG1vZF9hc3NlcnRwbHVzLnN0cmluZyhuYW1lKTtcblx0XHRtb2RfYXNzZXJ0cGx1cy5vayhuYW1lLmxlbmd0aCA+IDAsICduYW1lIGNhbm5vdCBiZSBlbXB0eScpO1xuXHRcblx0XHRmb3IgKGNhdXNlID0gZXJyOyBjYXVzZSAhPT0gbnVsbDsgY2F1c2UgPSBWRXJyb3IuY2F1c2UoY2F1c2UpKSB7XG5cdFx0XHRtb2RfYXNzZXJ0cGx1cy5vayhtb2RfaXNFcnJvcihjYXVzZSkpO1xuXHRcdFx0aWYgKGNhdXNlLm5hbWUgPT0gbmFtZSkge1xuXHRcdFx0XHRyZXR1cm4gKGNhdXNlKTtcblx0XHRcdH1cblx0XHR9XG5cdFxuXHRcdHJldHVybiAobnVsbCk7XG5cdH07XG5cdFxuXHRWRXJyb3IuZnVsbFN0YWNrID0gZnVuY3Rpb24gKGVycilcblx0e1xuXHRcdG1vZF9hc3NlcnRwbHVzLm9rKG1vZF9pc0Vycm9yKGVyciksICdlcnIgbXVzdCBiZSBhbiBFcnJvcicpO1xuXHRcblx0XHR2YXIgY2F1c2UgPSBWRXJyb3IuY2F1c2UoZXJyKTtcblx0XG5cdFx0aWYgKGNhdXNlKSB7XG5cdFx0XHRyZXR1cm4gKGVyci5zdGFjayArICdcXG5jYXVzZWQgYnk6ICcgKyBWRXJyb3IuZnVsbFN0YWNrKGNhdXNlKSk7XG5cdFx0fVxuXHRcblx0XHRyZXR1cm4gKGVyci5zdGFjayk7XG5cdH07XG5cdFxuXHRcblx0Lypcblx0ICogU0Vycm9yIGlzIGxpa2UgVkVycm9yLCBidXQgc3RyaWN0ZXIgYWJvdXQgdHlwZXMuICBZb3UgY2Fubm90IHBhc3MgXCJudWxsXCIgb3Jcblx0ICogXCJ1bmRlZmluZWRcIiBhcyBzdHJpbmcgYXJndW1lbnRzIHRvIHRoZSBmb3JtYXR0ZXIuXG5cdCAqL1xuXHRmdW5jdGlvbiBTRXJyb3IoKVxuXHR7XG5cdFx0dmFyIGFyZ3MsIG9iaiwgcGFyc2VkLCBvcHRpb25zO1xuXHRcblx0XHRhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAwKTtcblx0XHRpZiAoISh0aGlzIGluc3RhbmNlb2YgU0Vycm9yKSkge1xuXHRcdFx0b2JqID0gT2JqZWN0LmNyZWF0ZShTRXJyb3IucHJvdG90eXBlKTtcblx0XHRcdFNFcnJvci5hcHBseShvYmosIGFyZ3VtZW50cyk7XG5cdFx0XHRyZXR1cm4gKG9iaik7XG5cdFx0fVxuXHRcblx0XHRwYXJzZWQgPSBwYXJzZUNvbnN0cnVjdG9yQXJndW1lbnRzKHtcblx0XHQgICAgJ2FyZ3YnOiBhcmdzLFxuXHRcdCAgICAnc3RyaWN0JzogdHJ1ZVxuXHRcdH0pO1xuXHRcblx0XHRvcHRpb25zID0gcGFyc2VkLm9wdGlvbnM7XG5cdFx0VkVycm9yLmNhbGwodGhpcywgb3B0aW9ucywgJyVzJywgcGFyc2VkLnNob3J0bWVzc2FnZSk7XG5cdFxuXHRcdHJldHVybiAodGhpcyk7XG5cdH1cblx0XG5cdC8qXG5cdCAqIFdlIGRvbid0IGJvdGhlciBzZXR0aW5nIFNFcnJvci5wcm90b3R5cGUubmFtZSBiZWNhdXNlIG9uY2UgY29uc3RydWN0ZWQsXG5cdCAqIFNFcnJvcnMgYXJlIGp1c3QgbGlrZSBWRXJyb3JzLlxuXHQgKi9cblx0bW9kX3V0aWwuaW5oZXJpdHMoU0Vycm9yLCBWRXJyb3IpO1xuXHRcblx0XG5cdC8qXG5cdCAqIFJlcHJlc2VudHMgYSBjb2xsZWN0aW9uIG9mIGVycm9ycyBmb3IgdGhlIHB1cnBvc2Ugb2YgY29uc3VtZXJzIHRoYXQgZ2VuZXJhbGx5XG5cdCAqIG9ubHkgZGVhbCB3aXRoIG9uZSBlcnJvci4gIENhbGxlcnMgY2FuIGV4dHJhY3QgdGhlIGluZGl2aWR1YWwgZXJyb3JzXG5cdCAqIGNvbnRhaW5lZCBpbiB0aGlzIG9iamVjdCwgYnV0IG1heSBhbHNvIGp1c3QgdHJlYXQgaXQgYXMgYSBub3JtYWwgc2luZ2xlXG5cdCAqIGVycm9yLCBpbiB3aGljaCBjYXNlIGEgc3VtbWFyeSBtZXNzYWdlIHdpbGwgYmUgcHJpbnRlZC5cblx0ICovXG5cdGZ1bmN0aW9uIE11bHRpRXJyb3IoZXJyb3JzKVxuXHR7XG5cdFx0bW9kX2Fzc2VydHBsdXMuYXJyYXkoZXJyb3JzLCAnbGlzdCBvZiBlcnJvcnMnKTtcblx0XHRtb2RfYXNzZXJ0cGx1cy5vayhlcnJvcnMubGVuZ3RoID4gMCwgJ211c3QgYmUgYXQgbGVhc3Qgb25lIGVycm9yJyk7XG5cdFx0dGhpcy5hc2VfZXJyb3JzID0gZXJyb3JzO1xuXHRcblx0XHRWRXJyb3IuY2FsbCh0aGlzLCB7XG5cdFx0ICAgICdjYXVzZSc6IGVycm9yc1swXVxuXHRcdH0sICdmaXJzdCBvZiAlZCBlcnJvciVzJywgZXJyb3JzLmxlbmd0aCwgZXJyb3JzLmxlbmd0aCA9PSAxID8gJycgOiAncycpO1xuXHR9XG5cdFxuXHRtb2RfdXRpbC5pbmhlcml0cyhNdWx0aUVycm9yLCBWRXJyb3IpO1xuXHRNdWx0aUVycm9yLnByb3RvdHlwZS5uYW1lID0gJ011bHRpRXJyb3InO1xuXHRcblx0TXVsdGlFcnJvci5wcm90b3R5cGUuZXJyb3JzID0gZnVuY3Rpb24gbWVfZXJyb3JzKClcblx0e1xuXHRcdHJldHVybiAodGhpcy5hc2VfZXJyb3JzLnNsaWNlKDApKTtcblx0fTtcblx0XG5cdFxuXHQvKlxuXHQgKiBTZWUgUkVBRE1FLm1kIGZvciByZWZlcmVuY2UgZGV0YWlscy5cblx0ICovXG5cdGZ1bmN0aW9uIFdFcnJvcigpXG5cdHtcblx0XHR2YXIgYXJncywgb2JqLCBwYXJzZWQsIG9wdGlvbnM7XG5cdFxuXHRcdGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDApO1xuXHRcdGlmICghKHRoaXMgaW5zdGFuY2VvZiBXRXJyb3IpKSB7XG5cdFx0XHRvYmogPSBPYmplY3QuY3JlYXRlKFdFcnJvci5wcm90b3R5cGUpO1xuXHRcdFx0V0Vycm9yLmFwcGx5KG9iaiwgYXJncyk7XG5cdFx0XHRyZXR1cm4gKG9iaik7XG5cdFx0fVxuXHRcblx0XHRwYXJzZWQgPSBwYXJzZUNvbnN0cnVjdG9yQXJndW1lbnRzKHtcblx0XHQgICAgJ2FyZ3YnOiBhcmdzLFxuXHRcdCAgICAnc3RyaWN0JzogZmFsc2Vcblx0XHR9KTtcblx0XG5cdFx0b3B0aW9ucyA9IHBhcnNlZC5vcHRpb25zO1xuXHRcdG9wdGlvbnNbJ3NraXBDYXVzZU1lc3NhZ2UnXSA9IHRydWU7XG5cdFx0VkVycm9yLmNhbGwodGhpcywgb3B0aW9ucywgJyVzJywgcGFyc2VkLnNob3J0bWVzc2FnZSk7XG5cdFxuXHRcdHJldHVybiAodGhpcyk7XG5cdH1cblx0XG5cdG1vZF91dGlsLmluaGVyaXRzKFdFcnJvciwgVkVycm9yKTtcblx0V0Vycm9yLnByb3RvdHlwZS5uYW1lID0gJ1dFcnJvcic7XG5cdFxuXHRXRXJyb3IucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gd2VfdG9TdHJpbmcoKVxuXHR7XG5cdFx0dmFyIHN0ciA9ICh0aGlzLmhhc093blByb3BlcnR5KCduYW1lJykgJiYgdGhpcy5uYW1lIHx8XG5cdFx0XHR0aGlzLmNvbnN0cnVjdG9yLm5hbWUgfHwgdGhpcy5jb25zdHJ1Y3Rvci5wcm90b3R5cGUubmFtZSk7XG5cdFx0aWYgKHRoaXMubWVzc2FnZSlcblx0XHRcdHN0ciArPSAnOiAnICsgdGhpcy5tZXNzYWdlO1xuXHRcdGlmICh0aGlzLmpzZV9jYXVzZSAmJiB0aGlzLmpzZV9jYXVzZS5tZXNzYWdlKVxuXHRcdFx0c3RyICs9ICc7IGNhdXNlZCBieSAnICsgdGhpcy5qc2VfY2F1c2UudG9TdHJpbmcoKTtcblx0XG5cdFx0cmV0dXJuIChzdHIpO1xuXHR9O1xuXHRcblx0Lypcblx0ICogRm9yIHB1cmVseSBoaXN0b3JpY2FsIHJlYXNvbnMsIFdFcnJvcidzIGNhdXNlKCkgZnVuY3Rpb24gYWxsb3dzIHlvdSB0byBzZXRcblx0ICogdGhlIGNhdXNlLlxuXHQgKi9cblx0V0Vycm9yLnByb3RvdHlwZS5jYXVzZSA9IGZ1bmN0aW9uIHdlX2NhdXNlKGMpXG5cdHtcblx0XHRpZiAobW9kX2lzRXJyb3IoYykpXG5cdFx0XHR0aGlzLmpzZV9jYXVzZSA9IGM7XG5cdFxuXHRcdHJldHVybiAodGhpcy5qc2VfY2F1c2UpO1xuXHR9O1xuXG5cbi8qKiovIH0sXG4vKiAxMyAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovKGZ1bmN0aW9uKEJ1ZmZlciwgcHJvY2Vzcykgey8vIENvcHlyaWdodCAoYykgMjAxMiwgTWFyayBDYXZhZ2UuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cdC8vIENvcHlyaWdodCAyMDE1IEpveWVudCwgSW5jLlxuXHRcblx0dmFyIGFzc2VydCA9IF9fd2VicGFja19yZXF1aXJlX18oMTkpO1xuXHR2YXIgU3RyZWFtID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMykuU3RyZWFtO1xuXHR2YXIgdXRpbCA9IF9fd2VicGFja19yZXF1aXJlX18oMjApO1xuXHRcblx0XG5cdC8vLy0tLSBHbG9iYWxzXG5cdFxuXHQvKiBKU1NUWUxFRCAqL1xuXHR2YXIgVVVJRF9SRUdFWFAgPSAvXlthLWZBLUYwLTldezh9LVthLWZBLUYwLTldezR9LVthLWZBLUYwLTldezR9LVthLWZBLUYwLTldezR9LVthLWZBLUYwLTldezEyfSQvO1xuXHRcblx0XG5cdC8vLy0tLSBJbnRlcm5hbFxuXHRcblx0ZnVuY3Rpb24gX2NhcGl0YWxpemUoc3RyKSB7XG5cdCAgICByZXR1cm4gKHN0ci5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHN0ci5zbGljZSgxKSk7XG5cdH1cblx0XG5cdGZ1bmN0aW9uIF90b3NzKG5hbWUsIGV4cGVjdGVkLCBvcGVyLCBhcmcsIGFjdHVhbCkge1xuXHQgICAgdGhyb3cgbmV3IGFzc2VydC5Bc3NlcnRpb25FcnJvcih7XG5cdCAgICAgICAgbWVzc2FnZTogdXRpbC5mb3JtYXQoJyVzICglcykgaXMgcmVxdWlyZWQnLCBuYW1lLCBleHBlY3RlZCksXG5cdCAgICAgICAgYWN0dWFsOiAoYWN0dWFsID09PSB1bmRlZmluZWQpID8gdHlwZW9mIChhcmcpIDogYWN0dWFsKGFyZyksXG5cdCAgICAgICAgZXhwZWN0ZWQ6IGV4cGVjdGVkLFxuXHQgICAgICAgIG9wZXJhdG9yOiBvcGVyIHx8ICc9PT0nLFxuXHQgICAgICAgIHN0YWNrU3RhcnRGdW5jdGlvbjogX3Rvc3MuY2FsbGVyXG5cdCAgICB9KTtcblx0fVxuXHRcblx0ZnVuY3Rpb24gX2dldENsYXNzKGFyZykge1xuXHQgICAgcmV0dXJuIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYXJnKS5zbGljZSg4LCAtMSkpO1xuXHR9XG5cdFxuXHRmdW5jdGlvbiBub29wKCkge1xuXHQgICAgLy8gV2h5IGV2ZW4gYm90aGVyIHdpdGggYXNzZXJ0cz9cblx0fVxuXHRcblx0XG5cdC8vLy0tLSBFeHBvcnRzXG5cdFxuXHR2YXIgdHlwZXMgPSB7XG5cdCAgICBib29sOiB7XG5cdCAgICAgICAgY2hlY2s6IGZ1bmN0aW9uIChhcmcpIHsgcmV0dXJuIHR5cGVvZiAoYXJnKSA9PT0gJ2Jvb2xlYW4nOyB9XG5cdCAgICB9LFxuXHQgICAgZnVuYzoge1xuXHQgICAgICAgIGNoZWNrOiBmdW5jdGlvbiAoYXJnKSB7IHJldHVybiB0eXBlb2YgKGFyZykgPT09ICdmdW5jdGlvbic7IH1cblx0ICAgIH0sXG5cdCAgICBzdHJpbmc6IHtcblx0ICAgICAgICBjaGVjazogZnVuY3Rpb24gKGFyZykgeyByZXR1cm4gdHlwZW9mIChhcmcpID09PSAnc3RyaW5nJzsgfVxuXHQgICAgfSxcblx0ICAgIG9iamVjdDoge1xuXHQgICAgICAgIGNoZWNrOiBmdW5jdGlvbiAoYXJnKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0eXBlb2YgKGFyZykgPT09ICdvYmplY3QnICYmIGFyZyAhPT0gbnVsbDtcblx0ICAgICAgICB9XG5cdCAgICB9LFxuXHQgICAgbnVtYmVyOiB7XG5cdCAgICAgICAgY2hlY2s6IGZ1bmN0aW9uIChhcmcpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiAoYXJnKSA9PT0gJ251bWJlcicgJiYgIWlzTmFOKGFyZyk7XG5cdCAgICAgICAgfVxuXHQgICAgfSxcblx0ICAgIGZpbml0ZToge1xuXHQgICAgICAgIGNoZWNrOiBmdW5jdGlvbiAoYXJnKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0eXBlb2YgKGFyZykgPT09ICdudW1iZXInICYmICFpc05hTihhcmcpICYmIGlzRmluaXRlKGFyZyk7XG5cdCAgICAgICAgfVxuXHQgICAgfSxcblx0ICAgIGJ1ZmZlcjoge1xuXHQgICAgICAgIGNoZWNrOiBmdW5jdGlvbiAoYXJnKSB7IHJldHVybiBCdWZmZXIuaXNCdWZmZXIoYXJnKTsgfSxcblx0ICAgICAgICBvcGVyYXRvcjogJ0J1ZmZlci5pc0J1ZmZlcidcblx0ICAgIH0sXG5cdCAgICBhcnJheToge1xuXHQgICAgICAgIGNoZWNrOiBmdW5jdGlvbiAoYXJnKSB7IHJldHVybiBBcnJheS5pc0FycmF5KGFyZyk7IH0sXG5cdCAgICAgICAgb3BlcmF0b3I6ICdBcnJheS5pc0FycmF5J1xuXHQgICAgfSxcblx0ICAgIHN0cmVhbToge1xuXHQgICAgICAgIGNoZWNrOiBmdW5jdGlvbiAoYXJnKSB7IHJldHVybiBhcmcgaW5zdGFuY2VvZiBTdHJlYW07IH0sXG5cdCAgICAgICAgb3BlcmF0b3I6ICdpbnN0YW5jZW9mJyxcblx0ICAgICAgICBhY3R1YWw6IF9nZXRDbGFzc1xuXHQgICAgfSxcblx0ICAgIGRhdGU6IHtcblx0ICAgICAgICBjaGVjazogZnVuY3Rpb24gKGFyZykgeyByZXR1cm4gYXJnIGluc3RhbmNlb2YgRGF0ZTsgfSxcblx0ICAgICAgICBvcGVyYXRvcjogJ2luc3RhbmNlb2YnLFxuXHQgICAgICAgIGFjdHVhbDogX2dldENsYXNzXG5cdCAgICB9LFxuXHQgICAgcmVnZXhwOiB7XG5cdCAgICAgICAgY2hlY2s6IGZ1bmN0aW9uIChhcmcpIHsgcmV0dXJuIGFyZyBpbnN0YW5jZW9mIFJlZ0V4cDsgfSxcblx0ICAgICAgICBvcGVyYXRvcjogJ2luc3RhbmNlb2YnLFxuXHQgICAgICAgIGFjdHVhbDogX2dldENsYXNzXG5cdCAgICB9LFxuXHQgICAgdXVpZDoge1xuXHQgICAgICAgIGNoZWNrOiBmdW5jdGlvbiAoYXJnKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0eXBlb2YgKGFyZykgPT09ICdzdHJpbmcnICYmIFVVSURfUkVHRVhQLnRlc3QoYXJnKTtcblx0ICAgICAgICB9LFxuXHQgICAgICAgIG9wZXJhdG9yOiAnaXNVVUlEJ1xuXHQgICAgfVxuXHR9O1xuXHRcblx0ZnVuY3Rpb24gX3NldEV4cG9ydHMobmRlYnVnKSB7XG5cdCAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKHR5cGVzKTtcblx0ICAgIHZhciBvdXQ7XG5cdFxuXHQgICAgLyogcmUtZXhwb3J0IHN0YW5kYXJkIGFzc2VydCAqL1xuXHQgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfTkRFQlVHKSB7XG5cdCAgICAgICAgb3V0ID0gbm9vcDtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgICAgb3V0ID0gZnVuY3Rpb24gKGFyZywgbXNnKSB7XG5cdCAgICAgICAgICAgIGlmICghYXJnKSB7XG5cdCAgICAgICAgICAgICAgICBfdG9zcyhtc2csICd0cnVlJywgYXJnKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH07XG5cdCAgICB9XG5cdFxuXHQgICAgLyogc3RhbmRhcmQgY2hlY2tzICovXG5cdCAgICBrZXlzLmZvckVhY2goZnVuY3Rpb24gKGspIHtcblx0ICAgICAgICBpZiAobmRlYnVnKSB7XG5cdCAgICAgICAgICAgIG91dFtrXSA9IG5vb3A7XG5cdCAgICAgICAgICAgIHJldHVybjtcblx0ICAgICAgICB9XG5cdCAgICAgICAgdmFyIHR5cGUgPSB0eXBlc1trXTtcblx0ICAgICAgICBvdXRba10gPSBmdW5jdGlvbiAoYXJnLCBtc2cpIHtcblx0ICAgICAgICAgICAgaWYgKCF0eXBlLmNoZWNrKGFyZykpIHtcblx0ICAgICAgICAgICAgICAgIF90b3NzKG1zZywgaywgdHlwZS5vcGVyYXRvciwgYXJnLCB0eXBlLmFjdHVhbCk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9O1xuXHQgICAgfSk7XG5cdFxuXHQgICAgLyogb3B0aW9uYWwgY2hlY2tzICovXG5cdCAgICBrZXlzLmZvckVhY2goZnVuY3Rpb24gKGspIHtcblx0ICAgICAgICB2YXIgbmFtZSA9ICdvcHRpb25hbCcgKyBfY2FwaXRhbGl6ZShrKTtcblx0ICAgICAgICBpZiAobmRlYnVnKSB7XG5cdCAgICAgICAgICAgIG91dFtuYW1lXSA9IG5vb3A7XG5cdCAgICAgICAgICAgIHJldHVybjtcblx0ICAgICAgICB9XG5cdCAgICAgICAgdmFyIHR5cGUgPSB0eXBlc1trXTtcblx0ICAgICAgICBvdXRbbmFtZV0gPSBmdW5jdGlvbiAoYXJnLCBtc2cpIHtcblx0ICAgICAgICAgICAgaWYgKGFyZyA9PT0gdW5kZWZpbmVkIHx8IGFyZyA9PT0gbnVsbCkge1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGlmICghdHlwZS5jaGVjayhhcmcpKSB7XG5cdCAgICAgICAgICAgICAgICBfdG9zcyhtc2csIGssIHR5cGUub3BlcmF0b3IsIGFyZywgdHlwZS5hY3R1YWwpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfTtcblx0ICAgIH0pO1xuXHRcblx0ICAgIC8qIGFycmF5T2YgY2hlY2tzICovXG5cdCAgICBrZXlzLmZvckVhY2goZnVuY3Rpb24gKGspIHtcblx0ICAgICAgICB2YXIgbmFtZSA9ICdhcnJheU9mJyArIF9jYXBpdGFsaXplKGspO1xuXHQgICAgICAgIGlmIChuZGVidWcpIHtcblx0ICAgICAgICAgICAgb3V0W25hbWVdID0gbm9vcDtcblx0ICAgICAgICAgICAgcmV0dXJuO1xuXHQgICAgICAgIH1cblx0ICAgICAgICB2YXIgdHlwZSA9IHR5cGVzW2tdO1xuXHQgICAgICAgIHZhciBleHBlY3RlZCA9ICdbJyArIGsgKyAnXSc7XG5cdCAgICAgICAgb3V0W25hbWVdID0gZnVuY3Rpb24gKGFyZywgbXNnKSB7XG5cdCAgICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheShhcmcpKSB7XG5cdCAgICAgICAgICAgICAgICBfdG9zcyhtc2csIGV4cGVjdGVkLCB0eXBlLm9wZXJhdG9yLCBhcmcsIHR5cGUuYWN0dWFsKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB2YXIgaTtcblx0ICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGFyZy5sZW5ndGg7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgaWYgKCF0eXBlLmNoZWNrKGFyZ1tpXSkpIHtcblx0ICAgICAgICAgICAgICAgICAgICBfdG9zcyhtc2csIGV4cGVjdGVkLCB0eXBlLm9wZXJhdG9yLCBhcmcsIHR5cGUuYWN0dWFsKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH07XG5cdCAgICB9KTtcblx0XG5cdCAgICAvKiBvcHRpb25hbEFycmF5T2YgY2hlY2tzICovXG5cdCAgICBrZXlzLmZvckVhY2goZnVuY3Rpb24gKGspIHtcblx0ICAgICAgICB2YXIgbmFtZSA9ICdvcHRpb25hbEFycmF5T2YnICsgX2NhcGl0YWxpemUoayk7XG5cdCAgICAgICAgaWYgKG5kZWJ1Zykge1xuXHQgICAgICAgICAgICBvdXRbbmFtZV0gPSBub29wO1xuXHQgICAgICAgICAgICByZXR1cm47XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHZhciB0eXBlID0gdHlwZXNba107XG5cdCAgICAgICAgdmFyIGV4cGVjdGVkID0gJ1snICsgayArICddJztcblx0ICAgICAgICBvdXRbbmFtZV0gPSBmdW5jdGlvbiAoYXJnLCBtc2cpIHtcblx0ICAgICAgICAgICAgaWYgKGFyZyA9PT0gdW5kZWZpbmVkIHx8IGFyZyA9PT0gbnVsbCkge1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheShhcmcpKSB7XG5cdCAgICAgICAgICAgICAgICBfdG9zcyhtc2csIGV4cGVjdGVkLCB0eXBlLm9wZXJhdG9yLCBhcmcsIHR5cGUuYWN0dWFsKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB2YXIgaTtcblx0ICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGFyZy5sZW5ndGg7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgaWYgKCF0eXBlLmNoZWNrKGFyZ1tpXSkpIHtcblx0ICAgICAgICAgICAgICAgICAgICBfdG9zcyhtc2csIGV4cGVjdGVkLCB0eXBlLm9wZXJhdG9yLCBhcmcsIHR5cGUuYWN0dWFsKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH07XG5cdCAgICB9KTtcblx0XG5cdCAgICAvKiByZS1leHBvcnQgYnVpbHQtaW4gYXNzZXJ0aW9ucyAqL1xuXHQgICAgT2JqZWN0LmtleXMoYXNzZXJ0KS5mb3JFYWNoKGZ1bmN0aW9uIChrKSB7XG5cdCAgICAgICAgaWYgKGsgPT09ICdBc3NlcnRpb25FcnJvcicpIHtcblx0ICAgICAgICAgICAgb3V0W2tdID0gYXNzZXJ0W2tdO1xuXHQgICAgICAgICAgICByZXR1cm47XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGlmIChuZGVidWcpIHtcblx0ICAgICAgICAgICAgb3V0W2tdID0gbm9vcDtcblx0ICAgICAgICAgICAgcmV0dXJuO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBvdXRba10gPSBhc3NlcnRba107XG5cdCAgICB9KTtcblx0XG5cdCAgICAvKiBleHBvcnQgb3Vyc2VsdmVzIChmb3IgdW5pdCB0ZXN0cyBfb25seV8pICovXG5cdCAgICBvdXQuX3NldEV4cG9ydHMgPSBfc2V0RXhwb3J0cztcblx0XG5cdCAgICByZXR1cm4gb3V0O1xuXHR9XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IF9zZXRFeHBvcnRzKHByb2Nlc3MuZW52Lk5PREVfTkRFQlVHKTtcblx0XG5cdC8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqL30uY2FsbChleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDE0KS5CdWZmZXIsIF9fd2VicGFja19yZXF1aXJlX18oMTgpKSlcblxuLyoqKi8gfSxcbi8qIDE0ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi8oZnVuY3Rpb24oQnVmZmVyLCBnbG9iYWwpIHsvKiFcblx0ICogVGhlIGJ1ZmZlciBtb2R1bGUgZnJvbSBub2RlLmpzLCBmb3IgdGhlIGJyb3dzZXIuXG5cdCAqXG5cdCAqIEBhdXRob3IgICBGZXJvc3MgQWJvdWtoYWRpamVoIDxmZXJvc3NAZmVyb3NzLm9yZz4gPGh0dHA6Ly9mZXJvc3Mub3JnPlxuXHQgKiBAbGljZW5zZSAgTUlUXG5cdCAqL1xuXHQvKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAqL1xuXHRcblx0J3VzZSBzdHJpY3QnXG5cdFxuXHR2YXIgYmFzZTY0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNSlcblx0dmFyIGllZWU3NTQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE2KVxuXHR2YXIgaXNBcnJheSA9IF9fd2VicGFja19yZXF1aXJlX18oMTcpXG5cdFxuXHRleHBvcnRzLkJ1ZmZlciA9IEJ1ZmZlclxuXHRleHBvcnRzLlNsb3dCdWZmZXIgPSBTbG93QnVmZmVyXG5cdGV4cG9ydHMuSU5TUEVDVF9NQVhfQllURVMgPSA1MFxuXHRcblx0LyoqXG5cdCAqIElmIGBCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVGA6XG5cdCAqICAgPT09IHRydWUgICAgVXNlIFVpbnQ4QXJyYXkgaW1wbGVtZW50YXRpb24gKGZhc3Rlc3QpXG5cdCAqICAgPT09IGZhbHNlICAgVXNlIE9iamVjdCBpbXBsZW1lbnRhdGlvbiAobW9zdCBjb21wYXRpYmxlLCBldmVuIElFNilcblx0ICpcblx0ICogQnJvd3NlcnMgdGhhdCBzdXBwb3J0IHR5cGVkIGFycmF5cyBhcmUgSUUgMTArLCBGaXJlZm94IDQrLCBDaHJvbWUgNyssIFNhZmFyaSA1LjErLFxuXHQgKiBPcGVyYSAxMS42KywgaU9TIDQuMisuXG5cdCAqXG5cdCAqIER1ZSB0byB2YXJpb3VzIGJyb3dzZXIgYnVncywgc29tZXRpbWVzIHRoZSBPYmplY3QgaW1wbGVtZW50YXRpb24gd2lsbCBiZSB1c2VkIGV2ZW5cblx0ICogd2hlbiB0aGUgYnJvd3NlciBzdXBwb3J0cyB0eXBlZCBhcnJheXMuXG5cdCAqXG5cdCAqIE5vdGU6XG5cdCAqXG5cdCAqICAgLSBGaXJlZm94IDQtMjkgbGFja3Mgc3VwcG9ydCBmb3IgYWRkaW5nIG5ldyBwcm9wZXJ0aWVzIHRvIGBVaW50OEFycmF5YCBpbnN0YW5jZXMsXG5cdCAqICAgICBTZWU6IGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTY5NTQzOC5cblx0ICpcblx0ICogICAtIENocm9tZSA5LTEwIGlzIG1pc3NpbmcgdGhlIGBUeXBlZEFycmF5LnByb3RvdHlwZS5zdWJhcnJheWAgZnVuY3Rpb24uXG5cdCAqXG5cdCAqICAgLSBJRTEwIGhhcyBhIGJyb2tlbiBgVHlwZWRBcnJheS5wcm90b3R5cGUuc3ViYXJyYXlgIGZ1bmN0aW9uIHdoaWNoIHJldHVybnMgYXJyYXlzIG9mXG5cdCAqICAgICBpbmNvcnJlY3QgbGVuZ3RoIGluIHNvbWUgc2l0dWF0aW9ucy5cblx0XG5cdCAqIFdlIGRldGVjdCB0aGVzZSBidWdneSBicm93c2VycyBhbmQgc2V0IGBCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVGAgdG8gYGZhbHNlYCBzbyB0aGV5XG5cdCAqIGdldCB0aGUgT2JqZWN0IGltcGxlbWVudGF0aW9uLCB3aGljaCBpcyBzbG93ZXIgYnV0IGJlaGF2ZXMgY29ycmVjdGx5LlxuXHQgKi9cblx0QnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgPSBnbG9iYWwuVFlQRURfQVJSQVlfU1VQUE9SVCAhPT0gdW5kZWZpbmVkXG5cdCAgPyBnbG9iYWwuVFlQRURfQVJSQVlfU1VQUE9SVFxuXHQgIDogdHlwZWRBcnJheVN1cHBvcnQoKVxuXHRcblx0Lypcblx0ICogRXhwb3J0IGtNYXhMZW5ndGggYWZ0ZXIgdHlwZWQgYXJyYXkgc3VwcG9ydCBpcyBkZXRlcm1pbmVkLlxuXHQgKi9cblx0ZXhwb3J0cy5rTWF4TGVuZ3RoID0ga01heExlbmd0aCgpXG5cdFxuXHRmdW5jdGlvbiB0eXBlZEFycmF5U3VwcG9ydCAoKSB7XG5cdCAgdHJ5IHtcblx0ICAgIHZhciBhcnIgPSBuZXcgVWludDhBcnJheSgxKVxuXHQgICAgYXJyLl9fcHJvdG9fXyA9IHtfX3Byb3RvX186IFVpbnQ4QXJyYXkucHJvdG90eXBlLCBmb286IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDQyIH19XG5cdCAgICByZXR1cm4gYXJyLmZvbygpID09PSA0MiAmJiAvLyB0eXBlZCBhcnJheSBpbnN0YW5jZXMgY2FuIGJlIGF1Z21lbnRlZFxuXHQgICAgICAgIHR5cGVvZiBhcnIuc3ViYXJyYXkgPT09ICdmdW5jdGlvbicgJiYgLy8gY2hyb21lIDktMTAgbGFjayBgc3ViYXJyYXlgXG5cdCAgICAgICAgYXJyLnN1YmFycmF5KDEsIDEpLmJ5dGVMZW5ndGggPT09IDAgLy8gaWUxMCBoYXMgYnJva2VuIGBzdWJhcnJheWBcblx0ICB9IGNhdGNoIChlKSB7XG5cdCAgICByZXR1cm4gZmFsc2Vcblx0ICB9XG5cdH1cblx0XG5cdGZ1bmN0aW9uIGtNYXhMZW5ndGggKCkge1xuXHQgIHJldHVybiBCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVFxuXHQgICAgPyAweDdmZmZmZmZmXG5cdCAgICA6IDB4M2ZmZmZmZmZcblx0fVxuXHRcblx0ZnVuY3Rpb24gY3JlYXRlQnVmZmVyICh0aGF0LCBsZW5ndGgpIHtcblx0ICBpZiAoa01heExlbmd0aCgpIDwgbGVuZ3RoKSB7XG5cdCAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW52YWxpZCB0eXBlZCBhcnJheSBsZW5ndGgnKVxuXHQgIH1cblx0ICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcblx0ICAgIC8vIFJldHVybiBhbiBhdWdtZW50ZWQgYFVpbnQ4QXJyYXlgIGluc3RhbmNlLCBmb3IgYmVzdCBwZXJmb3JtYW5jZVxuXHQgICAgdGhhdCA9IG5ldyBVaW50OEFycmF5KGxlbmd0aClcblx0ICAgIHRoYXQuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxuXHQgIH0gZWxzZSB7XG5cdCAgICAvLyBGYWxsYmFjazogUmV0dXJuIGFuIG9iamVjdCBpbnN0YW5jZSBvZiB0aGUgQnVmZmVyIGNsYXNzXG5cdCAgICBpZiAodGhhdCA9PT0gbnVsbCkge1xuXHQgICAgICB0aGF0ID0gbmV3IEJ1ZmZlcihsZW5ndGgpXG5cdCAgICB9XG5cdCAgICB0aGF0Lmxlbmd0aCA9IGxlbmd0aFxuXHQgIH1cblx0XG5cdCAgcmV0dXJuIHRoYXRcblx0fVxuXHRcblx0LyoqXG5cdCAqIFRoZSBCdWZmZXIgY29uc3RydWN0b3IgcmV0dXJucyBpbnN0YW5jZXMgb2YgYFVpbnQ4QXJyYXlgIHRoYXQgaGF2ZSB0aGVpclxuXHQgKiBwcm90b3R5cGUgY2hhbmdlZCB0byBgQnVmZmVyLnByb3RvdHlwZWAuIEZ1cnRoZXJtb3JlLCBgQnVmZmVyYCBpcyBhIHN1YmNsYXNzIG9mXG5cdCAqIGBVaW50OEFycmF5YCwgc28gdGhlIHJldHVybmVkIGluc3RhbmNlcyB3aWxsIGhhdmUgYWxsIHRoZSBub2RlIGBCdWZmZXJgIG1ldGhvZHNcblx0ICogYW5kIHRoZSBgVWludDhBcnJheWAgbWV0aG9kcy4gU3F1YXJlIGJyYWNrZXQgbm90YXRpb24gd29ya3MgYXMgZXhwZWN0ZWQgLS0gaXRcblx0ICogcmV0dXJucyBhIHNpbmdsZSBvY3RldC5cblx0ICpcblx0ICogVGhlIGBVaW50OEFycmF5YCBwcm90b3R5cGUgcmVtYWlucyB1bm1vZGlmaWVkLlxuXHQgKi9cblx0XG5cdGZ1bmN0aW9uIEJ1ZmZlciAoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcblx0ICBpZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUICYmICEodGhpcyBpbnN0YW5jZW9mIEJ1ZmZlcikpIHtcblx0ICAgIHJldHVybiBuZXcgQnVmZmVyKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxuXHQgIH1cblx0XG5cdCAgLy8gQ29tbW9uIGNhc2UuXG5cdCAgaWYgKHR5cGVvZiBhcmcgPT09ICdudW1iZXInKSB7XG5cdCAgICBpZiAodHlwZW9mIGVuY29kaW5nT3JPZmZzZXQgPT09ICdzdHJpbmcnKSB7XG5cdCAgICAgIHRocm93IG5ldyBFcnJvcihcblx0ICAgICAgICAnSWYgZW5jb2RpbmcgaXMgc3BlY2lmaWVkIHRoZW4gdGhlIGZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmcnXG5cdCAgICAgIClcblx0ICAgIH1cblx0ICAgIHJldHVybiBhbGxvY1Vuc2FmZSh0aGlzLCBhcmcpXG5cdCAgfVxuXHQgIHJldHVybiBmcm9tKHRoaXMsIGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxuXHR9XG5cdFxuXHRCdWZmZXIucG9vbFNpemUgPSA4MTkyIC8vIG5vdCB1c2VkIGJ5IHRoaXMgaW1wbGVtZW50YXRpb25cblx0XG5cdC8vIFRPRE86IExlZ2FjeSwgbm90IG5lZWRlZCBhbnltb3JlLiBSZW1vdmUgaW4gbmV4dCBtYWpvciB2ZXJzaW9uLlxuXHRCdWZmZXIuX2F1Z21lbnQgPSBmdW5jdGlvbiAoYXJyKSB7XG5cdCAgYXJyLl9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcblx0ICByZXR1cm4gYXJyXG5cdH1cblx0XG5cdGZ1bmN0aW9uIGZyb20gKHRoYXQsIHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcblx0ICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuXHQgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJ2YWx1ZVwiIGFyZ3VtZW50IG11c3Qgbm90IGJlIGEgbnVtYmVyJylcblx0ICB9XG5cdFxuXHQgIGlmICh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmIHZhbHVlIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHtcblx0ICAgIHJldHVybiBmcm9tQXJyYXlCdWZmZXIodGhhdCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcblx0ICB9XG5cdFxuXHQgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG5cdCAgICByZXR1cm4gZnJvbVN0cmluZyh0aGF0LCB2YWx1ZSwgZW5jb2RpbmdPck9mZnNldClcblx0ICB9XG5cdFxuXHQgIHJldHVybiBmcm9tT2JqZWN0KHRoYXQsIHZhbHVlKVxuXHR9XG5cdFxuXHQvKipcblx0ICogRnVuY3Rpb25hbGx5IGVxdWl2YWxlbnQgdG8gQnVmZmVyKGFyZywgZW5jb2RpbmcpIGJ1dCB0aHJvd3MgYSBUeXBlRXJyb3Jcblx0ICogaWYgdmFsdWUgaXMgYSBudW1iZXIuXG5cdCAqIEJ1ZmZlci5mcm9tKHN0clssIGVuY29kaW5nXSlcblx0ICogQnVmZmVyLmZyb20oYXJyYXkpXG5cdCAqIEJ1ZmZlci5mcm9tKGJ1ZmZlcilcblx0ICogQnVmZmVyLmZyb20oYXJyYXlCdWZmZXJbLCBieXRlT2Zmc2V0WywgbGVuZ3RoXV0pXG5cdCAqKi9cblx0QnVmZmVyLmZyb20gPSBmdW5jdGlvbiAodmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuXHQgIHJldHVybiBmcm9tKG51bGwsIHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG5cdH1cblx0XG5cdGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuXHQgIEJ1ZmZlci5wcm90b3R5cGUuX19wcm90b19fID0gVWludDhBcnJheS5wcm90b3R5cGVcblx0ICBCdWZmZXIuX19wcm90b19fID0gVWludDhBcnJheVxuXHQgIGlmICh0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wuc3BlY2llcyAmJlxuXHQgICAgICBCdWZmZXJbU3ltYm9sLnNwZWNpZXNdID09PSBCdWZmZXIpIHtcblx0ICAgIC8vIEZpeCBzdWJhcnJheSgpIGluIEVTMjAxNi4gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlci9wdWxsLzk3XG5cdCAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQnVmZmVyLCBTeW1ib2wuc3BlY2llcywge1xuXHQgICAgICB2YWx1ZTogbnVsbCxcblx0ICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG5cdCAgICB9KVxuXHQgIH1cblx0fVxuXHRcblx0ZnVuY3Rpb24gYXNzZXJ0U2l6ZSAoc2l6ZSkge1xuXHQgIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicpIHtcblx0ICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wic2l6ZVwiIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXInKVxuXHQgIH0gZWxzZSBpZiAoc2l6ZSA8IDApIHtcblx0ICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcInNpemVcIiBhcmd1bWVudCBtdXN0IG5vdCBiZSBuZWdhdGl2ZScpXG5cdCAgfVxuXHR9XG5cdFxuXHRmdW5jdGlvbiBhbGxvYyAodGhhdCwgc2l6ZSwgZmlsbCwgZW5jb2RpbmcpIHtcblx0ICBhc3NlcnRTaXplKHNpemUpXG5cdCAgaWYgKHNpemUgPD0gMCkge1xuXHQgICAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplKVxuXHQgIH1cblx0ICBpZiAoZmlsbCAhPT0gdW5kZWZpbmVkKSB7XG5cdCAgICAvLyBPbmx5IHBheSBhdHRlbnRpb24gdG8gZW5jb2RpbmcgaWYgaXQncyBhIHN0cmluZy4gVGhpc1xuXHQgICAgLy8gcHJldmVudHMgYWNjaWRlbnRhbGx5IHNlbmRpbmcgaW4gYSBudW1iZXIgdGhhdCB3b3VsZFxuXHQgICAgLy8gYmUgaW50ZXJwcmV0dGVkIGFzIGEgc3RhcnQgb2Zmc2V0LlxuXHQgICAgcmV0dXJuIHR5cGVvZiBlbmNvZGluZyA9PT0gJ3N0cmluZydcblx0ICAgICAgPyBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSkuZmlsbChmaWxsLCBlbmNvZGluZylcblx0ICAgICAgOiBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSkuZmlsbChmaWxsKVxuXHQgIH1cblx0ICByZXR1cm4gY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUpXG5cdH1cblx0XG5cdC8qKlxuXHQgKiBDcmVhdGVzIGEgbmV3IGZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuXG5cdCAqIGFsbG9jKHNpemVbLCBmaWxsWywgZW5jb2RpbmddXSlcblx0ICoqL1xuXHRCdWZmZXIuYWxsb2MgPSBmdW5jdGlvbiAoc2l6ZSwgZmlsbCwgZW5jb2RpbmcpIHtcblx0ICByZXR1cm4gYWxsb2MobnVsbCwgc2l6ZSwgZmlsbCwgZW5jb2RpbmcpXG5cdH1cblx0XG5cdGZ1bmN0aW9uIGFsbG9jVW5zYWZlICh0aGF0LCBzaXplKSB7XG5cdCAgYXNzZXJ0U2l6ZShzaXplKVxuXHQgIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSA8IDAgPyAwIDogY2hlY2tlZChzaXplKSB8IDApXG5cdCAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuXHQgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzaXplOyArK2kpIHtcblx0ICAgICAgdGhhdFtpXSA9IDBcblx0ICAgIH1cblx0ICB9XG5cdCAgcmV0dXJuIHRoYXRcblx0fVxuXHRcblx0LyoqXG5cdCAqIEVxdWl2YWxlbnQgdG8gQnVmZmVyKG51bSksIGJ5IGRlZmF1bHQgY3JlYXRlcyBhIG5vbi16ZXJvLWZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuXG5cdCAqICovXG5cdEJ1ZmZlci5hbGxvY1Vuc2FmZSA9IGZ1bmN0aW9uIChzaXplKSB7XG5cdCAgcmV0dXJuIGFsbG9jVW5zYWZlKG51bGwsIHNpemUpXG5cdH1cblx0LyoqXG5cdCAqIEVxdWl2YWxlbnQgdG8gU2xvd0J1ZmZlcihudW0pLCBieSBkZWZhdWx0IGNyZWF0ZXMgYSBub24temVyby1maWxsZWQgQnVmZmVyIGluc3RhbmNlLlxuXHQgKi9cblx0QnVmZmVyLmFsbG9jVW5zYWZlU2xvdyA9IGZ1bmN0aW9uIChzaXplKSB7XG5cdCAgcmV0dXJuIGFsbG9jVW5zYWZlKG51bGwsIHNpemUpXG5cdH1cblx0XG5cdGZ1bmN0aW9uIGZyb21TdHJpbmcgKHRoYXQsIHN0cmluZywgZW5jb2RpbmcpIHtcblx0ICBpZiAodHlwZW9mIGVuY29kaW5nICE9PSAnc3RyaW5nJyB8fCBlbmNvZGluZyA9PT0gJycpIHtcblx0ICAgIGVuY29kaW5nID0gJ3V0ZjgnXG5cdCAgfVxuXHRcblx0ICBpZiAoIUJ1ZmZlci5pc0VuY29kaW5nKGVuY29kaW5nKSkge1xuXHQgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJlbmNvZGluZ1wiIG11c3QgYmUgYSB2YWxpZCBzdHJpbmcgZW5jb2RpbmcnKVxuXHQgIH1cblx0XG5cdCAgdmFyIGxlbmd0aCA9IGJ5dGVMZW5ndGgoc3RyaW5nLCBlbmNvZGluZykgfCAwXG5cdCAgdGhhdCA9IGNyZWF0ZUJ1ZmZlcih0aGF0LCBsZW5ndGgpXG5cdFxuXHQgIHZhciBhY3R1YWwgPSB0aGF0LndyaXRlKHN0cmluZywgZW5jb2RpbmcpXG5cdFxuXHQgIGlmIChhY3R1YWwgIT09IGxlbmd0aCkge1xuXHQgICAgLy8gV3JpdGluZyBhIGhleCBzdHJpbmcsIGZvciBleGFtcGxlLCB0aGF0IGNvbnRhaW5zIGludmFsaWQgY2hhcmFjdGVycyB3aWxsXG5cdCAgICAvLyBjYXVzZSBldmVyeXRoaW5nIGFmdGVyIHRoZSBmaXJzdCBpbnZhbGlkIGNoYXJhY3RlciB0byBiZSBpZ25vcmVkLiAoZS5nLlxuXHQgICAgLy8gJ2FieHhjZCcgd2lsbCBiZSB0cmVhdGVkIGFzICdhYicpXG5cdCAgICB0aGF0ID0gdGhhdC5zbGljZSgwLCBhY3R1YWwpXG5cdCAgfVxuXHRcblx0ICByZXR1cm4gdGhhdFxuXHR9XG5cdFxuXHRmdW5jdGlvbiBmcm9tQXJyYXlMaWtlICh0aGF0LCBhcnJheSkge1xuXHQgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGggPCAwID8gMCA6IGNoZWNrZWQoYXJyYXkubGVuZ3RoKSB8IDBcblx0ICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIGxlbmd0aClcblx0ICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSArPSAxKSB7XG5cdCAgICB0aGF0W2ldID0gYXJyYXlbaV0gJiAyNTVcblx0ICB9XG5cdCAgcmV0dXJuIHRoYXRcblx0fVxuXHRcblx0ZnVuY3Rpb24gZnJvbUFycmF5QnVmZmVyICh0aGF0LCBhcnJheSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG5cdCAgYXJyYXkuYnl0ZUxlbmd0aCAvLyB0aGlzIHRocm93cyBpZiBgYXJyYXlgIGlzIG5vdCBhIHZhbGlkIEFycmF5QnVmZmVyXG5cdFxuXHQgIGlmIChieXRlT2Zmc2V0IDwgMCB8fCBhcnJheS5ieXRlTGVuZ3RoIDwgYnl0ZU9mZnNldCkge1xuXHQgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1xcJ29mZnNldFxcJyBpcyBvdXQgb2YgYm91bmRzJylcblx0ICB9XG5cdFxuXHQgIGlmIChhcnJheS5ieXRlTGVuZ3RoIDwgYnl0ZU9mZnNldCArIChsZW5ndGggfHwgMCkpIHtcblx0ICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcXCdsZW5ndGhcXCcgaXMgb3V0IG9mIGJvdW5kcycpXG5cdCAgfVxuXHRcblx0ICBpZiAoYnl0ZU9mZnNldCA9PT0gdW5kZWZpbmVkICYmIGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG5cdCAgICBhcnJheSA9IG5ldyBVaW50OEFycmF5KGFycmF5KVxuXHQgIH0gZWxzZSBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQpIHtcblx0ICAgIGFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXksIGJ5dGVPZmZzZXQpXG5cdCAgfSBlbHNlIHtcblx0ICAgIGFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXksIGJ5dGVPZmZzZXQsIGxlbmd0aClcblx0ICB9XG5cdFxuXHQgIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuXHQgICAgLy8gUmV0dXJuIGFuIGF1Z21lbnRlZCBgVWludDhBcnJheWAgaW5zdGFuY2UsIGZvciBiZXN0IHBlcmZvcm1hbmNlXG5cdCAgICB0aGF0ID0gYXJyYXlcblx0ICAgIHRoYXQuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxuXHQgIH0gZWxzZSB7XG5cdCAgICAvLyBGYWxsYmFjazogUmV0dXJuIGFuIG9iamVjdCBpbnN0YW5jZSBvZiB0aGUgQnVmZmVyIGNsYXNzXG5cdCAgICB0aGF0ID0gZnJvbUFycmF5TGlrZSh0aGF0LCBhcnJheSlcblx0ICB9XG5cdCAgcmV0dXJuIHRoYXRcblx0fVxuXHRcblx0ZnVuY3Rpb24gZnJvbU9iamVjdCAodGhhdCwgb2JqKSB7XG5cdCAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihvYmopKSB7XG5cdCAgICB2YXIgbGVuID0gY2hlY2tlZChvYmoubGVuZ3RoKSB8IDBcblx0ICAgIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgbGVuKVxuXHRcblx0ICAgIGlmICh0aGF0Lmxlbmd0aCA9PT0gMCkge1xuXHQgICAgICByZXR1cm4gdGhhdFxuXHQgICAgfVxuXHRcblx0ICAgIG9iai5jb3B5KHRoYXQsIDAsIDAsIGxlbilcblx0ICAgIHJldHVybiB0aGF0XG5cdCAgfVxuXHRcblx0ICBpZiAob2JqKSB7XG5cdCAgICBpZiAoKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiZcblx0ICAgICAgICBvYmouYnVmZmVyIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHx8ICdsZW5ndGgnIGluIG9iaikge1xuXHQgICAgICBpZiAodHlwZW9mIG9iai5sZW5ndGggIT09ICdudW1iZXInIHx8IGlzbmFuKG9iai5sZW5ndGgpKSB7XG5cdCAgICAgICAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcih0aGF0LCAwKVxuXHQgICAgICB9XG5cdCAgICAgIHJldHVybiBmcm9tQXJyYXlMaWtlKHRoYXQsIG9iailcblx0ICAgIH1cblx0XG5cdCAgICBpZiAob2JqLnR5cGUgPT09ICdCdWZmZXInICYmIGlzQXJyYXkob2JqLmRhdGEpKSB7XG5cdCAgICAgIHJldHVybiBmcm9tQXJyYXlMaWtlKHRoYXQsIG9iai5kYXRhKVxuXHQgICAgfVxuXHQgIH1cblx0XG5cdCAgdGhyb3cgbmV3IFR5cGVFcnJvcignRmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZywgQnVmZmVyLCBBcnJheUJ1ZmZlciwgQXJyYXksIG9yIGFycmF5LWxpa2Ugb2JqZWN0LicpXG5cdH1cblx0XG5cdGZ1bmN0aW9uIGNoZWNrZWQgKGxlbmd0aCkge1xuXHQgIC8vIE5vdGU6IGNhbm5vdCB1c2UgYGxlbmd0aCA8IGtNYXhMZW5ndGgoKWAgaGVyZSBiZWNhdXNlIHRoYXQgZmFpbHMgd2hlblxuXHQgIC8vIGxlbmd0aCBpcyBOYU4gKHdoaWNoIGlzIG90aGVyd2lzZSBjb2VyY2VkIHRvIHplcm8uKVxuXHQgIGlmIChsZW5ndGggPj0ga01heExlbmd0aCgpKSB7XG5cdCAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQXR0ZW1wdCB0byBhbGxvY2F0ZSBCdWZmZXIgbGFyZ2VyIHRoYW4gbWF4aW11bSAnICtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICdzaXplOiAweCcgKyBrTWF4TGVuZ3RoKCkudG9TdHJpbmcoMTYpICsgJyBieXRlcycpXG5cdCAgfVxuXHQgIHJldHVybiBsZW5ndGggfCAwXG5cdH1cblx0XG5cdGZ1bmN0aW9uIFNsb3dCdWZmZXIgKGxlbmd0aCkge1xuXHQgIGlmICgrbGVuZ3RoICE9IGxlbmd0aCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGVxZXFlcVxuXHQgICAgbGVuZ3RoID0gMFxuXHQgIH1cblx0ICByZXR1cm4gQnVmZmVyLmFsbG9jKCtsZW5ndGgpXG5cdH1cblx0XG5cdEJ1ZmZlci5pc0J1ZmZlciA9IGZ1bmN0aW9uIGlzQnVmZmVyIChiKSB7XG5cdCAgcmV0dXJuICEhKGIgIT0gbnVsbCAmJiBiLl9pc0J1ZmZlcilcblx0fVxuXHRcblx0QnVmZmVyLmNvbXBhcmUgPSBmdW5jdGlvbiBjb21wYXJlIChhLCBiKSB7XG5cdCAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYSkgfHwgIUJ1ZmZlci5pc0J1ZmZlcihiKSkge1xuXHQgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnRzIG11c3QgYmUgQnVmZmVycycpXG5cdCAgfVxuXHRcblx0ICBpZiAoYSA9PT0gYikgcmV0dXJuIDBcblx0XG5cdCAgdmFyIHggPSBhLmxlbmd0aFxuXHQgIHZhciB5ID0gYi5sZW5ndGhcblx0XG5cdCAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IE1hdGgubWluKHgsIHkpOyBpIDwgbGVuOyArK2kpIHtcblx0ICAgIGlmIChhW2ldICE9PSBiW2ldKSB7XG5cdCAgICAgIHggPSBhW2ldXG5cdCAgICAgIHkgPSBiW2ldXG5cdCAgICAgIGJyZWFrXG5cdCAgICB9XG5cdCAgfVxuXHRcblx0ICBpZiAoeCA8IHkpIHJldHVybiAtMVxuXHQgIGlmICh5IDwgeCkgcmV0dXJuIDFcblx0ICByZXR1cm4gMFxuXHR9XG5cdFxuXHRCdWZmZXIuaXNFbmNvZGluZyA9IGZ1bmN0aW9uIGlzRW5jb2RpbmcgKGVuY29kaW5nKSB7XG5cdCAgc3dpdGNoIChTdHJpbmcoZW5jb2RpbmcpLnRvTG93ZXJDYXNlKCkpIHtcblx0ICAgIGNhc2UgJ2hleCc6XG5cdCAgICBjYXNlICd1dGY4Jzpcblx0ICAgIGNhc2UgJ3V0Zi04Jzpcblx0ICAgIGNhc2UgJ2FzY2lpJzpcblx0ICAgIGNhc2UgJ2xhdGluMSc6XG5cdCAgICBjYXNlICdiaW5hcnknOlxuXHQgICAgY2FzZSAnYmFzZTY0Jzpcblx0ICAgIGNhc2UgJ3VjczInOlxuXHQgICAgY2FzZSAndWNzLTInOlxuXHQgICAgY2FzZSAndXRmMTZsZSc6XG5cdCAgICBjYXNlICd1dGYtMTZsZSc6XG5cdCAgICAgIHJldHVybiB0cnVlXG5cdCAgICBkZWZhdWx0OlxuXHQgICAgICByZXR1cm4gZmFsc2Vcblx0ICB9XG5cdH1cblx0XG5cdEJ1ZmZlci5jb25jYXQgPSBmdW5jdGlvbiBjb25jYXQgKGxpc3QsIGxlbmd0aCkge1xuXHQgIGlmICghaXNBcnJheShsaXN0KSkge1xuXHQgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJsaXN0XCIgYXJndW1lbnQgbXVzdCBiZSBhbiBBcnJheSBvZiBCdWZmZXJzJylcblx0ICB9XG5cdFxuXHQgIGlmIChsaXN0Lmxlbmd0aCA9PT0gMCkge1xuXHQgICAgcmV0dXJuIEJ1ZmZlci5hbGxvYygwKVxuXHQgIH1cblx0XG5cdCAgdmFyIGlcblx0ICBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQpIHtcblx0ICAgIGxlbmd0aCA9IDBcblx0ICAgIGZvciAoaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgKytpKSB7XG5cdCAgICAgIGxlbmd0aCArPSBsaXN0W2ldLmxlbmd0aFxuXHQgICAgfVxuXHQgIH1cblx0XG5cdCAgdmFyIGJ1ZmZlciA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShsZW5ndGgpXG5cdCAgdmFyIHBvcyA9IDBcblx0ICBmb3IgKGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7ICsraSkge1xuXHQgICAgdmFyIGJ1ZiA9IGxpc3RbaV1cblx0ICAgIGlmICghQnVmZmVyLmlzQnVmZmVyKGJ1ZikpIHtcblx0ICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJsaXN0XCIgYXJndW1lbnQgbXVzdCBiZSBhbiBBcnJheSBvZiBCdWZmZXJzJylcblx0ICAgIH1cblx0ICAgIGJ1Zi5jb3B5KGJ1ZmZlciwgcG9zKVxuXHQgICAgcG9zICs9IGJ1Zi5sZW5ndGhcblx0ICB9XG5cdCAgcmV0dXJuIGJ1ZmZlclxuXHR9XG5cdFxuXHRmdW5jdGlvbiBieXRlTGVuZ3RoIChzdHJpbmcsIGVuY29kaW5nKSB7XG5cdCAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihzdHJpbmcpKSB7XG5cdCAgICByZXR1cm4gc3RyaW5nLmxlbmd0aFxuXHQgIH1cblx0ICBpZiAodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgQXJyYXlCdWZmZXIuaXNWaWV3ID09PSAnZnVuY3Rpb24nICYmXG5cdCAgICAgIChBcnJheUJ1ZmZlci5pc1ZpZXcoc3RyaW5nKSB8fCBzdHJpbmcgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikpIHtcblx0ICAgIHJldHVybiBzdHJpbmcuYnl0ZUxlbmd0aFxuXHQgIH1cblx0ICBpZiAodHlwZW9mIHN0cmluZyAhPT0gJ3N0cmluZycpIHtcblx0ICAgIHN0cmluZyA9ICcnICsgc3RyaW5nXG5cdCAgfVxuXHRcblx0ICB2YXIgbGVuID0gc3RyaW5nLmxlbmd0aFxuXHQgIGlmIChsZW4gPT09IDApIHJldHVybiAwXG5cdFxuXHQgIC8vIFVzZSBhIGZvciBsb29wIHRvIGF2b2lkIHJlY3Vyc2lvblxuXHQgIHZhciBsb3dlcmVkQ2FzZSA9IGZhbHNlXG5cdCAgZm9yICg7Oykge1xuXHQgICAgc3dpdGNoIChlbmNvZGluZykge1xuXHQgICAgICBjYXNlICdhc2NpaSc6XG5cdCAgICAgIGNhc2UgJ2xhdGluMSc6XG5cdCAgICAgIGNhc2UgJ2JpbmFyeSc6XG5cdCAgICAgICAgcmV0dXJuIGxlblxuXHQgICAgICBjYXNlICd1dGY4Jzpcblx0ICAgICAgY2FzZSAndXRmLTgnOlxuXHQgICAgICBjYXNlIHVuZGVmaW5lZDpcblx0ICAgICAgICByZXR1cm4gdXRmOFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGhcblx0ICAgICAgY2FzZSAndWNzMic6XG5cdCAgICAgIGNhc2UgJ3Vjcy0yJzpcblx0ICAgICAgY2FzZSAndXRmMTZsZSc6XG5cdCAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcblx0ICAgICAgICByZXR1cm4gbGVuICogMlxuXHQgICAgICBjYXNlICdoZXgnOlxuXHQgICAgICAgIHJldHVybiBsZW4gPj4+IDFcblx0ICAgICAgY2FzZSAnYmFzZTY0Jzpcblx0ICAgICAgICByZXR1cm4gYmFzZTY0VG9CeXRlcyhzdHJpbmcpLmxlbmd0aFxuXHQgICAgICBkZWZhdWx0OlxuXHQgICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgcmV0dXJuIHV0ZjhUb0J5dGVzKHN0cmluZykubGVuZ3RoIC8vIGFzc3VtZSB1dGY4XG5cdCAgICAgICAgZW5jb2RpbmcgPSAoJycgKyBlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuXHQgICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuXHQgICAgfVxuXHQgIH1cblx0fVxuXHRCdWZmZXIuYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGhcblx0XG5cdGZ1bmN0aW9uIHNsb3dUb1N0cmluZyAoZW5jb2RpbmcsIHN0YXJ0LCBlbmQpIHtcblx0ICB2YXIgbG93ZXJlZENhc2UgPSBmYWxzZVxuXHRcblx0ICAvLyBObyBuZWVkIHRvIHZlcmlmeSB0aGF0IFwidGhpcy5sZW5ndGggPD0gTUFYX1VJTlQzMlwiIHNpbmNlIGl0J3MgYSByZWFkLW9ubHlcblx0ICAvLyBwcm9wZXJ0eSBvZiBhIHR5cGVkIGFycmF5LlxuXHRcblx0ICAvLyBUaGlzIGJlaGF2ZXMgbmVpdGhlciBsaWtlIFN0cmluZyBub3IgVWludDhBcnJheSBpbiB0aGF0IHdlIHNldCBzdGFydC9lbmRcblx0ICAvLyB0byB0aGVpciB1cHBlci9sb3dlciBib3VuZHMgaWYgdGhlIHZhbHVlIHBhc3NlZCBpcyBvdXQgb2YgcmFuZ2UuXG5cdCAgLy8gdW5kZWZpbmVkIGlzIGhhbmRsZWQgc3BlY2lhbGx5IGFzIHBlciBFQ01BLTI2MiA2dGggRWRpdGlvbixcblx0ICAvLyBTZWN0aW9uIDEzLjMuMy43IFJ1bnRpbWUgU2VtYW50aWNzOiBLZXllZEJpbmRpbmdJbml0aWFsaXphdGlvbi5cblx0ICBpZiAoc3RhcnQgPT09IHVuZGVmaW5lZCB8fCBzdGFydCA8IDApIHtcblx0ICAgIHN0YXJ0ID0gMFxuXHQgIH1cblx0ICAvLyBSZXR1cm4gZWFybHkgaWYgc3RhcnQgPiB0aGlzLmxlbmd0aC4gRG9uZSBoZXJlIHRvIHByZXZlbnQgcG90ZW50aWFsIHVpbnQzMlxuXHQgIC8vIGNvZXJjaW9uIGZhaWwgYmVsb3cuXG5cdCAgaWYgKHN0YXJ0ID4gdGhpcy5sZW5ndGgpIHtcblx0ICAgIHJldHVybiAnJ1xuXHQgIH1cblx0XG5cdCAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkIHx8IGVuZCA+IHRoaXMubGVuZ3RoKSB7XG5cdCAgICBlbmQgPSB0aGlzLmxlbmd0aFxuXHQgIH1cblx0XG5cdCAgaWYgKGVuZCA8PSAwKSB7XG5cdCAgICByZXR1cm4gJydcblx0ICB9XG5cdFxuXHQgIC8vIEZvcmNlIGNvZXJzaW9uIHRvIHVpbnQzMi4gVGhpcyB3aWxsIGFsc28gY29lcmNlIGZhbHNleS9OYU4gdmFsdWVzIHRvIDAuXG5cdCAgZW5kID4+Pj0gMFxuXHQgIHN0YXJ0ID4+Pj0gMFxuXHRcblx0ICBpZiAoZW5kIDw9IHN0YXJ0KSB7XG5cdCAgICByZXR1cm4gJydcblx0ICB9XG5cdFxuXHQgIGlmICghZW5jb2RpbmcpIGVuY29kaW5nID0gJ3V0ZjgnXG5cdFxuXHQgIHdoaWxlICh0cnVlKSB7XG5cdCAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG5cdCAgICAgIGNhc2UgJ2hleCc6XG5cdCAgICAgICAgcmV0dXJuIGhleFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cdFxuXHQgICAgICBjYXNlICd1dGY4Jzpcblx0ICAgICAgY2FzZSAndXRmLTgnOlxuXHQgICAgICAgIHJldHVybiB1dGY4U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblx0XG5cdCAgICAgIGNhc2UgJ2FzY2lpJzpcblx0ICAgICAgICByZXR1cm4gYXNjaWlTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXHRcblx0ICAgICAgY2FzZSAnbGF0aW4xJzpcblx0ICAgICAgY2FzZSAnYmluYXJ5Jzpcblx0ICAgICAgICByZXR1cm4gbGF0aW4xU2xpY2UodGhpcywgc3RhcnQsIGVuZClcblx0XG5cdCAgICAgIGNhc2UgJ2Jhc2U2NCc6XG5cdCAgICAgICAgcmV0dXJuIGJhc2U2NFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cdFxuXHQgICAgICBjYXNlICd1Y3MyJzpcblx0ICAgICAgY2FzZSAndWNzLTInOlxuXHQgICAgICBjYXNlICd1dGYxNmxlJzpcblx0ICAgICAgY2FzZSAndXRmLTE2bGUnOlxuXHQgICAgICAgIHJldHVybiB1dGYxNmxlU2xpY2UodGhpcywgc3RhcnQsIGVuZClcblx0XG5cdCAgICAgIGRlZmF1bHQ6XG5cdCAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG5cdCAgICAgICAgZW5jb2RpbmcgPSAoZW5jb2RpbmcgKyAnJykudG9Mb3dlckNhc2UoKVxuXHQgICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuXHQgICAgfVxuXHQgIH1cblx0fVxuXHRcblx0Ly8gVGhlIHByb3BlcnR5IGlzIHVzZWQgYnkgYEJ1ZmZlci5pc0J1ZmZlcmAgYW5kIGBpcy1idWZmZXJgIChpbiBTYWZhcmkgNS03KSB0byBkZXRlY3Rcblx0Ly8gQnVmZmVyIGluc3RhbmNlcy5cblx0QnVmZmVyLnByb3RvdHlwZS5faXNCdWZmZXIgPSB0cnVlXG5cdFxuXHRmdW5jdGlvbiBzd2FwIChiLCBuLCBtKSB7XG5cdCAgdmFyIGkgPSBiW25dXG5cdCAgYltuXSA9IGJbbV1cblx0ICBiW21dID0gaVxuXHR9XG5cdFxuXHRCdWZmZXIucHJvdG90eXBlLnN3YXAxNiA9IGZ1bmN0aW9uIHN3YXAxNiAoKSB7XG5cdCAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG5cdCAgaWYgKGxlbiAlIDIgIT09IDApIHtcblx0ICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgMTYtYml0cycpXG5cdCAgfVxuXHQgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDIpIHtcblx0ICAgIHN3YXAodGhpcywgaSwgaSArIDEpXG5cdCAgfVxuXHQgIHJldHVybiB0aGlzXG5cdH1cblx0XG5cdEJ1ZmZlci5wcm90b3R5cGUuc3dhcDMyID0gZnVuY3Rpb24gc3dhcDMyICgpIHtcblx0ICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcblx0ICBpZiAobGVuICUgNCAhPT0gMCkge1xuXHQgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0J1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiAzMi1iaXRzJylcblx0ICB9XG5cdCAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gNCkge1xuXHQgICAgc3dhcCh0aGlzLCBpLCBpICsgMylcblx0ICAgIHN3YXAodGhpcywgaSArIDEsIGkgKyAyKVxuXHQgIH1cblx0ICByZXR1cm4gdGhpc1xuXHR9XG5cdFxuXHRCdWZmZXIucHJvdG90eXBlLnN3YXA2NCA9IGZ1bmN0aW9uIHN3YXA2NCAoKSB7XG5cdCAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG5cdCAgaWYgKGxlbiAlIDggIT09IDApIHtcblx0ICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgNjQtYml0cycpXG5cdCAgfVxuXHQgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDgpIHtcblx0ICAgIHN3YXAodGhpcywgaSwgaSArIDcpXG5cdCAgICBzd2FwKHRoaXMsIGkgKyAxLCBpICsgNilcblx0ICAgIHN3YXAodGhpcywgaSArIDIsIGkgKyA1KVxuXHQgICAgc3dhcCh0aGlzLCBpICsgMywgaSArIDQpXG5cdCAgfVxuXHQgIHJldHVybiB0aGlzXG5cdH1cblx0XG5cdEJ1ZmZlci5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyAoKSB7XG5cdCAgdmFyIGxlbmd0aCA9IHRoaXMubGVuZ3RoIHwgMFxuXHQgIGlmIChsZW5ndGggPT09IDApIHJldHVybiAnJ1xuXHQgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSByZXR1cm4gdXRmOFNsaWNlKHRoaXMsIDAsIGxlbmd0aClcblx0ICByZXR1cm4gc2xvd1RvU3RyaW5nLmFwcGx5KHRoaXMsIGFyZ3VtZW50cylcblx0fVxuXHRcblx0QnVmZmVyLnByb3RvdHlwZS5lcXVhbHMgPSBmdW5jdGlvbiBlcXVhbHMgKGIpIHtcblx0ICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihiKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlcicpXG5cdCAgaWYgKHRoaXMgPT09IGIpIHJldHVybiB0cnVlXG5cdCAgcmV0dXJuIEJ1ZmZlci5jb21wYXJlKHRoaXMsIGIpID09PSAwXG5cdH1cblx0XG5cdEJ1ZmZlci5wcm90b3R5cGUuaW5zcGVjdCA9IGZ1bmN0aW9uIGluc3BlY3QgKCkge1xuXHQgIHZhciBzdHIgPSAnJ1xuXHQgIHZhciBtYXggPSBleHBvcnRzLklOU1BFQ1RfTUFYX0JZVEVTXG5cdCAgaWYgKHRoaXMubGVuZ3RoID4gMCkge1xuXHQgICAgc3RyID0gdGhpcy50b1N0cmluZygnaGV4JywgMCwgbWF4KS5tYXRjaCgvLnsyfS9nKS5qb2luKCcgJylcblx0ICAgIGlmICh0aGlzLmxlbmd0aCA+IG1heCkgc3RyICs9ICcgLi4uICdcblx0ICB9XG5cdCAgcmV0dXJuICc8QnVmZmVyICcgKyBzdHIgKyAnPidcblx0fVxuXHRcblx0QnVmZmVyLnByb3RvdHlwZS5jb21wYXJlID0gZnVuY3Rpb24gY29tcGFyZSAodGFyZ2V0LCBzdGFydCwgZW5kLCB0aGlzU3RhcnQsIHRoaXNFbmQpIHtcblx0ICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcih0YXJnZXQpKSB7XG5cdCAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyJylcblx0ICB9XG5cdFxuXHQgIGlmIChzdGFydCA9PT0gdW5kZWZpbmVkKSB7XG5cdCAgICBzdGFydCA9IDBcblx0ICB9XG5cdCAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkKSB7XG5cdCAgICBlbmQgPSB0YXJnZXQgPyB0YXJnZXQubGVuZ3RoIDogMFxuXHQgIH1cblx0ICBpZiAodGhpc1N0YXJ0ID09PSB1bmRlZmluZWQpIHtcblx0ICAgIHRoaXNTdGFydCA9IDBcblx0ICB9XG5cdCAgaWYgKHRoaXNFbmQgPT09IHVuZGVmaW5lZCkge1xuXHQgICAgdGhpc0VuZCA9IHRoaXMubGVuZ3RoXG5cdCAgfVxuXHRcblx0ICBpZiAoc3RhcnQgPCAwIHx8IGVuZCA+IHRhcmdldC5sZW5ndGggfHwgdGhpc1N0YXJ0IDwgMCB8fCB0aGlzRW5kID4gdGhpcy5sZW5ndGgpIHtcblx0ICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdvdXQgb2YgcmFuZ2UgaW5kZXgnKVxuXHQgIH1cblx0XG5cdCAgaWYgKHRoaXNTdGFydCA+PSB0aGlzRW5kICYmIHN0YXJ0ID49IGVuZCkge1xuXHQgICAgcmV0dXJuIDBcblx0ICB9XG5cdCAgaWYgKHRoaXNTdGFydCA+PSB0aGlzRW5kKSB7XG5cdCAgICByZXR1cm4gLTFcblx0ICB9XG5cdCAgaWYgKHN0YXJ0ID49IGVuZCkge1xuXHQgICAgcmV0dXJuIDFcblx0ICB9XG5cdFxuXHQgIHN0YXJ0ID4+Pj0gMFxuXHQgIGVuZCA+Pj49IDBcblx0ICB0aGlzU3RhcnQgPj4+PSAwXG5cdCAgdGhpc0VuZCA+Pj49IDBcblx0XG5cdCAgaWYgKHRoaXMgPT09IHRhcmdldCkgcmV0dXJuIDBcblx0XG5cdCAgdmFyIHggPSB0aGlzRW5kIC0gdGhpc1N0YXJ0XG5cdCAgdmFyIHkgPSBlbmQgLSBzdGFydFxuXHQgIHZhciBsZW4gPSBNYXRoLm1pbih4LCB5KVxuXHRcblx0ICB2YXIgdGhpc0NvcHkgPSB0aGlzLnNsaWNlKHRoaXNTdGFydCwgdGhpc0VuZClcblx0ICB2YXIgdGFyZ2V0Q29weSA9IHRhcmdldC5zbGljZShzdGFydCwgZW5kKVxuXHRcblx0ICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKSB7XG5cdCAgICBpZiAodGhpc0NvcHlbaV0gIT09IHRhcmdldENvcHlbaV0pIHtcblx0ICAgICAgeCA9IHRoaXNDb3B5W2ldXG5cdCAgICAgIHkgPSB0YXJnZXRDb3B5W2ldXG5cdCAgICAgIGJyZWFrXG5cdCAgICB9XG5cdCAgfVxuXHRcblx0ICBpZiAoeCA8IHkpIHJldHVybiAtMVxuXHQgIGlmICh5IDwgeCkgcmV0dXJuIDFcblx0ICByZXR1cm4gMFxuXHR9XG5cdFxuXHQvLyBGaW5kcyBlaXRoZXIgdGhlIGZpcnN0IGluZGV4IG9mIGB2YWxgIGluIGBidWZmZXJgIGF0IG9mZnNldCA+PSBgYnl0ZU9mZnNldGAsXG5cdC8vIE9SIHRoZSBsYXN0IGluZGV4IG9mIGB2YWxgIGluIGBidWZmZXJgIGF0IG9mZnNldCA8PSBgYnl0ZU9mZnNldGAuXG5cdC8vXG5cdC8vIEFyZ3VtZW50czpcblx0Ly8gLSBidWZmZXIgLSBhIEJ1ZmZlciB0byBzZWFyY2hcblx0Ly8gLSB2YWwgLSBhIHN0cmluZywgQnVmZmVyLCBvciBudW1iZXJcblx0Ly8gLSBieXRlT2Zmc2V0IC0gYW4gaW5kZXggaW50byBgYnVmZmVyYDsgd2lsbCBiZSBjbGFtcGVkIHRvIGFuIGludDMyXG5cdC8vIC0gZW5jb2RpbmcgLSBhbiBvcHRpb25hbCBlbmNvZGluZywgcmVsZXZhbnQgaXMgdmFsIGlzIGEgc3RyaW5nXG5cdC8vIC0gZGlyIC0gdHJ1ZSBmb3IgaW5kZXhPZiwgZmFsc2UgZm9yIGxhc3RJbmRleE9mXG5cdGZ1bmN0aW9uIGJpZGlyZWN0aW9uYWxJbmRleE9mIChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcikge1xuXHQgIC8vIEVtcHR5IGJ1ZmZlciBtZWFucyBubyBtYXRjaFxuXHQgIGlmIChidWZmZXIubGVuZ3RoID09PSAwKSByZXR1cm4gLTFcblx0XG5cdCAgLy8gTm9ybWFsaXplIGJ5dGVPZmZzZXRcblx0ICBpZiAodHlwZW9mIGJ5dGVPZmZzZXQgPT09ICdzdHJpbmcnKSB7XG5cdCAgICBlbmNvZGluZyA9IGJ5dGVPZmZzZXRcblx0ICAgIGJ5dGVPZmZzZXQgPSAwXG5cdCAgfSBlbHNlIGlmIChieXRlT2Zmc2V0ID4gMHg3ZmZmZmZmZikge1xuXHQgICAgYnl0ZU9mZnNldCA9IDB4N2ZmZmZmZmZcblx0ICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPCAtMHg4MDAwMDAwMCkge1xuXHQgICAgYnl0ZU9mZnNldCA9IC0weDgwMDAwMDAwXG5cdCAgfVxuXHQgIGJ5dGVPZmZzZXQgPSArYnl0ZU9mZnNldCAgLy8gQ29lcmNlIHRvIE51bWJlci5cblx0ICBpZiAoaXNOYU4oYnl0ZU9mZnNldCkpIHtcblx0ICAgIC8vIGJ5dGVPZmZzZXQ6IGl0IGl0J3MgdW5kZWZpbmVkLCBudWxsLCBOYU4sIFwiZm9vXCIsIGV0Yywgc2VhcmNoIHdob2xlIGJ1ZmZlclxuXHQgICAgYnl0ZU9mZnNldCA9IGRpciA/IDAgOiAoYnVmZmVyLmxlbmd0aCAtIDEpXG5cdCAgfVxuXHRcblx0ICAvLyBOb3JtYWxpemUgYnl0ZU9mZnNldDogbmVnYXRpdmUgb2Zmc2V0cyBzdGFydCBmcm9tIHRoZSBlbmQgb2YgdGhlIGJ1ZmZlclxuXHQgIGlmIChieXRlT2Zmc2V0IDwgMCkgYnl0ZU9mZnNldCA9IGJ1ZmZlci5sZW5ndGggKyBieXRlT2Zmc2V0XG5cdCAgaWYgKGJ5dGVPZmZzZXQgPj0gYnVmZmVyLmxlbmd0aCkge1xuXHQgICAgaWYgKGRpcikgcmV0dXJuIC0xXG5cdCAgICBlbHNlIGJ5dGVPZmZzZXQgPSBidWZmZXIubGVuZ3RoIC0gMVxuXHQgIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA8IDApIHtcblx0ICAgIGlmIChkaXIpIGJ5dGVPZmZzZXQgPSAwXG5cdCAgICBlbHNlIHJldHVybiAtMVxuXHQgIH1cblx0XG5cdCAgLy8gTm9ybWFsaXplIHZhbFxuXHQgIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuXHQgICAgdmFsID0gQnVmZmVyLmZyb20odmFsLCBlbmNvZGluZylcblx0ICB9XG5cdFxuXHQgIC8vIEZpbmFsbHksIHNlYXJjaCBlaXRoZXIgaW5kZXhPZiAoaWYgZGlyIGlzIHRydWUpIG9yIGxhc3RJbmRleE9mXG5cdCAgaWYgKEJ1ZmZlci5pc0J1ZmZlcih2YWwpKSB7XG5cdCAgICAvLyBTcGVjaWFsIGNhc2U6IGxvb2tpbmcgZm9yIGVtcHR5IHN0cmluZy9idWZmZXIgYWx3YXlzIGZhaWxzXG5cdCAgICBpZiAodmFsLmxlbmd0aCA9PT0gMCkge1xuXHQgICAgICByZXR1cm4gLTFcblx0ICAgIH1cblx0ICAgIHJldHVybiBhcnJheUluZGV4T2YoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpXG5cdCAgfSBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuXHQgICAgdmFsID0gdmFsICYgMHhGRiAvLyBTZWFyY2ggZm9yIGEgYnl0ZSB2YWx1ZSBbMC0yNTVdXG5cdCAgICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgJiZcblx0ICAgICAgICB0eXBlb2YgVWludDhBcnJheS5wcm90b3R5cGUuaW5kZXhPZiA9PT0gJ2Z1bmN0aW9uJykge1xuXHQgICAgICBpZiAoZGlyKSB7XG5cdCAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXkucHJvdG90eXBlLmluZGV4T2YuY2FsbChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldClcblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICByZXR1cm4gVWludDhBcnJheS5wcm90b3R5cGUubGFzdEluZGV4T2YuY2FsbChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldClcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgICAgcmV0dXJuIGFycmF5SW5kZXhPZihidWZmZXIsIFsgdmFsIF0sIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpXG5cdCAgfVxuXHRcblx0ICB0aHJvdyBuZXcgVHlwZUVycm9yKCd2YWwgbXVzdCBiZSBzdHJpbmcsIG51bWJlciBvciBCdWZmZXInKVxuXHR9XG5cdFxuXHRmdW5jdGlvbiBhcnJheUluZGV4T2YgKGFyciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKSB7XG5cdCAgdmFyIGluZGV4U2l6ZSA9IDFcblx0ICB2YXIgYXJyTGVuZ3RoID0gYXJyLmxlbmd0aFxuXHQgIHZhciB2YWxMZW5ndGggPSB2YWwubGVuZ3RoXG5cdFxuXHQgIGlmIChlbmNvZGluZyAhPT0gdW5kZWZpbmVkKSB7XG5cdCAgICBlbmNvZGluZyA9IFN0cmluZyhlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuXHQgICAgaWYgKGVuY29kaW5nID09PSAndWNzMicgfHwgZW5jb2RpbmcgPT09ICd1Y3MtMicgfHxcblx0ICAgICAgICBlbmNvZGluZyA9PT0gJ3V0ZjE2bGUnIHx8IGVuY29kaW5nID09PSAndXRmLTE2bGUnKSB7XG5cdCAgICAgIGlmIChhcnIubGVuZ3RoIDwgMiB8fCB2YWwubGVuZ3RoIDwgMikge1xuXHQgICAgICAgIHJldHVybiAtMVxuXHQgICAgICB9XG5cdCAgICAgIGluZGV4U2l6ZSA9IDJcblx0ICAgICAgYXJyTGVuZ3RoIC89IDJcblx0ICAgICAgdmFsTGVuZ3RoIC89IDJcblx0ICAgICAgYnl0ZU9mZnNldCAvPSAyXG5cdCAgICB9XG5cdCAgfVxuXHRcblx0ICBmdW5jdGlvbiByZWFkIChidWYsIGkpIHtcblx0ICAgIGlmIChpbmRleFNpemUgPT09IDEpIHtcblx0ICAgICAgcmV0dXJuIGJ1ZltpXVxuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgcmV0dXJuIGJ1Zi5yZWFkVUludDE2QkUoaSAqIGluZGV4U2l6ZSlcblx0ICAgIH1cblx0ICB9XG5cdFxuXHQgIHZhciBpXG5cdCAgaWYgKGRpcikge1xuXHQgICAgdmFyIGZvdW5kSW5kZXggPSAtMVxuXHQgICAgZm9yIChpID0gYnl0ZU9mZnNldDsgaSA8IGFyckxlbmd0aDsgaSsrKSB7XG5cdCAgICAgIGlmIChyZWFkKGFyciwgaSkgPT09IHJlYWQodmFsLCBmb3VuZEluZGV4ID09PSAtMSA/IDAgOiBpIC0gZm91bmRJbmRleCkpIHtcblx0ICAgICAgICBpZiAoZm91bmRJbmRleCA9PT0gLTEpIGZvdW5kSW5kZXggPSBpXG5cdCAgICAgICAgaWYgKGkgLSBmb3VuZEluZGV4ICsgMSA9PT0gdmFsTGVuZ3RoKSByZXR1cm4gZm91bmRJbmRleCAqIGluZGV4U2l6ZVxuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIGlmIChmb3VuZEluZGV4ICE9PSAtMSkgaSAtPSBpIC0gZm91bmRJbmRleFxuXHQgICAgICAgIGZvdW5kSW5kZXggPSAtMVxuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgfSBlbHNlIHtcblx0ICAgIGlmIChieXRlT2Zmc2V0ICsgdmFsTGVuZ3RoID4gYXJyTGVuZ3RoKSBieXRlT2Zmc2V0ID0gYXJyTGVuZ3RoIC0gdmFsTGVuZ3RoXG5cdCAgICBmb3IgKGkgPSBieXRlT2Zmc2V0OyBpID49IDA7IGktLSkge1xuXHQgICAgICB2YXIgZm91bmQgPSB0cnVlXG5cdCAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdmFsTGVuZ3RoOyBqKyspIHtcblx0ICAgICAgICBpZiAocmVhZChhcnIsIGkgKyBqKSAhPT0gcmVhZCh2YWwsIGopKSB7XG5cdCAgICAgICAgICBmb3VuZCA9IGZhbHNlXG5cdCAgICAgICAgICBicmVha1xuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgICBpZiAoZm91bmQpIHJldHVybiBpXG5cdCAgICB9XG5cdCAgfVxuXHRcblx0ICByZXR1cm4gLTFcblx0fVxuXHRcblx0QnVmZmVyLnByb3RvdHlwZS5pbmNsdWRlcyA9IGZ1bmN0aW9uIGluY2x1ZGVzICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7XG5cdCAgcmV0dXJuIHRoaXMuaW5kZXhPZih2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSAhPT0gLTFcblx0fVxuXHRcblx0QnVmZmVyLnByb3RvdHlwZS5pbmRleE9mID0gZnVuY3Rpb24gaW5kZXhPZiAodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykge1xuXHQgIHJldHVybiBiaWRpcmVjdGlvbmFsSW5kZXhPZih0aGlzLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCB0cnVlKVxuXHR9XG5cdFxuXHRCdWZmZXIucHJvdG90eXBlLmxhc3RJbmRleE9mID0gZnVuY3Rpb24gbGFzdEluZGV4T2YgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHtcblx0ICByZXR1cm4gYmlkaXJlY3Rpb25hbEluZGV4T2YodGhpcywgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZmFsc2UpXG5cdH1cblx0XG5cdGZ1bmN0aW9uIGhleFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcblx0ICBvZmZzZXQgPSBOdW1iZXIob2Zmc2V0KSB8fCAwXG5cdCAgdmFyIHJlbWFpbmluZyA9IGJ1Zi5sZW5ndGggLSBvZmZzZXRcblx0ICBpZiAoIWxlbmd0aCkge1xuXHQgICAgbGVuZ3RoID0gcmVtYWluaW5nXG5cdCAgfSBlbHNlIHtcblx0ICAgIGxlbmd0aCA9IE51bWJlcihsZW5ndGgpXG5cdCAgICBpZiAobGVuZ3RoID4gcmVtYWluaW5nKSB7XG5cdCAgICAgIGxlbmd0aCA9IHJlbWFpbmluZ1xuXHQgICAgfVxuXHQgIH1cblx0XG5cdCAgLy8gbXVzdCBiZSBhbiBldmVuIG51bWJlciBvZiBkaWdpdHNcblx0ICB2YXIgc3RyTGVuID0gc3RyaW5nLmxlbmd0aFxuXHQgIGlmIChzdHJMZW4gJSAyICE9PSAwKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIGhleCBzdHJpbmcnKVxuXHRcblx0ICBpZiAobGVuZ3RoID4gc3RyTGVuIC8gMikge1xuXHQgICAgbGVuZ3RoID0gc3RyTGVuIC8gMlxuXHQgIH1cblx0ICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG5cdCAgICB2YXIgcGFyc2VkID0gcGFyc2VJbnQoc3RyaW5nLnN1YnN0cihpICogMiwgMiksIDE2KVxuXHQgICAgaWYgKGlzTmFOKHBhcnNlZCkpIHJldHVybiBpXG5cdCAgICBidWZbb2Zmc2V0ICsgaV0gPSBwYXJzZWRcblx0ICB9XG5cdCAgcmV0dXJuIGlcblx0fVxuXHRcblx0ZnVuY3Rpb24gdXRmOFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcblx0ICByZXR1cm4gYmxpdEJ1ZmZlcih1dGY4VG9CeXRlcyhzdHJpbmcsIGJ1Zi5sZW5ndGggLSBvZmZzZXQpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxuXHR9XG5cdFxuXHRmdW5jdGlvbiBhc2NpaVdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcblx0ICByZXR1cm4gYmxpdEJ1ZmZlcihhc2NpaVRvQnl0ZXMoc3RyaW5nKSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcblx0fVxuXHRcblx0ZnVuY3Rpb24gbGF0aW4xV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuXHQgIHJldHVybiBhc2NpaVdyaXRlKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblx0fVxuXHRcblx0ZnVuY3Rpb24gYmFzZTY0V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuXHQgIHJldHVybiBibGl0QnVmZmVyKGJhc2U2NFRvQnl0ZXMoc3RyaW5nKSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcblx0fVxuXHRcblx0ZnVuY3Rpb24gdWNzMldyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcblx0ICByZXR1cm4gYmxpdEJ1ZmZlcih1dGYxNmxlVG9CeXRlcyhzdHJpbmcsIGJ1Zi5sZW5ndGggLSBvZmZzZXQpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxuXHR9XG5cdFxuXHRCdWZmZXIucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gd3JpdGUgKHN0cmluZywgb2Zmc2V0LCBsZW5ndGgsIGVuY29kaW5nKSB7XG5cdCAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZylcblx0ICBpZiAob2Zmc2V0ID09PSB1bmRlZmluZWQpIHtcblx0ICAgIGVuY29kaW5nID0gJ3V0ZjgnXG5cdCAgICBsZW5ndGggPSB0aGlzLmxlbmd0aFxuXHQgICAgb2Zmc2V0ID0gMFxuXHQgIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcsIGVuY29kaW5nKVxuXHQgIH0gZWxzZSBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQgJiYgdHlwZW9mIG9mZnNldCA9PT0gJ3N0cmluZycpIHtcblx0ICAgIGVuY29kaW5nID0gb2Zmc2V0XG5cdCAgICBsZW5ndGggPSB0aGlzLmxlbmd0aFxuXHQgICAgb2Zmc2V0ID0gMFxuXHQgIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcsIG9mZnNldFssIGxlbmd0aF1bLCBlbmNvZGluZ10pXG5cdCAgfSBlbHNlIGlmIChpc0Zpbml0ZShvZmZzZXQpKSB7XG5cdCAgICBvZmZzZXQgPSBvZmZzZXQgfCAwXG5cdCAgICBpZiAoaXNGaW5pdGUobGVuZ3RoKSkge1xuXHQgICAgICBsZW5ndGggPSBsZW5ndGggfCAwXG5cdCAgICAgIGlmIChlbmNvZGluZyA9PT0gdW5kZWZpbmVkKSBlbmNvZGluZyA9ICd1dGY4J1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgZW5jb2RpbmcgPSBsZW5ndGhcblx0ICAgICAgbGVuZ3RoID0gdW5kZWZpbmVkXG5cdCAgICB9XG5cdCAgLy8gbGVnYWN5IHdyaXRlKHN0cmluZywgZW5jb2RpbmcsIG9mZnNldCwgbGVuZ3RoKSAtIHJlbW92ZSBpbiB2MC4xM1xuXHQgIH0gZWxzZSB7XG5cdCAgICB0aHJvdyBuZXcgRXJyb3IoXG5cdCAgICAgICdCdWZmZXIud3JpdGUoc3RyaW5nLCBlbmNvZGluZywgb2Zmc2V0WywgbGVuZ3RoXSkgaXMgbm8gbG9uZ2VyIHN1cHBvcnRlZCdcblx0ICAgIClcblx0ICB9XG5cdFxuXHQgIHZhciByZW1haW5pbmcgPSB0aGlzLmxlbmd0aCAtIG9mZnNldFxuXHQgIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCB8fCBsZW5ndGggPiByZW1haW5pbmcpIGxlbmd0aCA9IHJlbWFpbmluZ1xuXHRcblx0ICBpZiAoKHN0cmluZy5sZW5ndGggPiAwICYmIChsZW5ndGggPCAwIHx8IG9mZnNldCA8IDApKSB8fCBvZmZzZXQgPiB0aGlzLmxlbmd0aCkge1xuXHQgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0F0dGVtcHQgdG8gd3JpdGUgb3V0c2lkZSBidWZmZXIgYm91bmRzJylcblx0ICB9XG5cdFxuXHQgIGlmICghZW5jb2RpbmcpIGVuY29kaW5nID0gJ3V0ZjgnXG5cdFxuXHQgIHZhciBsb3dlcmVkQ2FzZSA9IGZhbHNlXG5cdCAgZm9yICg7Oykge1xuXHQgICAgc3dpdGNoIChlbmNvZGluZykge1xuXHQgICAgICBjYXNlICdoZXgnOlxuXHQgICAgICAgIHJldHVybiBoZXhXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXHRcblx0ICAgICAgY2FzZSAndXRmOCc6XG5cdCAgICAgIGNhc2UgJ3V0Zi04Jzpcblx0ICAgICAgICByZXR1cm4gdXRmOFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cdFxuXHQgICAgICBjYXNlICdhc2NpaSc6XG5cdCAgICAgICAgcmV0dXJuIGFzY2lpV3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblx0XG5cdCAgICAgIGNhc2UgJ2xhdGluMSc6XG5cdCAgICAgIGNhc2UgJ2JpbmFyeSc6XG5cdCAgICAgICAgcmV0dXJuIGxhdGluMVdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cdFxuXHQgICAgICBjYXNlICdiYXNlNjQnOlxuXHQgICAgICAgIC8vIFdhcm5pbmc6IG1heExlbmd0aCBub3QgdGFrZW4gaW50byBhY2NvdW50IGluIGJhc2U2NFdyaXRlXG5cdCAgICAgICAgcmV0dXJuIGJhc2U2NFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cdFxuXHQgICAgICBjYXNlICd1Y3MyJzpcblx0ICAgICAgY2FzZSAndWNzLTInOlxuXHQgICAgICBjYXNlICd1dGYxNmxlJzpcblx0ICAgICAgY2FzZSAndXRmLTE2bGUnOlxuXHQgICAgICAgIHJldHVybiB1Y3MyV3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblx0XG5cdCAgICAgIGRlZmF1bHQ6XG5cdCAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG5cdCAgICAgICAgZW5jb2RpbmcgPSAoJycgKyBlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuXHQgICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuXHQgICAgfVxuXHQgIH1cblx0fVxuXHRcblx0QnVmZmVyLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04gKCkge1xuXHQgIHJldHVybiB7XG5cdCAgICB0eXBlOiAnQnVmZmVyJyxcblx0ICAgIGRhdGE6IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHRoaXMuX2FyciB8fCB0aGlzLCAwKVxuXHQgIH1cblx0fVxuXHRcblx0ZnVuY3Rpb24gYmFzZTY0U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuXHQgIGlmIChzdGFydCA9PT0gMCAmJiBlbmQgPT09IGJ1Zi5sZW5ndGgpIHtcblx0ICAgIHJldHVybiBiYXNlNjQuZnJvbUJ5dGVBcnJheShidWYpXG5cdCAgfSBlbHNlIHtcblx0ICAgIHJldHVybiBiYXNlNjQuZnJvbUJ5dGVBcnJheShidWYuc2xpY2Uoc3RhcnQsIGVuZCkpXG5cdCAgfVxuXHR9XG5cdFxuXHRmdW5jdGlvbiB1dGY4U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuXHQgIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcblx0ICB2YXIgcmVzID0gW11cblx0XG5cdCAgdmFyIGkgPSBzdGFydFxuXHQgIHdoaWxlIChpIDwgZW5kKSB7XG5cdCAgICB2YXIgZmlyc3RCeXRlID0gYnVmW2ldXG5cdCAgICB2YXIgY29kZVBvaW50ID0gbnVsbFxuXHQgICAgdmFyIGJ5dGVzUGVyU2VxdWVuY2UgPSAoZmlyc3RCeXRlID4gMHhFRikgPyA0XG5cdCAgICAgIDogKGZpcnN0Qnl0ZSA+IDB4REYpID8gM1xuXHQgICAgICA6IChmaXJzdEJ5dGUgPiAweEJGKSA/IDJcblx0ICAgICAgOiAxXG5cdFxuXHQgICAgaWYgKGkgKyBieXRlc1BlclNlcXVlbmNlIDw9IGVuZCkge1xuXHQgICAgICB2YXIgc2Vjb25kQnl0ZSwgdGhpcmRCeXRlLCBmb3VydGhCeXRlLCB0ZW1wQ29kZVBvaW50XG5cdFxuXHQgICAgICBzd2l0Y2ggKGJ5dGVzUGVyU2VxdWVuY2UpIHtcblx0ICAgICAgICBjYXNlIDE6XG5cdCAgICAgICAgICBpZiAoZmlyc3RCeXRlIDwgMHg4MCkge1xuXHQgICAgICAgICAgICBjb2RlUG9pbnQgPSBmaXJzdEJ5dGVcblx0ICAgICAgICAgIH1cblx0ICAgICAgICAgIGJyZWFrXG5cdCAgICAgICAgY2FzZSAyOlxuXHQgICAgICAgICAgc2Vjb25kQnl0ZSA9IGJ1ZltpICsgMV1cblx0ICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG5cdCAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHgxRikgPDwgMHg2IHwgKHNlY29uZEJ5dGUgJiAweDNGKVxuXHQgICAgICAgICAgICBpZiAodGVtcENvZGVQb2ludCA+IDB4N0YpIHtcblx0ICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgIH1cblx0ICAgICAgICAgIGJyZWFrXG5cdCAgICAgICAgY2FzZSAzOlxuXHQgICAgICAgICAgc2Vjb25kQnl0ZSA9IGJ1ZltpICsgMV1cblx0ICAgICAgICAgIHRoaXJkQnl0ZSA9IGJ1ZltpICsgMl1cblx0ICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwICYmICh0aGlyZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCkge1xuXHQgICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4RikgPDwgMHhDIHwgKHNlY29uZEJ5dGUgJiAweDNGKSA8PCAweDYgfCAodGhpcmRCeXRlICYgMHgzRilcblx0ICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweDdGRiAmJiAodGVtcENvZGVQb2ludCA8IDB4RDgwMCB8fCB0ZW1wQ29kZVBvaW50ID4gMHhERkZGKSkge1xuXHQgICAgICAgICAgICAgIGNvZGVQb2ludCA9IHRlbXBDb2RlUG9pbnRcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgfVxuXHQgICAgICAgICAgYnJlYWtcblx0ICAgICAgICBjYXNlIDQ6XG5cdCAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuXHQgICAgICAgICAgdGhpcmRCeXRlID0gYnVmW2kgKyAyXVxuXHQgICAgICAgICAgZm91cnRoQnl0ZSA9IGJ1ZltpICsgM11cblx0ICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwICYmICh0aGlyZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAoZm91cnRoQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG5cdCAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHhGKSA8PCAweDEyIHwgKHNlY29uZEJ5dGUgJiAweDNGKSA8PCAweEMgfCAodGhpcmRCeXRlICYgMHgzRikgPDwgMHg2IHwgKGZvdXJ0aEJ5dGUgJiAweDNGKVxuXHQgICAgICAgICAgICBpZiAodGVtcENvZGVQb2ludCA+IDB4RkZGRiAmJiB0ZW1wQ29kZVBvaW50IDwgMHgxMTAwMDApIHtcblx0ICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgfVxuXHRcblx0ICAgIGlmIChjb2RlUG9pbnQgPT09IG51bGwpIHtcblx0ICAgICAgLy8gd2UgZGlkIG5vdCBnZW5lcmF0ZSBhIHZhbGlkIGNvZGVQb2ludCBzbyBpbnNlcnQgYVxuXHQgICAgICAvLyByZXBsYWNlbWVudCBjaGFyIChVK0ZGRkQpIGFuZCBhZHZhbmNlIG9ubHkgMSBieXRlXG5cdCAgICAgIGNvZGVQb2ludCA9IDB4RkZGRFxuXHQgICAgICBieXRlc1BlclNlcXVlbmNlID0gMVxuXHQgICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPiAweEZGRkYpIHtcblx0ICAgICAgLy8gZW5jb2RlIHRvIHV0ZjE2IChzdXJyb2dhdGUgcGFpciBkYW5jZSlcblx0ICAgICAgY29kZVBvaW50IC09IDB4MTAwMDBcblx0ICAgICAgcmVzLnB1c2goY29kZVBvaW50ID4+PiAxMCAmIDB4M0ZGIHwgMHhEODAwKVxuXHQgICAgICBjb2RlUG9pbnQgPSAweERDMDAgfCBjb2RlUG9pbnQgJiAweDNGRlxuXHQgICAgfVxuXHRcblx0ICAgIHJlcy5wdXNoKGNvZGVQb2ludClcblx0ICAgIGkgKz0gYnl0ZXNQZXJTZXF1ZW5jZVxuXHQgIH1cblx0XG5cdCAgcmV0dXJuIGRlY29kZUNvZGVQb2ludHNBcnJheShyZXMpXG5cdH1cblx0XG5cdC8vIEJhc2VkIG9uIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzIyNzQ3MjcyLzY4MDc0MiwgdGhlIGJyb3dzZXIgd2l0aFxuXHQvLyB0aGUgbG93ZXN0IGxpbWl0IGlzIENocm9tZSwgd2l0aCAweDEwMDAwIGFyZ3MuXG5cdC8vIFdlIGdvIDEgbWFnbml0dWRlIGxlc3MsIGZvciBzYWZldHlcblx0dmFyIE1BWF9BUkdVTUVOVFNfTEVOR1RIID0gMHgxMDAwXG5cdFxuXHRmdW5jdGlvbiBkZWNvZGVDb2RlUG9pbnRzQXJyYXkgKGNvZGVQb2ludHMpIHtcblx0ICB2YXIgbGVuID0gY29kZVBvaW50cy5sZW5ndGhcblx0ICBpZiAobGVuIDw9IE1BWF9BUkdVTUVOVFNfTEVOR1RIKSB7XG5cdCAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsIGNvZGVQb2ludHMpIC8vIGF2b2lkIGV4dHJhIHNsaWNlKClcblx0ICB9XG5cdFxuXHQgIC8vIERlY29kZSBpbiBjaHVua3MgdG8gYXZvaWQgXCJjYWxsIHN0YWNrIHNpemUgZXhjZWVkZWRcIi5cblx0ICB2YXIgcmVzID0gJydcblx0ICB2YXIgaSA9IDBcblx0ICB3aGlsZSAoaSA8IGxlbikge1xuXHQgICAgcmVzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoXG5cdCAgICAgIFN0cmluZyxcblx0ICAgICAgY29kZVBvaW50cy5zbGljZShpLCBpICs9IE1BWF9BUkdVTUVOVFNfTEVOR1RIKVxuXHQgICAgKVxuXHQgIH1cblx0ICByZXR1cm4gcmVzXG5cdH1cblx0XG5cdGZ1bmN0aW9uIGFzY2lpU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuXHQgIHZhciByZXQgPSAnJ1xuXHQgIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcblx0XG5cdCAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcblx0ICAgIHJldCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ1ZltpXSAmIDB4N0YpXG5cdCAgfVxuXHQgIHJldHVybiByZXRcblx0fVxuXHRcblx0ZnVuY3Rpb24gbGF0aW4xU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuXHQgIHZhciByZXQgPSAnJ1xuXHQgIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcblx0XG5cdCAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcblx0ICAgIHJldCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ1ZltpXSlcblx0ICB9XG5cdCAgcmV0dXJuIHJldFxuXHR9XG5cdFxuXHRmdW5jdGlvbiBoZXhTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG5cdCAgdmFyIGxlbiA9IGJ1Zi5sZW5ndGhcblx0XG5cdCAgaWYgKCFzdGFydCB8fCBzdGFydCA8IDApIHN0YXJ0ID0gMFxuXHQgIGlmICghZW5kIHx8IGVuZCA8IDAgfHwgZW5kID4gbGVuKSBlbmQgPSBsZW5cblx0XG5cdCAgdmFyIG91dCA9ICcnXG5cdCAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcblx0ICAgIG91dCArPSB0b0hleChidWZbaV0pXG5cdCAgfVxuXHQgIHJldHVybiBvdXRcblx0fVxuXHRcblx0ZnVuY3Rpb24gdXRmMTZsZVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcblx0ICB2YXIgYnl0ZXMgPSBidWYuc2xpY2Uoc3RhcnQsIGVuZClcblx0ICB2YXIgcmVzID0gJydcblx0ICBmb3IgKHZhciBpID0gMDsgaSA8IGJ5dGVzLmxlbmd0aDsgaSArPSAyKSB7XG5cdCAgICByZXMgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShieXRlc1tpXSArIGJ5dGVzW2kgKyAxXSAqIDI1Nilcblx0ICB9XG5cdCAgcmV0dXJuIHJlc1xuXHR9XG5cdFxuXHRCdWZmZXIucHJvdG90eXBlLnNsaWNlID0gZnVuY3Rpb24gc2xpY2UgKHN0YXJ0LCBlbmQpIHtcblx0ICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcblx0ICBzdGFydCA9IH5+c3RhcnRcblx0ICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IH5+ZW5kXG5cdFxuXHQgIGlmIChzdGFydCA8IDApIHtcblx0ICAgIHN0YXJ0ICs9IGxlblxuXHQgICAgaWYgKHN0YXJ0IDwgMCkgc3RhcnQgPSAwXG5cdCAgfSBlbHNlIGlmIChzdGFydCA+IGxlbikge1xuXHQgICAgc3RhcnQgPSBsZW5cblx0ICB9XG5cdFxuXHQgIGlmIChlbmQgPCAwKSB7XG5cdCAgICBlbmQgKz0gbGVuXG5cdCAgICBpZiAoZW5kIDwgMCkgZW5kID0gMFxuXHQgIH0gZWxzZSBpZiAoZW5kID4gbGVuKSB7XG5cdCAgICBlbmQgPSBsZW5cblx0ICB9XG5cdFxuXHQgIGlmIChlbmQgPCBzdGFydCkgZW5kID0gc3RhcnRcblx0XG5cdCAgdmFyIG5ld0J1ZlxuXHQgIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuXHQgICAgbmV3QnVmID0gdGhpcy5zdWJhcnJheShzdGFydCwgZW5kKVxuXHQgICAgbmV3QnVmLl9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcblx0ICB9IGVsc2Uge1xuXHQgICAgdmFyIHNsaWNlTGVuID0gZW5kIC0gc3RhcnRcblx0ICAgIG5ld0J1ZiA9IG5ldyBCdWZmZXIoc2xpY2VMZW4sIHVuZGVmaW5lZClcblx0ICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2xpY2VMZW47ICsraSkge1xuXHQgICAgICBuZXdCdWZbaV0gPSB0aGlzW2kgKyBzdGFydF1cblx0ICAgIH1cblx0ICB9XG5cdFxuXHQgIHJldHVybiBuZXdCdWZcblx0fVxuXHRcblx0Lypcblx0ICogTmVlZCB0byBtYWtlIHN1cmUgdGhhdCBidWZmZXIgaXNuJ3QgdHJ5aW5nIHRvIHdyaXRlIG91dCBvZiBib3VuZHMuXG5cdCAqL1xuXHRmdW5jdGlvbiBjaGVja09mZnNldCAob2Zmc2V0LCBleHQsIGxlbmd0aCkge1xuXHQgIGlmICgob2Zmc2V0ICUgMSkgIT09IDAgfHwgb2Zmc2V0IDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ29mZnNldCBpcyBub3QgdWludCcpXG5cdCAgaWYgKG9mZnNldCArIGV4dCA+IGxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RyeWluZyB0byBhY2Nlc3MgYmV5b25kIGJ1ZmZlciBsZW5ndGgnKVxuXHR9XG5cdFxuXHRCdWZmZXIucHJvdG90eXBlLnJlYWRVSW50TEUgPSBmdW5jdGlvbiByZWFkVUludExFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG5cdCAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuXHQgIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuXHQgIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cdFxuXHQgIHZhciB2YWwgPSB0aGlzW29mZnNldF1cblx0ICB2YXIgbXVsID0gMVxuXHQgIHZhciBpID0gMFxuXHQgIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG5cdCAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyBpXSAqIG11bFxuXHQgIH1cblx0XG5cdCAgcmV0dXJuIHZhbFxuXHR9XG5cdFxuXHRCdWZmZXIucHJvdG90eXBlLnJlYWRVSW50QkUgPSBmdW5jdGlvbiByZWFkVUludEJFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG5cdCAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuXHQgIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuXHQgIGlmICghbm9Bc3NlcnQpIHtcblx0ICAgIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cdCAgfVxuXHRcblx0ICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAtLWJ5dGVMZW5ndGhdXG5cdCAgdmFyIG11bCA9IDFcblx0ICB3aGlsZSAoYnl0ZUxlbmd0aCA+IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcblx0ICAgIHZhbCArPSB0aGlzW29mZnNldCArIC0tYnl0ZUxlbmd0aF0gKiBtdWxcblx0ICB9XG5cdFxuXHQgIHJldHVybiB2YWxcblx0fVxuXHRcblx0QnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDggPSBmdW5jdGlvbiByZWFkVUludDggKG9mZnNldCwgbm9Bc3NlcnQpIHtcblx0ICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDEsIHRoaXMubGVuZ3RoKVxuXHQgIHJldHVybiB0aGlzW29mZnNldF1cblx0fVxuXHRcblx0QnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDE2TEUgPSBmdW5jdGlvbiByZWFkVUludDE2TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcblx0ICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuXHQgIHJldHVybiB0aGlzW29mZnNldF0gfCAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KVxuXHR9XG5cdFxuXHRCdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MTZCRSA9IGZ1bmN0aW9uIHJlYWRVSW50MTZCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuXHQgIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG5cdCAgcmV0dXJuICh0aGlzW29mZnNldF0gPDwgOCkgfCB0aGlzW29mZnNldCArIDFdXG5cdH1cblx0XG5cdEJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQzMkxFID0gZnVuY3Rpb24gcmVhZFVJbnQzMkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG5cdCAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblx0XG5cdCAgcmV0dXJuICgodGhpc1tvZmZzZXRdKSB8XG5cdCAgICAgICh0aGlzW29mZnNldCArIDFdIDw8IDgpIHxcblx0ICAgICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgMTYpKSArXG5cdCAgICAgICh0aGlzW29mZnNldCArIDNdICogMHgxMDAwMDAwKVxuXHR9XG5cdFxuXHRCdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MzJCRSA9IGZ1bmN0aW9uIHJlYWRVSW50MzJCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuXHQgIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cdFxuXHQgIHJldHVybiAodGhpc1tvZmZzZXRdICogMHgxMDAwMDAwKSArXG5cdCAgICAoKHRoaXNbb2Zmc2V0ICsgMV0gPDwgMTYpIHxcblx0ICAgICh0aGlzW29mZnNldCArIDJdIDw8IDgpIHxcblx0ICAgIHRoaXNbb2Zmc2V0ICsgM10pXG5cdH1cblx0XG5cdEJ1ZmZlci5wcm90b3R5cGUucmVhZEludExFID0gZnVuY3Rpb24gcmVhZEludExFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG5cdCAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuXHQgIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuXHQgIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cdFxuXHQgIHZhciB2YWwgPSB0aGlzW29mZnNldF1cblx0ICB2YXIgbXVsID0gMVxuXHQgIHZhciBpID0gMFxuXHQgIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG5cdCAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyBpXSAqIG11bFxuXHQgIH1cblx0ICBtdWwgKj0gMHg4MFxuXHRcblx0ICBpZiAodmFsID49IG11bCkgdmFsIC09IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKVxuXHRcblx0ICByZXR1cm4gdmFsXG5cdH1cblx0XG5cdEJ1ZmZlci5wcm90b3R5cGUucmVhZEludEJFID0gZnVuY3Rpb24gcmVhZEludEJFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG5cdCAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuXHQgIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuXHQgIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cdFxuXHQgIHZhciBpID0gYnl0ZUxlbmd0aFxuXHQgIHZhciBtdWwgPSAxXG5cdCAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0ICsgLS1pXVxuXHQgIHdoaWxlIChpID4gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuXHQgICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgLS1pXSAqIG11bFxuXHQgIH1cblx0ICBtdWwgKj0gMHg4MFxuXHRcblx0ICBpZiAodmFsID49IG11bCkgdmFsIC09IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKVxuXHRcblx0ICByZXR1cm4gdmFsXG5cdH1cblx0XG5cdEJ1ZmZlci5wcm90b3R5cGUucmVhZEludDggPSBmdW5jdGlvbiByZWFkSW50OCAob2Zmc2V0LCBub0Fzc2VydCkge1xuXHQgIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMSwgdGhpcy5sZW5ndGgpXG5cdCAgaWYgKCEodGhpc1tvZmZzZXRdICYgMHg4MCkpIHJldHVybiAodGhpc1tvZmZzZXRdKVxuXHQgIHJldHVybiAoKDB4ZmYgLSB0aGlzW29mZnNldF0gKyAxKSAqIC0xKVxuXHR9XG5cdFxuXHRCdWZmZXIucHJvdG90eXBlLnJlYWRJbnQxNkxFID0gZnVuY3Rpb24gcmVhZEludDE2TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcblx0ICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuXHQgIHZhciB2YWwgPSB0aGlzW29mZnNldF0gfCAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KVxuXHQgIHJldHVybiAodmFsICYgMHg4MDAwKSA/IHZhbCB8IDB4RkZGRjAwMDAgOiB2YWxcblx0fVxuXHRcblx0QnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MTZCRSA9IGZ1bmN0aW9uIHJlYWRJbnQxNkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG5cdCAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcblx0ICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAxXSB8ICh0aGlzW29mZnNldF0gPDwgOClcblx0ICByZXR1cm4gKHZhbCAmIDB4ODAwMCkgPyB2YWwgfCAweEZGRkYwMDAwIDogdmFsXG5cdH1cblx0XG5cdEJ1ZmZlci5wcm90b3R5cGUucmVhZEludDMyTEUgPSBmdW5jdGlvbiByZWFkSW50MzJMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuXHQgIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cdFxuXHQgIHJldHVybiAodGhpc1tvZmZzZXRdKSB8XG5cdCAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KSB8XG5cdCAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCAxNikgfFxuXHQgICAgKHRoaXNbb2Zmc2V0ICsgM10gPDwgMjQpXG5cdH1cblx0XG5cdEJ1ZmZlci5wcm90b3R5cGUucmVhZEludDMyQkUgPSBmdW5jdGlvbiByZWFkSW50MzJCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuXHQgIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cdFxuXHQgIHJldHVybiAodGhpc1tvZmZzZXRdIDw8IDI0KSB8XG5cdCAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCAxNikgfFxuXHQgICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgOCkgfFxuXHQgICAgKHRoaXNbb2Zmc2V0ICsgM10pXG5cdH1cblx0XG5cdEJ1ZmZlci5wcm90b3R5cGUucmVhZEZsb2F0TEUgPSBmdW5jdGlvbiByZWFkRmxvYXRMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuXHQgIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cdCAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIHRydWUsIDIzLCA0KVxuXHR9XG5cdFxuXHRCdWZmZXIucHJvdG90eXBlLnJlYWRGbG9hdEJFID0gZnVuY3Rpb24gcmVhZEZsb2F0QkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcblx0ICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXHQgIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCBmYWxzZSwgMjMsIDQpXG5cdH1cblx0XG5cdEJ1ZmZlci5wcm90b3R5cGUucmVhZERvdWJsZUxFID0gZnVuY3Rpb24gcmVhZERvdWJsZUxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG5cdCAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA4LCB0aGlzLmxlbmd0aClcblx0ICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgdHJ1ZSwgNTIsIDgpXG5cdH1cblx0XG5cdEJ1ZmZlci5wcm90b3R5cGUucmVhZERvdWJsZUJFID0gZnVuY3Rpb24gcmVhZERvdWJsZUJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG5cdCAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA4LCB0aGlzLmxlbmd0aClcblx0ICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgZmFsc2UsIDUyLCA4KVxuXHR9XG5cdFxuXHRmdW5jdGlvbiBjaGVja0ludCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBleHQsIG1heCwgbWluKSB7XG5cdCAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYnVmKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJidWZmZXJcIiBhcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyIGluc3RhbmNlJylcblx0ICBpZiAodmFsdWUgPiBtYXggfHwgdmFsdWUgPCBtaW4pIHRocm93IG5ldyBSYW5nZUVycm9yKCdcInZhbHVlXCIgYXJndW1lbnQgaXMgb3V0IG9mIGJvdW5kcycpXG5cdCAgaWYgKG9mZnNldCArIGV4dCA+IGJ1Zi5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxuXHR9XG5cdFxuXHRCdWZmZXIucHJvdG90eXBlLndyaXRlVUludExFID0gZnVuY3Rpb24gd3JpdGVVSW50TEUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG5cdCAgdmFsdWUgPSArdmFsdWVcblx0ICBvZmZzZXQgPSBvZmZzZXQgfCAwXG5cdCAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG5cdCAgaWYgKCFub0Fzc2VydCkge1xuXHQgICAgdmFyIG1heEJ5dGVzID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpIC0gMVxuXHQgICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbWF4Qnl0ZXMsIDApXG5cdCAgfVxuXHRcblx0ICB2YXIgbXVsID0gMVxuXHQgIHZhciBpID0gMFxuXHQgIHRoaXNbb2Zmc2V0XSA9IHZhbHVlICYgMHhGRlxuXHQgIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG5cdCAgICB0aGlzW29mZnNldCArIGldID0gKHZhbHVlIC8gbXVsKSAmIDB4RkZcblx0ICB9XG5cdFxuXHQgIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG5cdH1cblx0XG5cdEJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50QkUgPSBmdW5jdGlvbiB3cml0ZVVJbnRCRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcblx0ICB2YWx1ZSA9ICt2YWx1ZVxuXHQgIG9mZnNldCA9IG9mZnNldCB8IDBcblx0ICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcblx0ICBpZiAoIW5vQXNzZXJ0KSB7XG5cdCAgICB2YXIgbWF4Qnl0ZXMgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCkgLSAxXG5cdCAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBtYXhCeXRlcywgMClcblx0ICB9XG5cdFxuXHQgIHZhciBpID0gYnl0ZUxlbmd0aCAtIDFcblx0ICB2YXIgbXVsID0gMVxuXHQgIHRoaXNbb2Zmc2V0ICsgaV0gPSB2YWx1ZSAmIDB4RkZcblx0ICB3aGlsZSAoLS1pID49IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcblx0ICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAodmFsdWUgLyBtdWwpICYgMHhGRlxuXHQgIH1cblx0XG5cdCAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcblx0fVxuXHRcblx0QnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQ4ID0gZnVuY3Rpb24gd3JpdGVVSW50OCAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcblx0ICB2YWx1ZSA9ICt2YWx1ZVxuXHQgIG9mZnNldCA9IG9mZnNldCB8IDBcblx0ICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAxLCAweGZmLCAwKVxuXHQgIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHZhbHVlID0gTWF0aC5mbG9vcih2YWx1ZSlcblx0ICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuXHQgIHJldHVybiBvZmZzZXQgKyAxXG5cdH1cblx0XG5cdGZ1bmN0aW9uIG9iamVjdFdyaXRlVUludDE2IChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbikge1xuXHQgIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZmZmICsgdmFsdWUgKyAxXG5cdCAgZm9yICh2YXIgaSA9IDAsIGogPSBNYXRoLm1pbihidWYubGVuZ3RoIC0gb2Zmc2V0LCAyKTsgaSA8IGo7ICsraSkge1xuXHQgICAgYnVmW29mZnNldCArIGldID0gKHZhbHVlICYgKDB4ZmYgPDwgKDggKiAobGl0dGxlRW5kaWFuID8gaSA6IDEgLSBpKSkpKSA+Pj5cblx0ICAgICAgKGxpdHRsZUVuZGlhbiA/IGkgOiAxIC0gaSkgKiA4XG5cdCAgfVxuXHR9XG5cdFxuXHRCdWZmZXIucHJvdG90eXBlLndyaXRlVUludDE2TEUgPSBmdW5jdGlvbiB3cml0ZVVJbnQxNkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuXHQgIHZhbHVlID0gK3ZhbHVlXG5cdCAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuXHQgIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4ZmZmZiwgMClcblx0ICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcblx0ICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG5cdCAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuXHQgIH0gZWxzZSB7XG5cdCAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlKVxuXHQgIH1cblx0ICByZXR1cm4gb2Zmc2V0ICsgMlxuXHR9XG5cdFxuXHRCdWZmZXIucHJvdG90eXBlLndyaXRlVUludDE2QkUgPSBmdW5jdGlvbiB3cml0ZVVJbnQxNkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuXHQgIHZhbHVlID0gK3ZhbHVlXG5cdCAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuXHQgIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4ZmZmZiwgMClcblx0ICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcblx0ICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gOClcblx0ICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgJiAweGZmKVxuXHQgIH0gZWxzZSB7XG5cdCAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcblx0ICB9XG5cdCAgcmV0dXJuIG9mZnNldCArIDJcblx0fVxuXHRcblx0ZnVuY3Rpb24gb2JqZWN0V3JpdGVVSW50MzIgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuKSB7XG5cdCAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmZmZmZmICsgdmFsdWUgKyAxXG5cdCAgZm9yICh2YXIgaSA9IDAsIGogPSBNYXRoLm1pbihidWYubGVuZ3RoIC0gb2Zmc2V0LCA0KTsgaSA8IGo7ICsraSkge1xuXHQgICAgYnVmW29mZnNldCArIGldID0gKHZhbHVlID4+PiAobGl0dGxlRW5kaWFuID8gaSA6IDMgLSBpKSAqIDgpICYgMHhmZlxuXHQgIH1cblx0fVxuXHRcblx0QnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQzMkxFID0gZnVuY3Rpb24gd3JpdGVVSW50MzJMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcblx0ICB2YWx1ZSA9ICt2YWx1ZVxuXHQgIG9mZnNldCA9IG9mZnNldCB8IDBcblx0ICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweGZmZmZmZmZmLCAwKVxuXHQgIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuXHQgICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSA+Pj4gMjQpXG5cdCAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiAxNilcblx0ICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG5cdCAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuXHQgIH0gZWxzZSB7XG5cdCAgICBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlKVxuXHQgIH1cblx0ICByZXR1cm4gb2Zmc2V0ICsgNFxuXHR9XG5cdFxuXHRCdWZmZXIucHJvdG90eXBlLndyaXRlVUludDMyQkUgPSBmdW5jdGlvbiB3cml0ZVVJbnQzMkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuXHQgIHZhbHVlID0gK3ZhbHVlXG5cdCAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuXHQgIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4ZmZmZmZmZmYsIDApXG5cdCAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG5cdCAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDI0KVxuXHQgICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gMTYpXG5cdCAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiA4KVxuXHQgICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSAmIDB4ZmYpXG5cdCAgfSBlbHNlIHtcblx0ICAgIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlKVxuXHQgIH1cblx0ICByZXR1cm4gb2Zmc2V0ICsgNFxuXHR9XG5cdFxuXHRCdWZmZXIucHJvdG90eXBlLndyaXRlSW50TEUgPSBmdW5jdGlvbiB3cml0ZUludExFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuXHQgIHZhbHVlID0gK3ZhbHVlXG5cdCAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuXHQgIGlmICghbm9Bc3NlcnQpIHtcblx0ICAgIHZhciBsaW1pdCA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoIC0gMSlcblx0XG5cdCAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBsaW1pdCAtIDEsIC1saW1pdClcblx0ICB9XG5cdFxuXHQgIHZhciBpID0gMFxuXHQgIHZhciBtdWwgPSAxXG5cdCAgdmFyIHN1YiA9IDBcblx0ICB0aGlzW29mZnNldF0gPSB2YWx1ZSAmIDB4RkZcblx0ICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuXHQgICAgaWYgKHZhbHVlIDwgMCAmJiBzdWIgPT09IDAgJiYgdGhpc1tvZmZzZXQgKyBpIC0gMV0gIT09IDApIHtcblx0ICAgICAgc3ViID0gMVxuXHQgICAgfVxuXHQgICAgdGhpc1tvZmZzZXQgKyBpXSA9ICgodmFsdWUgLyBtdWwpID4+IDApIC0gc3ViICYgMHhGRlxuXHQgIH1cblx0XG5cdCAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcblx0fVxuXHRcblx0QnVmZmVyLnByb3RvdHlwZS53cml0ZUludEJFID0gZnVuY3Rpb24gd3JpdGVJbnRCRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcblx0ICB2YWx1ZSA9ICt2YWx1ZVxuXHQgIG9mZnNldCA9IG9mZnNldCB8IDBcblx0ICBpZiAoIW5vQXNzZXJ0KSB7XG5cdCAgICB2YXIgbGltaXQgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCAtIDEpXG5cdFxuXHQgICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbGltaXQgLSAxLCAtbGltaXQpXG5cdCAgfVxuXHRcblx0ICB2YXIgaSA9IGJ5dGVMZW5ndGggLSAxXG5cdCAgdmFyIG11bCA9IDFcblx0ICB2YXIgc3ViID0gMFxuXHQgIHRoaXNbb2Zmc2V0ICsgaV0gPSB2YWx1ZSAmIDB4RkZcblx0ICB3aGlsZSAoLS1pID49IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcblx0ICAgIGlmICh2YWx1ZSA8IDAgJiYgc3ViID09PSAwICYmIHRoaXNbb2Zmc2V0ICsgaSArIDFdICE9PSAwKSB7XG5cdCAgICAgIHN1YiA9IDFcblx0ICAgIH1cblx0ICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAoKHZhbHVlIC8gbXVsKSA+PiAwKSAtIHN1YiAmIDB4RkZcblx0ICB9XG5cdFxuXHQgIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG5cdH1cblx0XG5cdEJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQ4ID0gZnVuY3Rpb24gd3JpdGVJbnQ4ICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuXHQgIHZhbHVlID0gK3ZhbHVlXG5cdCAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuXHQgIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDEsIDB4N2YsIC0weDgwKVxuXHQgIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHZhbHVlID0gTWF0aC5mbG9vcih2YWx1ZSlcblx0ICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmYgKyB2YWx1ZSArIDFcblx0ICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuXHQgIHJldHVybiBvZmZzZXQgKyAxXG5cdH1cblx0XG5cdEJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQxNkxFID0gZnVuY3Rpb24gd3JpdGVJbnQxNkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuXHQgIHZhbHVlID0gK3ZhbHVlXG5cdCAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuXHQgIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4N2ZmZiwgLTB4ODAwMClcblx0ICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcblx0ICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG5cdCAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuXHQgIH0gZWxzZSB7XG5cdCAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlKVxuXHQgIH1cblx0ICByZXR1cm4gb2Zmc2V0ICsgMlxuXHR9XG5cdFxuXHRCdWZmZXIucHJvdG90eXBlLndyaXRlSW50MTZCRSA9IGZ1bmN0aW9uIHdyaXRlSW50MTZCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcblx0ICB2YWx1ZSA9ICt2YWx1ZVxuXHQgIG9mZnNldCA9IG9mZnNldCB8IDBcblx0ICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweDdmZmYsIC0weDgwMDApXG5cdCAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG5cdCAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDgpXG5cdCAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlICYgMHhmZilcblx0ICB9IGVsc2Uge1xuXHQgICAgb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG5cdCAgfVxuXHQgIHJldHVybiBvZmZzZXQgKyAyXG5cdH1cblx0XG5cdEJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQzMkxFID0gZnVuY3Rpb24gd3JpdGVJbnQzMkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuXHQgIHZhbHVlID0gK3ZhbHVlXG5cdCAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuXHQgIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4N2ZmZmZmZmYsIC0weDgwMDAwMDAwKVxuXHQgIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuXHQgICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcblx0ICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG5cdCAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiAxNilcblx0ICAgIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgPj4+IDI0KVxuXHQgIH0gZWxzZSB7XG5cdCAgICBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlKVxuXHQgIH1cblx0ICByZXR1cm4gb2Zmc2V0ICsgNFxuXHR9XG5cdFxuXHRCdWZmZXIucHJvdG90eXBlLndyaXRlSW50MzJCRSA9IGZ1bmN0aW9uIHdyaXRlSW50MzJCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcblx0ICB2YWx1ZSA9ICt2YWx1ZVxuXHQgIG9mZnNldCA9IG9mZnNldCB8IDBcblx0ICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweDdmZmZmZmZmLCAtMHg4MDAwMDAwMClcblx0ICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmZmZmZmZmYgKyB2YWx1ZSArIDFcblx0ICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcblx0ICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gMjQpXG5cdCAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiAxNilcblx0ICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDgpXG5cdCAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlICYgMHhmZilcblx0ICB9IGVsc2Uge1xuXHQgICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG5cdCAgfVxuXHQgIHJldHVybiBvZmZzZXQgKyA0XG5cdH1cblx0XG5cdGZ1bmN0aW9uIGNoZWNrSUVFRTc1NCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBleHQsIG1heCwgbWluKSB7XG5cdCAgaWYgKG9mZnNldCArIGV4dCA+IGJ1Zi5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxuXHQgIGlmIChvZmZzZXQgPCAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJylcblx0fVxuXHRcblx0ZnVuY3Rpb24gd3JpdGVGbG9hdCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XG5cdCAgaWYgKCFub0Fzc2VydCkge1xuXHQgICAgY2hlY2tJRUVFNzU0KGJ1ZiwgdmFsdWUsIG9mZnNldCwgNCwgMy40MDI4MjM0NjYzODUyODg2ZSszOCwgLTMuNDAyODIzNDY2Mzg1Mjg4NmUrMzgpXG5cdCAgfVxuXHQgIGllZWU3NTQud3JpdGUoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIDIzLCA0KVxuXHQgIHJldHVybiBvZmZzZXQgKyA0XG5cdH1cblx0XG5cdEJ1ZmZlci5wcm90b3R5cGUud3JpdGVGbG9hdExFID0gZnVuY3Rpb24gd3JpdGVGbG9hdExFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuXHQgIHJldHVybiB3cml0ZUZsb2F0KHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KVxuXHR9XG5cdFxuXHRCdWZmZXIucHJvdG90eXBlLndyaXRlRmxvYXRCRSA9IGZ1bmN0aW9uIHdyaXRlRmxvYXRCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcblx0ICByZXR1cm4gd3JpdGVGbG9hdCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSwgbm9Bc3NlcnQpXG5cdH1cblx0XG5cdGZ1bmN0aW9uIHdyaXRlRG91YmxlIChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpIHtcblx0ICBpZiAoIW5vQXNzZXJ0KSB7XG5cdCAgICBjaGVja0lFRUU3NTQoYnVmLCB2YWx1ZSwgb2Zmc2V0LCA4LCAxLjc5NzY5MzEzNDg2MjMxNTdFKzMwOCwgLTEuNzk3NjkzMTM0ODYyMzE1N0UrMzA4KVxuXHQgIH1cblx0ICBpZWVlNzU0LndyaXRlKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCA1MiwgOClcblx0ICByZXR1cm4gb2Zmc2V0ICsgOFxuXHR9XG5cdFxuXHRCdWZmZXIucHJvdG90eXBlLndyaXRlRG91YmxlTEUgPSBmdW5jdGlvbiB3cml0ZURvdWJsZUxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuXHQgIHJldHVybiB3cml0ZURvdWJsZSh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydClcblx0fVxuXHRcblx0QnVmZmVyLnByb3RvdHlwZS53cml0ZURvdWJsZUJFID0gZnVuY3Rpb24gd3JpdGVEb3VibGVCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcblx0ICByZXR1cm4gd3JpdGVEb3VibGUodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KVxuXHR9XG5cdFxuXHQvLyBjb3B5KHRhcmdldEJ1ZmZlciwgdGFyZ2V0U3RhcnQ9MCwgc291cmNlU3RhcnQ9MCwgc291cmNlRW5kPWJ1ZmZlci5sZW5ndGgpXG5cdEJ1ZmZlci5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uIGNvcHkgKHRhcmdldCwgdGFyZ2V0U3RhcnQsIHN0YXJ0LCBlbmQpIHtcblx0ICBpZiAoIXN0YXJ0KSBzdGFydCA9IDBcblx0ICBpZiAoIWVuZCAmJiBlbmQgIT09IDApIGVuZCA9IHRoaXMubGVuZ3RoXG5cdCAgaWYgKHRhcmdldFN0YXJ0ID49IHRhcmdldC5sZW5ndGgpIHRhcmdldFN0YXJ0ID0gdGFyZ2V0Lmxlbmd0aFxuXHQgIGlmICghdGFyZ2V0U3RhcnQpIHRhcmdldFN0YXJ0ID0gMFxuXHQgIGlmIChlbmQgPiAwICYmIGVuZCA8IHN0YXJ0KSBlbmQgPSBzdGFydFxuXHRcblx0ICAvLyBDb3B5IDAgYnl0ZXM7IHdlJ3JlIGRvbmVcblx0ICBpZiAoZW5kID09PSBzdGFydCkgcmV0dXJuIDBcblx0ICBpZiAodGFyZ2V0Lmxlbmd0aCA9PT0gMCB8fCB0aGlzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIDBcblx0XG5cdCAgLy8gRmF0YWwgZXJyb3IgY29uZGl0aW9uc1xuXHQgIGlmICh0YXJnZXRTdGFydCA8IDApIHtcblx0ICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCd0YXJnZXRTdGFydCBvdXQgb2YgYm91bmRzJylcblx0ICB9XG5cdCAgaWYgKHN0YXJ0IDwgMCB8fCBzdGFydCA+PSB0aGlzLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3NvdXJjZVN0YXJ0IG91dCBvZiBib3VuZHMnKVxuXHQgIGlmIChlbmQgPCAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignc291cmNlRW5kIG91dCBvZiBib3VuZHMnKVxuXHRcblx0ICAvLyBBcmUgd2Ugb29iP1xuXHQgIGlmIChlbmQgPiB0aGlzLmxlbmd0aCkgZW5kID0gdGhpcy5sZW5ndGhcblx0ICBpZiAodGFyZ2V0Lmxlbmd0aCAtIHRhcmdldFN0YXJ0IDwgZW5kIC0gc3RhcnQpIHtcblx0ICAgIGVuZCA9IHRhcmdldC5sZW5ndGggLSB0YXJnZXRTdGFydCArIHN0YXJ0XG5cdCAgfVxuXHRcblx0ICB2YXIgbGVuID0gZW5kIC0gc3RhcnRcblx0ICB2YXIgaVxuXHRcblx0ICBpZiAodGhpcyA9PT0gdGFyZ2V0ICYmIHN0YXJ0IDwgdGFyZ2V0U3RhcnQgJiYgdGFyZ2V0U3RhcnQgPCBlbmQpIHtcblx0ICAgIC8vIGRlc2NlbmRpbmcgY29weSBmcm9tIGVuZFxuXHQgICAgZm9yIChpID0gbGVuIC0gMTsgaSA+PSAwOyAtLWkpIHtcblx0ICAgICAgdGFyZ2V0W2kgKyB0YXJnZXRTdGFydF0gPSB0aGlzW2kgKyBzdGFydF1cblx0ICAgIH1cblx0ICB9IGVsc2UgaWYgKGxlbiA8IDEwMDAgfHwgIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG5cdCAgICAvLyBhc2NlbmRpbmcgY29weSBmcm9tIHN0YXJ0XG5cdCAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcblx0ICAgICAgdGFyZ2V0W2kgKyB0YXJnZXRTdGFydF0gPSB0aGlzW2kgKyBzdGFydF1cblx0ICAgIH1cblx0ICB9IGVsc2Uge1xuXHQgICAgVWludDhBcnJheS5wcm90b3R5cGUuc2V0LmNhbGwoXG5cdCAgICAgIHRhcmdldCxcblx0ICAgICAgdGhpcy5zdWJhcnJheShzdGFydCwgc3RhcnQgKyBsZW4pLFxuXHQgICAgICB0YXJnZXRTdGFydFxuXHQgICAgKVxuXHQgIH1cblx0XG5cdCAgcmV0dXJuIGxlblxuXHR9XG5cdFxuXHQvLyBVc2FnZTpcblx0Ly8gICAgYnVmZmVyLmZpbGwobnVtYmVyWywgb2Zmc2V0WywgZW5kXV0pXG5cdC8vICAgIGJ1ZmZlci5maWxsKGJ1ZmZlclssIG9mZnNldFssIGVuZF1dKVxuXHQvLyAgICBidWZmZXIuZmlsbChzdHJpbmdbLCBvZmZzZXRbLCBlbmRdXVssIGVuY29kaW5nXSlcblx0QnVmZmVyLnByb3RvdHlwZS5maWxsID0gZnVuY3Rpb24gZmlsbCAodmFsLCBzdGFydCwgZW5kLCBlbmNvZGluZykge1xuXHQgIC8vIEhhbmRsZSBzdHJpbmcgY2FzZXM6XG5cdCAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG5cdCAgICBpZiAodHlwZW9mIHN0YXJ0ID09PSAnc3RyaW5nJykge1xuXHQgICAgICBlbmNvZGluZyA9IHN0YXJ0XG5cdCAgICAgIHN0YXJ0ID0gMFxuXHQgICAgICBlbmQgPSB0aGlzLmxlbmd0aFxuXHQgICAgfSBlbHNlIGlmICh0eXBlb2YgZW5kID09PSAnc3RyaW5nJykge1xuXHQgICAgICBlbmNvZGluZyA9IGVuZFxuXHQgICAgICBlbmQgPSB0aGlzLmxlbmd0aFxuXHQgICAgfVxuXHQgICAgaWYgKHZhbC5sZW5ndGggPT09IDEpIHtcblx0ICAgICAgdmFyIGNvZGUgPSB2YWwuY2hhckNvZGVBdCgwKVxuXHQgICAgICBpZiAoY29kZSA8IDI1Nikge1xuXHQgICAgICAgIHZhbCA9IGNvZGVcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgICAgaWYgKGVuY29kaW5nICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIGVuY29kaW5nICE9PSAnc3RyaW5nJykge1xuXHQgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdlbmNvZGluZyBtdXN0IGJlIGEgc3RyaW5nJylcblx0ICAgIH1cblx0ICAgIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnICYmICFCdWZmZXIuaXNFbmNvZGluZyhlbmNvZGluZykpIHtcblx0ICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuXHQgICAgfVxuXHQgIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcblx0ICAgIHZhbCA9IHZhbCAmIDI1NVxuXHQgIH1cblx0XG5cdCAgLy8gSW52YWxpZCByYW5nZXMgYXJlIG5vdCBzZXQgdG8gYSBkZWZhdWx0LCBzbyBjYW4gcmFuZ2UgY2hlY2sgZWFybHkuXG5cdCAgaWYgKHN0YXJ0IDwgMCB8fCB0aGlzLmxlbmd0aCA8IHN0YXJ0IHx8IHRoaXMubGVuZ3RoIDwgZW5kKSB7XG5cdCAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignT3V0IG9mIHJhbmdlIGluZGV4Jylcblx0ICB9XG5cdFxuXHQgIGlmIChlbmQgPD0gc3RhcnQpIHtcblx0ICAgIHJldHVybiB0aGlzXG5cdCAgfVxuXHRcblx0ICBzdGFydCA9IHN0YXJ0ID4+PiAwXG5cdCAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyB0aGlzLmxlbmd0aCA6IGVuZCA+Pj4gMFxuXHRcblx0ICBpZiAoIXZhbCkgdmFsID0gMFxuXHRcblx0ICB2YXIgaVxuXHQgIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuXHQgICAgZm9yIChpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuXHQgICAgICB0aGlzW2ldID0gdmFsXG5cdCAgICB9XG5cdCAgfSBlbHNlIHtcblx0ICAgIHZhciBieXRlcyA9IEJ1ZmZlci5pc0J1ZmZlcih2YWwpXG5cdCAgICAgID8gdmFsXG5cdCAgICAgIDogdXRmOFRvQnl0ZXMobmV3IEJ1ZmZlcih2YWwsIGVuY29kaW5nKS50b1N0cmluZygpKVxuXHQgICAgdmFyIGxlbiA9IGJ5dGVzLmxlbmd0aFxuXHQgICAgZm9yIChpID0gMDsgaSA8IGVuZCAtIHN0YXJ0OyArK2kpIHtcblx0ICAgICAgdGhpc1tpICsgc3RhcnRdID0gYnl0ZXNbaSAlIGxlbl1cblx0ICAgIH1cblx0ICB9XG5cdFxuXHQgIHJldHVybiB0aGlzXG5cdH1cblx0XG5cdC8vIEhFTFBFUiBGVU5DVElPTlNcblx0Ly8gPT09PT09PT09PT09PT09PVxuXHRcblx0dmFyIElOVkFMSURfQkFTRTY0X1JFID0gL1teK1xcLzAtOUEtWmEtei1fXS9nXG5cdFxuXHRmdW5jdGlvbiBiYXNlNjRjbGVhbiAoc3RyKSB7XG5cdCAgLy8gTm9kZSBzdHJpcHMgb3V0IGludmFsaWQgY2hhcmFjdGVycyBsaWtlIFxcbiBhbmQgXFx0IGZyb20gdGhlIHN0cmluZywgYmFzZTY0LWpzIGRvZXMgbm90XG5cdCAgc3RyID0gc3RyaW5ndHJpbShzdHIpLnJlcGxhY2UoSU5WQUxJRF9CQVNFNjRfUkUsICcnKVxuXHQgIC8vIE5vZGUgY29udmVydHMgc3RyaW5ncyB3aXRoIGxlbmd0aCA8IDIgdG8gJydcblx0ICBpZiAoc3RyLmxlbmd0aCA8IDIpIHJldHVybiAnJ1xuXHQgIC8vIE5vZGUgYWxsb3dzIGZvciBub24tcGFkZGVkIGJhc2U2NCBzdHJpbmdzIChtaXNzaW5nIHRyYWlsaW5nID09PSksIGJhc2U2NC1qcyBkb2VzIG5vdFxuXHQgIHdoaWxlIChzdHIubGVuZ3RoICUgNCAhPT0gMCkge1xuXHQgICAgc3RyID0gc3RyICsgJz0nXG5cdCAgfVxuXHQgIHJldHVybiBzdHJcblx0fVxuXHRcblx0ZnVuY3Rpb24gc3RyaW5ndHJpbSAoc3RyKSB7XG5cdCAgaWYgKHN0ci50cmltKSByZXR1cm4gc3RyLnRyaW0oKVxuXHQgIHJldHVybiBzdHIucmVwbGFjZSgvXlxccyt8XFxzKyQvZywgJycpXG5cdH1cblx0XG5cdGZ1bmN0aW9uIHRvSGV4IChuKSB7XG5cdCAgaWYgKG4gPCAxNikgcmV0dXJuICcwJyArIG4udG9TdHJpbmcoMTYpXG5cdCAgcmV0dXJuIG4udG9TdHJpbmcoMTYpXG5cdH1cblx0XG5cdGZ1bmN0aW9uIHV0ZjhUb0J5dGVzIChzdHJpbmcsIHVuaXRzKSB7XG5cdCAgdW5pdHMgPSB1bml0cyB8fCBJbmZpbml0eVxuXHQgIHZhciBjb2RlUG9pbnRcblx0ICB2YXIgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aFxuXHQgIHZhciBsZWFkU3Vycm9nYXRlID0gbnVsbFxuXHQgIHZhciBieXRlcyA9IFtdXG5cdFxuXHQgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcblx0ICAgIGNvZGVQb2ludCA9IHN0cmluZy5jaGFyQ29kZUF0KGkpXG5cdFxuXHQgICAgLy8gaXMgc3Vycm9nYXRlIGNvbXBvbmVudFxuXHQgICAgaWYgKGNvZGVQb2ludCA+IDB4RDdGRiAmJiBjb2RlUG9pbnQgPCAweEUwMDApIHtcblx0ICAgICAgLy8gbGFzdCBjaGFyIHdhcyBhIGxlYWRcblx0ICAgICAgaWYgKCFsZWFkU3Vycm9nYXRlKSB7XG5cdCAgICAgICAgLy8gbm8gbGVhZCB5ZXRcblx0ICAgICAgICBpZiAoY29kZVBvaW50ID4gMHhEQkZGKSB7XG5cdCAgICAgICAgICAvLyB1bmV4cGVjdGVkIHRyYWlsXG5cdCAgICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcblx0ICAgICAgICAgIGNvbnRpbnVlXG5cdCAgICAgICAgfSBlbHNlIGlmIChpICsgMSA9PT0gbGVuZ3RoKSB7XG5cdCAgICAgICAgICAvLyB1bnBhaXJlZCBsZWFkXG5cdCAgICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcblx0ICAgICAgICAgIGNvbnRpbnVlXG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICAvLyB2YWxpZCBsZWFkXG5cdCAgICAgICAgbGVhZFN1cnJvZ2F0ZSA9IGNvZGVQb2ludFxuXHRcblx0ICAgICAgICBjb250aW51ZVxuXHQgICAgICB9XG5cdFxuXHQgICAgICAvLyAyIGxlYWRzIGluIGEgcm93XG5cdCAgICAgIGlmIChjb2RlUG9pbnQgPCAweERDMDApIHtcblx0ICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcblx0ICAgICAgICBsZWFkU3Vycm9nYXRlID0gY29kZVBvaW50XG5cdCAgICAgICAgY29udGludWVcblx0ICAgICAgfVxuXHRcblx0ICAgICAgLy8gdmFsaWQgc3Vycm9nYXRlIHBhaXJcblx0ICAgICAgY29kZVBvaW50ID0gKGxlYWRTdXJyb2dhdGUgLSAweEQ4MDAgPDwgMTAgfCBjb2RlUG9pbnQgLSAweERDMDApICsgMHgxMDAwMFxuXHQgICAgfSBlbHNlIGlmIChsZWFkU3Vycm9nYXRlKSB7XG5cdCAgICAgIC8vIHZhbGlkIGJtcCBjaGFyLCBidXQgbGFzdCBjaGFyIHdhcyBhIGxlYWRcblx0ICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG5cdCAgICB9XG5cdFxuXHQgICAgbGVhZFN1cnJvZ2F0ZSA9IG51bGxcblx0XG5cdCAgICAvLyBlbmNvZGUgdXRmOFxuXHQgICAgaWYgKGNvZGVQb2ludCA8IDB4ODApIHtcblx0ICAgICAgaWYgKCh1bml0cyAtPSAxKSA8IDApIGJyZWFrXG5cdCAgICAgIGJ5dGVzLnB1c2goY29kZVBvaW50KVxuXHQgICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDgwMCkge1xuXHQgICAgICBpZiAoKHVuaXRzIC09IDIpIDwgMCkgYnJlYWtcblx0ICAgICAgYnl0ZXMucHVzaChcblx0ICAgICAgICBjb2RlUG9pbnQgPj4gMHg2IHwgMHhDMCxcblx0ICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuXHQgICAgICApXG5cdCAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA8IDB4MTAwMDApIHtcblx0ICAgICAgaWYgKCh1bml0cyAtPSAzKSA8IDApIGJyZWFrXG5cdCAgICAgIGJ5dGVzLnB1c2goXG5cdCAgICAgICAgY29kZVBvaW50ID4+IDB4QyB8IDB4RTAsXG5cdCAgICAgICAgY29kZVBvaW50ID4+IDB4NiAmIDB4M0YgfCAweDgwLFxuXHQgICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG5cdCAgICAgIClcblx0ICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHgxMTAwMDApIHtcblx0ICAgICAgaWYgKCh1bml0cyAtPSA0KSA8IDApIGJyZWFrXG5cdCAgICAgIGJ5dGVzLnB1c2goXG5cdCAgICAgICAgY29kZVBvaW50ID4+IDB4MTIgfCAweEYwLFxuXHQgICAgICAgIGNvZGVQb2ludCA+PiAweEMgJiAweDNGIHwgMHg4MCxcblx0ICAgICAgICBjb2RlUG9pbnQgPj4gMHg2ICYgMHgzRiB8IDB4ODAsXG5cdCAgICAgICAgY29kZVBvaW50ICYgMHgzRiB8IDB4ODBcblx0ICAgICAgKVxuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGNvZGUgcG9pbnQnKVxuXHQgICAgfVxuXHQgIH1cblx0XG5cdCAgcmV0dXJuIGJ5dGVzXG5cdH1cblx0XG5cdGZ1bmN0aW9uIGFzY2lpVG9CeXRlcyAoc3RyKSB7XG5cdCAgdmFyIGJ5dGVBcnJheSA9IFtdXG5cdCAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyArK2kpIHtcblx0ICAgIC8vIE5vZGUncyBjb2RlIHNlZW1zIHRvIGJlIGRvaW5nIHRoaXMgYW5kIG5vdCAmIDB4N0YuLlxuXHQgICAgYnl0ZUFycmF5LnB1c2goc3RyLmNoYXJDb2RlQXQoaSkgJiAweEZGKVxuXHQgIH1cblx0ICByZXR1cm4gYnl0ZUFycmF5XG5cdH1cblx0XG5cdGZ1bmN0aW9uIHV0ZjE2bGVUb0J5dGVzIChzdHIsIHVuaXRzKSB7XG5cdCAgdmFyIGMsIGhpLCBsb1xuXHQgIHZhciBieXRlQXJyYXkgPSBbXVxuXHQgIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgKytpKSB7XG5cdCAgICBpZiAoKHVuaXRzIC09IDIpIDwgMCkgYnJlYWtcblx0XG5cdCAgICBjID0gc3RyLmNoYXJDb2RlQXQoaSlcblx0ICAgIGhpID0gYyA+PiA4XG5cdCAgICBsbyA9IGMgJSAyNTZcblx0ICAgIGJ5dGVBcnJheS5wdXNoKGxvKVxuXHQgICAgYnl0ZUFycmF5LnB1c2goaGkpXG5cdCAgfVxuXHRcblx0ICByZXR1cm4gYnl0ZUFycmF5XG5cdH1cblx0XG5cdGZ1bmN0aW9uIGJhc2U2NFRvQnl0ZXMgKHN0cikge1xuXHQgIHJldHVybiBiYXNlNjQudG9CeXRlQXJyYXkoYmFzZTY0Y2xlYW4oc3RyKSlcblx0fVxuXHRcblx0ZnVuY3Rpb24gYmxpdEJ1ZmZlciAoc3JjLCBkc3QsIG9mZnNldCwgbGVuZ3RoKSB7XG5cdCAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuXHQgICAgaWYgKChpICsgb2Zmc2V0ID49IGRzdC5sZW5ndGgpIHx8IChpID49IHNyYy5sZW5ndGgpKSBicmVha1xuXHQgICAgZHN0W2kgKyBvZmZzZXRdID0gc3JjW2ldXG5cdCAgfVxuXHQgIHJldHVybiBpXG5cdH1cblx0XG5cdGZ1bmN0aW9uIGlzbmFuICh2YWwpIHtcblx0ICByZXR1cm4gdmFsICE9PSB2YWwgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zZWxmLWNvbXBhcmVcblx0fVxuXHRcblx0LyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovfS5jYWxsKGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18oMTQpLkJ1ZmZlciwgKGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfSgpKSkpXG5cbi8qKiovIH0sXG4vKiAxNSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0J3VzZSBzdHJpY3QnXG5cdFxuXHRleHBvcnRzLmJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoXG5cdGV4cG9ydHMudG9CeXRlQXJyYXkgPSB0b0J5dGVBcnJheVxuXHRleHBvcnRzLmZyb21CeXRlQXJyYXkgPSBmcm9tQnl0ZUFycmF5XG5cdFxuXHR2YXIgbG9va3VwID0gW11cblx0dmFyIHJldkxvb2t1cCA9IFtdXG5cdHZhciBBcnIgPSB0eXBlb2YgVWludDhBcnJheSAhPT0gJ3VuZGVmaW5lZCcgPyBVaW50OEFycmF5IDogQXJyYXlcblx0XG5cdHZhciBjb2RlID0gJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky8nXG5cdGZvciAodmFyIGkgPSAwLCBsZW4gPSBjb2RlLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG5cdCAgbG9va3VwW2ldID0gY29kZVtpXVxuXHQgIHJldkxvb2t1cFtjb2RlLmNoYXJDb2RlQXQoaSldID0gaVxuXHR9XG5cdFxuXHRyZXZMb29rdXBbJy0nLmNoYXJDb2RlQXQoMCldID0gNjJcblx0cmV2TG9va3VwWydfJy5jaGFyQ29kZUF0KDApXSA9IDYzXG5cdFxuXHRmdW5jdGlvbiBwbGFjZUhvbGRlcnNDb3VudCAoYjY0KSB7XG5cdCAgdmFyIGxlbiA9IGI2NC5sZW5ndGhcblx0ICBpZiAobGVuICUgNCA+IDApIHtcblx0ICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBzdHJpbmcuIExlbmd0aCBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgNCcpXG5cdCAgfVxuXHRcblx0ICAvLyB0aGUgbnVtYmVyIG9mIGVxdWFsIHNpZ25zIChwbGFjZSBob2xkZXJzKVxuXHQgIC8vIGlmIHRoZXJlIGFyZSB0d28gcGxhY2Vob2xkZXJzLCB0aGFuIHRoZSB0d28gY2hhcmFjdGVycyBiZWZvcmUgaXRcblx0ICAvLyByZXByZXNlbnQgb25lIGJ5dGVcblx0ICAvLyBpZiB0aGVyZSBpcyBvbmx5IG9uZSwgdGhlbiB0aGUgdGhyZWUgY2hhcmFjdGVycyBiZWZvcmUgaXQgcmVwcmVzZW50IDIgYnl0ZXNcblx0ICAvLyB0aGlzIGlzIGp1c3QgYSBjaGVhcCBoYWNrIHRvIG5vdCBkbyBpbmRleE9mIHR3aWNlXG5cdCAgcmV0dXJuIGI2NFtsZW4gLSAyXSA9PT0gJz0nID8gMiA6IGI2NFtsZW4gLSAxXSA9PT0gJz0nID8gMSA6IDBcblx0fVxuXHRcblx0ZnVuY3Rpb24gYnl0ZUxlbmd0aCAoYjY0KSB7XG5cdCAgLy8gYmFzZTY0IGlzIDQvMyArIHVwIHRvIHR3byBjaGFyYWN0ZXJzIG9mIHRoZSBvcmlnaW5hbCBkYXRhXG5cdCAgcmV0dXJuIGI2NC5sZW5ndGggKiAzIC8gNCAtIHBsYWNlSG9sZGVyc0NvdW50KGI2NClcblx0fVxuXHRcblx0ZnVuY3Rpb24gdG9CeXRlQXJyYXkgKGI2NCkge1xuXHQgIHZhciBpLCBqLCBsLCB0bXAsIHBsYWNlSG9sZGVycywgYXJyXG5cdCAgdmFyIGxlbiA9IGI2NC5sZW5ndGhcblx0ICBwbGFjZUhvbGRlcnMgPSBwbGFjZUhvbGRlcnNDb3VudChiNjQpXG5cdFxuXHQgIGFyciA9IG5ldyBBcnIobGVuICogMyAvIDQgLSBwbGFjZUhvbGRlcnMpXG5cdFxuXHQgIC8vIGlmIHRoZXJlIGFyZSBwbGFjZWhvbGRlcnMsIG9ubHkgZ2V0IHVwIHRvIHRoZSBsYXN0IGNvbXBsZXRlIDQgY2hhcnNcblx0ICBsID0gcGxhY2VIb2xkZXJzID4gMCA/IGxlbiAtIDQgOiBsZW5cblx0XG5cdCAgdmFyIEwgPSAwXG5cdFxuXHQgIGZvciAoaSA9IDAsIGogPSAwOyBpIDwgbDsgaSArPSA0LCBqICs9IDMpIHtcblx0ICAgIHRtcCA9IChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDE4KSB8IChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA8PCAxMikgfCAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAyKV0gPDwgNikgfCByZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDMpXVxuXHQgICAgYXJyW0wrK10gPSAodG1wID4+IDE2KSAmIDB4RkZcblx0ICAgIGFycltMKytdID0gKHRtcCA+PiA4KSAmIDB4RkZcblx0ICAgIGFycltMKytdID0gdG1wICYgMHhGRlxuXHQgIH1cblx0XG5cdCAgaWYgKHBsYWNlSG9sZGVycyA9PT0gMikge1xuXHQgICAgdG1wID0gKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMikgfCAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPj4gNClcblx0ICAgIGFycltMKytdID0gdG1wICYgMHhGRlxuXHQgIH0gZWxzZSBpZiAocGxhY2VIb2xkZXJzID09PSAxKSB7XG5cdCAgICB0bXAgPSAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAxMCkgfCAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPDwgNCkgfCAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAyKV0gPj4gMilcblx0ICAgIGFycltMKytdID0gKHRtcCA+PiA4KSAmIDB4RkZcblx0ICAgIGFycltMKytdID0gdG1wICYgMHhGRlxuXHQgIH1cblx0XG5cdCAgcmV0dXJuIGFyclxuXHR9XG5cdFxuXHRmdW5jdGlvbiB0cmlwbGV0VG9CYXNlNjQgKG51bSkge1xuXHQgIHJldHVybiBsb29rdXBbbnVtID4+IDE4ICYgMHgzRl0gKyBsb29rdXBbbnVtID4+IDEyICYgMHgzRl0gKyBsb29rdXBbbnVtID4+IDYgJiAweDNGXSArIGxvb2t1cFtudW0gJiAweDNGXVxuXHR9XG5cdFxuXHRmdW5jdGlvbiBlbmNvZGVDaHVuayAodWludDgsIHN0YXJ0LCBlbmQpIHtcblx0ICB2YXIgdG1wXG5cdCAgdmFyIG91dHB1dCA9IFtdXG5cdCAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpICs9IDMpIHtcblx0ICAgIHRtcCA9ICh1aW50OFtpXSA8PCAxNikgKyAodWludDhbaSArIDFdIDw8IDgpICsgKHVpbnQ4W2kgKyAyXSlcblx0ICAgIG91dHB1dC5wdXNoKHRyaXBsZXRUb0Jhc2U2NCh0bXApKVxuXHQgIH1cblx0ICByZXR1cm4gb3V0cHV0LmpvaW4oJycpXG5cdH1cblx0XG5cdGZ1bmN0aW9uIGZyb21CeXRlQXJyYXkgKHVpbnQ4KSB7XG5cdCAgdmFyIHRtcFxuXHQgIHZhciBsZW4gPSB1aW50OC5sZW5ndGhcblx0ICB2YXIgZXh0cmFCeXRlcyA9IGxlbiAlIDMgLy8gaWYgd2UgaGF2ZSAxIGJ5dGUgbGVmdCwgcGFkIDIgYnl0ZXNcblx0ICB2YXIgb3V0cHV0ID0gJydcblx0ICB2YXIgcGFydHMgPSBbXVxuXHQgIHZhciBtYXhDaHVua0xlbmd0aCA9IDE2MzgzIC8vIG11c3QgYmUgbXVsdGlwbGUgb2YgM1xuXHRcblx0ICAvLyBnbyB0aHJvdWdoIHRoZSBhcnJheSBldmVyeSB0aHJlZSBieXRlcywgd2UnbGwgZGVhbCB3aXRoIHRyYWlsaW5nIHN0dWZmIGxhdGVyXG5cdCAgZm9yICh2YXIgaSA9IDAsIGxlbjIgPSBsZW4gLSBleHRyYUJ5dGVzOyBpIDwgbGVuMjsgaSArPSBtYXhDaHVua0xlbmd0aCkge1xuXHQgICAgcGFydHMucHVzaChlbmNvZGVDaHVuayh1aW50OCwgaSwgKGkgKyBtYXhDaHVua0xlbmd0aCkgPiBsZW4yID8gbGVuMiA6IChpICsgbWF4Q2h1bmtMZW5ndGgpKSlcblx0ICB9XG5cdFxuXHQgIC8vIHBhZCB0aGUgZW5kIHdpdGggemVyb3MsIGJ1dCBtYWtlIHN1cmUgdG8gbm90IGZvcmdldCB0aGUgZXh0cmEgYnl0ZXNcblx0ICBpZiAoZXh0cmFCeXRlcyA9PT0gMSkge1xuXHQgICAgdG1wID0gdWludDhbbGVuIC0gMV1cblx0ICAgIG91dHB1dCArPSBsb29rdXBbdG1wID4+IDJdXG5cdCAgICBvdXRwdXQgKz0gbG9va3VwWyh0bXAgPDwgNCkgJiAweDNGXVxuXHQgICAgb3V0cHV0ICs9ICc9PSdcblx0ICB9IGVsc2UgaWYgKGV4dHJhQnl0ZXMgPT09IDIpIHtcblx0ICAgIHRtcCA9ICh1aW50OFtsZW4gLSAyXSA8PCA4KSArICh1aW50OFtsZW4gLSAxXSlcblx0ICAgIG91dHB1dCArPSBsb29rdXBbdG1wID4+IDEwXVxuXHQgICAgb3V0cHV0ICs9IGxvb2t1cFsodG1wID4+IDQpICYgMHgzRl1cblx0ICAgIG91dHB1dCArPSBsb29rdXBbKHRtcCA8PCAyKSAmIDB4M0ZdXG5cdCAgICBvdXRwdXQgKz0gJz0nXG5cdCAgfVxuXHRcblx0ICBwYXJ0cy5wdXNoKG91dHB1dClcblx0XG5cdCAgcmV0dXJuIHBhcnRzLmpvaW4oJycpXG5cdH1cblxuXG4vKioqLyB9LFxuLyogMTYgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdGV4cG9ydHMucmVhZCA9IGZ1bmN0aW9uIChidWZmZXIsIG9mZnNldCwgaXNMRSwgbUxlbiwgbkJ5dGVzKSB7XG5cdCAgdmFyIGUsIG1cblx0ICB2YXIgZUxlbiA9IG5CeXRlcyAqIDggLSBtTGVuIC0gMVxuXHQgIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxXG5cdCAgdmFyIGVCaWFzID0gZU1heCA+PiAxXG5cdCAgdmFyIG5CaXRzID0gLTdcblx0ICB2YXIgaSA9IGlzTEUgPyAobkJ5dGVzIC0gMSkgOiAwXG5cdCAgdmFyIGQgPSBpc0xFID8gLTEgOiAxXG5cdCAgdmFyIHMgPSBidWZmZXJbb2Zmc2V0ICsgaV1cblx0XG5cdCAgaSArPSBkXG5cdFxuXHQgIGUgPSBzICYgKCgxIDw8ICgtbkJpdHMpKSAtIDEpXG5cdCAgcyA+Pj0gKC1uQml0cylcblx0ICBuQml0cyArPSBlTGVuXG5cdCAgZm9yICg7IG5CaXRzID4gMDsgZSA9IGUgKiAyNTYgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblx0XG5cdCAgbSA9IGUgJiAoKDEgPDwgKC1uQml0cykpIC0gMSlcblx0ICBlID4+PSAoLW5CaXRzKVxuXHQgIG5CaXRzICs9IG1MZW5cblx0ICBmb3IgKDsgbkJpdHMgPiAwOyBtID0gbSAqIDI1NiArIGJ1ZmZlcltvZmZzZXQgKyBpXSwgaSArPSBkLCBuQml0cyAtPSA4KSB7fVxuXHRcblx0ICBpZiAoZSA9PT0gMCkge1xuXHQgICAgZSA9IDEgLSBlQmlhc1xuXHQgIH0gZWxzZSBpZiAoZSA9PT0gZU1heCkge1xuXHQgICAgcmV0dXJuIG0gPyBOYU4gOiAoKHMgPyAtMSA6IDEpICogSW5maW5pdHkpXG5cdCAgfSBlbHNlIHtcblx0ICAgIG0gPSBtICsgTWF0aC5wb3coMiwgbUxlbilcblx0ICAgIGUgPSBlIC0gZUJpYXNcblx0ICB9XG5cdCAgcmV0dXJuIChzID8gLTEgOiAxKSAqIG0gKiBNYXRoLnBvdygyLCBlIC0gbUxlbilcblx0fVxuXHRcblx0ZXhwb3J0cy53cml0ZSA9IGZ1bmN0aW9uIChidWZmZXIsIHZhbHVlLCBvZmZzZXQsIGlzTEUsIG1MZW4sIG5CeXRlcykge1xuXHQgIHZhciBlLCBtLCBjXG5cdCAgdmFyIGVMZW4gPSBuQnl0ZXMgKiA4IC0gbUxlbiAtIDFcblx0ICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMVxuXHQgIHZhciBlQmlhcyA9IGVNYXggPj4gMVxuXHQgIHZhciBydCA9IChtTGVuID09PSAyMyA/IE1hdGgucG93KDIsIC0yNCkgLSBNYXRoLnBvdygyLCAtNzcpIDogMClcblx0ICB2YXIgaSA9IGlzTEUgPyAwIDogKG5CeXRlcyAtIDEpXG5cdCAgdmFyIGQgPSBpc0xFID8gMSA6IC0xXG5cdCAgdmFyIHMgPSB2YWx1ZSA8IDAgfHwgKHZhbHVlID09PSAwICYmIDEgLyB2YWx1ZSA8IDApID8gMSA6IDBcblx0XG5cdCAgdmFsdWUgPSBNYXRoLmFicyh2YWx1ZSlcblx0XG5cdCAgaWYgKGlzTmFOKHZhbHVlKSB8fCB2YWx1ZSA9PT0gSW5maW5pdHkpIHtcblx0ICAgIG0gPSBpc05hTih2YWx1ZSkgPyAxIDogMFxuXHQgICAgZSA9IGVNYXhcblx0ICB9IGVsc2Uge1xuXHQgICAgZSA9IE1hdGguZmxvb3IoTWF0aC5sb2codmFsdWUpIC8gTWF0aC5MTjIpXG5cdCAgICBpZiAodmFsdWUgKiAoYyA9IE1hdGgucG93KDIsIC1lKSkgPCAxKSB7XG5cdCAgICAgIGUtLVxuXHQgICAgICBjICo9IDJcblx0ICAgIH1cblx0ICAgIGlmIChlICsgZUJpYXMgPj0gMSkge1xuXHQgICAgICB2YWx1ZSArPSBydCAvIGNcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIHZhbHVlICs9IHJ0ICogTWF0aC5wb3coMiwgMSAtIGVCaWFzKVxuXHQgICAgfVxuXHQgICAgaWYgKHZhbHVlICogYyA+PSAyKSB7XG5cdCAgICAgIGUrK1xuXHQgICAgICBjIC89IDJcblx0ICAgIH1cblx0XG5cdCAgICBpZiAoZSArIGVCaWFzID49IGVNYXgpIHtcblx0ICAgICAgbSA9IDBcblx0ICAgICAgZSA9IGVNYXhcblx0ICAgIH0gZWxzZSBpZiAoZSArIGVCaWFzID49IDEpIHtcblx0ICAgICAgbSA9ICh2YWx1ZSAqIGMgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pXG5cdCAgICAgIGUgPSBlICsgZUJpYXNcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIG0gPSB2YWx1ZSAqIE1hdGgucG93KDIsIGVCaWFzIC0gMSkgKiBNYXRoLnBvdygyLCBtTGVuKVxuXHQgICAgICBlID0gMFxuXHQgICAgfVxuXHQgIH1cblx0XG5cdCAgZm9yICg7IG1MZW4gPj0gODsgYnVmZmVyW29mZnNldCArIGldID0gbSAmIDB4ZmYsIGkgKz0gZCwgbSAvPSAyNTYsIG1MZW4gLT0gOCkge31cblx0XG5cdCAgZSA9IChlIDw8IG1MZW4pIHwgbVxuXHQgIGVMZW4gKz0gbUxlblxuXHQgIGZvciAoOyBlTGVuID4gMDsgYnVmZmVyW29mZnNldCArIGldID0gZSAmIDB4ZmYsIGkgKz0gZCwgZSAvPSAyNTYsIGVMZW4gLT0gOCkge31cblx0XG5cdCAgYnVmZmVyW29mZnNldCArIGkgLSBkXSB8PSBzICogMTI4XG5cdH1cblxuXG4vKioqLyB9LFxuLyogMTcgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdHZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIChhcnIpIHtcblx0ICByZXR1cm4gdG9TdHJpbmcuY2FsbChhcnIpID09ICdbb2JqZWN0IEFycmF5XSc7XG5cdH07XG5cblxuLyoqKi8gfSxcbi8qIDE4ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHQvLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXJcblx0dmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXHRcblx0Ly8gY2FjaGVkIGZyb20gd2hhdGV2ZXIgZ2xvYmFsIGlzIHByZXNlbnQgc28gdGhhdCB0ZXN0IHJ1bm5lcnMgdGhhdCBzdHViIGl0XG5cdC8vIGRvbid0IGJyZWFrIHRoaW5ncy4gIEJ1dCB3ZSBuZWVkIHRvIHdyYXAgaXQgaW4gYSB0cnkgY2F0Y2ggaW4gY2FzZSBpdCBpc1xuXHQvLyB3cmFwcGVkIGluIHN0cmljdCBtb2RlIGNvZGUgd2hpY2ggZG9lc24ndCBkZWZpbmUgYW55IGdsb2JhbHMuICBJdCdzIGluc2lkZSBhXG5cdC8vIGZ1bmN0aW9uIGJlY2F1c2UgdHJ5L2NhdGNoZXMgZGVvcHRpbWl6ZSBpbiBjZXJ0YWluIGVuZ2luZXMuXG5cdFxuXHR2YXIgY2FjaGVkU2V0VGltZW91dDtcblx0dmFyIGNhY2hlZENsZWFyVGltZW91dDtcblx0XG5cdGZ1bmN0aW9uIGRlZmF1bHRTZXRUaW1vdXQoKSB7XG5cdCAgICB0aHJvdyBuZXcgRXJyb3IoJ3NldFRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcblx0fVxuXHRmdW5jdGlvbiBkZWZhdWx0Q2xlYXJUaW1lb3V0ICgpIHtcblx0ICAgIHRocm93IG5ldyBFcnJvcignY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG5cdH1cblx0KGZ1bmN0aW9uICgpIHtcblx0ICAgIHRyeSB7XG5cdCAgICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG5cdCAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuXHQgICAgICAgIH1cblx0ICAgIH0gY2F0Y2ggKGUpIHtcblx0ICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcblx0ICAgIH1cblx0ICAgIHRyeSB7XG5cdCAgICAgICAgaWYgKHR5cGVvZiBjbGVhclRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcblx0ICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG5cdCAgICAgICAgfVxuXHQgICAgfSBjYXRjaCAoZSkge1xuXHQgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG5cdCAgICB9XG5cdH0gKCkpXG5cdGZ1bmN0aW9uIHJ1blRpbWVvdXQoZnVuKSB7XG5cdCAgICBpZiAoY2FjaGVkU2V0VGltZW91dCA9PT0gc2V0VGltZW91dCkge1xuXHQgICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuXHQgICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG5cdCAgICB9XG5cdCAgICAvLyBpZiBzZXRUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuXHQgICAgaWYgKChjYWNoZWRTZXRUaW1lb3V0ID09PSBkZWZhdWx0U2V0VGltb3V0IHx8ICFjYWNoZWRTZXRUaW1lb3V0KSAmJiBzZXRUaW1lb3V0KSB7XG5cdCAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG5cdCAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcblx0ICAgIH1cblx0ICAgIHRyeSB7XG5cdCAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuXHQgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0KGZ1biwgMCk7XG5cdCAgICB9IGNhdGNoKGUpe1xuXHQgICAgICAgIHRyeSB7XG5cdCAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuXHQgICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKG51bGwsIGZ1biwgMCk7XG5cdCAgICAgICAgfSBjYXRjaChlKXtcblx0ICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3Jcblx0ICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbCh0aGlzLCBmdW4sIDApO1xuXHQgICAgICAgIH1cblx0ICAgIH1cblx0XG5cdFxuXHR9XG5cdGZ1bmN0aW9uIHJ1bkNsZWFyVGltZW91dChtYXJrZXIpIHtcblx0ICAgIGlmIChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGNsZWFyVGltZW91dCkge1xuXHQgICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuXHQgICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcblx0ICAgIH1cblx0ICAgIC8vIGlmIGNsZWFyVGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcblx0ICAgIGlmICgoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBkZWZhdWx0Q2xlYXJUaW1lb3V0IHx8ICFjYWNoZWRDbGVhclRpbWVvdXQpICYmIGNsZWFyVGltZW91dCkge1xuXHQgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcblx0ICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG5cdCAgICB9XG5cdCAgICB0cnkge1xuXHQgICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3Ncblx0ICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0KG1hcmtlcik7XG5cdCAgICB9IGNhdGNoIChlKXtcblx0ICAgICAgICB0cnkge1xuXHQgICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgIHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG5cdCAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbChudWxsLCBtYXJrZXIpO1xuXHQgICAgICAgIH0gY2F0Y2ggKGUpe1xuXHQgICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvci5cblx0ICAgICAgICAgICAgLy8gU29tZSB2ZXJzaW9ucyBvZiBJLkUuIGhhdmUgZGlmZmVyZW50IHJ1bGVzIGZvciBjbGVhclRpbWVvdXQgdnMgc2V0VGltZW91dFxuXHQgICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcywgbWFya2VyKTtcblx0ICAgICAgICB9XG5cdCAgICB9XG5cdFxuXHRcblx0XG5cdH1cblx0dmFyIHF1ZXVlID0gW107XG5cdHZhciBkcmFpbmluZyA9IGZhbHNlO1xuXHR2YXIgY3VycmVudFF1ZXVlO1xuXHR2YXIgcXVldWVJbmRleCA9IC0xO1xuXHRcblx0ZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkge1xuXHQgICAgaWYgKCFkcmFpbmluZyB8fCAhY3VycmVudFF1ZXVlKSB7XG5cdCAgICAgICAgcmV0dXJuO1xuXHQgICAgfVxuXHQgICAgZHJhaW5pbmcgPSBmYWxzZTtcblx0ICAgIGlmIChjdXJyZW50UXVldWUubGVuZ3RoKSB7XG5cdCAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuXHQgICAgfVxuXHQgICAgaWYgKHF1ZXVlLmxlbmd0aCkge1xuXHQgICAgICAgIGRyYWluUXVldWUoKTtcblx0ICAgIH1cblx0fVxuXHRcblx0ZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcblx0ICAgIGlmIChkcmFpbmluZykge1xuXHQgICAgICAgIHJldHVybjtcblx0ICAgIH1cblx0ICAgIHZhciB0aW1lb3V0ID0gcnVuVGltZW91dChjbGVhblVwTmV4dFRpY2spO1xuXHQgICAgZHJhaW5pbmcgPSB0cnVlO1xuXHRcblx0ICAgIHZhciBsZW4gPSBxdWV1ZS5sZW5ndGg7XG5cdCAgICB3aGlsZShsZW4pIHtcblx0ICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcblx0ICAgICAgICBxdWV1ZSA9IFtdO1xuXHQgICAgICAgIHdoaWxlICgrK3F1ZXVlSW5kZXggPCBsZW4pIHtcblx0ICAgICAgICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkge1xuXHQgICAgICAgICAgICAgICAgY3VycmVudFF1ZXVlW3F1ZXVlSW5kZXhdLnJ1bigpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcblx0ICAgICAgICBsZW4gPSBxdWV1ZS5sZW5ndGg7XG5cdCAgICB9XG5cdCAgICBjdXJyZW50UXVldWUgPSBudWxsO1xuXHQgICAgZHJhaW5pbmcgPSBmYWxzZTtcblx0ICAgIHJ1bkNsZWFyVGltZW91dCh0aW1lb3V0KTtcblx0fVxuXHRcblx0cHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHtcblx0ICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcblx0ICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuXHQgICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG5cdCAgICAgICAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuXHQgICAgICAgIH1cblx0ICAgIH1cblx0ICAgIHF1ZXVlLnB1c2gobmV3IEl0ZW0oZnVuLCBhcmdzKSk7XG5cdCAgICBpZiAocXVldWUubGVuZ3RoID09PSAxICYmICFkcmFpbmluZykge1xuXHQgICAgICAgIHJ1blRpbWVvdXQoZHJhaW5RdWV1ZSk7XG5cdCAgICB9XG5cdH07XG5cdFxuXHQvLyB2OCBsaWtlcyBwcmVkaWN0aWJsZSBvYmplY3RzXG5cdGZ1bmN0aW9uIEl0ZW0oZnVuLCBhcnJheSkge1xuXHQgICAgdGhpcy5mdW4gPSBmdW47XG5cdCAgICB0aGlzLmFycmF5ID0gYXJyYXk7XG5cdH1cblx0SXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xuXHQgICAgdGhpcy5mdW4uYXBwbHkobnVsbCwgdGhpcy5hcnJheSk7XG5cdH07XG5cdHByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5cdHByb2Nlc3MuYnJvd3NlciA9IHRydWU7XG5cdHByb2Nlc3MuZW52ID0ge307XG5cdHByb2Nlc3MuYXJndiA9IFtdO1xuXHRwcm9jZXNzLnZlcnNpb24gPSAnJzsgLy8gZW1wdHkgc3RyaW5nIHRvIGF2b2lkIHJlZ2V4cCBpc3N1ZXNcblx0cHJvY2Vzcy52ZXJzaW9ucyA9IHt9O1xuXHRcblx0ZnVuY3Rpb24gbm9vcCgpIHt9XG5cdFxuXHRwcm9jZXNzLm9uID0gbm9vcDtcblx0cHJvY2Vzcy5hZGRMaXN0ZW5lciA9IG5vb3A7XG5cdHByb2Nlc3Mub25jZSA9IG5vb3A7XG5cdHByb2Nlc3Mub2ZmID0gbm9vcDtcblx0cHJvY2Vzcy5yZW1vdmVMaXN0ZW5lciA9IG5vb3A7XG5cdHByb2Nlc3MucmVtb3ZlQWxsTGlzdGVuZXJzID0gbm9vcDtcblx0cHJvY2Vzcy5lbWl0ID0gbm9vcDtcblx0XG5cdHByb2Nlc3MuYmluZGluZyA9IGZ1bmN0aW9uIChuYW1lKSB7XG5cdCAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG5cdH07XG5cdFxuXHRwcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xuXHRwcm9jZXNzLmNoZGlyID0gZnVuY3Rpb24gKGRpcikge1xuXHQgICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWQnKTtcblx0fTtcblx0cHJvY2Vzcy51bWFzayA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gMDsgfTtcblxuXG4vKioqLyB9LFxuLyogMTkgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqLyhmdW5jdGlvbihnbG9iYWwpIHsndXNlIHN0cmljdCc7XG5cdFxuXHQvLyBjb21wYXJlIGFuZCBpc0J1ZmZlciB0YWtlbiBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyL2Jsb2IvNjgwZTllNWU0ODhmMjJhYWMyNzU5OWE1N2RjODQ0YTYzMTU5MjhkZC9pbmRleC5qc1xuXHQvLyBvcmlnaW5hbCBub3RpY2U6XG5cdFxuXHQvKiFcblx0ICogVGhlIGJ1ZmZlciBtb2R1bGUgZnJvbSBub2RlLmpzLCBmb3IgdGhlIGJyb3dzZXIuXG5cdCAqXG5cdCAqIEBhdXRob3IgICBGZXJvc3MgQWJvdWtoYWRpamVoIDxmZXJvc3NAZmVyb3NzLm9yZz4gPGh0dHA6Ly9mZXJvc3Mub3JnPlxuXHQgKiBAbGljZW5zZSAgTUlUXG5cdCAqL1xuXHRmdW5jdGlvbiBjb21wYXJlKGEsIGIpIHtcblx0ICBpZiAoYSA9PT0gYikge1xuXHQgICAgcmV0dXJuIDA7XG5cdCAgfVxuXHRcblx0ICB2YXIgeCA9IGEubGVuZ3RoO1xuXHQgIHZhciB5ID0gYi5sZW5ndGg7XG5cdFxuXHQgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBNYXRoLm1pbih4LCB5KTsgaSA8IGxlbjsgKytpKSB7XG5cdCAgICBpZiAoYVtpXSAhPT0gYltpXSkge1xuXHQgICAgICB4ID0gYVtpXTtcblx0ICAgICAgeSA9IGJbaV07XG5cdCAgICAgIGJyZWFrO1xuXHQgICAgfVxuXHQgIH1cblx0XG5cdCAgaWYgKHggPCB5KSB7XG5cdCAgICByZXR1cm4gLTE7XG5cdCAgfVxuXHQgIGlmICh5IDwgeCkge1xuXHQgICAgcmV0dXJuIDE7XG5cdCAgfVxuXHQgIHJldHVybiAwO1xuXHR9XG5cdGZ1bmN0aW9uIGlzQnVmZmVyKGIpIHtcblx0ICBpZiAoZ2xvYmFsLkJ1ZmZlciAmJiB0eXBlb2YgZ2xvYmFsLkJ1ZmZlci5pc0J1ZmZlciA9PT0gJ2Z1bmN0aW9uJykge1xuXHQgICAgcmV0dXJuIGdsb2JhbC5CdWZmZXIuaXNCdWZmZXIoYik7XG5cdCAgfVxuXHQgIHJldHVybiAhIShiICE9IG51bGwgJiYgYi5faXNCdWZmZXIpO1xuXHR9XG5cdFxuXHQvLyBiYXNlZCBvbiBub2RlIGFzc2VydCwgb3JpZ2luYWwgbm90aWNlOlxuXHRcblx0Ly8gaHR0cDovL3dpa2kuY29tbW9uanMub3JnL3dpa2kvVW5pdF9UZXN0aW5nLzEuMFxuXHQvL1xuXHQvLyBUSElTIElTIE5PVCBURVNURUQgTk9SIExJS0VMWSBUTyBXT1JLIE9VVFNJREUgVjghXG5cdC8vXG5cdC8vIE9yaWdpbmFsbHkgZnJvbSBuYXJ3aGFsLmpzIChodHRwOi8vbmFyd2hhbGpzLm9yZylcblx0Ly8gQ29weXJpZ2h0IChjKSAyMDA5IFRob21hcyBSb2JpbnNvbiA8Mjgwbm9ydGguY29tPlxuXHQvL1xuXHQvLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG5cdC8vIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlICdTb2Z0d2FyZScpLCB0b1xuXHQvLyBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZVxuXHQvLyByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Jcblx0Ly8gc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcblx0Ly8gZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcblx0Ly9cblx0Ly8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cblx0Ly8gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cdC8vXG5cdC8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCAnQVMgSVMnLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG5cdC8vIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuXHQvLyBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcblx0Ly8gQVVUSE9SUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU5cblx0Ly8gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTlxuXHQvLyBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblx0XG5cdHZhciB1dGlsID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMCk7XG5cdHZhciBoYXNPd24gPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXHR2YXIgcFNsaWNlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlO1xuXHR2YXIgZnVuY3Rpb25zSGF2ZU5hbWVzID0gKGZ1bmN0aW9uICgpIHtcblx0ICByZXR1cm4gZnVuY3Rpb24gZm9vKCkge30ubmFtZSA9PT0gJ2Zvbyc7XG5cdH0oKSk7XG5cdGZ1bmN0aW9uIHBUb1N0cmluZyAob2JqKSB7XG5cdCAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmopO1xuXHR9XG5cdGZ1bmN0aW9uIGlzVmlldyhhcnJidWYpIHtcblx0ICBpZiAoaXNCdWZmZXIoYXJyYnVmKSkge1xuXHQgICAgcmV0dXJuIGZhbHNlO1xuXHQgIH1cblx0ICBpZiAodHlwZW9mIGdsb2JhbC5BcnJheUJ1ZmZlciAhPT0gJ2Z1bmN0aW9uJykge1xuXHQgICAgcmV0dXJuIGZhbHNlO1xuXHQgIH1cblx0ICBpZiAodHlwZW9mIEFycmF5QnVmZmVyLmlzVmlldyA9PT0gJ2Z1bmN0aW9uJykge1xuXHQgICAgcmV0dXJuIEFycmF5QnVmZmVyLmlzVmlldyhhcnJidWYpO1xuXHQgIH1cblx0ICBpZiAoIWFycmJ1Zikge1xuXHQgICAgcmV0dXJuIGZhbHNlO1xuXHQgIH1cblx0ICBpZiAoYXJyYnVmIGluc3RhbmNlb2YgRGF0YVZpZXcpIHtcblx0ICAgIHJldHVybiB0cnVlO1xuXHQgIH1cblx0ICBpZiAoYXJyYnVmLmJ1ZmZlciAmJiBhcnJidWYuYnVmZmVyIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHtcblx0ICAgIHJldHVybiB0cnVlO1xuXHQgIH1cblx0ICByZXR1cm4gZmFsc2U7XG5cdH1cblx0Ly8gMS4gVGhlIGFzc2VydCBtb2R1bGUgcHJvdmlkZXMgZnVuY3Rpb25zIHRoYXQgdGhyb3dcblx0Ly8gQXNzZXJ0aW9uRXJyb3IncyB3aGVuIHBhcnRpY3VsYXIgY29uZGl0aW9ucyBhcmUgbm90IG1ldC4gVGhlXG5cdC8vIGFzc2VydCBtb2R1bGUgbXVzdCBjb25mb3JtIHRvIHRoZSBmb2xsb3dpbmcgaW50ZXJmYWNlLlxuXHRcblx0dmFyIGFzc2VydCA9IG1vZHVsZS5leHBvcnRzID0gb2s7XG5cdFxuXHQvLyAyLiBUaGUgQXNzZXJ0aW9uRXJyb3IgaXMgZGVmaW5lZCBpbiBhc3NlcnQuXG5cdC8vIG5ldyBhc3NlcnQuQXNzZXJ0aW9uRXJyb3IoeyBtZXNzYWdlOiBtZXNzYWdlLFxuXHQvLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0dWFsOiBhY3R1YWwsXG5cdC8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHBlY3RlZDogZXhwZWN0ZWQgfSlcblx0XG5cdHZhciByZWdleCA9IC9cXHMqZnVuY3Rpb25cXHMrKFteXFwoXFxzXSopXFxzKi87XG5cdC8vIGJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9samhhcmIvZnVuY3Rpb24ucHJvdG90eXBlLm5hbWUvYmxvYi9hZGVlZWVjOGJmY2M2MDY4YjE4N2Q3ZDlmYjNkNWJiMWQzYTMwODk5L2ltcGxlbWVudGF0aW9uLmpzXG5cdGZ1bmN0aW9uIGdldE5hbWUoZnVuYykge1xuXHQgIGlmICghdXRpbC5pc0Z1bmN0aW9uKGZ1bmMpKSB7XG5cdCAgICByZXR1cm47XG5cdCAgfVxuXHQgIGlmIChmdW5jdGlvbnNIYXZlTmFtZXMpIHtcblx0ICAgIHJldHVybiBmdW5jLm5hbWU7XG5cdCAgfVxuXHQgIHZhciBzdHIgPSBmdW5jLnRvU3RyaW5nKCk7XG5cdCAgdmFyIG1hdGNoID0gc3RyLm1hdGNoKHJlZ2V4KTtcblx0ICByZXR1cm4gbWF0Y2ggJiYgbWF0Y2hbMV07XG5cdH1cblx0YXNzZXJ0LkFzc2VydGlvbkVycm9yID0gZnVuY3Rpb24gQXNzZXJ0aW9uRXJyb3Iob3B0aW9ucykge1xuXHQgIHRoaXMubmFtZSA9ICdBc3NlcnRpb25FcnJvcic7XG5cdCAgdGhpcy5hY3R1YWwgPSBvcHRpb25zLmFjdHVhbDtcblx0ICB0aGlzLmV4cGVjdGVkID0gb3B0aW9ucy5leHBlY3RlZDtcblx0ICB0aGlzLm9wZXJhdG9yID0gb3B0aW9ucy5vcGVyYXRvcjtcblx0ICBpZiAob3B0aW9ucy5tZXNzYWdlKSB7XG5cdCAgICB0aGlzLm1lc3NhZ2UgPSBvcHRpb25zLm1lc3NhZ2U7XG5cdCAgICB0aGlzLmdlbmVyYXRlZE1lc3NhZ2UgPSBmYWxzZTtcblx0ICB9IGVsc2Uge1xuXHQgICAgdGhpcy5tZXNzYWdlID0gZ2V0TWVzc2FnZSh0aGlzKTtcblx0ICAgIHRoaXMuZ2VuZXJhdGVkTWVzc2FnZSA9IHRydWU7XG5cdCAgfVxuXHQgIHZhciBzdGFja1N0YXJ0RnVuY3Rpb24gPSBvcHRpb25zLnN0YWNrU3RhcnRGdW5jdGlvbiB8fCBmYWlsO1xuXHQgIGlmIChFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSkge1xuXHQgICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgc3RhY2tTdGFydEZ1bmN0aW9uKTtcblx0ICB9IGVsc2Uge1xuXHQgICAgLy8gbm9uIHY4IGJyb3dzZXJzIHNvIHdlIGNhbiBoYXZlIGEgc3RhY2t0cmFjZVxuXHQgICAgdmFyIGVyciA9IG5ldyBFcnJvcigpO1xuXHQgICAgaWYgKGVyci5zdGFjaykge1xuXHQgICAgICB2YXIgb3V0ID0gZXJyLnN0YWNrO1xuXHRcblx0ICAgICAgLy8gdHJ5IHRvIHN0cmlwIHVzZWxlc3MgZnJhbWVzXG5cdCAgICAgIHZhciBmbl9uYW1lID0gZ2V0TmFtZShzdGFja1N0YXJ0RnVuY3Rpb24pO1xuXHQgICAgICB2YXIgaWR4ID0gb3V0LmluZGV4T2YoJ1xcbicgKyBmbl9uYW1lKTtcblx0ICAgICAgaWYgKGlkeCA+PSAwKSB7XG5cdCAgICAgICAgLy8gb25jZSB3ZSBoYXZlIGxvY2F0ZWQgdGhlIGZ1bmN0aW9uIGZyYW1lXG5cdCAgICAgICAgLy8gd2UgbmVlZCB0byBzdHJpcCBvdXQgZXZlcnl0aGluZyBiZWZvcmUgaXQgKGFuZCBpdHMgbGluZSlcblx0ICAgICAgICB2YXIgbmV4dF9saW5lID0gb3V0LmluZGV4T2YoJ1xcbicsIGlkeCArIDEpO1xuXHQgICAgICAgIG91dCA9IG91dC5zdWJzdHJpbmcobmV4dF9saW5lICsgMSk7XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIHRoaXMuc3RhY2sgPSBvdXQ7XG5cdCAgICB9XG5cdCAgfVxuXHR9O1xuXHRcblx0Ly8gYXNzZXJ0LkFzc2VydGlvbkVycm9yIGluc3RhbmNlb2YgRXJyb3Jcblx0dXRpbC5pbmhlcml0cyhhc3NlcnQuQXNzZXJ0aW9uRXJyb3IsIEVycm9yKTtcblx0XG5cdGZ1bmN0aW9uIHRydW5jYXRlKHMsIG4pIHtcblx0ICBpZiAodHlwZW9mIHMgPT09ICdzdHJpbmcnKSB7XG5cdCAgICByZXR1cm4gcy5sZW5ndGggPCBuID8gcyA6IHMuc2xpY2UoMCwgbik7XG5cdCAgfSBlbHNlIHtcblx0ICAgIHJldHVybiBzO1xuXHQgIH1cblx0fVxuXHRmdW5jdGlvbiBpbnNwZWN0KHNvbWV0aGluZykge1xuXHQgIGlmIChmdW5jdGlvbnNIYXZlTmFtZXMgfHwgIXV0aWwuaXNGdW5jdGlvbihzb21ldGhpbmcpKSB7XG5cdCAgICByZXR1cm4gdXRpbC5pbnNwZWN0KHNvbWV0aGluZyk7XG5cdCAgfVxuXHQgIHZhciByYXduYW1lID0gZ2V0TmFtZShzb21ldGhpbmcpO1xuXHQgIHZhciBuYW1lID0gcmF3bmFtZSA/ICc6ICcgKyByYXduYW1lIDogJyc7XG5cdCAgcmV0dXJuICdbRnVuY3Rpb24nICsgIG5hbWUgKyAnXSc7XG5cdH1cblx0ZnVuY3Rpb24gZ2V0TWVzc2FnZShzZWxmKSB7XG5cdCAgcmV0dXJuIHRydW5jYXRlKGluc3BlY3Qoc2VsZi5hY3R1YWwpLCAxMjgpICsgJyAnICtcblx0ICAgICAgICAgc2VsZi5vcGVyYXRvciArICcgJyArXG5cdCAgICAgICAgIHRydW5jYXRlKGluc3BlY3Qoc2VsZi5leHBlY3RlZCksIDEyOCk7XG5cdH1cblx0XG5cdC8vIEF0IHByZXNlbnQgb25seSB0aGUgdGhyZWUga2V5cyBtZW50aW9uZWQgYWJvdmUgYXJlIHVzZWQgYW5kXG5cdC8vIHVuZGVyc3Rvb2QgYnkgdGhlIHNwZWMuIEltcGxlbWVudGF0aW9ucyBvciBzdWIgbW9kdWxlcyBjYW4gcGFzc1xuXHQvLyBvdGhlciBrZXlzIHRvIHRoZSBBc3NlcnRpb25FcnJvcidzIGNvbnN0cnVjdG9yIC0gdGhleSB3aWxsIGJlXG5cdC8vIGlnbm9yZWQuXG5cdFxuXHQvLyAzLiBBbGwgb2YgdGhlIGZvbGxvd2luZyBmdW5jdGlvbnMgbXVzdCB0aHJvdyBhbiBBc3NlcnRpb25FcnJvclxuXHQvLyB3aGVuIGEgY29ycmVzcG9uZGluZyBjb25kaXRpb24gaXMgbm90IG1ldCwgd2l0aCBhIG1lc3NhZ2UgdGhhdFxuXHQvLyBtYXkgYmUgdW5kZWZpbmVkIGlmIG5vdCBwcm92aWRlZC4gIEFsbCBhc3NlcnRpb24gbWV0aG9kcyBwcm92aWRlXG5cdC8vIGJvdGggdGhlIGFjdHVhbCBhbmQgZXhwZWN0ZWQgdmFsdWVzIHRvIHRoZSBhc3NlcnRpb24gZXJyb3IgZm9yXG5cdC8vIGRpc3BsYXkgcHVycG9zZXMuXG5cdFxuXHRmdW5jdGlvbiBmYWlsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UsIG9wZXJhdG9yLCBzdGFja1N0YXJ0RnVuY3Rpb24pIHtcblx0ICB0aHJvdyBuZXcgYXNzZXJ0LkFzc2VydGlvbkVycm9yKHtcblx0ICAgIG1lc3NhZ2U6IG1lc3NhZ2UsXG5cdCAgICBhY3R1YWw6IGFjdHVhbCxcblx0ICAgIGV4cGVjdGVkOiBleHBlY3RlZCxcblx0ICAgIG9wZXJhdG9yOiBvcGVyYXRvcixcblx0ICAgIHN0YWNrU3RhcnRGdW5jdGlvbjogc3RhY2tTdGFydEZ1bmN0aW9uXG5cdCAgfSk7XG5cdH1cblx0XG5cdC8vIEVYVEVOU0lPTiEgYWxsb3dzIGZvciB3ZWxsIGJlaGF2ZWQgZXJyb3JzIGRlZmluZWQgZWxzZXdoZXJlLlxuXHRhc3NlcnQuZmFpbCA9IGZhaWw7XG5cdFxuXHQvLyA0LiBQdXJlIGFzc2VydGlvbiB0ZXN0cyB3aGV0aGVyIGEgdmFsdWUgaXMgdHJ1dGh5LCBhcyBkZXRlcm1pbmVkXG5cdC8vIGJ5ICEhZ3VhcmQuXG5cdC8vIGFzc2VydC5vayhndWFyZCwgbWVzc2FnZV9vcHQpO1xuXHQvLyBUaGlzIHN0YXRlbWVudCBpcyBlcXVpdmFsZW50IHRvIGFzc2VydC5lcXVhbCh0cnVlLCAhIWd1YXJkLFxuXHQvLyBtZXNzYWdlX29wdCk7LiBUbyB0ZXN0IHN0cmljdGx5IGZvciB0aGUgdmFsdWUgdHJ1ZSwgdXNlXG5cdC8vIGFzc2VydC5zdHJpY3RFcXVhbCh0cnVlLCBndWFyZCwgbWVzc2FnZV9vcHQpOy5cblx0XG5cdGZ1bmN0aW9uIG9rKHZhbHVlLCBtZXNzYWdlKSB7XG5cdCAgaWYgKCF2YWx1ZSkgZmFpbCh2YWx1ZSwgdHJ1ZSwgbWVzc2FnZSwgJz09JywgYXNzZXJ0Lm9rKTtcblx0fVxuXHRhc3NlcnQub2sgPSBvaztcblx0XG5cdC8vIDUuIFRoZSBlcXVhbGl0eSBhc3NlcnRpb24gdGVzdHMgc2hhbGxvdywgY29lcmNpdmUgZXF1YWxpdHkgd2l0aFxuXHQvLyA9PS5cblx0Ly8gYXNzZXJ0LmVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2Vfb3B0KTtcblx0XG5cdGFzc2VydC5lcXVhbCA9IGZ1bmN0aW9uIGVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpIHtcblx0ICBpZiAoYWN0dWFsICE9IGV4cGVjdGVkKSBmYWlsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UsICc9PScsIGFzc2VydC5lcXVhbCk7XG5cdH07XG5cdFxuXHQvLyA2LiBUaGUgbm9uLWVxdWFsaXR5IGFzc2VydGlvbiB0ZXN0cyBmb3Igd2hldGhlciB0d28gb2JqZWN0cyBhcmUgbm90IGVxdWFsXG5cdC8vIHdpdGggIT0gYXNzZXJ0Lm5vdEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2Vfb3B0KTtcblx0XG5cdGFzc2VydC5ub3RFcXVhbCA9IGZ1bmN0aW9uIG5vdEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpIHtcblx0ICBpZiAoYWN0dWFsID09IGV4cGVjdGVkKSB7XG5cdCAgICBmYWlsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UsICchPScsIGFzc2VydC5ub3RFcXVhbCk7XG5cdCAgfVxuXHR9O1xuXHRcblx0Ly8gNy4gVGhlIGVxdWl2YWxlbmNlIGFzc2VydGlvbiB0ZXN0cyBhIGRlZXAgZXF1YWxpdHkgcmVsYXRpb24uXG5cdC8vIGFzc2VydC5kZWVwRXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZV9vcHQpO1xuXHRcblx0YXNzZXJ0LmRlZXBFcXVhbCA9IGZ1bmN0aW9uIGRlZXBFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlKSB7XG5cdCAgaWYgKCFfZGVlcEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIGZhbHNlKSkge1xuXHQgICAgZmFpbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlLCAnZGVlcEVxdWFsJywgYXNzZXJ0LmRlZXBFcXVhbCk7XG5cdCAgfVxuXHR9O1xuXHRcblx0YXNzZXJ0LmRlZXBTdHJpY3RFcXVhbCA9IGZ1bmN0aW9uIGRlZXBTdHJpY3RFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlKSB7XG5cdCAgaWYgKCFfZGVlcEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIHRydWUpKSB7XG5cdCAgICBmYWlsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UsICdkZWVwU3RyaWN0RXF1YWwnLCBhc3NlcnQuZGVlcFN0cmljdEVxdWFsKTtcblx0ICB9XG5cdH07XG5cdFxuXHRmdW5jdGlvbiBfZGVlcEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIHN0cmljdCwgbWVtb3MpIHtcblx0ICAvLyA3LjEuIEFsbCBpZGVudGljYWwgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBhcyBkZXRlcm1pbmVkIGJ5ID09PS5cblx0ICBpZiAoYWN0dWFsID09PSBleHBlY3RlZCkge1xuXHQgICAgcmV0dXJuIHRydWU7XG5cdCAgfSBlbHNlIGlmIChpc0J1ZmZlcihhY3R1YWwpICYmIGlzQnVmZmVyKGV4cGVjdGVkKSkge1xuXHQgICAgcmV0dXJuIGNvbXBhcmUoYWN0dWFsLCBleHBlY3RlZCkgPT09IDA7XG5cdFxuXHQgIC8vIDcuMi4gSWYgdGhlIGV4cGVjdGVkIHZhbHVlIGlzIGEgRGF0ZSBvYmplY3QsIHRoZSBhY3R1YWwgdmFsdWUgaXNcblx0ICAvLyBlcXVpdmFsZW50IGlmIGl0IGlzIGFsc28gYSBEYXRlIG9iamVjdCB0aGF0IHJlZmVycyB0byB0aGUgc2FtZSB0aW1lLlxuXHQgIH0gZWxzZSBpZiAodXRpbC5pc0RhdGUoYWN0dWFsKSAmJiB1dGlsLmlzRGF0ZShleHBlY3RlZCkpIHtcblx0ICAgIHJldHVybiBhY3R1YWwuZ2V0VGltZSgpID09PSBleHBlY3RlZC5nZXRUaW1lKCk7XG5cdFxuXHQgIC8vIDcuMyBJZiB0aGUgZXhwZWN0ZWQgdmFsdWUgaXMgYSBSZWdFeHAgb2JqZWN0LCB0aGUgYWN0dWFsIHZhbHVlIGlzXG5cdCAgLy8gZXF1aXZhbGVudCBpZiBpdCBpcyBhbHNvIGEgUmVnRXhwIG9iamVjdCB3aXRoIHRoZSBzYW1lIHNvdXJjZSBhbmRcblx0ICAvLyBwcm9wZXJ0aWVzIChgZ2xvYmFsYCwgYG11bHRpbGluZWAsIGBsYXN0SW5kZXhgLCBgaWdub3JlQ2FzZWApLlxuXHQgIH0gZWxzZSBpZiAodXRpbC5pc1JlZ0V4cChhY3R1YWwpICYmIHV0aWwuaXNSZWdFeHAoZXhwZWN0ZWQpKSB7XG5cdCAgICByZXR1cm4gYWN0dWFsLnNvdXJjZSA9PT0gZXhwZWN0ZWQuc291cmNlICYmXG5cdCAgICAgICAgICAgYWN0dWFsLmdsb2JhbCA9PT0gZXhwZWN0ZWQuZ2xvYmFsICYmXG5cdCAgICAgICAgICAgYWN0dWFsLm11bHRpbGluZSA9PT0gZXhwZWN0ZWQubXVsdGlsaW5lICYmXG5cdCAgICAgICAgICAgYWN0dWFsLmxhc3RJbmRleCA9PT0gZXhwZWN0ZWQubGFzdEluZGV4ICYmXG5cdCAgICAgICAgICAgYWN0dWFsLmlnbm9yZUNhc2UgPT09IGV4cGVjdGVkLmlnbm9yZUNhc2U7XG5cdFxuXHQgIC8vIDcuNC4gT3RoZXIgcGFpcnMgdGhhdCBkbyBub3QgYm90aCBwYXNzIHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0Jyxcblx0ICAvLyBlcXVpdmFsZW5jZSBpcyBkZXRlcm1pbmVkIGJ5ID09LlxuXHQgIH0gZWxzZSBpZiAoKGFjdHVhbCA9PT0gbnVsbCB8fCB0eXBlb2YgYWN0dWFsICE9PSAnb2JqZWN0JykgJiZcblx0ICAgICAgICAgICAgIChleHBlY3RlZCA9PT0gbnVsbCB8fCB0eXBlb2YgZXhwZWN0ZWQgIT09ICdvYmplY3QnKSkge1xuXHQgICAgcmV0dXJuIHN0cmljdCA/IGFjdHVhbCA9PT0gZXhwZWN0ZWQgOiBhY3R1YWwgPT0gZXhwZWN0ZWQ7XG5cdFxuXHQgIC8vIElmIGJvdGggdmFsdWVzIGFyZSBpbnN0YW5jZXMgb2YgdHlwZWQgYXJyYXlzLCB3cmFwIHRoZWlyIHVuZGVybHlpbmdcblx0ICAvLyBBcnJheUJ1ZmZlcnMgaW4gYSBCdWZmZXIgZWFjaCB0byBpbmNyZWFzZSBwZXJmb3JtYW5jZVxuXHQgIC8vIFRoaXMgb3B0aW1pemF0aW9uIHJlcXVpcmVzIHRoZSBhcnJheXMgdG8gaGF2ZSB0aGUgc2FtZSB0eXBlIGFzIGNoZWNrZWQgYnlcblx0ICAvLyBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nIChha2EgcFRvU3RyaW5nKS4gTmV2ZXIgcGVyZm9ybSBiaW5hcnlcblx0ICAvLyBjb21wYXJpc29ucyBmb3IgRmxvYXQqQXJyYXlzLCB0aG91Z2gsIHNpbmNlIGUuZy4gKzAgPT09IC0wIGJ1dCB0aGVpclxuXHQgIC8vIGJpdCBwYXR0ZXJucyBhcmUgbm90IGlkZW50aWNhbC5cblx0ICB9IGVsc2UgaWYgKGlzVmlldyhhY3R1YWwpICYmIGlzVmlldyhleHBlY3RlZCkgJiZcblx0ICAgICAgICAgICAgIHBUb1N0cmluZyhhY3R1YWwpID09PSBwVG9TdHJpbmcoZXhwZWN0ZWQpICYmXG5cdCAgICAgICAgICAgICAhKGFjdHVhbCBpbnN0YW5jZW9mIEZsb2F0MzJBcnJheSB8fFxuXHQgICAgICAgICAgICAgICBhY3R1YWwgaW5zdGFuY2VvZiBGbG9hdDY0QXJyYXkpKSB7XG5cdCAgICByZXR1cm4gY29tcGFyZShuZXcgVWludDhBcnJheShhY3R1YWwuYnVmZmVyKSxcblx0ICAgICAgICAgICAgICAgICAgIG5ldyBVaW50OEFycmF5KGV4cGVjdGVkLmJ1ZmZlcikpID09PSAwO1xuXHRcblx0ICAvLyA3LjUgRm9yIGFsbCBvdGhlciBPYmplY3QgcGFpcnMsIGluY2x1ZGluZyBBcnJheSBvYmplY3RzLCBlcXVpdmFsZW5jZSBpc1xuXHQgIC8vIGRldGVybWluZWQgYnkgaGF2aW5nIHRoZSBzYW1lIG51bWJlciBvZiBvd25lZCBwcm9wZXJ0aWVzIChhcyB2ZXJpZmllZFxuXHQgIC8vIHdpdGggT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKSwgdGhlIHNhbWUgc2V0IG9mIGtleXNcblx0ICAvLyAoYWx0aG91Z2ggbm90IG5lY2Vzc2FyaWx5IHRoZSBzYW1lIG9yZGVyKSwgZXF1aXZhbGVudCB2YWx1ZXMgZm9yIGV2ZXJ5XG5cdCAgLy8gY29ycmVzcG9uZGluZyBrZXksIGFuZCBhbiBpZGVudGljYWwgJ3Byb3RvdHlwZScgcHJvcGVydHkuIE5vdGU6IHRoaXNcblx0ICAvLyBhY2NvdW50cyBmb3IgYm90aCBuYW1lZCBhbmQgaW5kZXhlZCBwcm9wZXJ0aWVzIG9uIEFycmF5cy5cblx0ICB9IGVsc2UgaWYgKGlzQnVmZmVyKGFjdHVhbCkgIT09IGlzQnVmZmVyKGV4cGVjdGVkKSkge1xuXHQgICAgcmV0dXJuIGZhbHNlO1xuXHQgIH0gZWxzZSB7XG5cdCAgICBtZW1vcyA9IG1lbW9zIHx8IHthY3R1YWw6IFtdLCBleHBlY3RlZDogW119O1xuXHRcblx0ICAgIHZhciBhY3R1YWxJbmRleCA9IG1lbW9zLmFjdHVhbC5pbmRleE9mKGFjdHVhbCk7XG5cdCAgICBpZiAoYWN0dWFsSW5kZXggIT09IC0xKSB7XG5cdCAgICAgIGlmIChhY3R1YWxJbmRleCA9PT0gbWVtb3MuZXhwZWN0ZWQuaW5kZXhPZihleHBlY3RlZCkpIHtcblx0ICAgICAgICByZXR1cm4gdHJ1ZTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHRcblx0ICAgIG1lbW9zLmFjdHVhbC5wdXNoKGFjdHVhbCk7XG5cdCAgICBtZW1vcy5leHBlY3RlZC5wdXNoKGV4cGVjdGVkKTtcblx0XG5cdCAgICByZXR1cm4gb2JqRXF1aXYoYWN0dWFsLCBleHBlY3RlZCwgc3RyaWN0LCBtZW1vcyk7XG5cdCAgfVxuXHR9XG5cdFxuXHRmdW5jdGlvbiBpc0FyZ3VtZW50cyhvYmplY3QpIHtcblx0ICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG9iamVjdCkgPT0gJ1tvYmplY3QgQXJndW1lbnRzXSc7XG5cdH1cblx0XG5cdGZ1bmN0aW9uIG9iakVxdWl2KGEsIGIsIHN0cmljdCwgYWN0dWFsVmlzaXRlZE9iamVjdHMpIHtcblx0ICBpZiAoYSA9PT0gbnVsbCB8fCBhID09PSB1bmRlZmluZWQgfHwgYiA9PT0gbnVsbCB8fCBiID09PSB1bmRlZmluZWQpXG5cdCAgICByZXR1cm4gZmFsc2U7XG5cdCAgLy8gaWYgb25lIGlzIGEgcHJpbWl0aXZlLCB0aGUgb3RoZXIgbXVzdCBiZSBzYW1lXG5cdCAgaWYgKHV0aWwuaXNQcmltaXRpdmUoYSkgfHwgdXRpbC5pc1ByaW1pdGl2ZShiKSlcblx0ICAgIHJldHVybiBhID09PSBiO1xuXHQgIGlmIChzdHJpY3QgJiYgT2JqZWN0LmdldFByb3RvdHlwZU9mKGEpICE9PSBPYmplY3QuZ2V0UHJvdG90eXBlT2YoYikpXG5cdCAgICByZXR1cm4gZmFsc2U7XG5cdCAgdmFyIGFJc0FyZ3MgPSBpc0FyZ3VtZW50cyhhKTtcblx0ICB2YXIgYklzQXJncyA9IGlzQXJndW1lbnRzKGIpO1xuXHQgIGlmICgoYUlzQXJncyAmJiAhYklzQXJncykgfHwgKCFhSXNBcmdzICYmIGJJc0FyZ3MpKVxuXHQgICAgcmV0dXJuIGZhbHNlO1xuXHQgIGlmIChhSXNBcmdzKSB7XG5cdCAgICBhID0gcFNsaWNlLmNhbGwoYSk7XG5cdCAgICBiID0gcFNsaWNlLmNhbGwoYik7XG5cdCAgICByZXR1cm4gX2RlZXBFcXVhbChhLCBiLCBzdHJpY3QpO1xuXHQgIH1cblx0ICB2YXIga2EgPSBvYmplY3RLZXlzKGEpO1xuXHQgIHZhciBrYiA9IG9iamVjdEtleXMoYik7XG5cdCAgdmFyIGtleSwgaTtcblx0ICAvLyBoYXZpbmcgdGhlIHNhbWUgbnVtYmVyIG9mIG93bmVkIHByb3BlcnRpZXMgKGtleXMgaW5jb3Jwb3JhdGVzXG5cdCAgLy8gaGFzT3duUHJvcGVydHkpXG5cdCAgaWYgKGthLmxlbmd0aCAhPT0ga2IubGVuZ3RoKVxuXHQgICAgcmV0dXJuIGZhbHNlO1xuXHQgIC8vdGhlIHNhbWUgc2V0IG9mIGtleXMgKGFsdGhvdWdoIG5vdCBuZWNlc3NhcmlseSB0aGUgc2FtZSBvcmRlciksXG5cdCAga2Euc29ydCgpO1xuXHQgIGtiLnNvcnQoKTtcblx0ICAvL35+fmNoZWFwIGtleSB0ZXN0XG5cdCAgZm9yIChpID0ga2EubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcblx0ICAgIGlmIChrYVtpXSAhPT0ga2JbaV0pXG5cdCAgICAgIHJldHVybiBmYWxzZTtcblx0ICB9XG5cdCAgLy9lcXVpdmFsZW50IHZhbHVlcyBmb3IgZXZlcnkgY29ycmVzcG9uZGluZyBrZXksIGFuZFxuXHQgIC8vfn5+cG9zc2libHkgZXhwZW5zaXZlIGRlZXAgdGVzdFxuXHQgIGZvciAoaSA9IGthLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG5cdCAgICBrZXkgPSBrYVtpXTtcblx0ICAgIGlmICghX2RlZXBFcXVhbChhW2tleV0sIGJba2V5XSwgc3RyaWN0LCBhY3R1YWxWaXNpdGVkT2JqZWN0cykpXG5cdCAgICAgIHJldHVybiBmYWxzZTtcblx0ICB9XG5cdCAgcmV0dXJuIHRydWU7XG5cdH1cblx0XG5cdC8vIDguIFRoZSBub24tZXF1aXZhbGVuY2UgYXNzZXJ0aW9uIHRlc3RzIGZvciBhbnkgZGVlcCBpbmVxdWFsaXR5LlxuXHQvLyBhc3NlcnQubm90RGVlcEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2Vfb3B0KTtcblx0XG5cdGFzc2VydC5ub3REZWVwRXF1YWwgPSBmdW5jdGlvbiBub3REZWVwRXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSkge1xuXHQgIGlmIChfZGVlcEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIGZhbHNlKSkge1xuXHQgICAgZmFpbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlLCAnbm90RGVlcEVxdWFsJywgYXNzZXJ0Lm5vdERlZXBFcXVhbCk7XG5cdCAgfVxuXHR9O1xuXHRcblx0YXNzZXJ0Lm5vdERlZXBTdHJpY3RFcXVhbCA9IG5vdERlZXBTdHJpY3RFcXVhbDtcblx0ZnVuY3Rpb24gbm90RGVlcFN0cmljdEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpIHtcblx0ICBpZiAoX2RlZXBFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCB0cnVlKSkge1xuXHQgICAgZmFpbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlLCAnbm90RGVlcFN0cmljdEVxdWFsJywgbm90RGVlcFN0cmljdEVxdWFsKTtcblx0ICB9XG5cdH1cblx0XG5cdFxuXHQvLyA5LiBUaGUgc3RyaWN0IGVxdWFsaXR5IGFzc2VydGlvbiB0ZXN0cyBzdHJpY3QgZXF1YWxpdHksIGFzIGRldGVybWluZWQgYnkgPT09LlxuXHQvLyBhc3NlcnQuc3RyaWN0RXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZV9vcHQpO1xuXHRcblx0YXNzZXJ0LnN0cmljdEVxdWFsID0gZnVuY3Rpb24gc3RyaWN0RXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSkge1xuXHQgIGlmIChhY3R1YWwgIT09IGV4cGVjdGVkKSB7XG5cdCAgICBmYWlsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UsICc9PT0nLCBhc3NlcnQuc3RyaWN0RXF1YWwpO1xuXHQgIH1cblx0fTtcblx0XG5cdC8vIDEwLiBUaGUgc3RyaWN0IG5vbi1lcXVhbGl0eSBhc3NlcnRpb24gdGVzdHMgZm9yIHN0cmljdCBpbmVxdWFsaXR5LCBhc1xuXHQvLyBkZXRlcm1pbmVkIGJ5ICE9PS4gIGFzc2VydC5ub3RTdHJpY3RFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlX29wdCk7XG5cdFxuXHRhc3NlcnQubm90U3RyaWN0RXF1YWwgPSBmdW5jdGlvbiBub3RTdHJpY3RFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlKSB7XG5cdCAgaWYgKGFjdHVhbCA9PT0gZXhwZWN0ZWQpIHtcblx0ICAgIGZhaWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSwgJyE9PScsIGFzc2VydC5ub3RTdHJpY3RFcXVhbCk7XG5cdCAgfVxuXHR9O1xuXHRcblx0ZnVuY3Rpb24gZXhwZWN0ZWRFeGNlcHRpb24oYWN0dWFsLCBleHBlY3RlZCkge1xuXHQgIGlmICghYWN0dWFsIHx8ICFleHBlY3RlZCkge1xuXHQgICAgcmV0dXJuIGZhbHNlO1xuXHQgIH1cblx0XG5cdCAgaWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChleHBlY3RlZCkgPT0gJ1tvYmplY3QgUmVnRXhwXScpIHtcblx0ICAgIHJldHVybiBleHBlY3RlZC50ZXN0KGFjdHVhbCk7XG5cdCAgfVxuXHRcblx0ICB0cnkge1xuXHQgICAgaWYgKGFjdHVhbCBpbnN0YW5jZW9mIGV4cGVjdGVkKSB7XG5cdCAgICAgIHJldHVybiB0cnVlO1xuXHQgICAgfVxuXHQgIH0gY2F0Y2ggKGUpIHtcblx0ICAgIC8vIElnbm9yZS4gIFRoZSBpbnN0YW5jZW9mIGNoZWNrIGRvZXNuJ3Qgd29yayBmb3IgYXJyb3cgZnVuY3Rpb25zLlxuXHQgIH1cblx0XG5cdCAgaWYgKEVycm9yLmlzUHJvdG90eXBlT2YoZXhwZWN0ZWQpKSB7XG5cdCAgICByZXR1cm4gZmFsc2U7XG5cdCAgfVxuXHRcblx0ICByZXR1cm4gZXhwZWN0ZWQuY2FsbCh7fSwgYWN0dWFsKSA9PT0gdHJ1ZTtcblx0fVxuXHRcblx0ZnVuY3Rpb24gX3RyeUJsb2NrKGJsb2NrKSB7XG5cdCAgdmFyIGVycm9yO1xuXHQgIHRyeSB7XG5cdCAgICBibG9jaygpO1xuXHQgIH0gY2F0Y2ggKGUpIHtcblx0ICAgIGVycm9yID0gZTtcblx0ICB9XG5cdCAgcmV0dXJuIGVycm9yO1xuXHR9XG5cdFxuXHRmdW5jdGlvbiBfdGhyb3dzKHNob3VsZFRocm93LCBibG9jaywgZXhwZWN0ZWQsIG1lc3NhZ2UpIHtcblx0ICB2YXIgYWN0dWFsO1xuXHRcblx0ICBpZiAodHlwZW9mIGJsb2NrICE9PSAnZnVuY3Rpb24nKSB7XG5cdCAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImJsb2NrXCIgYXJndW1lbnQgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG5cdCAgfVxuXHRcblx0ICBpZiAodHlwZW9mIGV4cGVjdGVkID09PSAnc3RyaW5nJykge1xuXHQgICAgbWVzc2FnZSA9IGV4cGVjdGVkO1xuXHQgICAgZXhwZWN0ZWQgPSBudWxsO1xuXHQgIH1cblx0XG5cdCAgYWN0dWFsID0gX3RyeUJsb2NrKGJsb2NrKTtcblx0XG5cdCAgbWVzc2FnZSA9IChleHBlY3RlZCAmJiBleHBlY3RlZC5uYW1lID8gJyAoJyArIGV4cGVjdGVkLm5hbWUgKyAnKS4nIDogJy4nKSArXG5cdCAgICAgICAgICAgIChtZXNzYWdlID8gJyAnICsgbWVzc2FnZSA6ICcuJyk7XG5cdFxuXHQgIGlmIChzaG91bGRUaHJvdyAmJiAhYWN0dWFsKSB7XG5cdCAgICBmYWlsKGFjdHVhbCwgZXhwZWN0ZWQsICdNaXNzaW5nIGV4cGVjdGVkIGV4Y2VwdGlvbicgKyBtZXNzYWdlKTtcblx0ICB9XG5cdFxuXHQgIHZhciB1c2VyUHJvdmlkZWRNZXNzYWdlID0gdHlwZW9mIG1lc3NhZ2UgPT09ICdzdHJpbmcnO1xuXHQgIHZhciBpc1Vud2FudGVkRXhjZXB0aW9uID0gIXNob3VsZFRocm93ICYmIHV0aWwuaXNFcnJvcihhY3R1YWwpO1xuXHQgIHZhciBpc1VuZXhwZWN0ZWRFeGNlcHRpb24gPSAhc2hvdWxkVGhyb3cgJiYgYWN0dWFsICYmICFleHBlY3RlZDtcblx0XG5cdCAgaWYgKChpc1Vud2FudGVkRXhjZXB0aW9uICYmXG5cdCAgICAgIHVzZXJQcm92aWRlZE1lc3NhZ2UgJiZcblx0ICAgICAgZXhwZWN0ZWRFeGNlcHRpb24oYWN0dWFsLCBleHBlY3RlZCkpIHx8XG5cdCAgICAgIGlzVW5leHBlY3RlZEV4Y2VwdGlvbikge1xuXHQgICAgZmFpbChhY3R1YWwsIGV4cGVjdGVkLCAnR290IHVud2FudGVkIGV4Y2VwdGlvbicgKyBtZXNzYWdlKTtcblx0ICB9XG5cdFxuXHQgIGlmICgoc2hvdWxkVGhyb3cgJiYgYWN0dWFsICYmIGV4cGVjdGVkICYmXG5cdCAgICAgICFleHBlY3RlZEV4Y2VwdGlvbihhY3R1YWwsIGV4cGVjdGVkKSkgfHwgKCFzaG91bGRUaHJvdyAmJiBhY3R1YWwpKSB7XG5cdCAgICB0aHJvdyBhY3R1YWw7XG5cdCAgfVxuXHR9XG5cdFxuXHQvLyAxMS4gRXhwZWN0ZWQgdG8gdGhyb3cgYW4gZXJyb3I6XG5cdC8vIGFzc2VydC50aHJvd3MoYmxvY2ssIEVycm9yX29wdCwgbWVzc2FnZV9vcHQpO1xuXHRcblx0YXNzZXJ0LnRocm93cyA9IGZ1bmN0aW9uKGJsb2NrLCAvKm9wdGlvbmFsKi9lcnJvciwgLypvcHRpb25hbCovbWVzc2FnZSkge1xuXHQgIF90aHJvd3ModHJ1ZSwgYmxvY2ssIGVycm9yLCBtZXNzYWdlKTtcblx0fTtcblx0XG5cdC8vIEVYVEVOU0lPTiEgVGhpcyBpcyBhbm5veWluZyB0byB3cml0ZSBvdXRzaWRlIHRoaXMgbW9kdWxlLlxuXHRhc3NlcnQuZG9lc05vdFRocm93ID0gZnVuY3Rpb24oYmxvY2ssIC8qb3B0aW9uYWwqL2Vycm9yLCAvKm9wdGlvbmFsKi9tZXNzYWdlKSB7XG5cdCAgX3Rocm93cyhmYWxzZSwgYmxvY2ssIGVycm9yLCBtZXNzYWdlKTtcblx0fTtcblx0XG5cdGFzc2VydC5pZkVycm9yID0gZnVuY3Rpb24oZXJyKSB7IGlmIChlcnIpIHRocm93IGVycjsgfTtcblx0XG5cdHZhciBvYmplY3RLZXlzID0gT2JqZWN0LmtleXMgfHwgZnVuY3Rpb24gKG9iaikge1xuXHQgIHZhciBrZXlzID0gW107XG5cdCAgZm9yICh2YXIga2V5IGluIG9iaikge1xuXHQgICAgaWYgKGhhc093bi5jYWxsKG9iaiwga2V5KSkga2V5cy5wdXNoKGtleSk7XG5cdCAgfVxuXHQgIHJldHVybiBrZXlzO1xuXHR9O1xuXHRcblx0LyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovfS5jYWxsKGV4cG9ydHMsIChmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0oKSkpKVxuXG4vKioqLyB9LFxuLyogMjAgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqLyhmdW5jdGlvbihnbG9iYWwsIHByb2Nlc3MpIHsvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cblx0Ly9cblx0Ly8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcblx0Ly8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuXHQvLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcblx0Ly8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuXHQvLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG5cdC8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuXHQvLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcblx0Ly9cblx0Ly8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcblx0Ly8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cdC8vXG5cdC8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncblx0Ly8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuXHQvLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG5cdC8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuXHQvLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcblx0Ly8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuXHQvLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXHRcblx0dmFyIGZvcm1hdFJlZ0V4cCA9IC8lW3NkaiVdL2c7XG5cdGV4cG9ydHMuZm9ybWF0ID0gZnVuY3Rpb24oZikge1xuXHQgIGlmICghaXNTdHJpbmcoZikpIHtcblx0ICAgIHZhciBvYmplY3RzID0gW107XG5cdCAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuXHQgICAgICBvYmplY3RzLnB1c2goaW5zcGVjdChhcmd1bWVudHNbaV0pKTtcblx0ICAgIH1cblx0ICAgIHJldHVybiBvYmplY3RzLmpvaW4oJyAnKTtcblx0ICB9XG5cdFxuXHQgIHZhciBpID0gMTtcblx0ICB2YXIgYXJncyA9IGFyZ3VtZW50cztcblx0ICB2YXIgbGVuID0gYXJncy5sZW5ndGg7XG5cdCAgdmFyIHN0ciA9IFN0cmluZyhmKS5yZXBsYWNlKGZvcm1hdFJlZ0V4cCwgZnVuY3Rpb24oeCkge1xuXHQgICAgaWYgKHggPT09ICclJScpIHJldHVybiAnJSc7XG5cdCAgICBpZiAoaSA+PSBsZW4pIHJldHVybiB4O1xuXHQgICAgc3dpdGNoICh4KSB7XG5cdCAgICAgIGNhc2UgJyVzJzogcmV0dXJuIFN0cmluZyhhcmdzW2krK10pO1xuXHQgICAgICBjYXNlICclZCc6IHJldHVybiBOdW1iZXIoYXJnc1tpKytdKTtcblx0ICAgICAgY2FzZSAnJWonOlxuXHQgICAgICAgIHRyeSB7XG5cdCAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoYXJnc1tpKytdKTtcblx0ICAgICAgICB9IGNhdGNoIChfKSB7XG5cdCAgICAgICAgICByZXR1cm4gJ1tDaXJjdWxhcl0nO1xuXHQgICAgICAgIH1cblx0ICAgICAgZGVmYXVsdDpcblx0ICAgICAgICByZXR1cm4geDtcblx0ICAgIH1cblx0ICB9KTtcblx0ICBmb3IgKHZhciB4ID0gYXJnc1tpXTsgaSA8IGxlbjsgeCA9IGFyZ3NbKytpXSkge1xuXHQgICAgaWYgKGlzTnVsbCh4KSB8fCAhaXNPYmplY3QoeCkpIHtcblx0ICAgICAgc3RyICs9ICcgJyArIHg7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICBzdHIgKz0gJyAnICsgaW5zcGVjdCh4KTtcblx0ICAgIH1cblx0ICB9XG5cdCAgcmV0dXJuIHN0cjtcblx0fTtcblx0XG5cdFxuXHQvLyBNYXJrIHRoYXQgYSBtZXRob2Qgc2hvdWxkIG5vdCBiZSB1c2VkLlxuXHQvLyBSZXR1cm5zIGEgbW9kaWZpZWQgZnVuY3Rpb24gd2hpY2ggd2FybnMgb25jZSBieSBkZWZhdWx0LlxuXHQvLyBJZiAtLW5vLWRlcHJlY2F0aW9uIGlzIHNldCwgdGhlbiBpdCBpcyBhIG5vLW9wLlxuXHRleHBvcnRzLmRlcHJlY2F0ZSA9IGZ1bmN0aW9uKGZuLCBtc2cpIHtcblx0ICAvLyBBbGxvdyBmb3IgZGVwcmVjYXRpbmcgdGhpbmdzIGluIHRoZSBwcm9jZXNzIG9mIHN0YXJ0aW5nIHVwLlxuXHQgIGlmIChpc1VuZGVmaW5lZChnbG9iYWwucHJvY2VzcykpIHtcblx0ICAgIHJldHVybiBmdW5jdGlvbigpIHtcblx0ICAgICAgcmV0dXJuIGV4cG9ydHMuZGVwcmVjYXRlKGZuLCBtc2cpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cdCAgICB9O1xuXHQgIH1cblx0XG5cdCAgaWYgKHByb2Nlc3Mubm9EZXByZWNhdGlvbiA9PT0gdHJ1ZSkge1xuXHQgICAgcmV0dXJuIGZuO1xuXHQgIH1cblx0XG5cdCAgdmFyIHdhcm5lZCA9IGZhbHNlO1xuXHQgIGZ1bmN0aW9uIGRlcHJlY2F0ZWQoKSB7XG5cdCAgICBpZiAoIXdhcm5lZCkge1xuXHQgICAgICBpZiAocHJvY2Vzcy50aHJvd0RlcHJlY2F0aW9uKSB7XG5cdCAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1zZyk7XG5cdCAgICAgIH0gZWxzZSBpZiAocHJvY2Vzcy50cmFjZURlcHJlY2F0aW9uKSB7XG5cdCAgICAgICAgY29uc29sZS50cmFjZShtc2cpO1xuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIGNvbnNvbGUuZXJyb3IobXNnKTtcblx0ICAgICAgfVxuXHQgICAgICB3YXJuZWQgPSB0cnVlO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cdCAgfVxuXHRcblx0ICByZXR1cm4gZGVwcmVjYXRlZDtcblx0fTtcblx0XG5cdFxuXHR2YXIgZGVidWdzID0ge307XG5cdHZhciBkZWJ1Z0Vudmlyb247XG5cdGV4cG9ydHMuZGVidWdsb2cgPSBmdW5jdGlvbihzZXQpIHtcblx0ICBpZiAoaXNVbmRlZmluZWQoZGVidWdFbnZpcm9uKSlcblx0ICAgIGRlYnVnRW52aXJvbiA9IHByb2Nlc3MuZW52Lk5PREVfREVCVUcgfHwgJyc7XG5cdCAgc2V0ID0gc2V0LnRvVXBwZXJDYXNlKCk7XG5cdCAgaWYgKCFkZWJ1Z3Nbc2V0XSkge1xuXHQgICAgaWYgKG5ldyBSZWdFeHAoJ1xcXFxiJyArIHNldCArICdcXFxcYicsICdpJykudGVzdChkZWJ1Z0Vudmlyb24pKSB7XG5cdCAgICAgIHZhciBwaWQgPSBwcm9jZXNzLnBpZDtcblx0ICAgICAgZGVidWdzW3NldF0gPSBmdW5jdGlvbigpIHtcblx0ICAgICAgICB2YXIgbXNnID0gZXhwb3J0cy5mb3JtYXQuYXBwbHkoZXhwb3J0cywgYXJndW1lbnRzKTtcblx0ICAgICAgICBjb25zb2xlLmVycm9yKCclcyAlZDogJXMnLCBzZXQsIHBpZCwgbXNnKTtcblx0ICAgICAgfTtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIGRlYnVnc1tzZXRdID0gZnVuY3Rpb24oKSB7fTtcblx0ICAgIH1cblx0ICB9XG5cdCAgcmV0dXJuIGRlYnVnc1tzZXRdO1xuXHR9O1xuXHRcblx0XG5cdC8qKlxuXHQgKiBFY2hvcyB0aGUgdmFsdWUgb2YgYSB2YWx1ZS4gVHJ5cyB0byBwcmludCB0aGUgdmFsdWUgb3V0XG5cdCAqIGluIHRoZSBiZXN0IHdheSBwb3NzaWJsZSBnaXZlbiB0aGUgZGlmZmVyZW50IHR5cGVzLlxuXHQgKlxuXHQgKiBAcGFyYW0ge09iamVjdH0gb2JqIFRoZSBvYmplY3QgdG8gcHJpbnQgb3V0LlxuXHQgKiBAcGFyYW0ge09iamVjdH0gb3B0cyBPcHRpb25hbCBvcHRpb25zIG9iamVjdCB0aGF0IGFsdGVycyB0aGUgb3V0cHV0LlxuXHQgKi9cblx0LyogbGVnYWN5OiBvYmosIHNob3dIaWRkZW4sIGRlcHRoLCBjb2xvcnMqL1xuXHRmdW5jdGlvbiBpbnNwZWN0KG9iaiwgb3B0cykge1xuXHQgIC8vIGRlZmF1bHQgb3B0aW9uc1xuXHQgIHZhciBjdHggPSB7XG5cdCAgICBzZWVuOiBbXSxcblx0ICAgIHN0eWxpemU6IHN0eWxpemVOb0NvbG9yXG5cdCAgfTtcblx0ICAvLyBsZWdhY3kuLi5cblx0ICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+PSAzKSBjdHguZGVwdGggPSBhcmd1bWVudHNbMl07XG5cdCAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPj0gNCkgY3R4LmNvbG9ycyA9IGFyZ3VtZW50c1szXTtcblx0ICBpZiAoaXNCb29sZWFuKG9wdHMpKSB7XG5cdCAgICAvLyBsZWdhY3kuLi5cblx0ICAgIGN0eC5zaG93SGlkZGVuID0gb3B0cztcblx0ICB9IGVsc2UgaWYgKG9wdHMpIHtcblx0ICAgIC8vIGdvdCBhbiBcIm9wdGlvbnNcIiBvYmplY3Rcblx0ICAgIGV4cG9ydHMuX2V4dGVuZChjdHgsIG9wdHMpO1xuXHQgIH1cblx0ICAvLyBzZXQgZGVmYXVsdCBvcHRpb25zXG5cdCAgaWYgKGlzVW5kZWZpbmVkKGN0eC5zaG93SGlkZGVuKSkgY3R4LnNob3dIaWRkZW4gPSBmYWxzZTtcblx0ICBpZiAoaXNVbmRlZmluZWQoY3R4LmRlcHRoKSkgY3R4LmRlcHRoID0gMjtcblx0ICBpZiAoaXNVbmRlZmluZWQoY3R4LmNvbG9ycykpIGN0eC5jb2xvcnMgPSBmYWxzZTtcblx0ICBpZiAoaXNVbmRlZmluZWQoY3R4LmN1c3RvbUluc3BlY3QpKSBjdHguY3VzdG9tSW5zcGVjdCA9IHRydWU7XG5cdCAgaWYgKGN0eC5jb2xvcnMpIGN0eC5zdHlsaXplID0gc3R5bGl6ZVdpdGhDb2xvcjtcblx0ICByZXR1cm4gZm9ybWF0VmFsdWUoY3R4LCBvYmosIGN0eC5kZXB0aCk7XG5cdH1cblx0ZXhwb3J0cy5pbnNwZWN0ID0gaW5zcGVjdDtcblx0XG5cdFxuXHQvLyBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0FOU0lfZXNjYXBlX2NvZGUjZ3JhcGhpY3Ncblx0aW5zcGVjdC5jb2xvcnMgPSB7XG5cdCAgJ2JvbGQnIDogWzEsIDIyXSxcblx0ICAnaXRhbGljJyA6IFszLCAyM10sXG5cdCAgJ3VuZGVybGluZScgOiBbNCwgMjRdLFxuXHQgICdpbnZlcnNlJyA6IFs3LCAyN10sXG5cdCAgJ3doaXRlJyA6IFszNywgMzldLFxuXHQgICdncmV5JyA6IFs5MCwgMzldLFxuXHQgICdibGFjaycgOiBbMzAsIDM5XSxcblx0ICAnYmx1ZScgOiBbMzQsIDM5XSxcblx0ICAnY3lhbicgOiBbMzYsIDM5XSxcblx0ICAnZ3JlZW4nIDogWzMyLCAzOV0sXG5cdCAgJ21hZ2VudGEnIDogWzM1LCAzOV0sXG5cdCAgJ3JlZCcgOiBbMzEsIDM5XSxcblx0ICAneWVsbG93JyA6IFszMywgMzldXG5cdH07XG5cdFxuXHQvLyBEb24ndCB1c2UgJ2JsdWUnIG5vdCB2aXNpYmxlIG9uIGNtZC5leGVcblx0aW5zcGVjdC5zdHlsZXMgPSB7XG5cdCAgJ3NwZWNpYWwnOiAnY3lhbicsXG5cdCAgJ251bWJlcic6ICd5ZWxsb3cnLFxuXHQgICdib29sZWFuJzogJ3llbGxvdycsXG5cdCAgJ3VuZGVmaW5lZCc6ICdncmV5Jyxcblx0ICAnbnVsbCc6ICdib2xkJyxcblx0ICAnc3RyaW5nJzogJ2dyZWVuJyxcblx0ICAnZGF0ZSc6ICdtYWdlbnRhJyxcblx0ICAvLyBcIm5hbWVcIjogaW50ZW50aW9uYWxseSBub3Qgc3R5bGluZ1xuXHQgICdyZWdleHAnOiAncmVkJ1xuXHR9O1xuXHRcblx0XG5cdGZ1bmN0aW9uIHN0eWxpemVXaXRoQ29sb3Ioc3RyLCBzdHlsZVR5cGUpIHtcblx0ICB2YXIgc3R5bGUgPSBpbnNwZWN0LnN0eWxlc1tzdHlsZVR5cGVdO1xuXHRcblx0ICBpZiAoc3R5bGUpIHtcblx0ICAgIHJldHVybiAnXFx1MDAxYlsnICsgaW5zcGVjdC5jb2xvcnNbc3R5bGVdWzBdICsgJ20nICsgc3RyICtcblx0ICAgICAgICAgICAnXFx1MDAxYlsnICsgaW5zcGVjdC5jb2xvcnNbc3R5bGVdWzFdICsgJ20nO1xuXHQgIH0gZWxzZSB7XG5cdCAgICByZXR1cm4gc3RyO1xuXHQgIH1cblx0fVxuXHRcblx0XG5cdGZ1bmN0aW9uIHN0eWxpemVOb0NvbG9yKHN0ciwgc3R5bGVUeXBlKSB7XG5cdCAgcmV0dXJuIHN0cjtcblx0fVxuXHRcblx0XG5cdGZ1bmN0aW9uIGFycmF5VG9IYXNoKGFycmF5KSB7XG5cdCAgdmFyIGhhc2ggPSB7fTtcblx0XG5cdCAgYXJyYXkuZm9yRWFjaChmdW5jdGlvbih2YWwsIGlkeCkge1xuXHQgICAgaGFzaFt2YWxdID0gdHJ1ZTtcblx0ICB9KTtcblx0XG5cdCAgcmV0dXJuIGhhc2g7XG5cdH1cblx0XG5cdFxuXHRmdW5jdGlvbiBmb3JtYXRWYWx1ZShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMpIHtcblx0ICAvLyBQcm92aWRlIGEgaG9vayBmb3IgdXNlci1zcGVjaWZpZWQgaW5zcGVjdCBmdW5jdGlvbnMuXG5cdCAgLy8gQ2hlY2sgdGhhdCB2YWx1ZSBpcyBhbiBvYmplY3Qgd2l0aCBhbiBpbnNwZWN0IGZ1bmN0aW9uIG9uIGl0XG5cdCAgaWYgKGN0eC5jdXN0b21JbnNwZWN0ICYmXG5cdCAgICAgIHZhbHVlICYmXG5cdCAgICAgIGlzRnVuY3Rpb24odmFsdWUuaW5zcGVjdCkgJiZcblx0ICAgICAgLy8gRmlsdGVyIG91dCB0aGUgdXRpbCBtb2R1bGUsIGl0J3MgaW5zcGVjdCBmdW5jdGlvbiBpcyBzcGVjaWFsXG5cdCAgICAgIHZhbHVlLmluc3BlY3QgIT09IGV4cG9ydHMuaW5zcGVjdCAmJlxuXHQgICAgICAvLyBBbHNvIGZpbHRlciBvdXQgYW55IHByb3RvdHlwZSBvYmplY3RzIHVzaW5nIHRoZSBjaXJjdWxhciBjaGVjay5cblx0ICAgICAgISh2YWx1ZS5jb25zdHJ1Y3RvciAmJiB2YWx1ZS5jb25zdHJ1Y3Rvci5wcm90b3R5cGUgPT09IHZhbHVlKSkge1xuXHQgICAgdmFyIHJldCA9IHZhbHVlLmluc3BlY3QocmVjdXJzZVRpbWVzLCBjdHgpO1xuXHQgICAgaWYgKCFpc1N0cmluZyhyZXQpKSB7XG5cdCAgICAgIHJldCA9IGZvcm1hdFZhbHVlKGN0eCwgcmV0LCByZWN1cnNlVGltZXMpO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIHJldDtcblx0ICB9XG5cdFxuXHQgIC8vIFByaW1pdGl2ZSB0eXBlcyBjYW5ub3QgaGF2ZSBwcm9wZXJ0aWVzXG5cdCAgdmFyIHByaW1pdGl2ZSA9IGZvcm1hdFByaW1pdGl2ZShjdHgsIHZhbHVlKTtcblx0ICBpZiAocHJpbWl0aXZlKSB7XG5cdCAgICByZXR1cm4gcHJpbWl0aXZlO1xuXHQgIH1cblx0XG5cdCAgLy8gTG9vayB1cCB0aGUga2V5cyBvZiB0aGUgb2JqZWN0LlxuXHQgIHZhciBrZXlzID0gT2JqZWN0LmtleXModmFsdWUpO1xuXHQgIHZhciB2aXNpYmxlS2V5cyA9IGFycmF5VG9IYXNoKGtleXMpO1xuXHRcblx0ICBpZiAoY3R4LnNob3dIaWRkZW4pIHtcblx0ICAgIGtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh2YWx1ZSk7XG5cdCAgfVxuXHRcblx0ICAvLyBJRSBkb2Vzbid0IG1ha2UgZXJyb3IgZmllbGRzIG5vbi1lbnVtZXJhYmxlXG5cdCAgLy8gaHR0cDovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L2llL2R3dzUyc2J0KHY9dnMuOTQpLmFzcHhcblx0ICBpZiAoaXNFcnJvcih2YWx1ZSlcblx0ICAgICAgJiYgKGtleXMuaW5kZXhPZignbWVzc2FnZScpID49IDAgfHwga2V5cy5pbmRleE9mKCdkZXNjcmlwdGlvbicpID49IDApKSB7XG5cdCAgICByZXR1cm4gZm9ybWF0RXJyb3IodmFsdWUpO1xuXHQgIH1cblx0XG5cdCAgLy8gU29tZSB0eXBlIG9mIG9iamVjdCB3aXRob3V0IHByb3BlcnRpZXMgY2FuIGJlIHNob3J0Y3V0dGVkLlxuXHQgIGlmIChrZXlzLmxlbmd0aCA9PT0gMCkge1xuXHQgICAgaWYgKGlzRnVuY3Rpb24odmFsdWUpKSB7XG5cdCAgICAgIHZhciBuYW1lID0gdmFsdWUubmFtZSA/ICc6ICcgKyB2YWx1ZS5uYW1lIDogJyc7XG5cdCAgICAgIHJldHVybiBjdHguc3R5bGl6ZSgnW0Z1bmN0aW9uJyArIG5hbWUgKyAnXScsICdzcGVjaWFsJyk7XG5cdCAgICB9XG5cdCAgICBpZiAoaXNSZWdFeHAodmFsdWUpKSB7XG5cdCAgICAgIHJldHVybiBjdHguc3R5bGl6ZShSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpLCAncmVnZXhwJyk7XG5cdCAgICB9XG5cdCAgICBpZiAoaXNEYXRlKHZhbHVlKSkge1xuXHQgICAgICByZXR1cm4gY3R4LnN0eWxpemUoRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSksICdkYXRlJyk7XG5cdCAgICB9XG5cdCAgICBpZiAoaXNFcnJvcih2YWx1ZSkpIHtcblx0ICAgICAgcmV0dXJuIGZvcm1hdEVycm9yKHZhbHVlKTtcblx0ICAgIH1cblx0ICB9XG5cdFxuXHQgIHZhciBiYXNlID0gJycsIGFycmF5ID0gZmFsc2UsIGJyYWNlcyA9IFsneycsICd9J107XG5cdFxuXHQgIC8vIE1ha2UgQXJyYXkgc2F5IHRoYXQgdGhleSBhcmUgQXJyYXlcblx0ICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcblx0ICAgIGFycmF5ID0gdHJ1ZTtcblx0ICAgIGJyYWNlcyA9IFsnWycsICddJ107XG5cdCAgfVxuXHRcblx0ICAvLyBNYWtlIGZ1bmN0aW9ucyBzYXkgdGhhdCB0aGV5IGFyZSBmdW5jdGlvbnNcblx0ICBpZiAoaXNGdW5jdGlvbih2YWx1ZSkpIHtcblx0ICAgIHZhciBuID0gdmFsdWUubmFtZSA/ICc6ICcgKyB2YWx1ZS5uYW1lIDogJyc7XG5cdCAgICBiYXNlID0gJyBbRnVuY3Rpb24nICsgbiArICddJztcblx0ICB9XG5cdFxuXHQgIC8vIE1ha2UgUmVnRXhwcyBzYXkgdGhhdCB0aGV5IGFyZSBSZWdFeHBzXG5cdCAgaWYgKGlzUmVnRXhwKHZhbHVlKSkge1xuXHQgICAgYmFzZSA9ICcgJyArIFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG5cdCAgfVxuXHRcblx0ICAvLyBNYWtlIGRhdGVzIHdpdGggcHJvcGVydGllcyBmaXJzdCBzYXkgdGhlIGRhdGVcblx0ICBpZiAoaXNEYXRlKHZhbHVlKSkge1xuXHQgICAgYmFzZSA9ICcgJyArIERhdGUucHJvdG90eXBlLnRvVVRDU3RyaW5nLmNhbGwodmFsdWUpO1xuXHQgIH1cblx0XG5cdCAgLy8gTWFrZSBlcnJvciB3aXRoIG1lc3NhZ2UgZmlyc3Qgc2F5IHRoZSBlcnJvclxuXHQgIGlmIChpc0Vycm9yKHZhbHVlKSkge1xuXHQgICAgYmFzZSA9ICcgJyArIGZvcm1hdEVycm9yKHZhbHVlKTtcblx0ICB9XG5cdFxuXHQgIGlmIChrZXlzLmxlbmd0aCA9PT0gMCAmJiAoIWFycmF5IHx8IHZhbHVlLmxlbmd0aCA9PSAwKSkge1xuXHQgICAgcmV0dXJuIGJyYWNlc1swXSArIGJhc2UgKyBicmFjZXNbMV07XG5cdCAgfVxuXHRcblx0ICBpZiAocmVjdXJzZVRpbWVzIDwgMCkge1xuXHQgICAgaWYgKGlzUmVnRXhwKHZhbHVlKSkge1xuXHQgICAgICByZXR1cm4gY3R4LnN0eWxpemUoUmVnRXhwLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSwgJ3JlZ2V4cCcpO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKCdbT2JqZWN0XScsICdzcGVjaWFsJyk7XG5cdCAgICB9XG5cdCAgfVxuXHRcblx0ICBjdHguc2Vlbi5wdXNoKHZhbHVlKTtcblx0XG5cdCAgdmFyIG91dHB1dDtcblx0ICBpZiAoYXJyYXkpIHtcblx0ICAgIG91dHB1dCA9IGZvcm1hdEFycmF5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsIGtleXMpO1xuXHQgIH0gZWxzZSB7XG5cdCAgICBvdXRwdXQgPSBrZXlzLm1hcChmdW5jdGlvbihrZXkpIHtcblx0ICAgICAgcmV0dXJuIGZvcm1hdFByb3BlcnR5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsIGtleSwgYXJyYXkpO1xuXHQgICAgfSk7XG5cdCAgfVxuXHRcblx0ICBjdHguc2Vlbi5wb3AoKTtcblx0XG5cdCAgcmV0dXJuIHJlZHVjZVRvU2luZ2xlU3RyaW5nKG91dHB1dCwgYmFzZSwgYnJhY2VzKTtcblx0fVxuXHRcblx0XG5cdGZ1bmN0aW9uIGZvcm1hdFByaW1pdGl2ZShjdHgsIHZhbHVlKSB7XG5cdCAgaWYgKGlzVW5kZWZpbmVkKHZhbHVlKSlcblx0ICAgIHJldHVybiBjdHguc3R5bGl6ZSgndW5kZWZpbmVkJywgJ3VuZGVmaW5lZCcpO1xuXHQgIGlmIChpc1N0cmluZyh2YWx1ZSkpIHtcblx0ICAgIHZhciBzaW1wbGUgPSAnXFwnJyArIEpTT04uc3RyaW5naWZ5KHZhbHVlKS5yZXBsYWNlKC9eXCJ8XCIkL2csICcnKVxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvJy9nLCBcIlxcXFwnXCIpXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXFxcXCIvZywgJ1wiJykgKyAnXFwnJztcblx0ICAgIHJldHVybiBjdHguc3R5bGl6ZShzaW1wbGUsICdzdHJpbmcnKTtcblx0ICB9XG5cdCAgaWYgKGlzTnVtYmVyKHZhbHVlKSlcblx0ICAgIHJldHVybiBjdHguc3R5bGl6ZSgnJyArIHZhbHVlLCAnbnVtYmVyJyk7XG5cdCAgaWYgKGlzQm9vbGVhbih2YWx1ZSkpXG5cdCAgICByZXR1cm4gY3R4LnN0eWxpemUoJycgKyB2YWx1ZSwgJ2Jvb2xlYW4nKTtcblx0ICAvLyBGb3Igc29tZSByZWFzb24gdHlwZW9mIG51bGwgaXMgXCJvYmplY3RcIiwgc28gc3BlY2lhbCBjYXNlIGhlcmUuXG5cdCAgaWYgKGlzTnVsbCh2YWx1ZSkpXG5cdCAgICByZXR1cm4gY3R4LnN0eWxpemUoJ251bGwnLCAnbnVsbCcpO1xuXHR9XG5cdFxuXHRcblx0ZnVuY3Rpb24gZm9ybWF0RXJyb3IodmFsdWUpIHtcblx0ICByZXR1cm4gJ1snICsgRXJyb3IucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpICsgJ10nO1xuXHR9XG5cdFxuXHRcblx0ZnVuY3Rpb24gZm9ybWF0QXJyYXkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cywga2V5cykge1xuXHQgIHZhciBvdXRwdXQgPSBbXTtcblx0ICBmb3IgKHZhciBpID0gMCwgbCA9IHZhbHVlLmxlbmd0aDsgaSA8IGw7ICsraSkge1xuXHQgICAgaWYgKGhhc093blByb3BlcnR5KHZhbHVlLCBTdHJpbmcoaSkpKSB7XG5cdCAgICAgIG91dHB1dC5wdXNoKGZvcm1hdFByb3BlcnR5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsXG5cdCAgICAgICAgICBTdHJpbmcoaSksIHRydWUpKTtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIG91dHB1dC5wdXNoKCcnKTtcblx0ICAgIH1cblx0ICB9XG5cdCAga2V5cy5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuXHQgICAgaWYgKCFrZXkubWF0Y2goL15cXGQrJC8pKSB7XG5cdCAgICAgIG91dHB1dC5wdXNoKGZvcm1hdFByb3BlcnR5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsXG5cdCAgICAgICAgICBrZXksIHRydWUpKTtcblx0ICAgIH1cblx0ICB9KTtcblx0ICByZXR1cm4gb3V0cHV0O1xuXHR9XG5cdFxuXHRcblx0ZnVuY3Rpb24gZm9ybWF0UHJvcGVydHkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cywga2V5LCBhcnJheSkge1xuXHQgIHZhciBuYW1lLCBzdHIsIGRlc2M7XG5cdCAgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodmFsdWUsIGtleSkgfHwgeyB2YWx1ZTogdmFsdWVba2V5XSB9O1xuXHQgIGlmIChkZXNjLmdldCkge1xuXHQgICAgaWYgKGRlc2Muc2V0KSB7XG5cdCAgICAgIHN0ciA9IGN0eC5zdHlsaXplKCdbR2V0dGVyL1NldHRlcl0nLCAnc3BlY2lhbCcpO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgc3RyID0gY3R4LnN0eWxpemUoJ1tHZXR0ZXJdJywgJ3NwZWNpYWwnKTtcblx0ICAgIH1cblx0ICB9IGVsc2Uge1xuXHQgICAgaWYgKGRlc2Muc2V0KSB7XG5cdCAgICAgIHN0ciA9IGN0eC5zdHlsaXplKCdbU2V0dGVyXScsICdzcGVjaWFsJyk7XG5cdCAgICB9XG5cdCAgfVxuXHQgIGlmICghaGFzT3duUHJvcGVydHkodmlzaWJsZUtleXMsIGtleSkpIHtcblx0ICAgIG5hbWUgPSAnWycgKyBrZXkgKyAnXSc7XG5cdCAgfVxuXHQgIGlmICghc3RyKSB7XG5cdCAgICBpZiAoY3R4LnNlZW4uaW5kZXhPZihkZXNjLnZhbHVlKSA8IDApIHtcblx0ICAgICAgaWYgKGlzTnVsbChyZWN1cnNlVGltZXMpKSB7XG5cdCAgICAgICAgc3RyID0gZm9ybWF0VmFsdWUoY3R4LCBkZXNjLnZhbHVlLCBudWxsKTtcblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICBzdHIgPSBmb3JtYXRWYWx1ZShjdHgsIGRlc2MudmFsdWUsIHJlY3Vyc2VUaW1lcyAtIDEpO1xuXHQgICAgICB9XG5cdCAgICAgIGlmIChzdHIuaW5kZXhPZignXFxuJykgPiAtMSkge1xuXHQgICAgICAgIGlmIChhcnJheSkge1xuXHQgICAgICAgICAgc3RyID0gc3RyLnNwbGl0KCdcXG4nKS5tYXAoZnVuY3Rpb24obGluZSkge1xuXHQgICAgICAgICAgICByZXR1cm4gJyAgJyArIGxpbmU7XG5cdCAgICAgICAgICB9KS5qb2luKCdcXG4nKS5zdWJzdHIoMik7XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgIHN0ciA9ICdcXG4nICsgc3RyLnNwbGl0KCdcXG4nKS5tYXAoZnVuY3Rpb24obGluZSkge1xuXHQgICAgICAgICAgICByZXR1cm4gJyAgICcgKyBsaW5lO1xuXHQgICAgICAgICAgfSkuam9pbignXFxuJyk7XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICBzdHIgPSBjdHguc3R5bGl6ZSgnW0NpcmN1bGFyXScsICdzcGVjaWFsJyk7XG5cdCAgICB9XG5cdCAgfVxuXHQgIGlmIChpc1VuZGVmaW5lZChuYW1lKSkge1xuXHQgICAgaWYgKGFycmF5ICYmIGtleS5tYXRjaCgvXlxcZCskLykpIHtcblx0ICAgICAgcmV0dXJuIHN0cjtcblx0ICAgIH1cblx0ICAgIG5hbWUgPSBKU09OLnN0cmluZ2lmeSgnJyArIGtleSk7XG5cdCAgICBpZiAobmFtZS5tYXRjaCgvXlwiKFthLXpBLVpfXVthLXpBLVpfMC05XSopXCIkLykpIHtcblx0ICAgICAgbmFtZSA9IG5hbWUuc3Vic3RyKDEsIG5hbWUubGVuZ3RoIC0gMik7XG5cdCAgICAgIG5hbWUgPSBjdHguc3R5bGl6ZShuYW1lLCAnbmFtZScpO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgbmFtZSA9IG5hbWUucmVwbGFjZSgvJy9nLCBcIlxcXFwnXCIpXG5cdCAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL1xcXFxcIi9nLCAnXCInKVxuXHQgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC8oXlwifFwiJCkvZywgXCInXCIpO1xuXHQgICAgICBuYW1lID0gY3R4LnN0eWxpemUobmFtZSwgJ3N0cmluZycpO1xuXHQgICAgfVxuXHQgIH1cblx0XG5cdCAgcmV0dXJuIG5hbWUgKyAnOiAnICsgc3RyO1xuXHR9XG5cdFxuXHRcblx0ZnVuY3Rpb24gcmVkdWNlVG9TaW5nbGVTdHJpbmcob3V0cHV0LCBiYXNlLCBicmFjZXMpIHtcblx0ICB2YXIgbnVtTGluZXNFc3QgPSAwO1xuXHQgIHZhciBsZW5ndGggPSBvdXRwdXQucmVkdWNlKGZ1bmN0aW9uKHByZXYsIGN1cikge1xuXHQgICAgbnVtTGluZXNFc3QrKztcblx0ICAgIGlmIChjdXIuaW5kZXhPZignXFxuJykgPj0gMCkgbnVtTGluZXNFc3QrKztcblx0ICAgIHJldHVybiBwcmV2ICsgY3VyLnJlcGxhY2UoL1xcdTAwMWJcXFtcXGRcXGQ/bS9nLCAnJykubGVuZ3RoICsgMTtcblx0ICB9LCAwKTtcblx0XG5cdCAgaWYgKGxlbmd0aCA+IDYwKSB7XG5cdCAgICByZXR1cm4gYnJhY2VzWzBdICtcblx0ICAgICAgICAgICAoYmFzZSA9PT0gJycgPyAnJyA6IGJhc2UgKyAnXFxuICcpICtcblx0ICAgICAgICAgICAnICcgK1xuXHQgICAgICAgICAgIG91dHB1dC5qb2luKCcsXFxuICAnKSArXG5cdCAgICAgICAgICAgJyAnICtcblx0ICAgICAgICAgICBicmFjZXNbMV07XG5cdCAgfVxuXHRcblx0ICByZXR1cm4gYnJhY2VzWzBdICsgYmFzZSArICcgJyArIG91dHB1dC5qb2luKCcsICcpICsgJyAnICsgYnJhY2VzWzFdO1xuXHR9XG5cdFxuXHRcblx0Ly8gTk9URTogVGhlc2UgdHlwZSBjaGVja2luZyBmdW5jdGlvbnMgaW50ZW50aW9uYWxseSBkb24ndCB1c2UgYGluc3RhbmNlb2ZgXG5cdC8vIGJlY2F1c2UgaXQgaXMgZnJhZ2lsZSBhbmQgY2FuIGJlIGVhc2lseSBmYWtlZCB3aXRoIGBPYmplY3QuY3JlYXRlKClgLlxuXHRmdW5jdGlvbiBpc0FycmF5KGFyKSB7XG5cdCAgcmV0dXJuIEFycmF5LmlzQXJyYXkoYXIpO1xuXHR9XG5cdGV4cG9ydHMuaXNBcnJheSA9IGlzQXJyYXk7XG5cdFxuXHRmdW5jdGlvbiBpc0Jvb2xlYW4oYXJnKSB7XG5cdCAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdib29sZWFuJztcblx0fVxuXHRleHBvcnRzLmlzQm9vbGVhbiA9IGlzQm9vbGVhbjtcblx0XG5cdGZ1bmN0aW9uIGlzTnVsbChhcmcpIHtcblx0ICByZXR1cm4gYXJnID09PSBudWxsO1xuXHR9XG5cdGV4cG9ydHMuaXNOdWxsID0gaXNOdWxsO1xuXHRcblx0ZnVuY3Rpb24gaXNOdWxsT3JVbmRlZmluZWQoYXJnKSB7XG5cdCAgcmV0dXJuIGFyZyA9PSBudWxsO1xuXHR9XG5cdGV4cG9ydHMuaXNOdWxsT3JVbmRlZmluZWQgPSBpc051bGxPclVuZGVmaW5lZDtcblx0XG5cdGZ1bmN0aW9uIGlzTnVtYmVyKGFyZykge1xuXHQgIHJldHVybiB0eXBlb2YgYXJnID09PSAnbnVtYmVyJztcblx0fVxuXHRleHBvcnRzLmlzTnVtYmVyID0gaXNOdW1iZXI7XG5cdFxuXHRmdW5jdGlvbiBpc1N0cmluZyhhcmcpIHtcblx0ICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ3N0cmluZyc7XG5cdH1cblx0ZXhwb3J0cy5pc1N0cmluZyA9IGlzU3RyaW5nO1xuXHRcblx0ZnVuY3Rpb24gaXNTeW1ib2woYXJnKSB7XG5cdCAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdzeW1ib2wnO1xuXHR9XG5cdGV4cG9ydHMuaXNTeW1ib2wgPSBpc1N5bWJvbDtcblx0XG5cdGZ1bmN0aW9uIGlzVW5kZWZpbmVkKGFyZykge1xuXHQgIHJldHVybiBhcmcgPT09IHZvaWQgMDtcblx0fVxuXHRleHBvcnRzLmlzVW5kZWZpbmVkID0gaXNVbmRlZmluZWQ7XG5cdFxuXHRmdW5jdGlvbiBpc1JlZ0V4cChyZSkge1xuXHQgIHJldHVybiBpc09iamVjdChyZSkgJiYgb2JqZWN0VG9TdHJpbmcocmUpID09PSAnW29iamVjdCBSZWdFeHBdJztcblx0fVxuXHRleHBvcnRzLmlzUmVnRXhwID0gaXNSZWdFeHA7XG5cdFxuXHRmdW5jdGlvbiBpc09iamVjdChhcmcpIHtcblx0ICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ29iamVjdCcgJiYgYXJnICE9PSBudWxsO1xuXHR9XG5cdGV4cG9ydHMuaXNPYmplY3QgPSBpc09iamVjdDtcblx0XG5cdGZ1bmN0aW9uIGlzRGF0ZShkKSB7XG5cdCAgcmV0dXJuIGlzT2JqZWN0KGQpICYmIG9iamVjdFRvU3RyaW5nKGQpID09PSAnW29iamVjdCBEYXRlXSc7XG5cdH1cblx0ZXhwb3J0cy5pc0RhdGUgPSBpc0RhdGU7XG5cdFxuXHRmdW5jdGlvbiBpc0Vycm9yKGUpIHtcblx0ICByZXR1cm4gaXNPYmplY3QoZSkgJiZcblx0ICAgICAgKG9iamVjdFRvU3RyaW5nKGUpID09PSAnW29iamVjdCBFcnJvcl0nIHx8IGUgaW5zdGFuY2VvZiBFcnJvcik7XG5cdH1cblx0ZXhwb3J0cy5pc0Vycm9yID0gaXNFcnJvcjtcblx0XG5cdGZ1bmN0aW9uIGlzRnVuY3Rpb24oYXJnKSB7XG5cdCAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdmdW5jdGlvbic7XG5cdH1cblx0ZXhwb3J0cy5pc0Z1bmN0aW9uID0gaXNGdW5jdGlvbjtcblx0XG5cdGZ1bmN0aW9uIGlzUHJpbWl0aXZlKGFyZykge1xuXHQgIHJldHVybiBhcmcgPT09IG51bGwgfHxcblx0ICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ2Jvb2xlYW4nIHx8XG5cdCAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdudW1iZXInIHx8XG5cdCAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdzdHJpbmcnIHx8XG5cdCAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdzeW1ib2wnIHx8ICAvLyBFUzYgc3ltYm9sXG5cdCAgICAgICAgIHR5cGVvZiBhcmcgPT09ICd1bmRlZmluZWQnO1xuXHR9XG5cdGV4cG9ydHMuaXNQcmltaXRpdmUgPSBpc1ByaW1pdGl2ZTtcblx0XG5cdGV4cG9ydHMuaXNCdWZmZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIxKTtcblx0XG5cdGZ1bmN0aW9uIG9iamVjdFRvU3RyaW5nKG8pIHtcblx0ICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pO1xuXHR9XG5cdFxuXHRcblx0ZnVuY3Rpb24gcGFkKG4pIHtcblx0ICByZXR1cm4gbiA8IDEwID8gJzAnICsgbi50b1N0cmluZygxMCkgOiBuLnRvU3RyaW5nKDEwKTtcblx0fVxuXHRcblx0XG5cdHZhciBtb250aHMgPSBbJ0phbicsICdGZWInLCAnTWFyJywgJ0FwcicsICdNYXknLCAnSnVuJywgJ0p1bCcsICdBdWcnLCAnU2VwJyxcblx0ICAgICAgICAgICAgICAnT2N0JywgJ05vdicsICdEZWMnXTtcblx0XG5cdC8vIDI2IEZlYiAxNjoxOTozNFxuXHRmdW5jdGlvbiB0aW1lc3RhbXAoKSB7XG5cdCAgdmFyIGQgPSBuZXcgRGF0ZSgpO1xuXHQgIHZhciB0aW1lID0gW3BhZChkLmdldEhvdXJzKCkpLFxuXHQgICAgICAgICAgICAgIHBhZChkLmdldE1pbnV0ZXMoKSksXG5cdCAgICAgICAgICAgICAgcGFkKGQuZ2V0U2Vjb25kcygpKV0uam9pbignOicpO1xuXHQgIHJldHVybiBbZC5nZXREYXRlKCksIG1vbnRoc1tkLmdldE1vbnRoKCldLCB0aW1lXS5qb2luKCcgJyk7XG5cdH1cblx0XG5cdFxuXHQvLyBsb2cgaXMganVzdCBhIHRoaW4gd3JhcHBlciB0byBjb25zb2xlLmxvZyB0aGF0IHByZXBlbmRzIGEgdGltZXN0YW1wXG5cdGV4cG9ydHMubG9nID0gZnVuY3Rpb24oKSB7XG5cdCAgY29uc29sZS5sb2coJyVzIC0gJXMnLCB0aW1lc3RhbXAoKSwgZXhwb3J0cy5mb3JtYXQuYXBwbHkoZXhwb3J0cywgYXJndW1lbnRzKSk7XG5cdH07XG5cdFxuXHRcblx0LyoqXG5cdCAqIEluaGVyaXQgdGhlIHByb3RvdHlwZSBtZXRob2RzIGZyb20gb25lIGNvbnN0cnVjdG9yIGludG8gYW5vdGhlci5cblx0ICpcblx0ICogVGhlIEZ1bmN0aW9uLnByb3RvdHlwZS5pbmhlcml0cyBmcm9tIGxhbmcuanMgcmV3cml0dGVuIGFzIGEgc3RhbmRhbG9uZVxuXHQgKiBmdW5jdGlvbiAobm90IG9uIEZ1bmN0aW9uLnByb3RvdHlwZSkuIE5PVEU6IElmIHRoaXMgZmlsZSBpcyB0byBiZSBsb2FkZWRcblx0ICogZHVyaW5nIGJvb3RzdHJhcHBpbmcgdGhpcyBmdW5jdGlvbiBuZWVkcyB0byBiZSByZXdyaXR0ZW4gdXNpbmcgc29tZSBuYXRpdmVcblx0ICogZnVuY3Rpb25zIGFzIHByb3RvdHlwZSBzZXR1cCB1c2luZyBub3JtYWwgSmF2YVNjcmlwdCBkb2VzIG5vdCB3b3JrIGFzXG5cdCAqIGV4cGVjdGVkIGR1cmluZyBib290c3RyYXBwaW5nIChzZWUgbWlycm9yLmpzIGluIHIxMTQ5MDMpLlxuXHQgKlxuXHQgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjdG9yIENvbnN0cnVjdG9yIGZ1bmN0aW9uIHdoaWNoIG5lZWRzIHRvIGluaGVyaXQgdGhlXG5cdCAqICAgICBwcm90b3R5cGUuXG5cdCAqIEBwYXJhbSB7ZnVuY3Rpb259IHN1cGVyQ3RvciBDb25zdHJ1Y3RvciBmdW5jdGlvbiB0byBpbmhlcml0IHByb3RvdHlwZSBmcm9tLlxuXHQgKi9cblx0ZXhwb3J0cy5pbmhlcml0cyA9IF9fd2VicGFja19yZXF1aXJlX18oMjIpO1xuXHRcblx0ZXhwb3J0cy5fZXh0ZW5kID0gZnVuY3Rpb24ob3JpZ2luLCBhZGQpIHtcblx0ICAvLyBEb24ndCBkbyBhbnl0aGluZyBpZiBhZGQgaXNuJ3QgYW4gb2JqZWN0XG5cdCAgaWYgKCFhZGQgfHwgIWlzT2JqZWN0KGFkZCkpIHJldHVybiBvcmlnaW47XG5cdFxuXHQgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoYWRkKTtcblx0ICB2YXIgaSA9IGtleXMubGVuZ3RoO1xuXHQgIHdoaWxlIChpLS0pIHtcblx0ICAgIG9yaWdpbltrZXlzW2ldXSA9IGFkZFtrZXlzW2ldXTtcblx0ICB9XG5cdCAgcmV0dXJuIG9yaWdpbjtcblx0fTtcblx0XG5cdGZ1bmN0aW9uIGhhc093blByb3BlcnR5KG9iaiwgcHJvcCkge1xuXHQgIHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKTtcblx0fVxuXHRcblx0LyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovfS5jYWxsKGV4cG9ydHMsIChmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0oKSksIF9fd2VicGFja19yZXF1aXJlX18oMTgpKSlcblxuLyoqKi8gfSxcbi8qIDIxICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHRtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQnVmZmVyKGFyZykge1xuXHQgIHJldHVybiBhcmcgJiYgdHlwZW9mIGFyZyA9PT0gJ29iamVjdCdcblx0ICAgICYmIHR5cGVvZiBhcmcuY29weSA9PT0gJ2Z1bmN0aW9uJ1xuXHQgICAgJiYgdHlwZW9mIGFyZy5maWxsID09PSAnZnVuY3Rpb24nXG5cdCAgICAmJiB0eXBlb2YgYXJnLnJlYWRVSW50OCA9PT0gJ2Z1bmN0aW9uJztcblx0fVxuXG4vKioqLyB9LFxuLyogMjIgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdGlmICh0eXBlb2YgT2JqZWN0LmNyZWF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuXHQgIC8vIGltcGxlbWVudGF0aW9uIGZyb20gc3RhbmRhcmQgbm9kZS5qcyAndXRpbCcgbW9kdWxlXG5cdCAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpbmhlcml0cyhjdG9yLCBzdXBlckN0b3IpIHtcblx0ICAgIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yXG5cdCAgICBjdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDdG9yLnByb3RvdHlwZSwge1xuXHQgICAgICBjb25zdHJ1Y3Rvcjoge1xuXHQgICAgICAgIHZhbHVlOiBjdG9yLFxuXHQgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuXHQgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuXHQgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuXHQgICAgICB9XG5cdCAgICB9KTtcblx0ICB9O1xuXHR9IGVsc2Uge1xuXHQgIC8vIG9sZCBzY2hvb2wgc2hpbSBmb3Igb2xkIGJyb3dzZXJzXG5cdCAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpbmhlcml0cyhjdG9yLCBzdXBlckN0b3IpIHtcblx0ICAgIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yXG5cdCAgICB2YXIgVGVtcEN0b3IgPSBmdW5jdGlvbiAoKSB7fVxuXHQgICAgVGVtcEN0b3IucHJvdG90eXBlID0gc3VwZXJDdG9yLnByb3RvdHlwZVxuXHQgICAgY3Rvci5wcm90b3R5cGUgPSBuZXcgVGVtcEN0b3IoKVxuXHQgICAgY3Rvci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBjdG9yXG5cdCAgfVxuXHR9XG5cblxuLyoqKi8gfSxcbi8qIDIzICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cblx0Ly9cblx0Ly8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcblx0Ly8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuXHQvLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcblx0Ly8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuXHQvLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG5cdC8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuXHQvLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcblx0Ly9cblx0Ly8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcblx0Ly8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cdC8vXG5cdC8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncblx0Ly8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuXHQvLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG5cdC8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuXHQvLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcblx0Ly8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuXHQvLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBTdHJlYW07XG5cdFxuXHR2YXIgRUUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI0KS5FdmVudEVtaXR0ZXI7XG5cdHZhciBpbmhlcml0cyA9IF9fd2VicGFja19yZXF1aXJlX18oMjUpO1xuXHRcblx0aW5oZXJpdHMoU3RyZWFtLCBFRSk7XG5cdFN0cmVhbS5SZWFkYWJsZSA9IF9fd2VicGFja19yZXF1aXJlX18oMjYpO1xuXHRTdHJlYW0uV3JpdGFibGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM3KTtcblx0U3RyZWFtLkR1cGxleCA9IF9fd2VicGFja19yZXF1aXJlX18oMzgpO1xuXHRTdHJlYW0uVHJhbnNmb3JtID0gX193ZWJwYWNrX3JlcXVpcmVfXygzOSk7XG5cdFN0cmVhbS5QYXNzVGhyb3VnaCA9IF9fd2VicGFja19yZXF1aXJlX18oNDApO1xuXHRcblx0Ly8gQmFja3dhcmRzLWNvbXBhdCB3aXRoIG5vZGUgMC40Lnhcblx0U3RyZWFtLlN0cmVhbSA9IFN0cmVhbTtcblx0XG5cdFxuXHRcblx0Ly8gb2xkLXN0eWxlIHN0cmVhbXMuICBOb3RlIHRoYXQgdGhlIHBpcGUgbWV0aG9kICh0aGUgb25seSByZWxldmFudFxuXHQvLyBwYXJ0IG9mIHRoaXMgY2xhc3MpIGlzIG92ZXJyaWRkZW4gaW4gdGhlIFJlYWRhYmxlIGNsYXNzLlxuXHRcblx0ZnVuY3Rpb24gU3RyZWFtKCkge1xuXHQgIEVFLmNhbGwodGhpcyk7XG5cdH1cblx0XG5cdFN0cmVhbS5wcm90b3R5cGUucGlwZSA9IGZ1bmN0aW9uKGRlc3QsIG9wdGlvbnMpIHtcblx0ICB2YXIgc291cmNlID0gdGhpcztcblx0XG5cdCAgZnVuY3Rpb24gb25kYXRhKGNodW5rKSB7XG5cdCAgICBpZiAoZGVzdC53cml0YWJsZSkge1xuXHQgICAgICBpZiAoZmFsc2UgPT09IGRlc3Qud3JpdGUoY2h1bmspICYmIHNvdXJjZS5wYXVzZSkge1xuXHQgICAgICAgIHNvdXJjZS5wYXVzZSgpO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgfVxuXHRcblx0ICBzb3VyY2Uub24oJ2RhdGEnLCBvbmRhdGEpO1xuXHRcblx0ICBmdW5jdGlvbiBvbmRyYWluKCkge1xuXHQgICAgaWYgKHNvdXJjZS5yZWFkYWJsZSAmJiBzb3VyY2UucmVzdW1lKSB7XG5cdCAgICAgIHNvdXJjZS5yZXN1bWUoKTtcblx0ICAgIH1cblx0ICB9XG5cdFxuXHQgIGRlc3Qub24oJ2RyYWluJywgb25kcmFpbik7XG5cdFxuXHQgIC8vIElmIHRoZSAnZW5kJyBvcHRpb24gaXMgbm90IHN1cHBsaWVkLCBkZXN0LmVuZCgpIHdpbGwgYmUgY2FsbGVkIHdoZW5cblx0ICAvLyBzb3VyY2UgZ2V0cyB0aGUgJ2VuZCcgb3IgJ2Nsb3NlJyBldmVudHMuICBPbmx5IGRlc3QuZW5kKCkgb25jZS5cblx0ICBpZiAoIWRlc3QuX2lzU3RkaW8gJiYgKCFvcHRpb25zIHx8IG9wdGlvbnMuZW5kICE9PSBmYWxzZSkpIHtcblx0ICAgIHNvdXJjZS5vbignZW5kJywgb25lbmQpO1xuXHQgICAgc291cmNlLm9uKCdjbG9zZScsIG9uY2xvc2UpO1xuXHQgIH1cblx0XG5cdCAgdmFyIGRpZE9uRW5kID0gZmFsc2U7XG5cdCAgZnVuY3Rpb24gb25lbmQoKSB7XG5cdCAgICBpZiAoZGlkT25FbmQpIHJldHVybjtcblx0ICAgIGRpZE9uRW5kID0gdHJ1ZTtcblx0XG5cdCAgICBkZXN0LmVuZCgpO1xuXHQgIH1cblx0XG5cdFxuXHQgIGZ1bmN0aW9uIG9uY2xvc2UoKSB7XG5cdCAgICBpZiAoZGlkT25FbmQpIHJldHVybjtcblx0ICAgIGRpZE9uRW5kID0gdHJ1ZTtcblx0XG5cdCAgICBpZiAodHlwZW9mIGRlc3QuZGVzdHJveSA9PT0gJ2Z1bmN0aW9uJykgZGVzdC5kZXN0cm95KCk7XG5cdCAgfVxuXHRcblx0ICAvLyBkb24ndCBsZWF2ZSBkYW5nbGluZyBwaXBlcyB3aGVuIHRoZXJlIGFyZSBlcnJvcnMuXG5cdCAgZnVuY3Rpb24gb25lcnJvcihlcikge1xuXHQgICAgY2xlYW51cCgpO1xuXHQgICAgaWYgKEVFLmxpc3RlbmVyQ291bnQodGhpcywgJ2Vycm9yJykgPT09IDApIHtcblx0ICAgICAgdGhyb3cgZXI7IC8vIFVuaGFuZGxlZCBzdHJlYW0gZXJyb3IgaW4gcGlwZS5cblx0ICAgIH1cblx0ICB9XG5cdFxuXHQgIHNvdXJjZS5vbignZXJyb3InLCBvbmVycm9yKTtcblx0ICBkZXN0Lm9uKCdlcnJvcicsIG9uZXJyb3IpO1xuXHRcblx0ICAvLyByZW1vdmUgYWxsIHRoZSBldmVudCBsaXN0ZW5lcnMgdGhhdCB3ZXJlIGFkZGVkLlxuXHQgIGZ1bmN0aW9uIGNsZWFudXAoKSB7XG5cdCAgICBzb3VyY2UucmVtb3ZlTGlzdGVuZXIoJ2RhdGEnLCBvbmRhdGEpO1xuXHQgICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignZHJhaW4nLCBvbmRyYWluKTtcblx0XG5cdCAgICBzb3VyY2UucmVtb3ZlTGlzdGVuZXIoJ2VuZCcsIG9uZW5kKTtcblx0ICAgIHNvdXJjZS5yZW1vdmVMaXN0ZW5lcignY2xvc2UnLCBvbmNsb3NlKTtcblx0XG5cdCAgICBzb3VyY2UucmVtb3ZlTGlzdGVuZXIoJ2Vycm9yJywgb25lcnJvcik7XG5cdCAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIG9uZXJyb3IpO1xuXHRcblx0ICAgIHNvdXJjZS5yZW1vdmVMaXN0ZW5lcignZW5kJywgY2xlYW51cCk7XG5cdCAgICBzb3VyY2UucmVtb3ZlTGlzdGVuZXIoJ2Nsb3NlJywgY2xlYW51cCk7XG5cdFxuXHQgICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignY2xvc2UnLCBjbGVhbnVwKTtcblx0ICB9XG5cdFxuXHQgIHNvdXJjZS5vbignZW5kJywgY2xlYW51cCk7XG5cdCAgc291cmNlLm9uKCdjbG9zZScsIGNsZWFudXApO1xuXHRcblx0ICBkZXN0Lm9uKCdjbG9zZScsIGNsZWFudXApO1xuXHRcblx0ICBkZXN0LmVtaXQoJ3BpcGUnLCBzb3VyY2UpO1xuXHRcblx0ICAvLyBBbGxvdyBmb3IgdW5peC1saWtlIHVzYWdlOiBBLnBpcGUoQikucGlwZShDKVxuXHQgIHJldHVybiBkZXN0O1xuXHR9O1xuXG5cbi8qKiovIH0sXG4vKiAyNCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0Ly8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG5cdC8vXG5cdC8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG5cdC8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcblx0Ly8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG5cdC8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcblx0Ly8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuXHQvLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcblx0Ly8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cdC8vXG5cdC8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG5cdC8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuXHQvL1xuXHQvLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG5cdC8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcblx0Ly8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuXHQvLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcblx0Ly8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG5cdC8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcblx0Ly8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblx0XG5cdGZ1bmN0aW9uIEV2ZW50RW1pdHRlcigpIHtcblx0ICB0aGlzLl9ldmVudHMgPSB0aGlzLl9ldmVudHMgfHwge307XG5cdCAgdGhpcy5fbWF4TGlzdGVuZXJzID0gdGhpcy5fbWF4TGlzdGVuZXJzIHx8IHVuZGVmaW5lZDtcblx0fVxuXHRtb2R1bGUuZXhwb3J0cyA9IEV2ZW50RW1pdHRlcjtcblx0XG5cdC8vIEJhY2t3YXJkcy1jb21wYXQgd2l0aCBub2RlIDAuMTAueFxuXHRFdmVudEVtaXR0ZXIuRXZlbnRFbWl0dGVyID0gRXZlbnRFbWl0dGVyO1xuXHRcblx0RXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fZXZlbnRzID0gdW5kZWZpbmVkO1xuXHRFdmVudEVtaXR0ZXIucHJvdG90eXBlLl9tYXhMaXN0ZW5lcnMgPSB1bmRlZmluZWQ7XG5cdFxuXHQvLyBCeSBkZWZhdWx0IEV2ZW50RW1pdHRlcnMgd2lsbCBwcmludCBhIHdhcm5pbmcgaWYgbW9yZSB0aGFuIDEwIGxpc3RlbmVycyBhcmVcblx0Ly8gYWRkZWQgdG8gaXQuIFRoaXMgaXMgYSB1c2VmdWwgZGVmYXVsdCB3aGljaCBoZWxwcyBmaW5kaW5nIG1lbW9yeSBsZWFrcy5cblx0RXZlbnRFbWl0dGVyLmRlZmF1bHRNYXhMaXN0ZW5lcnMgPSAxMDtcblx0XG5cdC8vIE9idmlvdXNseSBub3QgYWxsIEVtaXR0ZXJzIHNob3VsZCBiZSBsaW1pdGVkIHRvIDEwLiBUaGlzIGZ1bmN0aW9uIGFsbG93c1xuXHQvLyB0aGF0IHRvIGJlIGluY3JlYXNlZC4gU2V0IHRvIHplcm8gZm9yIHVubGltaXRlZC5cblx0RXZlbnRFbWl0dGVyLnByb3RvdHlwZS5zZXRNYXhMaXN0ZW5lcnMgPSBmdW5jdGlvbihuKSB7XG5cdCAgaWYgKCFpc051bWJlcihuKSB8fCBuIDwgMCB8fCBpc05hTihuKSlcblx0ICAgIHRocm93IFR5cGVFcnJvcignbiBtdXN0IGJlIGEgcG9zaXRpdmUgbnVtYmVyJyk7XG5cdCAgdGhpcy5fbWF4TGlzdGVuZXJzID0gbjtcblx0ICByZXR1cm4gdGhpcztcblx0fTtcblx0XG5cdEV2ZW50RW1pdHRlci5wcm90b3R5cGUuZW1pdCA9IGZ1bmN0aW9uKHR5cGUpIHtcblx0ICB2YXIgZXIsIGhhbmRsZXIsIGxlbiwgYXJncywgaSwgbGlzdGVuZXJzO1xuXHRcblx0ICBpZiAoIXRoaXMuX2V2ZW50cylcblx0ICAgIHRoaXMuX2V2ZW50cyA9IHt9O1xuXHRcblx0ICAvLyBJZiB0aGVyZSBpcyBubyAnZXJyb3InIGV2ZW50IGxpc3RlbmVyIHRoZW4gdGhyb3cuXG5cdCAgaWYgKHR5cGUgPT09ICdlcnJvcicpIHtcblx0ICAgIGlmICghdGhpcy5fZXZlbnRzLmVycm9yIHx8XG5cdCAgICAgICAgKGlzT2JqZWN0KHRoaXMuX2V2ZW50cy5lcnJvcikgJiYgIXRoaXMuX2V2ZW50cy5lcnJvci5sZW5ndGgpKSB7XG5cdCAgICAgIGVyID0gYXJndW1lbnRzWzFdO1xuXHQgICAgICBpZiAoZXIgaW5zdGFuY2VvZiBFcnJvcikge1xuXHQgICAgICAgIHRocm93IGVyOyAvLyBVbmhhbmRsZWQgJ2Vycm9yJyBldmVudFxuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIC8vIEF0IGxlYXN0IGdpdmUgc29tZSBraW5kIG9mIGNvbnRleHQgdG8gdGhlIHVzZXJcblx0ICAgICAgICB2YXIgZXJyID0gbmV3IEVycm9yKCdVbmNhdWdodCwgdW5zcGVjaWZpZWQgXCJlcnJvclwiIGV2ZW50LiAoJyArIGVyICsgJyknKTtcblx0ICAgICAgICBlcnIuY29udGV4dCA9IGVyO1xuXHQgICAgICAgIHRocm93IGVycjtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgIH1cblx0XG5cdCAgaGFuZGxlciA9IHRoaXMuX2V2ZW50c1t0eXBlXTtcblx0XG5cdCAgaWYgKGlzVW5kZWZpbmVkKGhhbmRsZXIpKVxuXHQgICAgcmV0dXJuIGZhbHNlO1xuXHRcblx0ICBpZiAoaXNGdW5jdGlvbihoYW5kbGVyKSkge1xuXHQgICAgc3dpdGNoIChhcmd1bWVudHMubGVuZ3RoKSB7XG5cdCAgICAgIC8vIGZhc3QgY2FzZXNcblx0ICAgICAgY2FzZSAxOlxuXHQgICAgICAgIGhhbmRsZXIuY2FsbCh0aGlzKTtcblx0ICAgICAgICBicmVhaztcblx0ICAgICAgY2FzZSAyOlxuXHQgICAgICAgIGhhbmRsZXIuY2FsbCh0aGlzLCBhcmd1bWVudHNbMV0pO1xuXHQgICAgICAgIGJyZWFrO1xuXHQgICAgICBjYXNlIDM6XG5cdCAgICAgICAgaGFuZGxlci5jYWxsKHRoaXMsIGFyZ3VtZW50c1sxXSwgYXJndW1lbnRzWzJdKTtcblx0ICAgICAgICBicmVhaztcblx0ICAgICAgLy8gc2xvd2VyXG5cdCAgICAgIGRlZmF1bHQ6XG5cdCAgICAgICAgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG5cdCAgICAgICAgaGFuZGxlci5hcHBseSh0aGlzLCBhcmdzKTtcblx0ICAgIH1cblx0ICB9IGVsc2UgaWYgKGlzT2JqZWN0KGhhbmRsZXIpKSB7XG5cdCAgICBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcblx0ICAgIGxpc3RlbmVycyA9IGhhbmRsZXIuc2xpY2UoKTtcblx0ICAgIGxlbiA9IGxpc3RlbmVycy5sZW5ndGg7XG5cdCAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspXG5cdCAgICAgIGxpc3RlbmVyc1tpXS5hcHBseSh0aGlzLCBhcmdzKTtcblx0ICB9XG5cdFxuXHQgIHJldHVybiB0cnVlO1xuXHR9O1xuXHRcblx0RXZlbnRFbWl0dGVyLnByb3RvdHlwZS5hZGRMaXN0ZW5lciA9IGZ1bmN0aW9uKHR5cGUsIGxpc3RlbmVyKSB7XG5cdCAgdmFyIG07XG5cdFxuXHQgIGlmICghaXNGdW5jdGlvbihsaXN0ZW5lcikpXG5cdCAgICB0aHJvdyBUeXBlRXJyb3IoJ2xpc3RlbmVyIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuXHRcblx0ICBpZiAoIXRoaXMuX2V2ZW50cylcblx0ICAgIHRoaXMuX2V2ZW50cyA9IHt9O1xuXHRcblx0ICAvLyBUbyBhdm9pZCByZWN1cnNpb24gaW4gdGhlIGNhc2UgdGhhdCB0eXBlID09PSBcIm5ld0xpc3RlbmVyXCIhIEJlZm9yZVxuXHQgIC8vIGFkZGluZyBpdCB0byB0aGUgbGlzdGVuZXJzLCBmaXJzdCBlbWl0IFwibmV3TGlzdGVuZXJcIi5cblx0ICBpZiAodGhpcy5fZXZlbnRzLm5ld0xpc3RlbmVyKVxuXHQgICAgdGhpcy5lbWl0KCduZXdMaXN0ZW5lcicsIHR5cGUsXG5cdCAgICAgICAgICAgICAgaXNGdW5jdGlvbihsaXN0ZW5lci5saXN0ZW5lcikgP1xuXHQgICAgICAgICAgICAgIGxpc3RlbmVyLmxpc3RlbmVyIDogbGlzdGVuZXIpO1xuXHRcblx0ICBpZiAoIXRoaXMuX2V2ZW50c1t0eXBlXSlcblx0ICAgIC8vIE9wdGltaXplIHRoZSBjYXNlIG9mIG9uZSBsaXN0ZW5lci4gRG9uJ3QgbmVlZCB0aGUgZXh0cmEgYXJyYXkgb2JqZWN0LlxuXHQgICAgdGhpcy5fZXZlbnRzW3R5cGVdID0gbGlzdGVuZXI7XG5cdCAgZWxzZSBpZiAoaXNPYmplY3QodGhpcy5fZXZlbnRzW3R5cGVdKSlcblx0ICAgIC8vIElmIHdlJ3ZlIGFscmVhZHkgZ290IGFuIGFycmF5LCBqdXN0IGFwcGVuZC5cblx0ICAgIHRoaXMuX2V2ZW50c1t0eXBlXS5wdXNoKGxpc3RlbmVyKTtcblx0ICBlbHNlXG5cdCAgICAvLyBBZGRpbmcgdGhlIHNlY29uZCBlbGVtZW50LCBuZWVkIHRvIGNoYW5nZSB0byBhcnJheS5cblx0ICAgIHRoaXMuX2V2ZW50c1t0eXBlXSA9IFt0aGlzLl9ldmVudHNbdHlwZV0sIGxpc3RlbmVyXTtcblx0XG5cdCAgLy8gQ2hlY2sgZm9yIGxpc3RlbmVyIGxlYWtcblx0ICBpZiAoaXNPYmplY3QodGhpcy5fZXZlbnRzW3R5cGVdKSAmJiAhdGhpcy5fZXZlbnRzW3R5cGVdLndhcm5lZCkge1xuXHQgICAgaWYgKCFpc1VuZGVmaW5lZCh0aGlzLl9tYXhMaXN0ZW5lcnMpKSB7XG5cdCAgICAgIG0gPSB0aGlzLl9tYXhMaXN0ZW5lcnM7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICBtID0gRXZlbnRFbWl0dGVyLmRlZmF1bHRNYXhMaXN0ZW5lcnM7XG5cdCAgICB9XG5cdFxuXHQgICAgaWYgKG0gJiYgbSA+IDAgJiYgdGhpcy5fZXZlbnRzW3R5cGVdLmxlbmd0aCA+IG0pIHtcblx0ICAgICAgdGhpcy5fZXZlbnRzW3R5cGVdLndhcm5lZCA9IHRydWU7XG5cdCAgICAgIGNvbnNvbGUuZXJyb3IoJyhub2RlKSB3YXJuaW5nOiBwb3NzaWJsZSBFdmVudEVtaXR0ZXIgbWVtb3J5ICcgK1xuXHQgICAgICAgICAgICAgICAgICAgICdsZWFrIGRldGVjdGVkLiAlZCBsaXN0ZW5lcnMgYWRkZWQuICcgK1xuXHQgICAgICAgICAgICAgICAgICAgICdVc2UgZW1pdHRlci5zZXRNYXhMaXN0ZW5lcnMoKSB0byBpbmNyZWFzZSBsaW1pdC4nLFxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuX2V2ZW50c1t0eXBlXS5sZW5ndGgpO1xuXHQgICAgICBpZiAodHlwZW9mIGNvbnNvbGUudHJhY2UgPT09ICdmdW5jdGlvbicpIHtcblx0ICAgICAgICAvLyBub3Qgc3VwcG9ydGVkIGluIElFIDEwXG5cdCAgICAgICAgY29uc29sZS50cmFjZSgpO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgfVxuXHRcblx0ICByZXR1cm4gdGhpcztcblx0fTtcblx0XG5cdEV2ZW50RW1pdHRlci5wcm90b3R5cGUub24gPSBFdmVudEVtaXR0ZXIucHJvdG90eXBlLmFkZExpc3RlbmVyO1xuXHRcblx0RXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbmNlID0gZnVuY3Rpb24odHlwZSwgbGlzdGVuZXIpIHtcblx0ICBpZiAoIWlzRnVuY3Rpb24obGlzdGVuZXIpKVxuXHQgICAgdGhyb3cgVHlwZUVycm9yKCdsaXN0ZW5lciBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcblx0XG5cdCAgdmFyIGZpcmVkID0gZmFsc2U7XG5cdFxuXHQgIGZ1bmN0aW9uIGcoKSB7XG5cdCAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKHR5cGUsIGcpO1xuXHRcblx0ICAgIGlmICghZmlyZWQpIHtcblx0ICAgICAgZmlyZWQgPSB0cnVlO1xuXHQgICAgICBsaXN0ZW5lci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHQgICAgfVxuXHQgIH1cblx0XG5cdCAgZy5saXN0ZW5lciA9IGxpc3RlbmVyO1xuXHQgIHRoaXMub24odHlwZSwgZyk7XG5cdFxuXHQgIHJldHVybiB0aGlzO1xuXHR9O1xuXHRcblx0Ly8gZW1pdHMgYSAncmVtb3ZlTGlzdGVuZXInIGV2ZW50IGlmZiB0aGUgbGlzdGVuZXIgd2FzIHJlbW92ZWRcblx0RXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lciA9IGZ1bmN0aW9uKHR5cGUsIGxpc3RlbmVyKSB7XG5cdCAgdmFyIGxpc3QsIHBvc2l0aW9uLCBsZW5ndGgsIGk7XG5cdFxuXHQgIGlmICghaXNGdW5jdGlvbihsaXN0ZW5lcikpXG5cdCAgICB0aHJvdyBUeXBlRXJyb3IoJ2xpc3RlbmVyIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuXHRcblx0ICBpZiAoIXRoaXMuX2V2ZW50cyB8fCAhdGhpcy5fZXZlbnRzW3R5cGVdKVxuXHQgICAgcmV0dXJuIHRoaXM7XG5cdFxuXHQgIGxpc3QgPSB0aGlzLl9ldmVudHNbdHlwZV07XG5cdCAgbGVuZ3RoID0gbGlzdC5sZW5ndGg7XG5cdCAgcG9zaXRpb24gPSAtMTtcblx0XG5cdCAgaWYgKGxpc3QgPT09IGxpc3RlbmVyIHx8XG5cdCAgICAgIChpc0Z1bmN0aW9uKGxpc3QubGlzdGVuZXIpICYmIGxpc3QubGlzdGVuZXIgPT09IGxpc3RlbmVyKSkge1xuXHQgICAgZGVsZXRlIHRoaXMuX2V2ZW50c1t0eXBlXTtcblx0ICAgIGlmICh0aGlzLl9ldmVudHMucmVtb3ZlTGlzdGVuZXIpXG5cdCAgICAgIHRoaXMuZW1pdCgncmVtb3ZlTGlzdGVuZXInLCB0eXBlLCBsaXN0ZW5lcik7XG5cdFxuXHQgIH0gZWxzZSBpZiAoaXNPYmplY3QobGlzdCkpIHtcblx0ICAgIGZvciAoaSA9IGxlbmd0aDsgaS0tID4gMDspIHtcblx0ICAgICAgaWYgKGxpc3RbaV0gPT09IGxpc3RlbmVyIHx8XG5cdCAgICAgICAgICAobGlzdFtpXS5saXN0ZW5lciAmJiBsaXN0W2ldLmxpc3RlbmVyID09PSBsaXN0ZW5lcikpIHtcblx0ICAgICAgICBwb3NpdGlvbiA9IGk7XG5cdCAgICAgICAgYnJlYWs7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0XG5cdCAgICBpZiAocG9zaXRpb24gPCAwKVxuXHQgICAgICByZXR1cm4gdGhpcztcblx0XG5cdCAgICBpZiAobGlzdC5sZW5ndGggPT09IDEpIHtcblx0ICAgICAgbGlzdC5sZW5ndGggPSAwO1xuXHQgICAgICBkZWxldGUgdGhpcy5fZXZlbnRzW3R5cGVdO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgbGlzdC5zcGxpY2UocG9zaXRpb24sIDEpO1xuXHQgICAgfVxuXHRcblx0ICAgIGlmICh0aGlzLl9ldmVudHMucmVtb3ZlTGlzdGVuZXIpXG5cdCAgICAgIHRoaXMuZW1pdCgncmVtb3ZlTGlzdGVuZXInLCB0eXBlLCBsaXN0ZW5lcik7XG5cdCAgfVxuXHRcblx0ICByZXR1cm4gdGhpcztcblx0fTtcblx0XG5cdEV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlQWxsTGlzdGVuZXJzID0gZnVuY3Rpb24odHlwZSkge1xuXHQgIHZhciBrZXksIGxpc3RlbmVycztcblx0XG5cdCAgaWYgKCF0aGlzLl9ldmVudHMpXG5cdCAgICByZXR1cm4gdGhpcztcblx0XG5cdCAgLy8gbm90IGxpc3RlbmluZyBmb3IgcmVtb3ZlTGlzdGVuZXIsIG5vIG5lZWQgdG8gZW1pdFxuXHQgIGlmICghdGhpcy5fZXZlbnRzLnJlbW92ZUxpc3RlbmVyKSB7XG5cdCAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMClcblx0ICAgICAgdGhpcy5fZXZlbnRzID0ge307XG5cdCAgICBlbHNlIGlmICh0aGlzLl9ldmVudHNbdHlwZV0pXG5cdCAgICAgIGRlbGV0ZSB0aGlzLl9ldmVudHNbdHlwZV07XG5cdCAgICByZXR1cm4gdGhpcztcblx0ICB9XG5cdFxuXHQgIC8vIGVtaXQgcmVtb3ZlTGlzdGVuZXIgZm9yIGFsbCBsaXN0ZW5lcnMgb24gYWxsIGV2ZW50c1xuXHQgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG5cdCAgICBmb3IgKGtleSBpbiB0aGlzLl9ldmVudHMpIHtcblx0ICAgICAgaWYgKGtleSA9PT0gJ3JlbW92ZUxpc3RlbmVyJykgY29udGludWU7XG5cdCAgICAgIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKGtleSk7XG5cdCAgICB9XG5cdCAgICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycygncmVtb3ZlTGlzdGVuZXInKTtcblx0ICAgIHRoaXMuX2V2ZW50cyA9IHt9O1xuXHQgICAgcmV0dXJuIHRoaXM7XG5cdCAgfVxuXHRcblx0ICBsaXN0ZW5lcnMgPSB0aGlzLl9ldmVudHNbdHlwZV07XG5cdFxuXHQgIGlmIChpc0Z1bmN0aW9uKGxpc3RlbmVycykpIHtcblx0ICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXJzKTtcblx0ICB9IGVsc2UgaWYgKGxpc3RlbmVycykge1xuXHQgICAgLy8gTElGTyBvcmRlclxuXHQgICAgd2hpbGUgKGxpc3RlbmVycy5sZW5ndGgpXG5cdCAgICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXJzW2xpc3RlbmVycy5sZW5ndGggLSAxXSk7XG5cdCAgfVxuXHQgIGRlbGV0ZSB0aGlzLl9ldmVudHNbdHlwZV07XG5cdFxuXHQgIHJldHVybiB0aGlzO1xuXHR9O1xuXHRcblx0RXZlbnRFbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lcnMgPSBmdW5jdGlvbih0eXBlKSB7XG5cdCAgdmFyIHJldDtcblx0ICBpZiAoIXRoaXMuX2V2ZW50cyB8fCAhdGhpcy5fZXZlbnRzW3R5cGVdKVxuXHQgICAgcmV0ID0gW107XG5cdCAgZWxzZSBpZiAoaXNGdW5jdGlvbih0aGlzLl9ldmVudHNbdHlwZV0pKVxuXHQgICAgcmV0ID0gW3RoaXMuX2V2ZW50c1t0eXBlXV07XG5cdCAgZWxzZVxuXHQgICAgcmV0ID0gdGhpcy5fZXZlbnRzW3R5cGVdLnNsaWNlKCk7XG5cdCAgcmV0dXJuIHJldDtcblx0fTtcblx0XG5cdEV2ZW50RW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJDb3VudCA9IGZ1bmN0aW9uKHR5cGUpIHtcblx0ICBpZiAodGhpcy5fZXZlbnRzKSB7XG5cdCAgICB2YXIgZXZsaXN0ZW5lciA9IHRoaXMuX2V2ZW50c1t0eXBlXTtcblx0XG5cdCAgICBpZiAoaXNGdW5jdGlvbihldmxpc3RlbmVyKSlcblx0ICAgICAgcmV0dXJuIDE7XG5cdCAgICBlbHNlIGlmIChldmxpc3RlbmVyKVxuXHQgICAgICByZXR1cm4gZXZsaXN0ZW5lci5sZW5ndGg7XG5cdCAgfVxuXHQgIHJldHVybiAwO1xuXHR9O1xuXHRcblx0RXZlbnRFbWl0dGVyLmxpc3RlbmVyQ291bnQgPSBmdW5jdGlvbihlbWl0dGVyLCB0eXBlKSB7XG5cdCAgcmV0dXJuIGVtaXR0ZXIubGlzdGVuZXJDb3VudCh0eXBlKTtcblx0fTtcblx0XG5cdGZ1bmN0aW9uIGlzRnVuY3Rpb24oYXJnKSB7XG5cdCAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdmdW5jdGlvbic7XG5cdH1cblx0XG5cdGZ1bmN0aW9uIGlzTnVtYmVyKGFyZykge1xuXHQgIHJldHVybiB0eXBlb2YgYXJnID09PSAnbnVtYmVyJztcblx0fVxuXHRcblx0ZnVuY3Rpb24gaXNPYmplY3QoYXJnKSB7XG5cdCAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdvYmplY3QnICYmIGFyZyAhPT0gbnVsbDtcblx0fVxuXHRcblx0ZnVuY3Rpb24gaXNVbmRlZmluZWQoYXJnKSB7XG5cdCAgcmV0dXJuIGFyZyA9PT0gdm9pZCAwO1xuXHR9XG5cblxuLyoqKi8gfSxcbi8qIDI1ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHRpZiAodHlwZW9mIE9iamVjdC5jcmVhdGUgPT09ICdmdW5jdGlvbicpIHtcblx0ICAvLyBpbXBsZW1lbnRhdGlvbiBmcm9tIHN0YW5kYXJkIG5vZGUuanMgJ3V0aWwnIG1vZHVsZVxuXHQgIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaW5oZXJpdHMoY3Rvciwgc3VwZXJDdG9yKSB7XG5cdCAgICBjdG9yLnN1cGVyXyA9IHN1cGVyQ3RvclxuXHQgICAgY3Rvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ3Rvci5wcm90b3R5cGUsIHtcblx0ICAgICAgY29uc3RydWN0b3I6IHtcblx0ICAgICAgICB2YWx1ZTogY3Rvcixcblx0ICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcblx0ICAgICAgICB3cml0YWJsZTogdHJ1ZSxcblx0ICAgICAgICBjb25maWd1cmFibGU6IHRydWVcblx0ICAgICAgfVxuXHQgICAgfSk7XG5cdCAgfTtcblx0fSBlbHNlIHtcblx0ICAvLyBvbGQgc2Nob29sIHNoaW0gZm9yIG9sZCBicm93c2Vyc1xuXHQgIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaW5oZXJpdHMoY3Rvciwgc3VwZXJDdG9yKSB7XG5cdCAgICBjdG9yLnN1cGVyXyA9IHN1cGVyQ3RvclxuXHQgICAgdmFyIFRlbXBDdG9yID0gZnVuY3Rpb24gKCkge31cblx0ICAgIFRlbXBDdG9yLnByb3RvdHlwZSA9IHN1cGVyQ3Rvci5wcm90b3R5cGVcblx0ICAgIGN0b3IucHJvdG90eXBlID0gbmV3IFRlbXBDdG9yKClcblx0ICAgIGN0b3IucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gY3RvclxuXHQgIH1cblx0fVxuXG5cbi8qKiovIH0sXG4vKiAyNiAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovKGZ1bmN0aW9uKHByb2Nlc3MpIHtleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI3KTtcblx0ZXhwb3J0cy5TdHJlYW0gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIzKTtcblx0ZXhwb3J0cy5SZWFkYWJsZSA9IGV4cG9ydHM7XG5cdGV4cG9ydHMuV3JpdGFibGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMzKTtcblx0ZXhwb3J0cy5EdXBsZXggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMyKTtcblx0ZXhwb3J0cy5UcmFuc2Zvcm0gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM1KTtcblx0ZXhwb3J0cy5QYXNzVGhyb3VnaCA9IF9fd2VicGFja19yZXF1aXJlX18oMzYpO1xuXHRpZiAoIXByb2Nlc3MuYnJvd3NlciAmJiBwcm9jZXNzLmVudi5SRUFEQUJMRV9TVFJFQU0gPT09ICdkaXNhYmxlJykge1xuXHQgIG1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMyk7XG5cdH1cblx0XG5cdC8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqL30uY2FsbChleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDE4KSkpXG5cbi8qKiovIH0sXG4vKiAyNyAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovKGZ1bmN0aW9uKHByb2Nlc3MpIHsvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cblx0Ly9cblx0Ly8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcblx0Ly8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuXHQvLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcblx0Ly8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuXHQvLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG5cdC8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuXHQvLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcblx0Ly9cblx0Ly8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcblx0Ly8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cdC8vXG5cdC8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncblx0Ly8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuXHQvLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG5cdC8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuXHQvLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcblx0Ly8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuXHQvLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBSZWFkYWJsZTtcblx0XG5cdC8qPHJlcGxhY2VtZW50PiovXG5cdHZhciBpc0FycmF5ID0gX193ZWJwYWNrX3JlcXVpcmVfXygyOCk7XG5cdC8qPC9yZXBsYWNlbWVudD4qL1xuXHRcblx0XG5cdC8qPHJlcGxhY2VtZW50PiovXG5cdHZhciBCdWZmZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE0KS5CdWZmZXI7XG5cdC8qPC9yZXBsYWNlbWVudD4qL1xuXHRcblx0UmVhZGFibGUuUmVhZGFibGVTdGF0ZSA9IFJlYWRhYmxlU3RhdGU7XG5cdFxuXHR2YXIgRUUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI0KS5FdmVudEVtaXR0ZXI7XG5cdFxuXHQvKjxyZXBsYWNlbWVudD4qL1xuXHRpZiAoIUVFLmxpc3RlbmVyQ291bnQpIEVFLmxpc3RlbmVyQ291bnQgPSBmdW5jdGlvbihlbWl0dGVyLCB0eXBlKSB7XG5cdCAgcmV0dXJuIGVtaXR0ZXIubGlzdGVuZXJzKHR5cGUpLmxlbmd0aDtcblx0fTtcblx0Lyo8L3JlcGxhY2VtZW50PiovXG5cdFxuXHR2YXIgU3RyZWFtID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMyk7XG5cdFxuXHQvKjxyZXBsYWNlbWVudD4qL1xuXHR2YXIgdXRpbCA9IF9fd2VicGFja19yZXF1aXJlX18oMjkpO1xuXHR1dGlsLmluaGVyaXRzID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMCk7XG5cdC8qPC9yZXBsYWNlbWVudD4qL1xuXHRcblx0dmFyIFN0cmluZ0RlY29kZXI7XG5cdFxuXHRcblx0Lyo8cmVwbGFjZW1lbnQ+Ki9cblx0dmFyIGRlYnVnID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMSk7XG5cdGlmIChkZWJ1ZyAmJiBkZWJ1Zy5kZWJ1Z2xvZykge1xuXHQgIGRlYnVnID0gZGVidWcuZGVidWdsb2coJ3N0cmVhbScpO1xuXHR9IGVsc2Uge1xuXHQgIGRlYnVnID0gZnVuY3Rpb24gKCkge307XG5cdH1cblx0Lyo8L3JlcGxhY2VtZW50PiovXG5cdFxuXHRcblx0dXRpbC5pbmhlcml0cyhSZWFkYWJsZSwgU3RyZWFtKTtcblx0XG5cdGZ1bmN0aW9uIFJlYWRhYmxlU3RhdGUob3B0aW9ucywgc3RyZWFtKSB7XG5cdCAgdmFyIER1cGxleCA9IF9fd2VicGFja19yZXF1aXJlX18oMzIpO1xuXHRcblx0ICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblx0XG5cdCAgLy8gdGhlIHBvaW50IGF0IHdoaWNoIGl0IHN0b3BzIGNhbGxpbmcgX3JlYWQoKSB0byBmaWxsIHRoZSBidWZmZXJcblx0ICAvLyBOb3RlOiAwIGlzIGEgdmFsaWQgdmFsdWUsIG1lYW5zIFwiZG9uJ3QgY2FsbCBfcmVhZCBwcmVlbXB0aXZlbHkgZXZlclwiXG5cdCAgdmFyIGh3bSA9IG9wdGlvbnMuaGlnaFdhdGVyTWFyaztcblx0ICB2YXIgZGVmYXVsdEh3bSA9IG9wdGlvbnMub2JqZWN0TW9kZSA/IDE2IDogMTYgKiAxMDI0O1xuXHQgIHRoaXMuaGlnaFdhdGVyTWFyayA9IChod20gfHwgaHdtID09PSAwKSA/IGh3bSA6IGRlZmF1bHRId207XG5cdFxuXHQgIC8vIGNhc3QgdG8gaW50cy5cblx0ICB0aGlzLmhpZ2hXYXRlck1hcmsgPSB+fnRoaXMuaGlnaFdhdGVyTWFyaztcblx0XG5cdCAgdGhpcy5idWZmZXIgPSBbXTtcblx0ICB0aGlzLmxlbmd0aCA9IDA7XG5cdCAgdGhpcy5waXBlcyA9IG51bGw7XG5cdCAgdGhpcy5waXBlc0NvdW50ID0gMDtcblx0ICB0aGlzLmZsb3dpbmcgPSBudWxsO1xuXHQgIHRoaXMuZW5kZWQgPSBmYWxzZTtcblx0ICB0aGlzLmVuZEVtaXR0ZWQgPSBmYWxzZTtcblx0ICB0aGlzLnJlYWRpbmcgPSBmYWxzZTtcblx0XG5cdCAgLy8gYSBmbGFnIHRvIGJlIGFibGUgdG8gdGVsbCBpZiB0aGUgb253cml0ZSBjYiBpcyBjYWxsZWQgaW1tZWRpYXRlbHksXG5cdCAgLy8gb3Igb24gYSBsYXRlciB0aWNrLiAgV2Ugc2V0IHRoaXMgdG8gdHJ1ZSBhdCBmaXJzdCwgYmVjYXVzZSBhbnlcblx0ICAvLyBhY3Rpb25zIHRoYXQgc2hvdWxkbid0IGhhcHBlbiB1bnRpbCBcImxhdGVyXCIgc2hvdWxkIGdlbmVyYWxseSBhbHNvXG5cdCAgLy8gbm90IGhhcHBlbiBiZWZvcmUgdGhlIGZpcnN0IHdyaXRlIGNhbGwuXG5cdCAgdGhpcy5zeW5jID0gdHJ1ZTtcblx0XG5cdCAgLy8gd2hlbmV2ZXIgd2UgcmV0dXJuIG51bGwsIHRoZW4gd2Ugc2V0IGEgZmxhZyB0byBzYXlcblx0ICAvLyB0aGF0IHdlJ3JlIGF3YWl0aW5nIGEgJ3JlYWRhYmxlJyBldmVudCBlbWlzc2lvbi5cblx0ICB0aGlzLm5lZWRSZWFkYWJsZSA9IGZhbHNlO1xuXHQgIHRoaXMuZW1pdHRlZFJlYWRhYmxlID0gZmFsc2U7XG5cdCAgdGhpcy5yZWFkYWJsZUxpc3RlbmluZyA9IGZhbHNlO1xuXHRcblx0XG5cdCAgLy8gb2JqZWN0IHN0cmVhbSBmbGFnLiBVc2VkIHRvIG1ha2UgcmVhZChuKSBpZ25vcmUgbiBhbmQgdG9cblx0ICAvLyBtYWtlIGFsbCB0aGUgYnVmZmVyIG1lcmdpbmcgYW5kIGxlbmd0aCBjaGVja3MgZ28gYXdheVxuXHQgIHRoaXMub2JqZWN0TW9kZSA9ICEhb3B0aW9ucy5vYmplY3RNb2RlO1xuXHRcblx0ICBpZiAoc3RyZWFtIGluc3RhbmNlb2YgRHVwbGV4KVxuXHQgICAgdGhpcy5vYmplY3RNb2RlID0gdGhpcy5vYmplY3RNb2RlIHx8ICEhb3B0aW9ucy5yZWFkYWJsZU9iamVjdE1vZGU7XG5cdFxuXHQgIC8vIENyeXB0byBpcyBraW5kIG9mIG9sZCBhbmQgY3J1c3R5LiAgSGlzdG9yaWNhbGx5LCBpdHMgZGVmYXVsdCBzdHJpbmdcblx0ICAvLyBlbmNvZGluZyBpcyAnYmluYXJ5JyBzbyB3ZSBoYXZlIHRvIG1ha2UgdGhpcyBjb25maWd1cmFibGUuXG5cdCAgLy8gRXZlcnl0aGluZyBlbHNlIGluIHRoZSB1bml2ZXJzZSB1c2VzICd1dGY4JywgdGhvdWdoLlxuXHQgIHRoaXMuZGVmYXVsdEVuY29kaW5nID0gb3B0aW9ucy5kZWZhdWx0RW5jb2RpbmcgfHwgJ3V0ZjgnO1xuXHRcblx0ICAvLyB3aGVuIHBpcGluZywgd2Ugb25seSBjYXJlIGFib3V0ICdyZWFkYWJsZScgZXZlbnRzIHRoYXQgaGFwcGVuXG5cdCAgLy8gYWZ0ZXIgcmVhZCgpaW5nIGFsbCB0aGUgYnl0ZXMgYW5kIG5vdCBnZXR0aW5nIGFueSBwdXNoYmFjay5cblx0ICB0aGlzLnJhbk91dCA9IGZhbHNlO1xuXHRcblx0ICAvLyB0aGUgbnVtYmVyIG9mIHdyaXRlcnMgdGhhdCBhcmUgYXdhaXRpbmcgYSBkcmFpbiBldmVudCBpbiAucGlwZSgpc1xuXHQgIHRoaXMuYXdhaXREcmFpbiA9IDA7XG5cdFxuXHQgIC8vIGlmIHRydWUsIGEgbWF5YmVSZWFkTW9yZSBoYXMgYmVlbiBzY2hlZHVsZWRcblx0ICB0aGlzLnJlYWRpbmdNb3JlID0gZmFsc2U7XG5cdFxuXHQgIHRoaXMuZGVjb2RlciA9IG51bGw7XG5cdCAgdGhpcy5lbmNvZGluZyA9IG51bGw7XG5cdCAgaWYgKG9wdGlvbnMuZW5jb2RpbmcpIHtcblx0ICAgIGlmICghU3RyaW5nRGVjb2Rlcilcblx0ICAgICAgU3RyaW5nRGVjb2RlciA9IF9fd2VicGFja19yZXF1aXJlX18oMzQpLlN0cmluZ0RlY29kZXI7XG5cdCAgICB0aGlzLmRlY29kZXIgPSBuZXcgU3RyaW5nRGVjb2RlcihvcHRpb25zLmVuY29kaW5nKTtcblx0ICAgIHRoaXMuZW5jb2RpbmcgPSBvcHRpb25zLmVuY29kaW5nO1xuXHQgIH1cblx0fVxuXHRcblx0ZnVuY3Rpb24gUmVhZGFibGUob3B0aW9ucykge1xuXHQgIHZhciBEdXBsZXggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMyKTtcblx0XG5cdCAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFJlYWRhYmxlKSlcblx0ICAgIHJldHVybiBuZXcgUmVhZGFibGUob3B0aW9ucyk7XG5cdFxuXHQgIHRoaXMuX3JlYWRhYmxlU3RhdGUgPSBuZXcgUmVhZGFibGVTdGF0ZShvcHRpb25zLCB0aGlzKTtcblx0XG5cdCAgLy8gbGVnYWN5XG5cdCAgdGhpcy5yZWFkYWJsZSA9IHRydWU7XG5cdFxuXHQgIFN0cmVhbS5jYWxsKHRoaXMpO1xuXHR9XG5cdFxuXHQvLyBNYW51YWxseSBzaG92ZSBzb21ldGhpbmcgaW50byB0aGUgcmVhZCgpIGJ1ZmZlci5cblx0Ly8gVGhpcyByZXR1cm5zIHRydWUgaWYgdGhlIGhpZ2hXYXRlck1hcmsgaGFzIG5vdCBiZWVuIGhpdCB5ZXQsXG5cdC8vIHNpbWlsYXIgdG8gaG93IFdyaXRhYmxlLndyaXRlKCkgcmV0dXJucyB0cnVlIGlmIHlvdSBzaG91bGRcblx0Ly8gd3JpdGUoKSBzb21lIG1vcmUuXG5cdFJlYWRhYmxlLnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24oY2h1bmssIGVuY29kaW5nKSB7XG5cdCAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcblx0XG5cdCAgaWYgKHV0aWwuaXNTdHJpbmcoY2h1bmspICYmICFzdGF0ZS5vYmplY3RNb2RlKSB7XG5cdCAgICBlbmNvZGluZyA9IGVuY29kaW5nIHx8IHN0YXRlLmRlZmF1bHRFbmNvZGluZztcblx0ICAgIGlmIChlbmNvZGluZyAhPT0gc3RhdGUuZW5jb2RpbmcpIHtcblx0ICAgICAgY2h1bmsgPSBuZXcgQnVmZmVyKGNodW5rLCBlbmNvZGluZyk7XG5cdCAgICAgIGVuY29kaW5nID0gJyc7XG5cdCAgICB9XG5cdCAgfVxuXHRcblx0ICByZXR1cm4gcmVhZGFibGVBZGRDaHVuayh0aGlzLCBzdGF0ZSwgY2h1bmssIGVuY29kaW5nLCBmYWxzZSk7XG5cdH07XG5cdFxuXHQvLyBVbnNoaWZ0IHNob3VsZCAqYWx3YXlzKiBiZSBzb21ldGhpbmcgZGlyZWN0bHkgb3V0IG9mIHJlYWQoKVxuXHRSZWFkYWJsZS5wcm90b3R5cGUudW5zaGlmdCA9IGZ1bmN0aW9uKGNodW5rKSB7XG5cdCAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcblx0ICByZXR1cm4gcmVhZGFibGVBZGRDaHVuayh0aGlzLCBzdGF0ZSwgY2h1bmssICcnLCB0cnVlKTtcblx0fTtcblx0XG5cdGZ1bmN0aW9uIHJlYWRhYmxlQWRkQ2h1bmsoc3RyZWFtLCBzdGF0ZSwgY2h1bmssIGVuY29kaW5nLCBhZGRUb0Zyb250KSB7XG5cdCAgdmFyIGVyID0gY2h1bmtJbnZhbGlkKHN0YXRlLCBjaHVuayk7XG5cdCAgaWYgKGVyKSB7XG5cdCAgICBzdHJlYW0uZW1pdCgnZXJyb3InLCBlcik7XG5cdCAgfSBlbHNlIGlmICh1dGlsLmlzTnVsbE9yVW5kZWZpbmVkKGNodW5rKSkge1xuXHQgICAgc3RhdGUucmVhZGluZyA9IGZhbHNlO1xuXHQgICAgaWYgKCFzdGF0ZS5lbmRlZClcblx0ICAgICAgb25Fb2ZDaHVuayhzdHJlYW0sIHN0YXRlKTtcblx0ICB9IGVsc2UgaWYgKHN0YXRlLm9iamVjdE1vZGUgfHwgY2h1bmsgJiYgY2h1bmsubGVuZ3RoID4gMCkge1xuXHQgICAgaWYgKHN0YXRlLmVuZGVkICYmICFhZGRUb0Zyb250KSB7XG5cdCAgICAgIHZhciBlID0gbmV3IEVycm9yKCdzdHJlYW0ucHVzaCgpIGFmdGVyIEVPRicpO1xuXHQgICAgICBzdHJlYW0uZW1pdCgnZXJyb3InLCBlKTtcblx0ICAgIH0gZWxzZSBpZiAoc3RhdGUuZW5kRW1pdHRlZCAmJiBhZGRUb0Zyb250KSB7XG5cdCAgICAgIHZhciBlID0gbmV3IEVycm9yKCdzdHJlYW0udW5zaGlmdCgpIGFmdGVyIGVuZCBldmVudCcpO1xuXHQgICAgICBzdHJlYW0uZW1pdCgnZXJyb3InLCBlKTtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIGlmIChzdGF0ZS5kZWNvZGVyICYmICFhZGRUb0Zyb250ICYmICFlbmNvZGluZylcblx0ICAgICAgICBjaHVuayA9IHN0YXRlLmRlY29kZXIud3JpdGUoY2h1bmspO1xuXHRcblx0ICAgICAgaWYgKCFhZGRUb0Zyb250KVxuXHQgICAgICAgIHN0YXRlLnJlYWRpbmcgPSBmYWxzZTtcblx0XG5cdCAgICAgIC8vIGlmIHdlIHdhbnQgdGhlIGRhdGEgbm93LCBqdXN0IGVtaXQgaXQuXG5cdCAgICAgIGlmIChzdGF0ZS5mbG93aW5nICYmIHN0YXRlLmxlbmd0aCA9PT0gMCAmJiAhc3RhdGUuc3luYykge1xuXHQgICAgICAgIHN0cmVhbS5lbWl0KCdkYXRhJywgY2h1bmspO1xuXHQgICAgICAgIHN0cmVhbS5yZWFkKDApO1xuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIC8vIHVwZGF0ZSB0aGUgYnVmZmVyIGluZm8uXG5cdCAgICAgICAgc3RhdGUubGVuZ3RoICs9IHN0YXRlLm9iamVjdE1vZGUgPyAxIDogY2h1bmsubGVuZ3RoO1xuXHQgICAgICAgIGlmIChhZGRUb0Zyb250KVxuXHQgICAgICAgICAgc3RhdGUuYnVmZmVyLnVuc2hpZnQoY2h1bmspO1xuXHQgICAgICAgIGVsc2Vcblx0ICAgICAgICAgIHN0YXRlLmJ1ZmZlci5wdXNoKGNodW5rKTtcblx0XG5cdCAgICAgICAgaWYgKHN0YXRlLm5lZWRSZWFkYWJsZSlcblx0ICAgICAgICAgIGVtaXRSZWFkYWJsZShzdHJlYW0pO1xuXHQgICAgICB9XG5cdFxuXHQgICAgICBtYXliZVJlYWRNb3JlKHN0cmVhbSwgc3RhdGUpO1xuXHQgICAgfVxuXHQgIH0gZWxzZSBpZiAoIWFkZFRvRnJvbnQpIHtcblx0ICAgIHN0YXRlLnJlYWRpbmcgPSBmYWxzZTtcblx0ICB9XG5cdFxuXHQgIHJldHVybiBuZWVkTW9yZURhdGEoc3RhdGUpO1xuXHR9XG5cdFxuXHRcblx0XG5cdC8vIGlmIGl0J3MgcGFzdCB0aGUgaGlnaCB3YXRlciBtYXJrLCB3ZSBjYW4gcHVzaCBpbiBzb21lIG1vcmUuXG5cdC8vIEFsc28sIGlmIHdlIGhhdmUgbm8gZGF0YSB5ZXQsIHdlIGNhbiBzdGFuZCBzb21lXG5cdC8vIG1vcmUgYnl0ZXMuICBUaGlzIGlzIHRvIHdvcmsgYXJvdW5kIGNhc2VzIHdoZXJlIGh3bT0wLFxuXHQvLyBzdWNoIGFzIHRoZSByZXBsLiAgQWxzbywgaWYgdGhlIHB1c2goKSB0cmlnZ2VyZWQgYVxuXHQvLyByZWFkYWJsZSBldmVudCwgYW5kIHRoZSB1c2VyIGNhbGxlZCByZWFkKGxhcmdlTnVtYmVyKSBzdWNoIHRoYXRcblx0Ly8gbmVlZFJlYWRhYmxlIHdhcyBzZXQsIHRoZW4gd2Ugb3VnaHQgdG8gcHVzaCBtb3JlLCBzbyB0aGF0IGFub3RoZXJcblx0Ly8gJ3JlYWRhYmxlJyBldmVudCB3aWxsIGJlIHRyaWdnZXJlZC5cblx0ZnVuY3Rpb24gbmVlZE1vcmVEYXRhKHN0YXRlKSB7XG5cdCAgcmV0dXJuICFzdGF0ZS5lbmRlZCAmJlxuXHQgICAgICAgICAoc3RhdGUubmVlZFJlYWRhYmxlIHx8XG5cdCAgICAgICAgICBzdGF0ZS5sZW5ndGggPCBzdGF0ZS5oaWdoV2F0ZXJNYXJrIHx8XG5cdCAgICAgICAgICBzdGF0ZS5sZW5ndGggPT09IDApO1xuXHR9XG5cdFxuXHQvLyBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eS5cblx0UmVhZGFibGUucHJvdG90eXBlLnNldEVuY29kaW5nID0gZnVuY3Rpb24oZW5jKSB7XG5cdCAgaWYgKCFTdHJpbmdEZWNvZGVyKVxuXHQgICAgU3RyaW5nRGVjb2RlciA9IF9fd2VicGFja19yZXF1aXJlX18oMzQpLlN0cmluZ0RlY29kZXI7XG5cdCAgdGhpcy5fcmVhZGFibGVTdGF0ZS5kZWNvZGVyID0gbmV3IFN0cmluZ0RlY29kZXIoZW5jKTtcblx0ICB0aGlzLl9yZWFkYWJsZVN0YXRlLmVuY29kaW5nID0gZW5jO1xuXHQgIHJldHVybiB0aGlzO1xuXHR9O1xuXHRcblx0Ly8gRG9uJ3QgcmFpc2UgdGhlIGh3bSA+IDEyOE1CXG5cdHZhciBNQVhfSFdNID0gMHg4MDAwMDA7XG5cdGZ1bmN0aW9uIHJvdW5kVXBUb05leHRQb3dlck9mMihuKSB7XG5cdCAgaWYgKG4gPj0gTUFYX0hXTSkge1xuXHQgICAgbiA9IE1BWF9IV007XG5cdCAgfSBlbHNlIHtcblx0ICAgIC8vIEdldCB0aGUgbmV4dCBoaWdoZXN0IHBvd2VyIG9mIDJcblx0ICAgIG4tLTtcblx0ICAgIGZvciAodmFyIHAgPSAxOyBwIDwgMzI7IHAgPDw9IDEpIG4gfD0gbiA+PiBwO1xuXHQgICAgbisrO1xuXHQgIH1cblx0ICByZXR1cm4gbjtcblx0fVxuXHRcblx0ZnVuY3Rpb24gaG93TXVjaFRvUmVhZChuLCBzdGF0ZSkge1xuXHQgIGlmIChzdGF0ZS5sZW5ndGggPT09IDAgJiYgc3RhdGUuZW5kZWQpXG5cdCAgICByZXR1cm4gMDtcblx0XG5cdCAgaWYgKHN0YXRlLm9iamVjdE1vZGUpXG5cdCAgICByZXR1cm4gbiA9PT0gMCA/IDAgOiAxO1xuXHRcblx0ICBpZiAoaXNOYU4obikgfHwgdXRpbC5pc051bGwobikpIHtcblx0ICAgIC8vIG9ubHkgZmxvdyBvbmUgYnVmZmVyIGF0IGEgdGltZVxuXHQgICAgaWYgKHN0YXRlLmZsb3dpbmcgJiYgc3RhdGUuYnVmZmVyLmxlbmd0aClcblx0ICAgICAgcmV0dXJuIHN0YXRlLmJ1ZmZlclswXS5sZW5ndGg7XG5cdCAgICBlbHNlXG5cdCAgICAgIHJldHVybiBzdGF0ZS5sZW5ndGg7XG5cdCAgfVxuXHRcblx0ICBpZiAobiA8PSAwKVxuXHQgICAgcmV0dXJuIDA7XG5cdFxuXHQgIC8vIElmIHdlJ3JlIGFza2luZyBmb3IgbW9yZSB0aGFuIHRoZSB0YXJnZXQgYnVmZmVyIGxldmVsLFxuXHQgIC8vIHRoZW4gcmFpc2UgdGhlIHdhdGVyIG1hcmsuICBCdW1wIHVwIHRvIHRoZSBuZXh0IGhpZ2hlc3Rcblx0ICAvLyBwb3dlciBvZiAyLCB0byBwcmV2ZW50IGluY3JlYXNpbmcgaXQgZXhjZXNzaXZlbHkgaW4gdGlueVxuXHQgIC8vIGFtb3VudHMuXG5cdCAgaWYgKG4gPiBzdGF0ZS5oaWdoV2F0ZXJNYXJrKVxuXHQgICAgc3RhdGUuaGlnaFdhdGVyTWFyayA9IHJvdW5kVXBUb05leHRQb3dlck9mMihuKTtcblx0XG5cdCAgLy8gZG9uJ3QgaGF2ZSB0aGF0IG11Y2guICByZXR1cm4gbnVsbCwgdW5sZXNzIHdlJ3ZlIGVuZGVkLlxuXHQgIGlmIChuID4gc3RhdGUubGVuZ3RoKSB7XG5cdCAgICBpZiAoIXN0YXRlLmVuZGVkKSB7XG5cdCAgICAgIHN0YXRlLm5lZWRSZWFkYWJsZSA9IHRydWU7XG5cdCAgICAgIHJldHVybiAwO1xuXHQgICAgfSBlbHNlXG5cdCAgICAgIHJldHVybiBzdGF0ZS5sZW5ndGg7XG5cdCAgfVxuXHRcblx0ICByZXR1cm4gbjtcblx0fVxuXHRcblx0Ly8geW91IGNhbiBvdmVycmlkZSBlaXRoZXIgdGhpcyBtZXRob2QsIG9yIHRoZSBhc3luYyBfcmVhZChuKSBiZWxvdy5cblx0UmVhZGFibGUucHJvdG90eXBlLnJlYWQgPSBmdW5jdGlvbihuKSB7XG5cdCAgZGVidWcoJ3JlYWQnLCBuKTtcblx0ICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuXHQgIHZhciBuT3JpZyA9IG47XG5cdFxuXHQgIGlmICghdXRpbC5pc051bWJlcihuKSB8fCBuID4gMClcblx0ICAgIHN0YXRlLmVtaXR0ZWRSZWFkYWJsZSA9IGZhbHNlO1xuXHRcblx0ICAvLyBpZiB3ZSdyZSBkb2luZyByZWFkKDApIHRvIHRyaWdnZXIgYSByZWFkYWJsZSBldmVudCwgYnV0IHdlXG5cdCAgLy8gYWxyZWFkeSBoYXZlIGEgYnVuY2ggb2YgZGF0YSBpbiB0aGUgYnVmZmVyLCB0aGVuIGp1c3QgdHJpZ2dlclxuXHQgIC8vIHRoZSAncmVhZGFibGUnIGV2ZW50IGFuZCBtb3ZlIG9uLlxuXHQgIGlmIChuID09PSAwICYmXG5cdCAgICAgIHN0YXRlLm5lZWRSZWFkYWJsZSAmJlxuXHQgICAgICAoc3RhdGUubGVuZ3RoID49IHN0YXRlLmhpZ2hXYXRlck1hcmsgfHwgc3RhdGUuZW5kZWQpKSB7XG5cdCAgICBkZWJ1ZygncmVhZDogZW1pdFJlYWRhYmxlJywgc3RhdGUubGVuZ3RoLCBzdGF0ZS5lbmRlZCk7XG5cdCAgICBpZiAoc3RhdGUubGVuZ3RoID09PSAwICYmIHN0YXRlLmVuZGVkKVxuXHQgICAgICBlbmRSZWFkYWJsZSh0aGlzKTtcblx0ICAgIGVsc2Vcblx0ICAgICAgZW1pdFJlYWRhYmxlKHRoaXMpO1xuXHQgICAgcmV0dXJuIG51bGw7XG5cdCAgfVxuXHRcblx0ICBuID0gaG93TXVjaFRvUmVhZChuLCBzdGF0ZSk7XG5cdFxuXHQgIC8vIGlmIHdlJ3ZlIGVuZGVkLCBhbmQgd2UncmUgbm93IGNsZWFyLCB0aGVuIGZpbmlzaCBpdCB1cC5cblx0ICBpZiAobiA9PT0gMCAmJiBzdGF0ZS5lbmRlZCkge1xuXHQgICAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMClcblx0ICAgICAgZW5kUmVhZGFibGUodGhpcyk7XG5cdCAgICByZXR1cm4gbnVsbDtcblx0ICB9XG5cdFxuXHQgIC8vIEFsbCB0aGUgYWN0dWFsIGNodW5rIGdlbmVyYXRpb24gbG9naWMgbmVlZHMgdG8gYmVcblx0ICAvLyAqYmVsb3cqIHRoZSBjYWxsIHRvIF9yZWFkLiAgVGhlIHJlYXNvbiBpcyB0aGF0IGluIGNlcnRhaW5cblx0ICAvLyBzeW50aGV0aWMgc3RyZWFtIGNhc2VzLCBzdWNoIGFzIHBhc3N0aHJvdWdoIHN0cmVhbXMsIF9yZWFkXG5cdCAgLy8gbWF5IGJlIGEgY29tcGxldGVseSBzeW5jaHJvbm91cyBvcGVyYXRpb24gd2hpY2ggbWF5IGNoYW5nZVxuXHQgIC8vIHRoZSBzdGF0ZSBvZiB0aGUgcmVhZCBidWZmZXIsIHByb3ZpZGluZyBlbm91Z2ggZGF0YSB3aGVuXG5cdCAgLy8gYmVmb3JlIHRoZXJlIHdhcyAqbm90KiBlbm91Z2guXG5cdCAgLy9cblx0ICAvLyBTbywgdGhlIHN0ZXBzIGFyZTpcblx0ICAvLyAxLiBGaWd1cmUgb3V0IHdoYXQgdGhlIHN0YXRlIG9mIHRoaW5ncyB3aWxsIGJlIGFmdGVyIHdlIGRvXG5cdCAgLy8gYSByZWFkIGZyb20gdGhlIGJ1ZmZlci5cblx0ICAvL1xuXHQgIC8vIDIuIElmIHRoYXQgcmVzdWx0aW5nIHN0YXRlIHdpbGwgdHJpZ2dlciBhIF9yZWFkLCB0aGVuIGNhbGwgX3JlYWQuXG5cdCAgLy8gTm90ZSB0aGF0IHRoaXMgbWF5IGJlIGFzeW5jaHJvbm91cywgb3Igc3luY2hyb25vdXMuICBZZXMsIGl0IGlzXG5cdCAgLy8gZGVlcGx5IHVnbHkgdG8gd3JpdGUgQVBJcyB0aGlzIHdheSwgYnV0IHRoYXQgc3RpbGwgZG9lc24ndCBtZWFuXG5cdCAgLy8gdGhhdCB0aGUgUmVhZGFibGUgY2xhc3Mgc2hvdWxkIGJlaGF2ZSBpbXByb3Blcmx5LCBhcyBzdHJlYW1zIGFyZVxuXHQgIC8vIGRlc2lnbmVkIHRvIGJlIHN5bmMvYXN5bmMgYWdub3N0aWMuXG5cdCAgLy8gVGFrZSBub3RlIGlmIHRoZSBfcmVhZCBjYWxsIGlzIHN5bmMgb3IgYXN5bmMgKGllLCBpZiB0aGUgcmVhZCBjYWxsXG5cdCAgLy8gaGFzIHJldHVybmVkIHlldCksIHNvIHRoYXQgd2Uga25vdyB3aGV0aGVyIG9yIG5vdCBpdCdzIHNhZmUgdG8gZW1pdFxuXHQgIC8vICdyZWFkYWJsZScgZXRjLlxuXHQgIC8vXG5cdCAgLy8gMy4gQWN0dWFsbHkgcHVsbCB0aGUgcmVxdWVzdGVkIGNodW5rcyBvdXQgb2YgdGhlIGJ1ZmZlciBhbmQgcmV0dXJuLlxuXHRcblx0ICAvLyBpZiB3ZSBuZWVkIGEgcmVhZGFibGUgZXZlbnQsIHRoZW4gd2UgbmVlZCB0byBkbyBzb21lIHJlYWRpbmcuXG5cdCAgdmFyIGRvUmVhZCA9IHN0YXRlLm5lZWRSZWFkYWJsZTtcblx0ICBkZWJ1ZygnbmVlZCByZWFkYWJsZScsIGRvUmVhZCk7XG5cdFxuXHQgIC8vIGlmIHdlIGN1cnJlbnRseSBoYXZlIGxlc3MgdGhhbiB0aGUgaGlnaFdhdGVyTWFyaywgdGhlbiBhbHNvIHJlYWQgc29tZVxuXHQgIGlmIChzdGF0ZS5sZW5ndGggPT09IDAgfHwgc3RhdGUubGVuZ3RoIC0gbiA8IHN0YXRlLmhpZ2hXYXRlck1hcmspIHtcblx0ICAgIGRvUmVhZCA9IHRydWU7XG5cdCAgICBkZWJ1ZygnbGVuZ3RoIGxlc3MgdGhhbiB3YXRlcm1hcmsnLCBkb1JlYWQpO1xuXHQgIH1cblx0XG5cdCAgLy8gaG93ZXZlciwgaWYgd2UndmUgZW5kZWQsIHRoZW4gdGhlcmUncyBubyBwb2ludCwgYW5kIGlmIHdlJ3JlIGFscmVhZHlcblx0ICAvLyByZWFkaW5nLCB0aGVuIGl0J3MgdW5uZWNlc3NhcnkuXG5cdCAgaWYgKHN0YXRlLmVuZGVkIHx8IHN0YXRlLnJlYWRpbmcpIHtcblx0ICAgIGRvUmVhZCA9IGZhbHNlO1xuXHQgICAgZGVidWcoJ3JlYWRpbmcgb3IgZW5kZWQnLCBkb1JlYWQpO1xuXHQgIH1cblx0XG5cdCAgaWYgKGRvUmVhZCkge1xuXHQgICAgZGVidWcoJ2RvIHJlYWQnKTtcblx0ICAgIHN0YXRlLnJlYWRpbmcgPSB0cnVlO1xuXHQgICAgc3RhdGUuc3luYyA9IHRydWU7XG5cdCAgICAvLyBpZiB0aGUgbGVuZ3RoIGlzIGN1cnJlbnRseSB6ZXJvLCB0aGVuIHdlICpuZWVkKiBhIHJlYWRhYmxlIGV2ZW50LlxuXHQgICAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMClcblx0ICAgICAgc3RhdGUubmVlZFJlYWRhYmxlID0gdHJ1ZTtcblx0ICAgIC8vIGNhbGwgaW50ZXJuYWwgcmVhZCBtZXRob2Rcblx0ICAgIHRoaXMuX3JlYWQoc3RhdGUuaGlnaFdhdGVyTWFyayk7XG5cdCAgICBzdGF0ZS5zeW5jID0gZmFsc2U7XG5cdCAgfVxuXHRcblx0ICAvLyBJZiBfcmVhZCBwdXNoZWQgZGF0YSBzeW5jaHJvbm91c2x5LCB0aGVuIGByZWFkaW5nYCB3aWxsIGJlIGZhbHNlLFxuXHQgIC8vIGFuZCB3ZSBuZWVkIHRvIHJlLWV2YWx1YXRlIGhvdyBtdWNoIGRhdGEgd2UgY2FuIHJldHVybiB0byB0aGUgdXNlci5cblx0ICBpZiAoZG9SZWFkICYmICFzdGF0ZS5yZWFkaW5nKVxuXHQgICAgbiA9IGhvd011Y2hUb1JlYWQobk9yaWcsIHN0YXRlKTtcblx0XG5cdCAgdmFyIHJldDtcblx0ICBpZiAobiA+IDApXG5cdCAgICByZXQgPSBmcm9tTGlzdChuLCBzdGF0ZSk7XG5cdCAgZWxzZVxuXHQgICAgcmV0ID0gbnVsbDtcblx0XG5cdCAgaWYgKHV0aWwuaXNOdWxsKHJldCkpIHtcblx0ICAgIHN0YXRlLm5lZWRSZWFkYWJsZSA9IHRydWU7XG5cdCAgICBuID0gMDtcblx0ICB9XG5cdFxuXHQgIHN0YXRlLmxlbmd0aCAtPSBuO1xuXHRcblx0ICAvLyBJZiB3ZSBoYXZlIG5vdGhpbmcgaW4gdGhlIGJ1ZmZlciwgdGhlbiB3ZSB3YW50IHRvIGtub3dcblx0ICAvLyBhcyBzb29uIGFzIHdlICpkbyogZ2V0IHNvbWV0aGluZyBpbnRvIHRoZSBidWZmZXIuXG5cdCAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCAmJiAhc3RhdGUuZW5kZWQpXG5cdCAgICBzdGF0ZS5uZWVkUmVhZGFibGUgPSB0cnVlO1xuXHRcblx0ICAvLyBJZiB3ZSB0cmllZCB0byByZWFkKCkgcGFzdCB0aGUgRU9GLCB0aGVuIGVtaXQgZW5kIG9uIHRoZSBuZXh0IHRpY2suXG5cdCAgaWYgKG5PcmlnICE9PSBuICYmIHN0YXRlLmVuZGVkICYmIHN0YXRlLmxlbmd0aCA9PT0gMClcblx0ICAgIGVuZFJlYWRhYmxlKHRoaXMpO1xuXHRcblx0ICBpZiAoIXV0aWwuaXNOdWxsKHJldCkpXG5cdCAgICB0aGlzLmVtaXQoJ2RhdGEnLCByZXQpO1xuXHRcblx0ICByZXR1cm4gcmV0O1xuXHR9O1xuXHRcblx0ZnVuY3Rpb24gY2h1bmtJbnZhbGlkKHN0YXRlLCBjaHVuaykge1xuXHQgIHZhciBlciA9IG51bGw7XG5cdCAgaWYgKCF1dGlsLmlzQnVmZmVyKGNodW5rKSAmJlxuXHQgICAgICAhdXRpbC5pc1N0cmluZyhjaHVuaykgJiZcblx0ICAgICAgIXV0aWwuaXNOdWxsT3JVbmRlZmluZWQoY2h1bmspICYmXG5cdCAgICAgICFzdGF0ZS5vYmplY3RNb2RlKSB7XG5cdCAgICBlciA9IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgbm9uLXN0cmluZy9idWZmZXIgY2h1bmsnKTtcblx0ICB9XG5cdCAgcmV0dXJuIGVyO1xuXHR9XG5cdFxuXHRcblx0ZnVuY3Rpb24gb25Fb2ZDaHVuayhzdHJlYW0sIHN0YXRlKSB7XG5cdCAgaWYgKHN0YXRlLmRlY29kZXIgJiYgIXN0YXRlLmVuZGVkKSB7XG5cdCAgICB2YXIgY2h1bmsgPSBzdGF0ZS5kZWNvZGVyLmVuZCgpO1xuXHQgICAgaWYgKGNodW5rICYmIGNodW5rLmxlbmd0aCkge1xuXHQgICAgICBzdGF0ZS5idWZmZXIucHVzaChjaHVuayk7XG5cdCAgICAgIHN0YXRlLmxlbmd0aCArPSBzdGF0ZS5vYmplY3RNb2RlID8gMSA6IGNodW5rLmxlbmd0aDtcblx0ICAgIH1cblx0ICB9XG5cdCAgc3RhdGUuZW5kZWQgPSB0cnVlO1xuXHRcblx0ICAvLyBlbWl0ICdyZWFkYWJsZScgbm93IHRvIG1ha2Ugc3VyZSBpdCBnZXRzIHBpY2tlZCB1cC5cblx0ICBlbWl0UmVhZGFibGUoc3RyZWFtKTtcblx0fVxuXHRcblx0Ly8gRG9uJ3QgZW1pdCByZWFkYWJsZSByaWdodCBhd2F5IGluIHN5bmMgbW9kZSwgYmVjYXVzZSB0aGlzIGNhbiB0cmlnZ2VyXG5cdC8vIGFub3RoZXIgcmVhZCgpIGNhbGwgPT4gc3RhY2sgb3ZlcmZsb3cuICBUaGlzIHdheSwgaXQgbWlnaHQgdHJpZ2dlclxuXHQvLyBhIG5leHRUaWNrIHJlY3Vyc2lvbiB3YXJuaW5nLCBidXQgdGhhdCdzIG5vdCBzbyBiYWQuXG5cdGZ1bmN0aW9uIGVtaXRSZWFkYWJsZShzdHJlYW0pIHtcblx0ICB2YXIgc3RhdGUgPSBzdHJlYW0uX3JlYWRhYmxlU3RhdGU7XG5cdCAgc3RhdGUubmVlZFJlYWRhYmxlID0gZmFsc2U7XG5cdCAgaWYgKCFzdGF0ZS5lbWl0dGVkUmVhZGFibGUpIHtcblx0ICAgIGRlYnVnKCdlbWl0UmVhZGFibGUnLCBzdGF0ZS5mbG93aW5nKTtcblx0ICAgIHN0YXRlLmVtaXR0ZWRSZWFkYWJsZSA9IHRydWU7XG5cdCAgICBpZiAoc3RhdGUuc3luYylcblx0ICAgICAgcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbigpIHtcblx0ICAgICAgICBlbWl0UmVhZGFibGVfKHN0cmVhbSk7XG5cdCAgICAgIH0pO1xuXHQgICAgZWxzZVxuXHQgICAgICBlbWl0UmVhZGFibGVfKHN0cmVhbSk7XG5cdCAgfVxuXHR9XG5cdFxuXHRmdW5jdGlvbiBlbWl0UmVhZGFibGVfKHN0cmVhbSkge1xuXHQgIGRlYnVnKCdlbWl0IHJlYWRhYmxlJyk7XG5cdCAgc3RyZWFtLmVtaXQoJ3JlYWRhYmxlJyk7XG5cdCAgZmxvdyhzdHJlYW0pO1xuXHR9XG5cdFxuXHRcblx0Ly8gYXQgdGhpcyBwb2ludCwgdGhlIHVzZXIgaGFzIHByZXN1bWFibHkgc2VlbiB0aGUgJ3JlYWRhYmxlJyBldmVudCxcblx0Ly8gYW5kIGNhbGxlZCByZWFkKCkgdG8gY29uc3VtZSBzb21lIGRhdGEuICB0aGF0IG1heSBoYXZlIHRyaWdnZXJlZFxuXHQvLyBpbiB0dXJuIGFub3RoZXIgX3JlYWQobikgY2FsbCwgaW4gd2hpY2ggY2FzZSByZWFkaW5nID0gdHJ1ZSBpZlxuXHQvLyBpdCdzIGluIHByb2dyZXNzLlxuXHQvLyBIb3dldmVyLCBpZiB3ZSdyZSBub3QgZW5kZWQsIG9yIHJlYWRpbmcsIGFuZCB0aGUgbGVuZ3RoIDwgaHdtLFxuXHQvLyB0aGVuIGdvIGFoZWFkIGFuZCB0cnkgdG8gcmVhZCBzb21lIG1vcmUgcHJlZW1wdGl2ZWx5LlxuXHRmdW5jdGlvbiBtYXliZVJlYWRNb3JlKHN0cmVhbSwgc3RhdGUpIHtcblx0ICBpZiAoIXN0YXRlLnJlYWRpbmdNb3JlKSB7XG5cdCAgICBzdGF0ZS5yZWFkaW5nTW9yZSA9IHRydWU7XG5cdCAgICBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uKCkge1xuXHQgICAgICBtYXliZVJlYWRNb3JlXyhzdHJlYW0sIHN0YXRlKTtcblx0ICAgIH0pO1xuXHQgIH1cblx0fVxuXHRcblx0ZnVuY3Rpb24gbWF5YmVSZWFkTW9yZV8oc3RyZWFtLCBzdGF0ZSkge1xuXHQgIHZhciBsZW4gPSBzdGF0ZS5sZW5ndGg7XG5cdCAgd2hpbGUgKCFzdGF0ZS5yZWFkaW5nICYmICFzdGF0ZS5mbG93aW5nICYmICFzdGF0ZS5lbmRlZCAmJlxuXHQgICAgICAgICBzdGF0ZS5sZW5ndGggPCBzdGF0ZS5oaWdoV2F0ZXJNYXJrKSB7XG5cdCAgICBkZWJ1ZygnbWF5YmVSZWFkTW9yZSByZWFkIDAnKTtcblx0ICAgIHN0cmVhbS5yZWFkKDApO1xuXHQgICAgaWYgKGxlbiA9PT0gc3RhdGUubGVuZ3RoKVxuXHQgICAgICAvLyBkaWRuJ3QgZ2V0IGFueSBkYXRhLCBzdG9wIHNwaW5uaW5nLlxuXHQgICAgICBicmVhaztcblx0ICAgIGVsc2Vcblx0ICAgICAgbGVuID0gc3RhdGUubGVuZ3RoO1xuXHQgIH1cblx0ICBzdGF0ZS5yZWFkaW5nTW9yZSA9IGZhbHNlO1xuXHR9XG5cdFxuXHQvLyBhYnN0cmFjdCBtZXRob2QuICB0byBiZSBvdmVycmlkZGVuIGluIHNwZWNpZmljIGltcGxlbWVudGF0aW9uIGNsYXNzZXMuXG5cdC8vIGNhbGwgY2IoZXIsIGRhdGEpIHdoZXJlIGRhdGEgaXMgPD0gbiBpbiBsZW5ndGguXG5cdC8vIGZvciB2aXJ0dWFsIChub24tc3RyaW5nLCBub24tYnVmZmVyKSBzdHJlYW1zLCBcImxlbmd0aFwiIGlzIHNvbWV3aGF0XG5cdC8vIGFyYml0cmFyeSwgYW5kIHBlcmhhcHMgbm90IHZlcnkgbWVhbmluZ2Z1bC5cblx0UmVhZGFibGUucHJvdG90eXBlLl9yZWFkID0gZnVuY3Rpb24obikge1xuXHQgIHRoaXMuZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IoJ25vdCBpbXBsZW1lbnRlZCcpKTtcblx0fTtcblx0XG5cdFJlYWRhYmxlLnByb3RvdHlwZS5waXBlID0gZnVuY3Rpb24oZGVzdCwgcGlwZU9wdHMpIHtcblx0ICB2YXIgc3JjID0gdGhpcztcblx0ICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuXHRcblx0ICBzd2l0Y2ggKHN0YXRlLnBpcGVzQ291bnQpIHtcblx0ICAgIGNhc2UgMDpcblx0ICAgICAgc3RhdGUucGlwZXMgPSBkZXN0O1xuXHQgICAgICBicmVhaztcblx0ICAgIGNhc2UgMTpcblx0ICAgICAgc3RhdGUucGlwZXMgPSBbc3RhdGUucGlwZXMsIGRlc3RdO1xuXHQgICAgICBicmVhaztcblx0ICAgIGRlZmF1bHQ6XG5cdCAgICAgIHN0YXRlLnBpcGVzLnB1c2goZGVzdCk7XG5cdCAgICAgIGJyZWFrO1xuXHQgIH1cblx0ICBzdGF0ZS5waXBlc0NvdW50ICs9IDE7XG5cdCAgZGVidWcoJ3BpcGUgY291bnQ9JWQgb3B0cz0laicsIHN0YXRlLnBpcGVzQ291bnQsIHBpcGVPcHRzKTtcblx0XG5cdCAgdmFyIGRvRW5kID0gKCFwaXBlT3B0cyB8fCBwaXBlT3B0cy5lbmQgIT09IGZhbHNlKSAmJlxuXHQgICAgICAgICAgICAgIGRlc3QgIT09IHByb2Nlc3Muc3Rkb3V0ICYmXG5cdCAgICAgICAgICAgICAgZGVzdCAhPT0gcHJvY2Vzcy5zdGRlcnI7XG5cdFxuXHQgIHZhciBlbmRGbiA9IGRvRW5kID8gb25lbmQgOiBjbGVhbnVwO1xuXHQgIGlmIChzdGF0ZS5lbmRFbWl0dGVkKVxuXHQgICAgcHJvY2Vzcy5uZXh0VGljayhlbmRGbik7XG5cdCAgZWxzZVxuXHQgICAgc3JjLm9uY2UoJ2VuZCcsIGVuZEZuKTtcblx0XG5cdCAgZGVzdC5vbigndW5waXBlJywgb251bnBpcGUpO1xuXHQgIGZ1bmN0aW9uIG9udW5waXBlKHJlYWRhYmxlKSB7XG5cdCAgICBkZWJ1Zygnb251bnBpcGUnKTtcblx0ICAgIGlmIChyZWFkYWJsZSA9PT0gc3JjKSB7XG5cdCAgICAgIGNsZWFudXAoKTtcblx0ICAgIH1cblx0ICB9XG5cdFxuXHQgIGZ1bmN0aW9uIG9uZW5kKCkge1xuXHQgICAgZGVidWcoJ29uZW5kJyk7XG5cdCAgICBkZXN0LmVuZCgpO1xuXHQgIH1cblx0XG5cdCAgLy8gd2hlbiB0aGUgZGVzdCBkcmFpbnMsIGl0IHJlZHVjZXMgdGhlIGF3YWl0RHJhaW4gY291bnRlclxuXHQgIC8vIG9uIHRoZSBzb3VyY2UuICBUaGlzIHdvdWxkIGJlIG1vcmUgZWxlZ2FudCB3aXRoIGEgLm9uY2UoKVxuXHQgIC8vIGhhbmRsZXIgaW4gZmxvdygpLCBidXQgYWRkaW5nIGFuZCByZW1vdmluZyByZXBlYXRlZGx5IGlzXG5cdCAgLy8gdG9vIHNsb3cuXG5cdCAgdmFyIG9uZHJhaW4gPSBwaXBlT25EcmFpbihzcmMpO1xuXHQgIGRlc3Qub24oJ2RyYWluJywgb25kcmFpbik7XG5cdFxuXHQgIGZ1bmN0aW9uIGNsZWFudXAoKSB7XG5cdCAgICBkZWJ1ZygnY2xlYW51cCcpO1xuXHQgICAgLy8gY2xlYW51cCBldmVudCBoYW5kbGVycyBvbmNlIHRoZSBwaXBlIGlzIGJyb2tlblxuXHQgICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignY2xvc2UnLCBvbmNsb3NlKTtcblx0ICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2ZpbmlzaCcsIG9uZmluaXNoKTtcblx0ICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2RyYWluJywgb25kcmFpbik7XG5cdCAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIG9uZXJyb3IpO1xuXHQgICAgZGVzdC5yZW1vdmVMaXN0ZW5lcigndW5waXBlJywgb251bnBpcGUpO1xuXHQgICAgc3JjLnJlbW92ZUxpc3RlbmVyKCdlbmQnLCBvbmVuZCk7XG5cdCAgICBzcmMucmVtb3ZlTGlzdGVuZXIoJ2VuZCcsIGNsZWFudXApO1xuXHQgICAgc3JjLnJlbW92ZUxpc3RlbmVyKCdkYXRhJywgb25kYXRhKTtcblx0XG5cdCAgICAvLyBpZiB0aGUgcmVhZGVyIGlzIHdhaXRpbmcgZm9yIGEgZHJhaW4gZXZlbnQgZnJvbSB0aGlzXG5cdCAgICAvLyBzcGVjaWZpYyB3cml0ZXIsIHRoZW4gaXQgd291bGQgY2F1c2UgaXQgdG8gbmV2ZXIgc3RhcnRcblx0ICAgIC8vIGZsb3dpbmcgYWdhaW4uXG5cdCAgICAvLyBTbywgaWYgdGhpcyBpcyBhd2FpdGluZyBhIGRyYWluLCB0aGVuIHdlIGp1c3QgY2FsbCBpdCBub3cuXG5cdCAgICAvLyBJZiB3ZSBkb24ndCBrbm93LCB0aGVuIGFzc3VtZSB0aGF0IHdlIGFyZSB3YWl0aW5nIGZvciBvbmUuXG5cdCAgICBpZiAoc3RhdGUuYXdhaXREcmFpbiAmJlxuXHQgICAgICAgICghZGVzdC5fd3JpdGFibGVTdGF0ZSB8fCBkZXN0Ll93cml0YWJsZVN0YXRlLm5lZWREcmFpbikpXG5cdCAgICAgIG9uZHJhaW4oKTtcblx0ICB9XG5cdFxuXHQgIHNyYy5vbignZGF0YScsIG9uZGF0YSk7XG5cdCAgZnVuY3Rpb24gb25kYXRhKGNodW5rKSB7XG5cdCAgICBkZWJ1Zygnb25kYXRhJyk7XG5cdCAgICB2YXIgcmV0ID0gZGVzdC53cml0ZShjaHVuayk7XG5cdCAgICBpZiAoZmFsc2UgPT09IHJldCkge1xuXHQgICAgICBkZWJ1ZygnZmFsc2Ugd3JpdGUgcmVzcG9uc2UsIHBhdXNlJyxcblx0ICAgICAgICAgICAgc3JjLl9yZWFkYWJsZVN0YXRlLmF3YWl0RHJhaW4pO1xuXHQgICAgICBzcmMuX3JlYWRhYmxlU3RhdGUuYXdhaXREcmFpbisrO1xuXHQgICAgICBzcmMucGF1c2UoKTtcblx0ICAgIH1cblx0ICB9XG5cdFxuXHQgIC8vIGlmIHRoZSBkZXN0IGhhcyBhbiBlcnJvciwgdGhlbiBzdG9wIHBpcGluZyBpbnRvIGl0LlxuXHQgIC8vIGhvd2V2ZXIsIGRvbid0IHN1cHByZXNzIHRoZSB0aHJvd2luZyBiZWhhdmlvciBmb3IgdGhpcy5cblx0ICBmdW5jdGlvbiBvbmVycm9yKGVyKSB7XG5cdCAgICBkZWJ1Zygnb25lcnJvcicsIGVyKTtcblx0ICAgIHVucGlwZSgpO1xuXHQgICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignZXJyb3InLCBvbmVycm9yKTtcblx0ICAgIGlmIChFRS5saXN0ZW5lckNvdW50KGRlc3QsICdlcnJvcicpID09PSAwKVxuXHQgICAgICBkZXN0LmVtaXQoJ2Vycm9yJywgZXIpO1xuXHQgIH1cblx0ICAvLyBUaGlzIGlzIGEgYnJ1dGFsbHkgdWdseSBoYWNrIHRvIG1ha2Ugc3VyZSB0aGF0IG91ciBlcnJvciBoYW5kbGVyXG5cdCAgLy8gaXMgYXR0YWNoZWQgYmVmb3JlIGFueSB1c2VybGFuZCBvbmVzLiAgTkVWRVIgRE8gVEhJUy5cblx0ICBpZiAoIWRlc3QuX2V2ZW50cyB8fCAhZGVzdC5fZXZlbnRzLmVycm9yKVxuXHQgICAgZGVzdC5vbignZXJyb3InLCBvbmVycm9yKTtcblx0ICBlbHNlIGlmIChpc0FycmF5KGRlc3QuX2V2ZW50cy5lcnJvcikpXG5cdCAgICBkZXN0Ll9ldmVudHMuZXJyb3IudW5zaGlmdChvbmVycm9yKTtcblx0ICBlbHNlXG5cdCAgICBkZXN0Ll9ldmVudHMuZXJyb3IgPSBbb25lcnJvciwgZGVzdC5fZXZlbnRzLmVycm9yXTtcblx0XG5cdFxuXHRcblx0ICAvLyBCb3RoIGNsb3NlIGFuZCBmaW5pc2ggc2hvdWxkIHRyaWdnZXIgdW5waXBlLCBidXQgb25seSBvbmNlLlxuXHQgIGZ1bmN0aW9uIG9uY2xvc2UoKSB7XG5cdCAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdmaW5pc2gnLCBvbmZpbmlzaCk7XG5cdCAgICB1bnBpcGUoKTtcblx0ICB9XG5cdCAgZGVzdC5vbmNlKCdjbG9zZScsIG9uY2xvc2UpO1xuXHQgIGZ1bmN0aW9uIG9uZmluaXNoKCkge1xuXHQgICAgZGVidWcoJ29uZmluaXNoJyk7XG5cdCAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdjbG9zZScsIG9uY2xvc2UpO1xuXHQgICAgdW5waXBlKCk7XG5cdCAgfVxuXHQgIGRlc3Qub25jZSgnZmluaXNoJywgb25maW5pc2gpO1xuXHRcblx0ICBmdW5jdGlvbiB1bnBpcGUoKSB7XG5cdCAgICBkZWJ1ZygndW5waXBlJyk7XG5cdCAgICBzcmMudW5waXBlKGRlc3QpO1xuXHQgIH1cblx0XG5cdCAgLy8gdGVsbCB0aGUgZGVzdCB0aGF0IGl0J3MgYmVpbmcgcGlwZWQgdG9cblx0ICBkZXN0LmVtaXQoJ3BpcGUnLCBzcmMpO1xuXHRcblx0ICAvLyBzdGFydCB0aGUgZmxvdyBpZiBpdCBoYXNuJ3QgYmVlbiBzdGFydGVkIGFscmVhZHkuXG5cdCAgaWYgKCFzdGF0ZS5mbG93aW5nKSB7XG5cdCAgICBkZWJ1ZygncGlwZSByZXN1bWUnKTtcblx0ICAgIHNyYy5yZXN1bWUoKTtcblx0ICB9XG5cdFxuXHQgIHJldHVybiBkZXN0O1xuXHR9O1xuXHRcblx0ZnVuY3Rpb24gcGlwZU9uRHJhaW4oc3JjKSB7XG5cdCAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuXHQgICAgdmFyIHN0YXRlID0gc3JjLl9yZWFkYWJsZVN0YXRlO1xuXHQgICAgZGVidWcoJ3BpcGVPbkRyYWluJywgc3RhdGUuYXdhaXREcmFpbik7XG5cdCAgICBpZiAoc3RhdGUuYXdhaXREcmFpbilcblx0ICAgICAgc3RhdGUuYXdhaXREcmFpbi0tO1xuXHQgICAgaWYgKHN0YXRlLmF3YWl0RHJhaW4gPT09IDAgJiYgRUUubGlzdGVuZXJDb3VudChzcmMsICdkYXRhJykpIHtcblx0ICAgICAgc3RhdGUuZmxvd2luZyA9IHRydWU7XG5cdCAgICAgIGZsb3coc3JjKTtcblx0ICAgIH1cblx0ICB9O1xuXHR9XG5cdFxuXHRcblx0UmVhZGFibGUucHJvdG90eXBlLnVucGlwZSA9IGZ1bmN0aW9uKGRlc3QpIHtcblx0ICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuXHRcblx0ICAvLyBpZiB3ZSdyZSBub3QgcGlwaW5nIGFueXdoZXJlLCB0aGVuIGRvIG5vdGhpbmcuXG5cdCAgaWYgKHN0YXRlLnBpcGVzQ291bnQgPT09IDApXG5cdCAgICByZXR1cm4gdGhpcztcblx0XG5cdCAgLy8ganVzdCBvbmUgZGVzdGluYXRpb24uICBtb3N0IGNvbW1vbiBjYXNlLlxuXHQgIGlmIChzdGF0ZS5waXBlc0NvdW50ID09PSAxKSB7XG5cdCAgICAvLyBwYXNzZWQgaW4gb25lLCBidXQgaXQncyBub3QgdGhlIHJpZ2h0IG9uZS5cblx0ICAgIGlmIChkZXN0ICYmIGRlc3QgIT09IHN0YXRlLnBpcGVzKVxuXHQgICAgICByZXR1cm4gdGhpcztcblx0XG5cdCAgICBpZiAoIWRlc3QpXG5cdCAgICAgIGRlc3QgPSBzdGF0ZS5waXBlcztcblx0XG5cdCAgICAvLyBnb3QgYSBtYXRjaC5cblx0ICAgIHN0YXRlLnBpcGVzID0gbnVsbDtcblx0ICAgIHN0YXRlLnBpcGVzQ291bnQgPSAwO1xuXHQgICAgc3RhdGUuZmxvd2luZyA9IGZhbHNlO1xuXHQgICAgaWYgKGRlc3QpXG5cdCAgICAgIGRlc3QuZW1pdCgndW5waXBlJywgdGhpcyk7XG5cdCAgICByZXR1cm4gdGhpcztcblx0ICB9XG5cdFxuXHQgIC8vIHNsb3cgY2FzZS4gbXVsdGlwbGUgcGlwZSBkZXN0aW5hdGlvbnMuXG5cdFxuXHQgIGlmICghZGVzdCkge1xuXHQgICAgLy8gcmVtb3ZlIGFsbC5cblx0ICAgIHZhciBkZXN0cyA9IHN0YXRlLnBpcGVzO1xuXHQgICAgdmFyIGxlbiA9IHN0YXRlLnBpcGVzQ291bnQ7XG5cdCAgICBzdGF0ZS5waXBlcyA9IG51bGw7XG5cdCAgICBzdGF0ZS5waXBlc0NvdW50ID0gMDtcblx0ICAgIHN0YXRlLmZsb3dpbmcgPSBmYWxzZTtcblx0XG5cdCAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKVxuXHQgICAgICBkZXN0c1tpXS5lbWl0KCd1bnBpcGUnLCB0aGlzKTtcblx0ICAgIHJldHVybiB0aGlzO1xuXHQgIH1cblx0XG5cdCAgLy8gdHJ5IHRvIGZpbmQgdGhlIHJpZ2h0IG9uZS5cblx0ICB2YXIgaSA9IGluZGV4T2Yoc3RhdGUucGlwZXMsIGRlc3QpO1xuXHQgIGlmIChpID09PSAtMSlcblx0ICAgIHJldHVybiB0aGlzO1xuXHRcblx0ICBzdGF0ZS5waXBlcy5zcGxpY2UoaSwgMSk7XG5cdCAgc3RhdGUucGlwZXNDb3VudCAtPSAxO1xuXHQgIGlmIChzdGF0ZS5waXBlc0NvdW50ID09PSAxKVxuXHQgICAgc3RhdGUucGlwZXMgPSBzdGF0ZS5waXBlc1swXTtcblx0XG5cdCAgZGVzdC5lbWl0KCd1bnBpcGUnLCB0aGlzKTtcblx0XG5cdCAgcmV0dXJuIHRoaXM7XG5cdH07XG5cdFxuXHQvLyBzZXQgdXAgZGF0YSBldmVudHMgaWYgdGhleSBhcmUgYXNrZWQgZm9yXG5cdC8vIEVuc3VyZSByZWFkYWJsZSBsaXN0ZW5lcnMgZXZlbnR1YWxseSBnZXQgc29tZXRoaW5nXG5cdFJlYWRhYmxlLnByb3RvdHlwZS5vbiA9IGZ1bmN0aW9uKGV2LCBmbikge1xuXHQgIHZhciByZXMgPSBTdHJlYW0ucHJvdG90eXBlLm9uLmNhbGwodGhpcywgZXYsIGZuKTtcblx0XG5cdCAgLy8gSWYgbGlzdGVuaW5nIHRvIGRhdGEsIGFuZCBpdCBoYXMgbm90IGV4cGxpY2l0bHkgYmVlbiBwYXVzZWQsXG5cdCAgLy8gdGhlbiBjYWxsIHJlc3VtZSB0byBzdGFydCB0aGUgZmxvdyBvZiBkYXRhIG9uIHRoZSBuZXh0IHRpY2suXG5cdCAgaWYgKGV2ID09PSAnZGF0YScgJiYgZmFsc2UgIT09IHRoaXMuX3JlYWRhYmxlU3RhdGUuZmxvd2luZykge1xuXHQgICAgdGhpcy5yZXN1bWUoKTtcblx0ICB9XG5cdFxuXHQgIGlmIChldiA9PT0gJ3JlYWRhYmxlJyAmJiB0aGlzLnJlYWRhYmxlKSB7XG5cdCAgICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuXHQgICAgaWYgKCFzdGF0ZS5yZWFkYWJsZUxpc3RlbmluZykge1xuXHQgICAgICBzdGF0ZS5yZWFkYWJsZUxpc3RlbmluZyA9IHRydWU7XG5cdCAgICAgIHN0YXRlLmVtaXR0ZWRSZWFkYWJsZSA9IGZhbHNlO1xuXHQgICAgICBzdGF0ZS5uZWVkUmVhZGFibGUgPSB0cnVlO1xuXHQgICAgICBpZiAoIXN0YXRlLnJlYWRpbmcpIHtcblx0ICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG5cdCAgICAgICAgcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbigpIHtcblx0ICAgICAgICAgIGRlYnVnKCdyZWFkYWJsZSBuZXh0dGljayByZWFkIDAnKTtcblx0ICAgICAgICAgIHNlbGYucmVhZCgwKTtcblx0ICAgICAgICB9KTtcblx0ICAgICAgfSBlbHNlIGlmIChzdGF0ZS5sZW5ndGgpIHtcblx0ICAgICAgICBlbWl0UmVhZGFibGUodGhpcywgc3RhdGUpO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgfVxuXHRcblx0ICByZXR1cm4gcmVzO1xuXHR9O1xuXHRSZWFkYWJsZS5wcm90b3R5cGUuYWRkTGlzdGVuZXIgPSBSZWFkYWJsZS5wcm90b3R5cGUub247XG5cdFxuXHQvLyBwYXVzZSgpIGFuZCByZXN1bWUoKSBhcmUgcmVtbmFudHMgb2YgdGhlIGxlZ2FjeSByZWFkYWJsZSBzdHJlYW0gQVBJXG5cdC8vIElmIHRoZSB1c2VyIHVzZXMgdGhlbSwgdGhlbiBzd2l0Y2ggaW50byBvbGQgbW9kZS5cblx0UmVhZGFibGUucHJvdG90eXBlLnJlc3VtZSA9IGZ1bmN0aW9uKCkge1xuXHQgIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG5cdCAgaWYgKCFzdGF0ZS5mbG93aW5nKSB7XG5cdCAgICBkZWJ1ZygncmVzdW1lJyk7XG5cdCAgICBzdGF0ZS5mbG93aW5nID0gdHJ1ZTtcblx0ICAgIGlmICghc3RhdGUucmVhZGluZykge1xuXHQgICAgICBkZWJ1ZygncmVzdW1lIHJlYWQgMCcpO1xuXHQgICAgICB0aGlzLnJlYWQoMCk7XG5cdCAgICB9XG5cdCAgICByZXN1bWUodGhpcywgc3RhdGUpO1xuXHQgIH1cblx0ICByZXR1cm4gdGhpcztcblx0fTtcblx0XG5cdGZ1bmN0aW9uIHJlc3VtZShzdHJlYW0sIHN0YXRlKSB7XG5cdCAgaWYgKCFzdGF0ZS5yZXN1bWVTY2hlZHVsZWQpIHtcblx0ICAgIHN0YXRlLnJlc3VtZVNjaGVkdWxlZCA9IHRydWU7XG5cdCAgICBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uKCkge1xuXHQgICAgICByZXN1bWVfKHN0cmVhbSwgc3RhdGUpO1xuXHQgICAgfSk7XG5cdCAgfVxuXHR9XG5cdFxuXHRmdW5jdGlvbiByZXN1bWVfKHN0cmVhbSwgc3RhdGUpIHtcblx0ICBzdGF0ZS5yZXN1bWVTY2hlZHVsZWQgPSBmYWxzZTtcblx0ICBzdHJlYW0uZW1pdCgncmVzdW1lJyk7XG5cdCAgZmxvdyhzdHJlYW0pO1xuXHQgIGlmIChzdGF0ZS5mbG93aW5nICYmICFzdGF0ZS5yZWFkaW5nKVxuXHQgICAgc3RyZWFtLnJlYWQoMCk7XG5cdH1cblx0XG5cdFJlYWRhYmxlLnByb3RvdHlwZS5wYXVzZSA9IGZ1bmN0aW9uKCkge1xuXHQgIGRlYnVnKCdjYWxsIHBhdXNlIGZsb3dpbmc9JWonLCB0aGlzLl9yZWFkYWJsZVN0YXRlLmZsb3dpbmcpO1xuXHQgIGlmIChmYWxzZSAhPT0gdGhpcy5fcmVhZGFibGVTdGF0ZS5mbG93aW5nKSB7XG5cdCAgICBkZWJ1ZygncGF1c2UnKTtcblx0ICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUuZmxvd2luZyA9IGZhbHNlO1xuXHQgICAgdGhpcy5lbWl0KCdwYXVzZScpO1xuXHQgIH1cblx0ICByZXR1cm4gdGhpcztcblx0fTtcblx0XG5cdGZ1bmN0aW9uIGZsb3coc3RyZWFtKSB7XG5cdCAgdmFyIHN0YXRlID0gc3RyZWFtLl9yZWFkYWJsZVN0YXRlO1xuXHQgIGRlYnVnKCdmbG93Jywgc3RhdGUuZmxvd2luZyk7XG5cdCAgaWYgKHN0YXRlLmZsb3dpbmcpIHtcblx0ICAgIGRvIHtcblx0ICAgICAgdmFyIGNodW5rID0gc3RyZWFtLnJlYWQoKTtcblx0ICAgIH0gd2hpbGUgKG51bGwgIT09IGNodW5rICYmIHN0YXRlLmZsb3dpbmcpO1xuXHQgIH1cblx0fVxuXHRcblx0Ly8gd3JhcCBhbiBvbGQtc3R5bGUgc3RyZWFtIGFzIHRoZSBhc3luYyBkYXRhIHNvdXJjZS5cblx0Ly8gVGhpcyBpcyAqbm90KiBwYXJ0IG9mIHRoZSByZWFkYWJsZSBzdHJlYW0gaW50ZXJmYWNlLlxuXHQvLyBJdCBpcyBhbiB1Z2x5IHVuZm9ydHVuYXRlIG1lc3Mgb2YgaGlzdG9yeS5cblx0UmVhZGFibGUucHJvdG90eXBlLndyYXAgPSBmdW5jdGlvbihzdHJlYW0pIHtcblx0ICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuXHQgIHZhciBwYXVzZWQgPSBmYWxzZTtcblx0XG5cdCAgdmFyIHNlbGYgPSB0aGlzO1xuXHQgIHN0cmVhbS5vbignZW5kJywgZnVuY3Rpb24oKSB7XG5cdCAgICBkZWJ1Zygnd3JhcHBlZCBlbmQnKTtcblx0ICAgIGlmIChzdGF0ZS5kZWNvZGVyICYmICFzdGF0ZS5lbmRlZCkge1xuXHQgICAgICB2YXIgY2h1bmsgPSBzdGF0ZS5kZWNvZGVyLmVuZCgpO1xuXHQgICAgICBpZiAoY2h1bmsgJiYgY2h1bmsubGVuZ3RoKVxuXHQgICAgICAgIHNlbGYucHVzaChjaHVuayk7XG5cdCAgICB9XG5cdFxuXHQgICAgc2VsZi5wdXNoKG51bGwpO1xuXHQgIH0pO1xuXHRcblx0ICBzdHJlYW0ub24oJ2RhdGEnLCBmdW5jdGlvbihjaHVuaykge1xuXHQgICAgZGVidWcoJ3dyYXBwZWQgZGF0YScpO1xuXHQgICAgaWYgKHN0YXRlLmRlY29kZXIpXG5cdCAgICAgIGNodW5rID0gc3RhdGUuZGVjb2Rlci53cml0ZShjaHVuayk7XG5cdCAgICBpZiAoIWNodW5rIHx8ICFzdGF0ZS5vYmplY3RNb2RlICYmICFjaHVuay5sZW5ndGgpXG5cdCAgICAgIHJldHVybjtcblx0XG5cdCAgICB2YXIgcmV0ID0gc2VsZi5wdXNoKGNodW5rKTtcblx0ICAgIGlmICghcmV0KSB7XG5cdCAgICAgIHBhdXNlZCA9IHRydWU7XG5cdCAgICAgIHN0cmVhbS5wYXVzZSgpO1xuXHQgICAgfVxuXHQgIH0pO1xuXHRcblx0ICAvLyBwcm94eSBhbGwgdGhlIG90aGVyIG1ldGhvZHMuXG5cdCAgLy8gaW1wb3J0YW50IHdoZW4gd3JhcHBpbmcgZmlsdGVycyBhbmQgZHVwbGV4ZXMuXG5cdCAgZm9yICh2YXIgaSBpbiBzdHJlYW0pIHtcblx0ICAgIGlmICh1dGlsLmlzRnVuY3Rpb24oc3RyZWFtW2ldKSAmJiB1dGlsLmlzVW5kZWZpbmVkKHRoaXNbaV0pKSB7XG5cdCAgICAgIHRoaXNbaV0gPSBmdW5jdGlvbihtZXRob2QpIHsgcmV0dXJuIGZ1bmN0aW9uKCkge1xuXHQgICAgICAgIHJldHVybiBzdHJlYW1bbWV0aG9kXS5hcHBseShzdHJlYW0sIGFyZ3VtZW50cyk7XG5cdCAgICAgIH19KGkpO1xuXHQgICAgfVxuXHQgIH1cblx0XG5cdCAgLy8gcHJveHkgY2VydGFpbiBpbXBvcnRhbnQgZXZlbnRzLlxuXHQgIHZhciBldmVudHMgPSBbJ2Vycm9yJywgJ2Nsb3NlJywgJ2Rlc3Ryb3knLCAncGF1c2UnLCAncmVzdW1lJ107XG5cdCAgZm9yRWFjaChldmVudHMsIGZ1bmN0aW9uKGV2KSB7XG5cdCAgICBzdHJlYW0ub24oZXYsIHNlbGYuZW1pdC5iaW5kKHNlbGYsIGV2KSk7XG5cdCAgfSk7XG5cdFxuXHQgIC8vIHdoZW4gd2UgdHJ5IHRvIGNvbnN1bWUgc29tZSBtb3JlIGJ5dGVzLCBzaW1wbHkgdW5wYXVzZSB0aGVcblx0ICAvLyB1bmRlcmx5aW5nIHN0cmVhbS5cblx0ICBzZWxmLl9yZWFkID0gZnVuY3Rpb24obikge1xuXHQgICAgZGVidWcoJ3dyYXBwZWQgX3JlYWQnLCBuKTtcblx0ICAgIGlmIChwYXVzZWQpIHtcblx0ICAgICAgcGF1c2VkID0gZmFsc2U7XG5cdCAgICAgIHN0cmVhbS5yZXN1bWUoKTtcblx0ICAgIH1cblx0ICB9O1xuXHRcblx0ICByZXR1cm4gc2VsZjtcblx0fTtcblx0XG5cdFxuXHRcblx0Ly8gZXhwb3NlZCBmb3IgdGVzdGluZyBwdXJwb3NlcyBvbmx5LlxuXHRSZWFkYWJsZS5fZnJvbUxpc3QgPSBmcm9tTGlzdDtcblx0XG5cdC8vIFBsdWNrIG9mZiBuIGJ5dGVzIGZyb20gYW4gYXJyYXkgb2YgYnVmZmVycy5cblx0Ly8gTGVuZ3RoIGlzIHRoZSBjb21iaW5lZCBsZW5ndGhzIG9mIGFsbCB0aGUgYnVmZmVycyBpbiB0aGUgbGlzdC5cblx0ZnVuY3Rpb24gZnJvbUxpc3Qobiwgc3RhdGUpIHtcblx0ICB2YXIgbGlzdCA9IHN0YXRlLmJ1ZmZlcjtcblx0ICB2YXIgbGVuZ3RoID0gc3RhdGUubGVuZ3RoO1xuXHQgIHZhciBzdHJpbmdNb2RlID0gISFzdGF0ZS5kZWNvZGVyO1xuXHQgIHZhciBvYmplY3RNb2RlID0gISFzdGF0ZS5vYmplY3RNb2RlO1xuXHQgIHZhciByZXQ7XG5cdFxuXHQgIC8vIG5vdGhpbmcgaW4gdGhlIGxpc3QsIGRlZmluaXRlbHkgZW1wdHkuXG5cdCAgaWYgKGxpc3QubGVuZ3RoID09PSAwKVxuXHQgICAgcmV0dXJuIG51bGw7XG5cdFxuXHQgIGlmIChsZW5ndGggPT09IDApXG5cdCAgICByZXQgPSBudWxsO1xuXHQgIGVsc2UgaWYgKG9iamVjdE1vZGUpXG5cdCAgICByZXQgPSBsaXN0LnNoaWZ0KCk7XG5cdCAgZWxzZSBpZiAoIW4gfHwgbiA+PSBsZW5ndGgpIHtcblx0ICAgIC8vIHJlYWQgaXQgYWxsLCB0cnVuY2F0ZSB0aGUgYXJyYXkuXG5cdCAgICBpZiAoc3RyaW5nTW9kZSlcblx0ICAgICAgcmV0ID0gbGlzdC5qb2luKCcnKTtcblx0ICAgIGVsc2Vcblx0ICAgICAgcmV0ID0gQnVmZmVyLmNvbmNhdChsaXN0LCBsZW5ndGgpO1xuXHQgICAgbGlzdC5sZW5ndGggPSAwO1xuXHQgIH0gZWxzZSB7XG5cdCAgICAvLyByZWFkIGp1c3Qgc29tZSBvZiBpdC5cblx0ICAgIGlmIChuIDwgbGlzdFswXS5sZW5ndGgpIHtcblx0ICAgICAgLy8ganVzdCB0YWtlIGEgcGFydCBvZiB0aGUgZmlyc3QgbGlzdCBpdGVtLlxuXHQgICAgICAvLyBzbGljZSBpcyB0aGUgc2FtZSBmb3IgYnVmZmVycyBhbmQgc3RyaW5ncy5cblx0ICAgICAgdmFyIGJ1ZiA9IGxpc3RbMF07XG5cdCAgICAgIHJldCA9IGJ1Zi5zbGljZSgwLCBuKTtcblx0ICAgICAgbGlzdFswXSA9IGJ1Zi5zbGljZShuKTtcblx0ICAgIH0gZWxzZSBpZiAobiA9PT0gbGlzdFswXS5sZW5ndGgpIHtcblx0ICAgICAgLy8gZmlyc3QgbGlzdCBpcyBhIHBlcmZlY3QgbWF0Y2hcblx0ICAgICAgcmV0ID0gbGlzdC5zaGlmdCgpO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgLy8gY29tcGxleCBjYXNlLlxuXHQgICAgICAvLyB3ZSBoYXZlIGVub3VnaCB0byBjb3ZlciBpdCwgYnV0IGl0IHNwYW5zIHBhc3QgdGhlIGZpcnN0IGJ1ZmZlci5cblx0ICAgICAgaWYgKHN0cmluZ01vZGUpXG5cdCAgICAgICAgcmV0ID0gJyc7XG5cdCAgICAgIGVsc2Vcblx0ICAgICAgICByZXQgPSBuZXcgQnVmZmVyKG4pO1xuXHRcblx0ICAgICAgdmFyIGMgPSAwO1xuXHQgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGxpc3QubGVuZ3RoOyBpIDwgbCAmJiBjIDwgbjsgaSsrKSB7XG5cdCAgICAgICAgdmFyIGJ1ZiA9IGxpc3RbMF07XG5cdCAgICAgICAgdmFyIGNweSA9IE1hdGgubWluKG4gLSBjLCBidWYubGVuZ3RoKTtcblx0XG5cdCAgICAgICAgaWYgKHN0cmluZ01vZGUpXG5cdCAgICAgICAgICByZXQgKz0gYnVmLnNsaWNlKDAsIGNweSk7XG5cdCAgICAgICAgZWxzZVxuXHQgICAgICAgICAgYnVmLmNvcHkocmV0LCBjLCAwLCBjcHkpO1xuXHRcblx0ICAgICAgICBpZiAoY3B5IDwgYnVmLmxlbmd0aClcblx0ICAgICAgICAgIGxpc3RbMF0gPSBidWYuc2xpY2UoY3B5KTtcblx0ICAgICAgICBlbHNlXG5cdCAgICAgICAgICBsaXN0LnNoaWZ0KCk7XG5cdFxuXHQgICAgICAgIGMgKz0gY3B5O1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgfVxuXHRcblx0ICByZXR1cm4gcmV0O1xuXHR9XG5cdFxuXHRmdW5jdGlvbiBlbmRSZWFkYWJsZShzdHJlYW0pIHtcblx0ICB2YXIgc3RhdGUgPSBzdHJlYW0uX3JlYWRhYmxlU3RhdGU7XG5cdFxuXHQgIC8vIElmIHdlIGdldCBoZXJlIGJlZm9yZSBjb25zdW1pbmcgYWxsIHRoZSBieXRlcywgdGhlbiB0aGF0IGlzIGFcblx0ICAvLyBidWcgaW4gbm9kZS4gIFNob3VsZCBuZXZlciBoYXBwZW4uXG5cdCAgaWYgKHN0YXRlLmxlbmd0aCA+IDApXG5cdCAgICB0aHJvdyBuZXcgRXJyb3IoJ2VuZFJlYWRhYmxlIGNhbGxlZCBvbiBub24tZW1wdHkgc3RyZWFtJyk7XG5cdFxuXHQgIGlmICghc3RhdGUuZW5kRW1pdHRlZCkge1xuXHQgICAgc3RhdGUuZW5kZWQgPSB0cnVlO1xuXHQgICAgcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbigpIHtcblx0ICAgICAgLy8gQ2hlY2sgdGhhdCB3ZSBkaWRuJ3QgZ2V0IG9uZSBsYXN0IHVuc2hpZnQuXG5cdCAgICAgIGlmICghc3RhdGUuZW5kRW1pdHRlZCAmJiBzdGF0ZS5sZW5ndGggPT09IDApIHtcblx0ICAgICAgICBzdGF0ZS5lbmRFbWl0dGVkID0gdHJ1ZTtcblx0ICAgICAgICBzdHJlYW0ucmVhZGFibGUgPSBmYWxzZTtcblx0ICAgICAgICBzdHJlYW0uZW1pdCgnZW5kJyk7XG5cdCAgICAgIH1cblx0ICAgIH0pO1xuXHQgIH1cblx0fVxuXHRcblx0ZnVuY3Rpb24gZm9yRWFjaCAoeHMsIGYpIHtcblx0ICBmb3IgKHZhciBpID0gMCwgbCA9IHhzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuXHQgICAgZih4c1tpXSwgaSk7XG5cdCAgfVxuXHR9XG5cdFxuXHRmdW5jdGlvbiBpbmRleE9mICh4cywgeCkge1xuXHQgIGZvciAodmFyIGkgPSAwLCBsID0geHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG5cdCAgICBpZiAoeHNbaV0gPT09IHgpIHJldHVybiBpO1xuXHQgIH1cblx0ICByZXR1cm4gLTE7XG5cdH1cblx0XG5cdC8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqL30uY2FsbChleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDE4KSkpXG5cbi8qKiovIH0sXG4vKiAyOCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0bW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIChhcnIpIHtcblx0ICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGFycikgPT0gJ1tvYmplY3QgQXJyYXldJztcblx0fTtcblxuXG4vKioqLyB9LFxuLyogMjkgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqLyhmdW5jdGlvbihCdWZmZXIpIHsvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cblx0Ly9cblx0Ly8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcblx0Ly8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuXHQvLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcblx0Ly8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuXHQvLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG5cdC8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuXHQvLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcblx0Ly9cblx0Ly8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcblx0Ly8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cdC8vXG5cdC8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncblx0Ly8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuXHQvLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG5cdC8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuXHQvLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcblx0Ly8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuXHQvLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXHRcblx0Ly8gTk9URTogVGhlc2UgdHlwZSBjaGVja2luZyBmdW5jdGlvbnMgaW50ZW50aW9uYWxseSBkb24ndCB1c2UgYGluc3RhbmNlb2ZgXG5cdC8vIGJlY2F1c2UgaXQgaXMgZnJhZ2lsZSBhbmQgY2FuIGJlIGVhc2lseSBmYWtlZCB3aXRoIGBPYmplY3QuY3JlYXRlKClgLlxuXHRcblx0ZnVuY3Rpb24gaXNBcnJheShhcmcpIHtcblx0ICBpZiAoQXJyYXkuaXNBcnJheSkge1xuXHQgICAgcmV0dXJuIEFycmF5LmlzQXJyYXkoYXJnKTtcblx0ICB9XG5cdCAgcmV0dXJuIG9iamVjdFRvU3RyaW5nKGFyZykgPT09ICdbb2JqZWN0IEFycmF5XSc7XG5cdH1cblx0ZXhwb3J0cy5pc0FycmF5ID0gaXNBcnJheTtcblx0XG5cdGZ1bmN0aW9uIGlzQm9vbGVhbihhcmcpIHtcblx0ICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ2Jvb2xlYW4nO1xuXHR9XG5cdGV4cG9ydHMuaXNCb29sZWFuID0gaXNCb29sZWFuO1xuXHRcblx0ZnVuY3Rpb24gaXNOdWxsKGFyZykge1xuXHQgIHJldHVybiBhcmcgPT09IG51bGw7XG5cdH1cblx0ZXhwb3J0cy5pc051bGwgPSBpc051bGw7XG5cdFxuXHRmdW5jdGlvbiBpc051bGxPclVuZGVmaW5lZChhcmcpIHtcblx0ICByZXR1cm4gYXJnID09IG51bGw7XG5cdH1cblx0ZXhwb3J0cy5pc051bGxPclVuZGVmaW5lZCA9IGlzTnVsbE9yVW5kZWZpbmVkO1xuXHRcblx0ZnVuY3Rpb24gaXNOdW1iZXIoYXJnKSB7XG5cdCAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdudW1iZXInO1xuXHR9XG5cdGV4cG9ydHMuaXNOdW1iZXIgPSBpc051bWJlcjtcblx0XG5cdGZ1bmN0aW9uIGlzU3RyaW5nKGFyZykge1xuXHQgIHJldHVybiB0eXBlb2YgYXJnID09PSAnc3RyaW5nJztcblx0fVxuXHRleHBvcnRzLmlzU3RyaW5nID0gaXNTdHJpbmc7XG5cdFxuXHRmdW5jdGlvbiBpc1N5bWJvbChhcmcpIHtcblx0ICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ3N5bWJvbCc7XG5cdH1cblx0ZXhwb3J0cy5pc1N5bWJvbCA9IGlzU3ltYm9sO1xuXHRcblx0ZnVuY3Rpb24gaXNVbmRlZmluZWQoYXJnKSB7XG5cdCAgcmV0dXJuIGFyZyA9PT0gdm9pZCAwO1xuXHR9XG5cdGV4cG9ydHMuaXNVbmRlZmluZWQgPSBpc1VuZGVmaW5lZDtcblx0XG5cdGZ1bmN0aW9uIGlzUmVnRXhwKHJlKSB7XG5cdCAgcmV0dXJuIG9iamVjdFRvU3RyaW5nKHJlKSA9PT0gJ1tvYmplY3QgUmVnRXhwXSc7XG5cdH1cblx0ZXhwb3J0cy5pc1JlZ0V4cCA9IGlzUmVnRXhwO1xuXHRcblx0ZnVuY3Rpb24gaXNPYmplY3QoYXJnKSB7XG5cdCAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdvYmplY3QnICYmIGFyZyAhPT0gbnVsbDtcblx0fVxuXHRleHBvcnRzLmlzT2JqZWN0ID0gaXNPYmplY3Q7XG5cdFxuXHRmdW5jdGlvbiBpc0RhdGUoZCkge1xuXHQgIHJldHVybiBvYmplY3RUb1N0cmluZyhkKSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xuXHR9XG5cdGV4cG9ydHMuaXNEYXRlID0gaXNEYXRlO1xuXHRcblx0ZnVuY3Rpb24gaXNFcnJvcihlKSB7XG5cdCAgcmV0dXJuIChvYmplY3RUb1N0cmluZyhlKSA9PT0gJ1tvYmplY3QgRXJyb3JdJyB8fCBlIGluc3RhbmNlb2YgRXJyb3IpO1xuXHR9XG5cdGV4cG9ydHMuaXNFcnJvciA9IGlzRXJyb3I7XG5cdFxuXHRmdW5jdGlvbiBpc0Z1bmN0aW9uKGFyZykge1xuXHQgIHJldHVybiB0eXBlb2YgYXJnID09PSAnZnVuY3Rpb24nO1xuXHR9XG5cdGV4cG9ydHMuaXNGdW5jdGlvbiA9IGlzRnVuY3Rpb247XG5cdFxuXHRmdW5jdGlvbiBpc1ByaW1pdGl2ZShhcmcpIHtcblx0ICByZXR1cm4gYXJnID09PSBudWxsIHx8XG5cdCAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdib29sZWFuJyB8fFxuXHQgICAgICAgICB0eXBlb2YgYXJnID09PSAnbnVtYmVyJyB8fFxuXHQgICAgICAgICB0eXBlb2YgYXJnID09PSAnc3RyaW5nJyB8fFxuXHQgICAgICAgICB0eXBlb2YgYXJnID09PSAnc3ltYm9sJyB8fCAgLy8gRVM2IHN5bWJvbFxuXHQgICAgICAgICB0eXBlb2YgYXJnID09PSAndW5kZWZpbmVkJztcblx0fVxuXHRleHBvcnRzLmlzUHJpbWl0aXZlID0gaXNQcmltaXRpdmU7XG5cdFxuXHRleHBvcnRzLmlzQnVmZmVyID0gQnVmZmVyLmlzQnVmZmVyO1xuXHRcblx0ZnVuY3Rpb24gb2JqZWN0VG9TdHJpbmcobykge1xuXHQgIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobyk7XG5cdH1cblx0XG5cdC8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqL30uY2FsbChleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDE0KS5CdWZmZXIpKVxuXG4vKioqLyB9LFxuLyogMzAgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdGlmICh0eXBlb2YgT2JqZWN0LmNyZWF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuXHQgIC8vIGltcGxlbWVudGF0aW9uIGZyb20gc3RhbmRhcmQgbm9kZS5qcyAndXRpbCcgbW9kdWxlXG5cdCAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpbmhlcml0cyhjdG9yLCBzdXBlckN0b3IpIHtcblx0ICAgIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yXG5cdCAgICBjdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDdG9yLnByb3RvdHlwZSwge1xuXHQgICAgICBjb25zdHJ1Y3Rvcjoge1xuXHQgICAgICAgIHZhbHVlOiBjdG9yLFxuXHQgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuXHQgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuXHQgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuXHQgICAgICB9XG5cdCAgICB9KTtcblx0ICB9O1xuXHR9IGVsc2Uge1xuXHQgIC8vIG9sZCBzY2hvb2wgc2hpbSBmb3Igb2xkIGJyb3dzZXJzXG5cdCAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpbmhlcml0cyhjdG9yLCBzdXBlckN0b3IpIHtcblx0ICAgIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yXG5cdCAgICB2YXIgVGVtcEN0b3IgPSBmdW5jdGlvbiAoKSB7fVxuXHQgICAgVGVtcEN0b3IucHJvdG90eXBlID0gc3VwZXJDdG9yLnByb3RvdHlwZVxuXHQgICAgY3Rvci5wcm90b3R5cGUgPSBuZXcgVGVtcEN0b3IoKVxuXHQgICAgY3Rvci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBjdG9yXG5cdCAgfVxuXHR9XG5cblxuLyoqKi8gfSxcbi8qIDMxICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHQvKiAoaWdub3JlZCkgKi9cblxuLyoqKi8gfSxcbi8qIDMyICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi8oZnVuY3Rpb24ocHJvY2Vzcykgey8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuXHQvL1xuXHQvLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuXHQvLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG5cdC8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuXHQvLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG5cdC8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcblx0Ly8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG5cdC8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXHQvL1xuXHQvLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuXHQvLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblx0Ly9cblx0Ly8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuXHQvLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG5cdC8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cblx0Ly8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG5cdC8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuXHQvLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG5cdC8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cdFxuXHQvLyBhIGR1cGxleCBzdHJlYW0gaXMganVzdCBhIHN0cmVhbSB0aGF0IGlzIGJvdGggcmVhZGFibGUgYW5kIHdyaXRhYmxlLlxuXHQvLyBTaW5jZSBKUyBkb2Vzbid0IGhhdmUgbXVsdGlwbGUgcHJvdG90eXBhbCBpbmhlcml0YW5jZSwgdGhpcyBjbGFzc1xuXHQvLyBwcm90b3R5cGFsbHkgaW5oZXJpdHMgZnJvbSBSZWFkYWJsZSwgYW5kIHRoZW4gcGFyYXNpdGljYWxseSBmcm9tXG5cdC8vIFdyaXRhYmxlLlxuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBEdXBsZXg7XG5cdFxuXHQvKjxyZXBsYWNlbWVudD4qL1xuXHR2YXIgb2JqZWN0S2V5cyA9IE9iamVjdC5rZXlzIHx8IGZ1bmN0aW9uIChvYmopIHtcblx0ICB2YXIga2V5cyA9IFtdO1xuXHQgIGZvciAodmFyIGtleSBpbiBvYmopIGtleXMucHVzaChrZXkpO1xuXHQgIHJldHVybiBrZXlzO1xuXHR9XG5cdC8qPC9yZXBsYWNlbWVudD4qL1xuXHRcblx0XG5cdC8qPHJlcGxhY2VtZW50PiovXG5cdHZhciB1dGlsID0gX193ZWJwYWNrX3JlcXVpcmVfXygyOSk7XG5cdHV0aWwuaW5oZXJpdHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMwKTtcblx0Lyo8L3JlcGxhY2VtZW50PiovXG5cdFxuXHR2YXIgUmVhZGFibGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI3KTtcblx0dmFyIFdyaXRhYmxlID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMyk7XG5cdFxuXHR1dGlsLmluaGVyaXRzKER1cGxleCwgUmVhZGFibGUpO1xuXHRcblx0Zm9yRWFjaChvYmplY3RLZXlzKFdyaXRhYmxlLnByb3RvdHlwZSksIGZ1bmN0aW9uKG1ldGhvZCkge1xuXHQgIGlmICghRHVwbGV4LnByb3RvdHlwZVttZXRob2RdKVxuXHQgICAgRHVwbGV4LnByb3RvdHlwZVttZXRob2RdID0gV3JpdGFibGUucHJvdG90eXBlW21ldGhvZF07XG5cdH0pO1xuXHRcblx0ZnVuY3Rpb24gRHVwbGV4KG9wdGlvbnMpIHtcblx0ICBpZiAoISh0aGlzIGluc3RhbmNlb2YgRHVwbGV4KSlcblx0ICAgIHJldHVybiBuZXcgRHVwbGV4KG9wdGlvbnMpO1xuXHRcblx0ICBSZWFkYWJsZS5jYWxsKHRoaXMsIG9wdGlvbnMpO1xuXHQgIFdyaXRhYmxlLmNhbGwodGhpcywgb3B0aW9ucyk7XG5cdFxuXHQgIGlmIChvcHRpb25zICYmIG9wdGlvbnMucmVhZGFibGUgPT09IGZhbHNlKVxuXHQgICAgdGhpcy5yZWFkYWJsZSA9IGZhbHNlO1xuXHRcblx0ICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLndyaXRhYmxlID09PSBmYWxzZSlcblx0ICAgIHRoaXMud3JpdGFibGUgPSBmYWxzZTtcblx0XG5cdCAgdGhpcy5hbGxvd0hhbGZPcGVuID0gdHJ1ZTtcblx0ICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLmFsbG93SGFsZk9wZW4gPT09IGZhbHNlKVxuXHQgICAgdGhpcy5hbGxvd0hhbGZPcGVuID0gZmFsc2U7XG5cdFxuXHQgIHRoaXMub25jZSgnZW5kJywgb25lbmQpO1xuXHR9XG5cdFxuXHQvLyB0aGUgbm8taGFsZi1vcGVuIGVuZm9yY2VyXG5cdGZ1bmN0aW9uIG9uZW5kKCkge1xuXHQgIC8vIGlmIHdlIGFsbG93IGhhbGYtb3BlbiBzdGF0ZSwgb3IgaWYgdGhlIHdyaXRhYmxlIHNpZGUgZW5kZWQsXG5cdCAgLy8gdGhlbiB3ZSdyZSBvay5cblx0ICBpZiAodGhpcy5hbGxvd0hhbGZPcGVuIHx8IHRoaXMuX3dyaXRhYmxlU3RhdGUuZW5kZWQpXG5cdCAgICByZXR1cm47XG5cdFxuXHQgIC8vIG5vIG1vcmUgZGF0YSBjYW4gYmUgd3JpdHRlbi5cblx0ICAvLyBCdXQgYWxsb3cgbW9yZSB3cml0ZXMgdG8gaGFwcGVuIGluIHRoaXMgdGljay5cblx0ICBwcm9jZXNzLm5leHRUaWNrKHRoaXMuZW5kLmJpbmQodGhpcykpO1xuXHR9XG5cdFxuXHRmdW5jdGlvbiBmb3JFYWNoICh4cywgZikge1xuXHQgIGZvciAodmFyIGkgPSAwLCBsID0geHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG5cdCAgICBmKHhzW2ldLCBpKTtcblx0ICB9XG5cdH1cblx0XG5cdC8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqL30uY2FsbChleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDE4KSkpXG5cbi8qKiovIH0sXG4vKiAzMyAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovKGZ1bmN0aW9uKHByb2Nlc3MpIHsvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cblx0Ly9cblx0Ly8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcblx0Ly8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuXHQvLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcblx0Ly8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuXHQvLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG5cdC8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuXHQvLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcblx0Ly9cblx0Ly8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcblx0Ly8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cdC8vXG5cdC8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncblx0Ly8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuXHQvLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG5cdC8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuXHQvLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcblx0Ly8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuXHQvLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXHRcblx0Ly8gQSBiaXQgc2ltcGxlciB0aGFuIHJlYWRhYmxlIHN0cmVhbXMuXG5cdC8vIEltcGxlbWVudCBhbiBhc3luYyAuX3dyaXRlKGNodW5rLCBjYiksIGFuZCBpdCdsbCBoYW5kbGUgYWxsXG5cdC8vIHRoZSBkcmFpbiBldmVudCBlbWlzc2lvbiBhbmQgYnVmZmVyaW5nLlxuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBXcml0YWJsZTtcblx0XG5cdC8qPHJlcGxhY2VtZW50PiovXG5cdHZhciBCdWZmZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE0KS5CdWZmZXI7XG5cdC8qPC9yZXBsYWNlbWVudD4qL1xuXHRcblx0V3JpdGFibGUuV3JpdGFibGVTdGF0ZSA9IFdyaXRhYmxlU3RhdGU7XG5cdFxuXHRcblx0Lyo8cmVwbGFjZW1lbnQ+Ki9cblx0dmFyIHV0aWwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI5KTtcblx0dXRpbC5pbmhlcml0cyA9IF9fd2VicGFja19yZXF1aXJlX18oMzApO1xuXHQvKjwvcmVwbGFjZW1lbnQ+Ki9cblx0XG5cdHZhciBTdHJlYW0gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIzKTtcblx0XG5cdHV0aWwuaW5oZXJpdHMoV3JpdGFibGUsIFN0cmVhbSk7XG5cdFxuXHRmdW5jdGlvbiBXcml0ZVJlcShjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG5cdCAgdGhpcy5jaHVuayA9IGNodW5rO1xuXHQgIHRoaXMuZW5jb2RpbmcgPSBlbmNvZGluZztcblx0ICB0aGlzLmNhbGxiYWNrID0gY2I7XG5cdH1cblx0XG5cdGZ1bmN0aW9uIFdyaXRhYmxlU3RhdGUob3B0aW9ucywgc3RyZWFtKSB7XG5cdCAgdmFyIER1cGxleCA9IF9fd2VicGFja19yZXF1aXJlX18oMzIpO1xuXHRcblx0ICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblx0XG5cdCAgLy8gdGhlIHBvaW50IGF0IHdoaWNoIHdyaXRlKCkgc3RhcnRzIHJldHVybmluZyBmYWxzZVxuXHQgIC8vIE5vdGU6IDAgaXMgYSB2YWxpZCB2YWx1ZSwgbWVhbnMgdGhhdCB3ZSBhbHdheXMgcmV0dXJuIGZhbHNlIGlmXG5cdCAgLy8gdGhlIGVudGlyZSBidWZmZXIgaXMgbm90IGZsdXNoZWQgaW1tZWRpYXRlbHkgb24gd3JpdGUoKVxuXHQgIHZhciBod20gPSBvcHRpb25zLmhpZ2hXYXRlck1hcms7XG5cdCAgdmFyIGRlZmF1bHRId20gPSBvcHRpb25zLm9iamVjdE1vZGUgPyAxNiA6IDE2ICogMTAyNDtcblx0ICB0aGlzLmhpZ2hXYXRlck1hcmsgPSAoaHdtIHx8IGh3bSA9PT0gMCkgPyBod20gOiBkZWZhdWx0SHdtO1xuXHRcblx0ICAvLyBvYmplY3Qgc3RyZWFtIGZsYWcgdG8gaW5kaWNhdGUgd2hldGhlciBvciBub3QgdGhpcyBzdHJlYW1cblx0ICAvLyBjb250YWlucyBidWZmZXJzIG9yIG9iamVjdHMuXG5cdCAgdGhpcy5vYmplY3RNb2RlID0gISFvcHRpb25zLm9iamVjdE1vZGU7XG5cdFxuXHQgIGlmIChzdHJlYW0gaW5zdGFuY2VvZiBEdXBsZXgpXG5cdCAgICB0aGlzLm9iamVjdE1vZGUgPSB0aGlzLm9iamVjdE1vZGUgfHwgISFvcHRpb25zLndyaXRhYmxlT2JqZWN0TW9kZTtcblx0XG5cdCAgLy8gY2FzdCB0byBpbnRzLlxuXHQgIHRoaXMuaGlnaFdhdGVyTWFyayA9IH5+dGhpcy5oaWdoV2F0ZXJNYXJrO1xuXHRcblx0ICB0aGlzLm5lZWREcmFpbiA9IGZhbHNlO1xuXHQgIC8vIGF0IHRoZSBzdGFydCBvZiBjYWxsaW5nIGVuZCgpXG5cdCAgdGhpcy5lbmRpbmcgPSBmYWxzZTtcblx0ICAvLyB3aGVuIGVuZCgpIGhhcyBiZWVuIGNhbGxlZCwgYW5kIHJldHVybmVkXG5cdCAgdGhpcy5lbmRlZCA9IGZhbHNlO1xuXHQgIC8vIHdoZW4gJ2ZpbmlzaCcgaXMgZW1pdHRlZFxuXHQgIHRoaXMuZmluaXNoZWQgPSBmYWxzZTtcblx0XG5cdCAgLy8gc2hvdWxkIHdlIGRlY29kZSBzdHJpbmdzIGludG8gYnVmZmVycyBiZWZvcmUgcGFzc2luZyB0byBfd3JpdGU/XG5cdCAgLy8gdGhpcyBpcyBoZXJlIHNvIHRoYXQgc29tZSBub2RlLWNvcmUgc3RyZWFtcyBjYW4gb3B0aW1pemUgc3RyaW5nXG5cdCAgLy8gaGFuZGxpbmcgYXQgYSBsb3dlciBsZXZlbC5cblx0ICB2YXIgbm9EZWNvZGUgPSBvcHRpb25zLmRlY29kZVN0cmluZ3MgPT09IGZhbHNlO1xuXHQgIHRoaXMuZGVjb2RlU3RyaW5ncyA9ICFub0RlY29kZTtcblx0XG5cdCAgLy8gQ3J5cHRvIGlzIGtpbmQgb2Ygb2xkIGFuZCBjcnVzdHkuICBIaXN0b3JpY2FsbHksIGl0cyBkZWZhdWx0IHN0cmluZ1xuXHQgIC8vIGVuY29kaW5nIGlzICdiaW5hcnknIHNvIHdlIGhhdmUgdG8gbWFrZSB0aGlzIGNvbmZpZ3VyYWJsZS5cblx0ICAvLyBFdmVyeXRoaW5nIGVsc2UgaW4gdGhlIHVuaXZlcnNlIHVzZXMgJ3V0ZjgnLCB0aG91Z2guXG5cdCAgdGhpcy5kZWZhdWx0RW5jb2RpbmcgPSBvcHRpb25zLmRlZmF1bHRFbmNvZGluZyB8fCAndXRmOCc7XG5cdFxuXHQgIC8vIG5vdCBhbiBhY3R1YWwgYnVmZmVyIHdlIGtlZXAgdHJhY2sgb2YsIGJ1dCBhIG1lYXN1cmVtZW50XG5cdCAgLy8gb2YgaG93IG11Y2ggd2UncmUgd2FpdGluZyB0byBnZXQgcHVzaGVkIHRvIHNvbWUgdW5kZXJseWluZ1xuXHQgIC8vIHNvY2tldCBvciBmaWxlLlxuXHQgIHRoaXMubGVuZ3RoID0gMDtcblx0XG5cdCAgLy8gYSBmbGFnIHRvIHNlZSB3aGVuIHdlJ3JlIGluIHRoZSBtaWRkbGUgb2YgYSB3cml0ZS5cblx0ICB0aGlzLndyaXRpbmcgPSBmYWxzZTtcblx0XG5cdCAgLy8gd2hlbiB0cnVlIGFsbCB3cml0ZXMgd2lsbCBiZSBidWZmZXJlZCB1bnRpbCAudW5jb3JrKCkgY2FsbFxuXHQgIHRoaXMuY29ya2VkID0gMDtcblx0XG5cdCAgLy8gYSBmbGFnIHRvIGJlIGFibGUgdG8gdGVsbCBpZiB0aGUgb253cml0ZSBjYiBpcyBjYWxsZWQgaW1tZWRpYXRlbHksXG5cdCAgLy8gb3Igb24gYSBsYXRlciB0aWNrLiAgV2Ugc2V0IHRoaXMgdG8gdHJ1ZSBhdCBmaXJzdCwgYmVjYXVzZSBhbnlcblx0ICAvLyBhY3Rpb25zIHRoYXQgc2hvdWxkbid0IGhhcHBlbiB1bnRpbCBcImxhdGVyXCIgc2hvdWxkIGdlbmVyYWxseSBhbHNvXG5cdCAgLy8gbm90IGhhcHBlbiBiZWZvcmUgdGhlIGZpcnN0IHdyaXRlIGNhbGwuXG5cdCAgdGhpcy5zeW5jID0gdHJ1ZTtcblx0XG5cdCAgLy8gYSBmbGFnIHRvIGtub3cgaWYgd2UncmUgcHJvY2Vzc2luZyBwcmV2aW91c2x5IGJ1ZmZlcmVkIGl0ZW1zLCB3aGljaFxuXHQgIC8vIG1heSBjYWxsIHRoZSBfd3JpdGUoKSBjYWxsYmFjayBpbiB0aGUgc2FtZSB0aWNrLCBzbyB0aGF0IHdlIGRvbid0XG5cdCAgLy8gZW5kIHVwIGluIGFuIG92ZXJsYXBwZWQgb253cml0ZSBzaXR1YXRpb24uXG5cdCAgdGhpcy5idWZmZXJQcm9jZXNzaW5nID0gZmFsc2U7XG5cdFxuXHQgIC8vIHRoZSBjYWxsYmFjayB0aGF0J3MgcGFzc2VkIHRvIF93cml0ZShjaHVuayxjYilcblx0ICB0aGlzLm9ud3JpdGUgPSBmdW5jdGlvbihlcikge1xuXHQgICAgb253cml0ZShzdHJlYW0sIGVyKTtcblx0ICB9O1xuXHRcblx0ICAvLyB0aGUgY2FsbGJhY2sgdGhhdCB0aGUgdXNlciBzdXBwbGllcyB0byB3cml0ZShjaHVuayxlbmNvZGluZyxjYilcblx0ICB0aGlzLndyaXRlY2IgPSBudWxsO1xuXHRcblx0ICAvLyB0aGUgYW1vdW50IHRoYXQgaXMgYmVpbmcgd3JpdHRlbiB3aGVuIF93cml0ZSBpcyBjYWxsZWQuXG5cdCAgdGhpcy53cml0ZWxlbiA9IDA7XG5cdFxuXHQgIHRoaXMuYnVmZmVyID0gW107XG5cdFxuXHQgIC8vIG51bWJlciBvZiBwZW5kaW5nIHVzZXItc3VwcGxpZWQgd3JpdGUgY2FsbGJhY2tzXG5cdCAgLy8gdGhpcyBtdXN0IGJlIDAgYmVmb3JlICdmaW5pc2gnIGNhbiBiZSBlbWl0dGVkXG5cdCAgdGhpcy5wZW5kaW5nY2IgPSAwO1xuXHRcblx0ICAvLyBlbWl0IHByZWZpbmlzaCBpZiB0aGUgb25seSB0aGluZyB3ZSdyZSB3YWl0aW5nIGZvciBpcyBfd3JpdGUgY2JzXG5cdCAgLy8gVGhpcyBpcyByZWxldmFudCBmb3Igc3luY2hyb25vdXMgVHJhbnNmb3JtIHN0cmVhbXNcblx0ICB0aGlzLnByZWZpbmlzaGVkID0gZmFsc2U7XG5cdFxuXHQgIC8vIFRydWUgaWYgdGhlIGVycm9yIHdhcyBhbHJlYWR5IGVtaXR0ZWQgYW5kIHNob3VsZCBub3QgYmUgdGhyb3duIGFnYWluXG5cdCAgdGhpcy5lcnJvckVtaXR0ZWQgPSBmYWxzZTtcblx0fVxuXHRcblx0ZnVuY3Rpb24gV3JpdGFibGUob3B0aW9ucykge1xuXHQgIHZhciBEdXBsZXggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMyKTtcblx0XG5cdCAgLy8gV3JpdGFibGUgY3RvciBpcyBhcHBsaWVkIHRvIER1cGxleGVzLCB0aG91Z2ggdGhleSdyZSBub3Rcblx0ICAvLyBpbnN0YW5jZW9mIFdyaXRhYmxlLCB0aGV5J3JlIGluc3RhbmNlb2YgUmVhZGFibGUuXG5cdCAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFdyaXRhYmxlKSAmJiAhKHRoaXMgaW5zdGFuY2VvZiBEdXBsZXgpKVxuXHQgICAgcmV0dXJuIG5ldyBXcml0YWJsZShvcHRpb25zKTtcblx0XG5cdCAgdGhpcy5fd3JpdGFibGVTdGF0ZSA9IG5ldyBXcml0YWJsZVN0YXRlKG9wdGlvbnMsIHRoaXMpO1xuXHRcblx0ICAvLyBsZWdhY3kuXG5cdCAgdGhpcy53cml0YWJsZSA9IHRydWU7XG5cdFxuXHQgIFN0cmVhbS5jYWxsKHRoaXMpO1xuXHR9XG5cdFxuXHQvLyBPdGhlcndpc2UgcGVvcGxlIGNhbiBwaXBlIFdyaXRhYmxlIHN0cmVhbXMsIHdoaWNoIGlzIGp1c3Qgd3JvbmcuXG5cdFdyaXRhYmxlLnByb3RvdHlwZS5waXBlID0gZnVuY3Rpb24oKSB7XG5cdCAgdGhpcy5lbWl0KCdlcnJvcicsIG5ldyBFcnJvcignQ2Fubm90IHBpcGUuIE5vdCByZWFkYWJsZS4nKSk7XG5cdH07XG5cdFxuXHRcblx0ZnVuY3Rpb24gd3JpdGVBZnRlckVuZChzdHJlYW0sIHN0YXRlLCBjYikge1xuXHQgIHZhciBlciA9IG5ldyBFcnJvcignd3JpdGUgYWZ0ZXIgZW5kJyk7XG5cdCAgLy8gVE9ETzogZGVmZXIgZXJyb3IgZXZlbnRzIGNvbnNpc3RlbnRseSBldmVyeXdoZXJlLCBub3QganVzdCB0aGUgY2Jcblx0ICBzdHJlYW0uZW1pdCgnZXJyb3InLCBlcik7XG5cdCAgcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbigpIHtcblx0ICAgIGNiKGVyKTtcblx0ICB9KTtcblx0fVxuXHRcblx0Ly8gSWYgd2UgZ2V0IHNvbWV0aGluZyB0aGF0IGlzIG5vdCBhIGJ1ZmZlciwgc3RyaW5nLCBudWxsLCBvciB1bmRlZmluZWQsXG5cdC8vIGFuZCB3ZSdyZSBub3QgaW4gb2JqZWN0TW9kZSwgdGhlbiB0aGF0J3MgYW4gZXJyb3IuXG5cdC8vIE90aGVyd2lzZSBzdHJlYW0gY2h1bmtzIGFyZSBhbGwgY29uc2lkZXJlZCB0byBiZSBvZiBsZW5ndGg9MSwgYW5kIHRoZVxuXHQvLyB3YXRlcm1hcmtzIGRldGVybWluZSBob3cgbWFueSBvYmplY3RzIHRvIGtlZXAgaW4gdGhlIGJ1ZmZlciwgcmF0aGVyIHRoYW5cblx0Ly8gaG93IG1hbnkgYnl0ZXMgb3IgY2hhcmFjdGVycy5cblx0ZnVuY3Rpb24gdmFsaWRDaHVuayhzdHJlYW0sIHN0YXRlLCBjaHVuaywgY2IpIHtcblx0ICB2YXIgdmFsaWQgPSB0cnVlO1xuXHQgIGlmICghdXRpbC5pc0J1ZmZlcihjaHVuaykgJiZcblx0ICAgICAgIXV0aWwuaXNTdHJpbmcoY2h1bmspICYmXG5cdCAgICAgICF1dGlsLmlzTnVsbE9yVW5kZWZpbmVkKGNodW5rKSAmJlxuXHQgICAgICAhc3RhdGUub2JqZWN0TW9kZSkge1xuXHQgICAgdmFyIGVyID0gbmV3IFR5cGVFcnJvcignSW52YWxpZCBub24tc3RyaW5nL2J1ZmZlciBjaHVuaycpO1xuXHQgICAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXIpO1xuXHQgICAgcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbigpIHtcblx0ICAgICAgY2IoZXIpO1xuXHQgICAgfSk7XG5cdCAgICB2YWxpZCA9IGZhbHNlO1xuXHQgIH1cblx0ICByZXR1cm4gdmFsaWQ7XG5cdH1cblx0XG5cdFdyaXRhYmxlLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uKGNodW5rLCBlbmNvZGluZywgY2IpIHtcblx0ICB2YXIgc3RhdGUgPSB0aGlzLl93cml0YWJsZVN0YXRlO1xuXHQgIHZhciByZXQgPSBmYWxzZTtcblx0XG5cdCAgaWYgKHV0aWwuaXNGdW5jdGlvbihlbmNvZGluZykpIHtcblx0ICAgIGNiID0gZW5jb2Rpbmc7XG5cdCAgICBlbmNvZGluZyA9IG51bGw7XG5cdCAgfVxuXHRcblx0ICBpZiAodXRpbC5pc0J1ZmZlcihjaHVuaykpXG5cdCAgICBlbmNvZGluZyA9ICdidWZmZXInO1xuXHQgIGVsc2UgaWYgKCFlbmNvZGluZylcblx0ICAgIGVuY29kaW5nID0gc3RhdGUuZGVmYXVsdEVuY29kaW5nO1xuXHRcblx0ICBpZiAoIXV0aWwuaXNGdW5jdGlvbihjYikpXG5cdCAgICBjYiA9IGZ1bmN0aW9uKCkge307XG5cdFxuXHQgIGlmIChzdGF0ZS5lbmRlZClcblx0ICAgIHdyaXRlQWZ0ZXJFbmQodGhpcywgc3RhdGUsIGNiKTtcblx0ICBlbHNlIGlmICh2YWxpZENodW5rKHRoaXMsIHN0YXRlLCBjaHVuaywgY2IpKSB7XG5cdCAgICBzdGF0ZS5wZW5kaW5nY2IrKztcblx0ICAgIHJldCA9IHdyaXRlT3JCdWZmZXIodGhpcywgc3RhdGUsIGNodW5rLCBlbmNvZGluZywgY2IpO1xuXHQgIH1cblx0XG5cdCAgcmV0dXJuIHJldDtcblx0fTtcblx0XG5cdFdyaXRhYmxlLnByb3RvdHlwZS5jb3JrID0gZnVuY3Rpb24oKSB7XG5cdCAgdmFyIHN0YXRlID0gdGhpcy5fd3JpdGFibGVTdGF0ZTtcblx0XG5cdCAgc3RhdGUuY29ya2VkKys7XG5cdH07XG5cdFxuXHRXcml0YWJsZS5wcm90b3R5cGUudW5jb3JrID0gZnVuY3Rpb24oKSB7XG5cdCAgdmFyIHN0YXRlID0gdGhpcy5fd3JpdGFibGVTdGF0ZTtcblx0XG5cdCAgaWYgKHN0YXRlLmNvcmtlZCkge1xuXHQgICAgc3RhdGUuY29ya2VkLS07XG5cdFxuXHQgICAgaWYgKCFzdGF0ZS53cml0aW5nICYmXG5cdCAgICAgICAgIXN0YXRlLmNvcmtlZCAmJlxuXHQgICAgICAgICFzdGF0ZS5maW5pc2hlZCAmJlxuXHQgICAgICAgICFzdGF0ZS5idWZmZXJQcm9jZXNzaW5nICYmXG5cdCAgICAgICAgc3RhdGUuYnVmZmVyLmxlbmd0aClcblx0ICAgICAgY2xlYXJCdWZmZXIodGhpcywgc3RhdGUpO1xuXHQgIH1cblx0fTtcblx0XG5cdGZ1bmN0aW9uIGRlY29kZUNodW5rKHN0YXRlLCBjaHVuaywgZW5jb2RpbmcpIHtcblx0ICBpZiAoIXN0YXRlLm9iamVjdE1vZGUgJiZcblx0ICAgICAgc3RhdGUuZGVjb2RlU3RyaW5ncyAhPT0gZmFsc2UgJiZcblx0ICAgICAgdXRpbC5pc1N0cmluZyhjaHVuaykpIHtcblx0ICAgIGNodW5rID0gbmV3IEJ1ZmZlcihjaHVuaywgZW5jb2RpbmcpO1xuXHQgIH1cblx0ICByZXR1cm4gY2h1bms7XG5cdH1cblx0XG5cdC8vIGlmIHdlJ3JlIGFscmVhZHkgd3JpdGluZyBzb21ldGhpbmcsIHRoZW4ganVzdCBwdXQgdGhpc1xuXHQvLyBpbiB0aGUgcXVldWUsIGFuZCB3YWl0IG91ciB0dXJuLiAgT3RoZXJ3aXNlLCBjYWxsIF93cml0ZVxuXHQvLyBJZiB3ZSByZXR1cm4gZmFsc2UsIHRoZW4gd2UgbmVlZCBhIGRyYWluIGV2ZW50LCBzbyBzZXQgdGhhdCBmbGFnLlxuXHRmdW5jdGlvbiB3cml0ZU9yQnVmZmVyKHN0cmVhbSwgc3RhdGUsIGNodW5rLCBlbmNvZGluZywgY2IpIHtcblx0ICBjaHVuayA9IGRlY29kZUNodW5rKHN0YXRlLCBjaHVuaywgZW5jb2RpbmcpO1xuXHQgIGlmICh1dGlsLmlzQnVmZmVyKGNodW5rKSlcblx0ICAgIGVuY29kaW5nID0gJ2J1ZmZlcic7XG5cdCAgdmFyIGxlbiA9IHN0YXRlLm9iamVjdE1vZGUgPyAxIDogY2h1bmsubGVuZ3RoO1xuXHRcblx0ICBzdGF0ZS5sZW5ndGggKz0gbGVuO1xuXHRcblx0ICB2YXIgcmV0ID0gc3RhdGUubGVuZ3RoIDwgc3RhdGUuaGlnaFdhdGVyTWFyaztcblx0ICAvLyB3ZSBtdXN0IGVuc3VyZSB0aGF0IHByZXZpb3VzIG5lZWREcmFpbiB3aWxsIG5vdCBiZSByZXNldCB0byBmYWxzZS5cblx0ICBpZiAoIXJldClcblx0ICAgIHN0YXRlLm5lZWREcmFpbiA9IHRydWU7XG5cdFxuXHQgIGlmIChzdGF0ZS53cml0aW5nIHx8IHN0YXRlLmNvcmtlZClcblx0ICAgIHN0YXRlLmJ1ZmZlci5wdXNoKG5ldyBXcml0ZVJlcShjaHVuaywgZW5jb2RpbmcsIGNiKSk7XG5cdCAgZWxzZVxuXHQgICAgZG9Xcml0ZShzdHJlYW0sIHN0YXRlLCBmYWxzZSwgbGVuLCBjaHVuaywgZW5jb2RpbmcsIGNiKTtcblx0XG5cdCAgcmV0dXJuIHJldDtcblx0fVxuXHRcblx0ZnVuY3Rpb24gZG9Xcml0ZShzdHJlYW0sIHN0YXRlLCB3cml0ZXYsIGxlbiwgY2h1bmssIGVuY29kaW5nLCBjYikge1xuXHQgIHN0YXRlLndyaXRlbGVuID0gbGVuO1xuXHQgIHN0YXRlLndyaXRlY2IgPSBjYjtcblx0ICBzdGF0ZS53cml0aW5nID0gdHJ1ZTtcblx0ICBzdGF0ZS5zeW5jID0gdHJ1ZTtcblx0ICBpZiAod3JpdGV2KVxuXHQgICAgc3RyZWFtLl93cml0ZXYoY2h1bmssIHN0YXRlLm9ud3JpdGUpO1xuXHQgIGVsc2Vcblx0ICAgIHN0cmVhbS5fd3JpdGUoY2h1bmssIGVuY29kaW5nLCBzdGF0ZS5vbndyaXRlKTtcblx0ICBzdGF0ZS5zeW5jID0gZmFsc2U7XG5cdH1cblx0XG5cdGZ1bmN0aW9uIG9ud3JpdGVFcnJvcihzdHJlYW0sIHN0YXRlLCBzeW5jLCBlciwgY2IpIHtcblx0ICBpZiAoc3luYylcblx0ICAgIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24oKSB7XG5cdCAgICAgIHN0YXRlLnBlbmRpbmdjYi0tO1xuXHQgICAgICBjYihlcik7XG5cdCAgICB9KTtcblx0ICBlbHNlIHtcblx0ICAgIHN0YXRlLnBlbmRpbmdjYi0tO1xuXHQgICAgY2IoZXIpO1xuXHQgIH1cblx0XG5cdCAgc3RyZWFtLl93cml0YWJsZVN0YXRlLmVycm9yRW1pdHRlZCA9IHRydWU7XG5cdCAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXIpO1xuXHR9XG5cdFxuXHRmdW5jdGlvbiBvbndyaXRlU3RhdGVVcGRhdGUoc3RhdGUpIHtcblx0ICBzdGF0ZS53cml0aW5nID0gZmFsc2U7XG5cdCAgc3RhdGUud3JpdGVjYiA9IG51bGw7XG5cdCAgc3RhdGUubGVuZ3RoIC09IHN0YXRlLndyaXRlbGVuO1xuXHQgIHN0YXRlLndyaXRlbGVuID0gMDtcblx0fVxuXHRcblx0ZnVuY3Rpb24gb253cml0ZShzdHJlYW0sIGVyKSB7XG5cdCAgdmFyIHN0YXRlID0gc3RyZWFtLl93cml0YWJsZVN0YXRlO1xuXHQgIHZhciBzeW5jID0gc3RhdGUuc3luYztcblx0ICB2YXIgY2IgPSBzdGF0ZS53cml0ZWNiO1xuXHRcblx0ICBvbndyaXRlU3RhdGVVcGRhdGUoc3RhdGUpO1xuXHRcblx0ICBpZiAoZXIpXG5cdCAgICBvbndyaXRlRXJyb3Ioc3RyZWFtLCBzdGF0ZSwgc3luYywgZXIsIGNiKTtcblx0ICBlbHNlIHtcblx0ICAgIC8vIENoZWNrIGlmIHdlJ3JlIGFjdHVhbGx5IHJlYWR5IHRvIGZpbmlzaCwgYnV0IGRvbid0IGVtaXQgeWV0XG5cdCAgICB2YXIgZmluaXNoZWQgPSBuZWVkRmluaXNoKHN0cmVhbSwgc3RhdGUpO1xuXHRcblx0ICAgIGlmICghZmluaXNoZWQgJiZcblx0ICAgICAgICAhc3RhdGUuY29ya2VkICYmXG5cdCAgICAgICAgIXN0YXRlLmJ1ZmZlclByb2Nlc3NpbmcgJiZcblx0ICAgICAgICBzdGF0ZS5idWZmZXIubGVuZ3RoKSB7XG5cdCAgICAgIGNsZWFyQnVmZmVyKHN0cmVhbSwgc3RhdGUpO1xuXHQgICAgfVxuXHRcblx0ICAgIGlmIChzeW5jKSB7XG5cdCAgICAgIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24oKSB7XG5cdCAgICAgICAgYWZ0ZXJXcml0ZShzdHJlYW0sIHN0YXRlLCBmaW5pc2hlZCwgY2IpO1xuXHQgICAgICB9KTtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIGFmdGVyV3JpdGUoc3RyZWFtLCBzdGF0ZSwgZmluaXNoZWQsIGNiKTtcblx0ICAgIH1cblx0ICB9XG5cdH1cblx0XG5cdGZ1bmN0aW9uIGFmdGVyV3JpdGUoc3RyZWFtLCBzdGF0ZSwgZmluaXNoZWQsIGNiKSB7XG5cdCAgaWYgKCFmaW5pc2hlZClcblx0ICAgIG9ud3JpdGVEcmFpbihzdHJlYW0sIHN0YXRlKTtcblx0ICBzdGF0ZS5wZW5kaW5nY2ItLTtcblx0ICBjYigpO1xuXHQgIGZpbmlzaE1heWJlKHN0cmVhbSwgc3RhdGUpO1xuXHR9XG5cdFxuXHQvLyBNdXN0IGZvcmNlIGNhbGxiYWNrIHRvIGJlIGNhbGxlZCBvbiBuZXh0VGljaywgc28gdGhhdCB3ZSBkb24ndFxuXHQvLyBlbWl0ICdkcmFpbicgYmVmb3JlIHRoZSB3cml0ZSgpIGNvbnN1bWVyIGdldHMgdGhlICdmYWxzZScgcmV0dXJuXG5cdC8vIHZhbHVlLCBhbmQgaGFzIGEgY2hhbmNlIHRvIGF0dGFjaCBhICdkcmFpbicgbGlzdGVuZXIuXG5cdGZ1bmN0aW9uIG9ud3JpdGVEcmFpbihzdHJlYW0sIHN0YXRlKSB7XG5cdCAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCAmJiBzdGF0ZS5uZWVkRHJhaW4pIHtcblx0ICAgIHN0YXRlLm5lZWREcmFpbiA9IGZhbHNlO1xuXHQgICAgc3RyZWFtLmVtaXQoJ2RyYWluJyk7XG5cdCAgfVxuXHR9XG5cdFxuXHRcblx0Ly8gaWYgdGhlcmUncyBzb21ldGhpbmcgaW4gdGhlIGJ1ZmZlciB3YWl0aW5nLCB0aGVuIHByb2Nlc3MgaXRcblx0ZnVuY3Rpb24gY2xlYXJCdWZmZXIoc3RyZWFtLCBzdGF0ZSkge1xuXHQgIHN0YXRlLmJ1ZmZlclByb2Nlc3NpbmcgPSB0cnVlO1xuXHRcblx0ICBpZiAoc3RyZWFtLl93cml0ZXYgJiYgc3RhdGUuYnVmZmVyLmxlbmd0aCA+IDEpIHtcblx0ICAgIC8vIEZhc3QgY2FzZSwgd3JpdGUgZXZlcnl0aGluZyB1c2luZyBfd3JpdGV2KClcblx0ICAgIHZhciBjYnMgPSBbXTtcblx0ICAgIGZvciAodmFyIGMgPSAwOyBjIDwgc3RhdGUuYnVmZmVyLmxlbmd0aDsgYysrKVxuXHQgICAgICBjYnMucHVzaChzdGF0ZS5idWZmZXJbY10uY2FsbGJhY2spO1xuXHRcblx0ICAgIC8vIGNvdW50IHRoZSBvbmUgd2UgYXJlIGFkZGluZywgYXMgd2VsbC5cblx0ICAgIC8vIFRPRE8oaXNhYWNzKSBjbGVhbiB0aGlzIHVwXG5cdCAgICBzdGF0ZS5wZW5kaW5nY2IrKztcblx0ICAgIGRvV3JpdGUoc3RyZWFtLCBzdGF0ZSwgdHJ1ZSwgc3RhdGUubGVuZ3RoLCBzdGF0ZS5idWZmZXIsICcnLCBmdW5jdGlvbihlcnIpIHtcblx0ICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjYnMubGVuZ3RoOyBpKyspIHtcblx0ICAgICAgICBzdGF0ZS5wZW5kaW5nY2ItLTtcblx0ICAgICAgICBjYnNbaV0oZXJyKTtcblx0ICAgICAgfVxuXHQgICAgfSk7XG5cdFxuXHQgICAgLy8gQ2xlYXIgYnVmZmVyXG5cdCAgICBzdGF0ZS5idWZmZXIgPSBbXTtcblx0ICB9IGVsc2Uge1xuXHQgICAgLy8gU2xvdyBjYXNlLCB3cml0ZSBjaHVua3Mgb25lLWJ5LW9uZVxuXHQgICAgZm9yICh2YXIgYyA9IDA7IGMgPCBzdGF0ZS5idWZmZXIubGVuZ3RoOyBjKyspIHtcblx0ICAgICAgdmFyIGVudHJ5ID0gc3RhdGUuYnVmZmVyW2NdO1xuXHQgICAgICB2YXIgY2h1bmsgPSBlbnRyeS5jaHVuaztcblx0ICAgICAgdmFyIGVuY29kaW5nID0gZW50cnkuZW5jb2Rpbmc7XG5cdCAgICAgIHZhciBjYiA9IGVudHJ5LmNhbGxiYWNrO1xuXHQgICAgICB2YXIgbGVuID0gc3RhdGUub2JqZWN0TW9kZSA/IDEgOiBjaHVuay5sZW5ndGg7XG5cdFxuXHQgICAgICBkb1dyaXRlKHN0cmVhbSwgc3RhdGUsIGZhbHNlLCBsZW4sIGNodW5rLCBlbmNvZGluZywgY2IpO1xuXHRcblx0ICAgICAgLy8gaWYgd2UgZGlkbid0IGNhbGwgdGhlIG9ud3JpdGUgaW1tZWRpYXRlbHksIHRoZW5cblx0ICAgICAgLy8gaXQgbWVhbnMgdGhhdCB3ZSBuZWVkIHRvIHdhaXQgdW50aWwgaXQgZG9lcy5cblx0ICAgICAgLy8gYWxzbywgdGhhdCBtZWFucyB0aGF0IHRoZSBjaHVuayBhbmQgY2IgYXJlIGN1cnJlbnRseVxuXHQgICAgICAvLyBiZWluZyBwcm9jZXNzZWQsIHNvIG1vdmUgdGhlIGJ1ZmZlciBjb3VudGVyIHBhc3QgdGhlbS5cblx0ICAgICAgaWYgKHN0YXRlLndyaXRpbmcpIHtcblx0ICAgICAgICBjKys7XG5cdCAgICAgICAgYnJlYWs7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0XG5cdCAgICBpZiAoYyA8IHN0YXRlLmJ1ZmZlci5sZW5ndGgpXG5cdCAgICAgIHN0YXRlLmJ1ZmZlciA9IHN0YXRlLmJ1ZmZlci5zbGljZShjKTtcblx0ICAgIGVsc2Vcblx0ICAgICAgc3RhdGUuYnVmZmVyLmxlbmd0aCA9IDA7XG5cdCAgfVxuXHRcblx0ICBzdGF0ZS5idWZmZXJQcm9jZXNzaW5nID0gZmFsc2U7XG5cdH1cblx0XG5cdFdyaXRhYmxlLnByb3RvdHlwZS5fd3JpdGUgPSBmdW5jdGlvbihjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG5cdCAgY2IobmV3IEVycm9yKCdub3QgaW1wbGVtZW50ZWQnKSk7XG5cdFxuXHR9O1xuXHRcblx0V3JpdGFibGUucHJvdG90eXBlLl93cml0ZXYgPSBudWxsO1xuXHRcblx0V3JpdGFibGUucHJvdG90eXBlLmVuZCA9IGZ1bmN0aW9uKGNodW5rLCBlbmNvZGluZywgY2IpIHtcblx0ICB2YXIgc3RhdGUgPSB0aGlzLl93cml0YWJsZVN0YXRlO1xuXHRcblx0ICBpZiAodXRpbC5pc0Z1bmN0aW9uKGNodW5rKSkge1xuXHQgICAgY2IgPSBjaHVuaztcblx0ICAgIGNodW5rID0gbnVsbDtcblx0ICAgIGVuY29kaW5nID0gbnVsbDtcblx0ICB9IGVsc2UgaWYgKHV0aWwuaXNGdW5jdGlvbihlbmNvZGluZykpIHtcblx0ICAgIGNiID0gZW5jb2Rpbmc7XG5cdCAgICBlbmNvZGluZyA9IG51bGw7XG5cdCAgfVxuXHRcblx0ICBpZiAoIXV0aWwuaXNOdWxsT3JVbmRlZmluZWQoY2h1bmspKVxuXHQgICAgdGhpcy53cml0ZShjaHVuaywgZW5jb2RpbmcpO1xuXHRcblx0ICAvLyAuZW5kKCkgZnVsbHkgdW5jb3Jrc1xuXHQgIGlmIChzdGF0ZS5jb3JrZWQpIHtcblx0ICAgIHN0YXRlLmNvcmtlZCA9IDE7XG5cdCAgICB0aGlzLnVuY29yaygpO1xuXHQgIH1cblx0XG5cdCAgLy8gaWdub3JlIHVubmVjZXNzYXJ5IGVuZCgpIGNhbGxzLlxuXHQgIGlmICghc3RhdGUuZW5kaW5nICYmICFzdGF0ZS5maW5pc2hlZClcblx0ICAgIGVuZFdyaXRhYmxlKHRoaXMsIHN0YXRlLCBjYik7XG5cdH07XG5cdFxuXHRcblx0ZnVuY3Rpb24gbmVlZEZpbmlzaChzdHJlYW0sIHN0YXRlKSB7XG5cdCAgcmV0dXJuIChzdGF0ZS5lbmRpbmcgJiZcblx0ICAgICAgICAgIHN0YXRlLmxlbmd0aCA9PT0gMCAmJlxuXHQgICAgICAgICAgIXN0YXRlLmZpbmlzaGVkICYmXG5cdCAgICAgICAgICAhc3RhdGUud3JpdGluZyk7XG5cdH1cblx0XG5cdGZ1bmN0aW9uIHByZWZpbmlzaChzdHJlYW0sIHN0YXRlKSB7XG5cdCAgaWYgKCFzdGF0ZS5wcmVmaW5pc2hlZCkge1xuXHQgICAgc3RhdGUucHJlZmluaXNoZWQgPSB0cnVlO1xuXHQgICAgc3RyZWFtLmVtaXQoJ3ByZWZpbmlzaCcpO1xuXHQgIH1cblx0fVxuXHRcblx0ZnVuY3Rpb24gZmluaXNoTWF5YmUoc3RyZWFtLCBzdGF0ZSkge1xuXHQgIHZhciBuZWVkID0gbmVlZEZpbmlzaChzdHJlYW0sIHN0YXRlKTtcblx0ICBpZiAobmVlZCkge1xuXHQgICAgaWYgKHN0YXRlLnBlbmRpbmdjYiA9PT0gMCkge1xuXHQgICAgICBwcmVmaW5pc2goc3RyZWFtLCBzdGF0ZSk7XG5cdCAgICAgIHN0YXRlLmZpbmlzaGVkID0gdHJ1ZTtcblx0ICAgICAgc3RyZWFtLmVtaXQoJ2ZpbmlzaCcpO1xuXHQgICAgfSBlbHNlXG5cdCAgICAgIHByZWZpbmlzaChzdHJlYW0sIHN0YXRlKTtcblx0ICB9XG5cdCAgcmV0dXJuIG5lZWQ7XG5cdH1cblx0XG5cdGZ1bmN0aW9uIGVuZFdyaXRhYmxlKHN0cmVhbSwgc3RhdGUsIGNiKSB7XG5cdCAgc3RhdGUuZW5kaW5nID0gdHJ1ZTtcblx0ICBmaW5pc2hNYXliZShzdHJlYW0sIHN0YXRlKTtcblx0ICBpZiAoY2IpIHtcblx0ICAgIGlmIChzdGF0ZS5maW5pc2hlZClcblx0ICAgICAgcHJvY2Vzcy5uZXh0VGljayhjYik7XG5cdCAgICBlbHNlXG5cdCAgICAgIHN0cmVhbS5vbmNlKCdmaW5pc2gnLCBjYik7XG5cdCAgfVxuXHQgIHN0YXRlLmVuZGVkID0gdHJ1ZTtcblx0fVxuXHRcblx0LyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovfS5jYWxsKGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18oMTgpKSlcblxuLyoqKi8gfSxcbi8qIDM0ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cblx0Ly9cblx0Ly8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcblx0Ly8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuXHQvLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcblx0Ly8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuXHQvLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG5cdC8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuXHQvLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcblx0Ly9cblx0Ly8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcblx0Ly8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cdC8vXG5cdC8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncblx0Ly8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuXHQvLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG5cdC8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuXHQvLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcblx0Ly8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuXHQvLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXHRcblx0dmFyIEJ1ZmZlciA9IF9fd2VicGFja19yZXF1aXJlX18oMTQpLkJ1ZmZlcjtcblx0XG5cdHZhciBpc0J1ZmZlckVuY29kaW5nID0gQnVmZmVyLmlzRW5jb2Rpbmdcblx0ICB8fCBmdW5jdGlvbihlbmNvZGluZykge1xuXHQgICAgICAgc3dpdGNoIChlbmNvZGluZyAmJiBlbmNvZGluZy50b0xvd2VyQ2FzZSgpKSB7XG5cdCAgICAgICAgIGNhc2UgJ2hleCc6IGNhc2UgJ3V0ZjgnOiBjYXNlICd1dGYtOCc6IGNhc2UgJ2FzY2lpJzogY2FzZSAnYmluYXJ5JzogY2FzZSAnYmFzZTY0JzogY2FzZSAndWNzMic6IGNhc2UgJ3Vjcy0yJzogY2FzZSAndXRmMTZsZSc6IGNhc2UgJ3V0Zi0xNmxlJzogY2FzZSAncmF3JzogcmV0dXJuIHRydWU7XG5cdCAgICAgICAgIGRlZmF1bHQ6IHJldHVybiBmYWxzZTtcblx0ICAgICAgIH1cblx0ICAgICB9XG5cdFxuXHRcblx0ZnVuY3Rpb24gYXNzZXJ0RW5jb2RpbmcoZW5jb2RpbmcpIHtcblx0ICBpZiAoZW5jb2RpbmcgJiYgIWlzQnVmZmVyRW5jb2RpbmcoZW5jb2RpbmcpKSB7XG5cdCAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZyk7XG5cdCAgfVxuXHR9XG5cdFxuXHQvLyBTdHJpbmdEZWNvZGVyIHByb3ZpZGVzIGFuIGludGVyZmFjZSBmb3IgZWZmaWNpZW50bHkgc3BsaXR0aW5nIGEgc2VyaWVzIG9mXG5cdC8vIGJ1ZmZlcnMgaW50byBhIHNlcmllcyBvZiBKUyBzdHJpbmdzIHdpdGhvdXQgYnJlYWtpbmcgYXBhcnQgbXVsdGktYnl0ZVxuXHQvLyBjaGFyYWN0ZXJzLiBDRVNVLTggaXMgaGFuZGxlZCBhcyBwYXJ0IG9mIHRoZSBVVEYtOCBlbmNvZGluZy5cblx0Ly9cblx0Ly8gQFRPRE8gSGFuZGxpbmcgYWxsIGVuY29kaW5ncyBpbnNpZGUgYSBzaW5nbGUgb2JqZWN0IG1ha2VzIGl0IHZlcnkgZGlmZmljdWx0XG5cdC8vIHRvIHJlYXNvbiBhYm91dCB0aGlzIGNvZGUsIHNvIGl0IHNob3VsZCBiZSBzcGxpdCB1cCBpbiB0aGUgZnV0dXJlLlxuXHQvLyBAVE9ETyBUaGVyZSBzaG91bGQgYmUgYSB1dGY4LXN0cmljdCBlbmNvZGluZyB0aGF0IHJlamVjdHMgaW52YWxpZCBVVEYtOCBjb2RlXG5cdC8vIHBvaW50cyBhcyB1c2VkIGJ5IENFU1UtOC5cblx0dmFyIFN0cmluZ0RlY29kZXIgPSBleHBvcnRzLlN0cmluZ0RlY29kZXIgPSBmdW5jdGlvbihlbmNvZGluZykge1xuXHQgIHRoaXMuZW5jb2RpbmcgPSAoZW5jb2RpbmcgfHwgJ3V0ZjgnKS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoL1stX10vLCAnJyk7XG5cdCAgYXNzZXJ0RW5jb2RpbmcoZW5jb2RpbmcpO1xuXHQgIHN3aXRjaCAodGhpcy5lbmNvZGluZykge1xuXHQgICAgY2FzZSAndXRmOCc6XG5cdCAgICAgIC8vIENFU1UtOCByZXByZXNlbnRzIGVhY2ggb2YgU3Vycm9nYXRlIFBhaXIgYnkgMy1ieXRlc1xuXHQgICAgICB0aGlzLnN1cnJvZ2F0ZVNpemUgPSAzO1xuXHQgICAgICBicmVhaztcblx0ICAgIGNhc2UgJ3VjczInOlxuXHQgICAgY2FzZSAndXRmMTZsZSc6XG5cdCAgICAgIC8vIFVURi0xNiByZXByZXNlbnRzIGVhY2ggb2YgU3Vycm9nYXRlIFBhaXIgYnkgMi1ieXRlc1xuXHQgICAgICB0aGlzLnN1cnJvZ2F0ZVNpemUgPSAyO1xuXHQgICAgICB0aGlzLmRldGVjdEluY29tcGxldGVDaGFyID0gdXRmMTZEZXRlY3RJbmNvbXBsZXRlQ2hhcjtcblx0ICAgICAgYnJlYWs7XG5cdCAgICBjYXNlICdiYXNlNjQnOlxuXHQgICAgICAvLyBCYXNlLTY0IHN0b3JlcyAzIGJ5dGVzIGluIDQgY2hhcnMsIGFuZCBwYWRzIHRoZSByZW1haW5kZXIuXG5cdCAgICAgIHRoaXMuc3Vycm9nYXRlU2l6ZSA9IDM7XG5cdCAgICAgIHRoaXMuZGV0ZWN0SW5jb21wbGV0ZUNoYXIgPSBiYXNlNjREZXRlY3RJbmNvbXBsZXRlQ2hhcjtcblx0ICAgICAgYnJlYWs7XG5cdCAgICBkZWZhdWx0OlxuXHQgICAgICB0aGlzLndyaXRlID0gcGFzc1Rocm91Z2hXcml0ZTtcblx0ICAgICAgcmV0dXJuO1xuXHQgIH1cblx0XG5cdCAgLy8gRW5vdWdoIHNwYWNlIHRvIHN0b3JlIGFsbCBieXRlcyBvZiBhIHNpbmdsZSBjaGFyYWN0ZXIuIFVURi04IG5lZWRzIDRcblx0ICAvLyBieXRlcywgYnV0IENFU1UtOCBtYXkgcmVxdWlyZSB1cCB0byA2ICgzIGJ5dGVzIHBlciBzdXJyb2dhdGUpLlxuXHQgIHRoaXMuY2hhckJ1ZmZlciA9IG5ldyBCdWZmZXIoNik7XG5cdCAgLy8gTnVtYmVyIG9mIGJ5dGVzIHJlY2VpdmVkIGZvciB0aGUgY3VycmVudCBpbmNvbXBsZXRlIG11bHRpLWJ5dGUgY2hhcmFjdGVyLlxuXHQgIHRoaXMuY2hhclJlY2VpdmVkID0gMDtcblx0ICAvLyBOdW1iZXIgb2YgYnl0ZXMgZXhwZWN0ZWQgZm9yIHRoZSBjdXJyZW50IGluY29tcGxldGUgbXVsdGktYnl0ZSBjaGFyYWN0ZXIuXG5cdCAgdGhpcy5jaGFyTGVuZ3RoID0gMDtcblx0fTtcblx0XG5cdFxuXHQvLyB3cml0ZSBkZWNvZGVzIHRoZSBnaXZlbiBidWZmZXIgYW5kIHJldHVybnMgaXQgYXMgSlMgc3RyaW5nIHRoYXQgaXNcblx0Ly8gZ3VhcmFudGVlZCB0byBub3QgY29udGFpbiBhbnkgcGFydGlhbCBtdWx0aS1ieXRlIGNoYXJhY3RlcnMuIEFueSBwYXJ0aWFsXG5cdC8vIGNoYXJhY3RlciBmb3VuZCBhdCB0aGUgZW5kIG9mIHRoZSBidWZmZXIgaXMgYnVmZmVyZWQgdXAsIGFuZCB3aWxsIGJlXG5cdC8vIHJldHVybmVkIHdoZW4gY2FsbGluZyB3cml0ZSBhZ2FpbiB3aXRoIHRoZSByZW1haW5pbmcgYnl0ZXMuXG5cdC8vXG5cdC8vIE5vdGU6IENvbnZlcnRpbmcgYSBCdWZmZXIgY29udGFpbmluZyBhbiBvcnBoYW4gc3Vycm9nYXRlIHRvIGEgU3RyaW5nXG5cdC8vIGN1cnJlbnRseSB3b3JrcywgYnV0IGNvbnZlcnRpbmcgYSBTdHJpbmcgdG8gYSBCdWZmZXIgKHZpYSBgbmV3IEJ1ZmZlcmAsIG9yXG5cdC8vIEJ1ZmZlciN3cml0ZSkgd2lsbCByZXBsYWNlIGluY29tcGxldGUgc3Vycm9nYXRlcyB3aXRoIHRoZSB1bmljb2RlXG5cdC8vIHJlcGxhY2VtZW50IGNoYXJhY3Rlci4gU2VlIGh0dHBzOi8vY29kZXJldmlldy5jaHJvbWl1bS5vcmcvMTIxMTczMDA5LyAuXG5cdFN0cmluZ0RlY29kZXIucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24oYnVmZmVyKSB7XG5cdCAgdmFyIGNoYXJTdHIgPSAnJztcblx0ICAvLyBpZiBvdXIgbGFzdCB3cml0ZSBlbmRlZCB3aXRoIGFuIGluY29tcGxldGUgbXVsdGlieXRlIGNoYXJhY3RlclxuXHQgIHdoaWxlICh0aGlzLmNoYXJMZW5ndGgpIHtcblx0ICAgIC8vIGRldGVybWluZSBob3cgbWFueSByZW1haW5pbmcgYnl0ZXMgdGhpcyBidWZmZXIgaGFzIHRvIG9mZmVyIGZvciB0aGlzIGNoYXJcblx0ICAgIHZhciBhdmFpbGFibGUgPSAoYnVmZmVyLmxlbmd0aCA+PSB0aGlzLmNoYXJMZW5ndGggLSB0aGlzLmNoYXJSZWNlaXZlZCkgP1xuXHQgICAgICAgIHRoaXMuY2hhckxlbmd0aCAtIHRoaXMuY2hhclJlY2VpdmVkIDpcblx0ICAgICAgICBidWZmZXIubGVuZ3RoO1xuXHRcblx0ICAgIC8vIGFkZCB0aGUgbmV3IGJ5dGVzIHRvIHRoZSBjaGFyIGJ1ZmZlclxuXHQgICAgYnVmZmVyLmNvcHkodGhpcy5jaGFyQnVmZmVyLCB0aGlzLmNoYXJSZWNlaXZlZCwgMCwgYXZhaWxhYmxlKTtcblx0ICAgIHRoaXMuY2hhclJlY2VpdmVkICs9IGF2YWlsYWJsZTtcblx0XG5cdCAgICBpZiAodGhpcy5jaGFyUmVjZWl2ZWQgPCB0aGlzLmNoYXJMZW5ndGgpIHtcblx0ICAgICAgLy8gc3RpbGwgbm90IGVub3VnaCBjaGFycyBpbiB0aGlzIGJ1ZmZlcj8gd2FpdCBmb3IgbW9yZSAuLi5cblx0ICAgICAgcmV0dXJuICcnO1xuXHQgICAgfVxuXHRcblx0ICAgIC8vIHJlbW92ZSBieXRlcyBiZWxvbmdpbmcgdG8gdGhlIGN1cnJlbnQgY2hhcmFjdGVyIGZyb20gdGhlIGJ1ZmZlclxuXHQgICAgYnVmZmVyID0gYnVmZmVyLnNsaWNlKGF2YWlsYWJsZSwgYnVmZmVyLmxlbmd0aCk7XG5cdFxuXHQgICAgLy8gZ2V0IHRoZSBjaGFyYWN0ZXIgdGhhdCB3YXMgc3BsaXRcblx0ICAgIGNoYXJTdHIgPSB0aGlzLmNoYXJCdWZmZXIuc2xpY2UoMCwgdGhpcy5jaGFyTGVuZ3RoKS50b1N0cmluZyh0aGlzLmVuY29kaW5nKTtcblx0XG5cdCAgICAvLyBDRVNVLTg6IGxlYWQgc3Vycm9nYXRlIChEODAwLURCRkYpIGlzIGFsc28gdGhlIGluY29tcGxldGUgY2hhcmFjdGVyXG5cdCAgICB2YXIgY2hhckNvZGUgPSBjaGFyU3RyLmNoYXJDb2RlQXQoY2hhclN0ci5sZW5ndGggLSAxKTtcblx0ICAgIGlmIChjaGFyQ29kZSA+PSAweEQ4MDAgJiYgY2hhckNvZGUgPD0gMHhEQkZGKSB7XG5cdCAgICAgIHRoaXMuY2hhckxlbmd0aCArPSB0aGlzLnN1cnJvZ2F0ZVNpemU7XG5cdCAgICAgIGNoYXJTdHIgPSAnJztcblx0ICAgICAgY29udGludWU7XG5cdCAgICB9XG5cdCAgICB0aGlzLmNoYXJSZWNlaXZlZCA9IHRoaXMuY2hhckxlbmd0aCA9IDA7XG5cdFxuXHQgICAgLy8gaWYgdGhlcmUgYXJlIG5vIG1vcmUgYnl0ZXMgaW4gdGhpcyBidWZmZXIsIGp1c3QgZW1pdCBvdXIgY2hhclxuXHQgICAgaWYgKGJ1ZmZlci5sZW5ndGggPT09IDApIHtcblx0ICAgICAgcmV0dXJuIGNoYXJTdHI7XG5cdCAgICB9XG5cdCAgICBicmVhaztcblx0ICB9XG5cdFxuXHQgIC8vIGRldGVybWluZSBhbmQgc2V0IGNoYXJMZW5ndGggLyBjaGFyUmVjZWl2ZWRcblx0ICB0aGlzLmRldGVjdEluY29tcGxldGVDaGFyKGJ1ZmZlcik7XG5cdFxuXHQgIHZhciBlbmQgPSBidWZmZXIubGVuZ3RoO1xuXHQgIGlmICh0aGlzLmNoYXJMZW5ndGgpIHtcblx0ICAgIC8vIGJ1ZmZlciB0aGUgaW5jb21wbGV0ZSBjaGFyYWN0ZXIgYnl0ZXMgd2UgZ290XG5cdCAgICBidWZmZXIuY29weSh0aGlzLmNoYXJCdWZmZXIsIDAsIGJ1ZmZlci5sZW5ndGggLSB0aGlzLmNoYXJSZWNlaXZlZCwgZW5kKTtcblx0ICAgIGVuZCAtPSB0aGlzLmNoYXJSZWNlaXZlZDtcblx0ICB9XG5cdFxuXHQgIGNoYXJTdHIgKz0gYnVmZmVyLnRvU3RyaW5nKHRoaXMuZW5jb2RpbmcsIDAsIGVuZCk7XG5cdFxuXHQgIHZhciBlbmQgPSBjaGFyU3RyLmxlbmd0aCAtIDE7XG5cdCAgdmFyIGNoYXJDb2RlID0gY2hhclN0ci5jaGFyQ29kZUF0KGVuZCk7XG5cdCAgLy8gQ0VTVS04OiBsZWFkIHN1cnJvZ2F0ZSAoRDgwMC1EQkZGKSBpcyBhbHNvIHRoZSBpbmNvbXBsZXRlIGNoYXJhY3RlclxuXHQgIGlmIChjaGFyQ29kZSA+PSAweEQ4MDAgJiYgY2hhckNvZGUgPD0gMHhEQkZGKSB7XG5cdCAgICB2YXIgc2l6ZSA9IHRoaXMuc3Vycm9nYXRlU2l6ZTtcblx0ICAgIHRoaXMuY2hhckxlbmd0aCArPSBzaXplO1xuXHQgICAgdGhpcy5jaGFyUmVjZWl2ZWQgKz0gc2l6ZTtcblx0ICAgIHRoaXMuY2hhckJ1ZmZlci5jb3B5KHRoaXMuY2hhckJ1ZmZlciwgc2l6ZSwgMCwgc2l6ZSk7XG5cdCAgICBidWZmZXIuY29weSh0aGlzLmNoYXJCdWZmZXIsIDAsIDAsIHNpemUpO1xuXHQgICAgcmV0dXJuIGNoYXJTdHIuc3Vic3RyaW5nKDAsIGVuZCk7XG5cdCAgfVxuXHRcblx0ICAvLyBvciBqdXN0IGVtaXQgdGhlIGNoYXJTdHJcblx0ICByZXR1cm4gY2hhclN0cjtcblx0fTtcblx0XG5cdC8vIGRldGVjdEluY29tcGxldGVDaGFyIGRldGVybWluZXMgaWYgdGhlcmUgaXMgYW4gaW5jb21wbGV0ZSBVVEYtOCBjaGFyYWN0ZXIgYXRcblx0Ly8gdGhlIGVuZCBvZiB0aGUgZ2l2ZW4gYnVmZmVyLiBJZiBzbywgaXQgc2V0cyB0aGlzLmNoYXJMZW5ndGggdG8gdGhlIGJ5dGVcblx0Ly8gbGVuZ3RoIHRoYXQgY2hhcmFjdGVyLCBhbmQgc2V0cyB0aGlzLmNoYXJSZWNlaXZlZCB0byB0aGUgbnVtYmVyIG9mIGJ5dGVzXG5cdC8vIHRoYXQgYXJlIGF2YWlsYWJsZSBmb3IgdGhpcyBjaGFyYWN0ZXIuXG5cdFN0cmluZ0RlY29kZXIucHJvdG90eXBlLmRldGVjdEluY29tcGxldGVDaGFyID0gZnVuY3Rpb24oYnVmZmVyKSB7XG5cdCAgLy8gZGV0ZXJtaW5lIGhvdyBtYW55IGJ5dGVzIHdlIGhhdmUgdG8gY2hlY2sgYXQgdGhlIGVuZCBvZiB0aGlzIGJ1ZmZlclxuXHQgIHZhciBpID0gKGJ1ZmZlci5sZW5ndGggPj0gMykgPyAzIDogYnVmZmVyLmxlbmd0aDtcblx0XG5cdCAgLy8gRmlndXJlIG91dCBpZiBvbmUgb2YgdGhlIGxhc3QgaSBieXRlcyBvZiBvdXIgYnVmZmVyIGFubm91bmNlcyBhblxuXHQgIC8vIGluY29tcGxldGUgY2hhci5cblx0ICBmb3IgKDsgaSA+IDA7IGktLSkge1xuXHQgICAgdmFyIGMgPSBidWZmZXJbYnVmZmVyLmxlbmd0aCAtIGldO1xuXHRcblx0ICAgIC8vIFNlZSBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1VURi04I0Rlc2NyaXB0aW9uXG5cdFxuXHQgICAgLy8gMTEwWFhYWFhcblx0ICAgIGlmIChpID09IDEgJiYgYyA+PiA1ID09IDB4MDYpIHtcblx0ICAgICAgdGhpcy5jaGFyTGVuZ3RoID0gMjtcblx0ICAgICAgYnJlYWs7XG5cdCAgICB9XG5cdFxuXHQgICAgLy8gMTExMFhYWFhcblx0ICAgIGlmIChpIDw9IDIgJiYgYyA+PiA0ID09IDB4MEUpIHtcblx0ICAgICAgdGhpcy5jaGFyTGVuZ3RoID0gMztcblx0ICAgICAgYnJlYWs7XG5cdCAgICB9XG5cdFxuXHQgICAgLy8gMTExMTBYWFhcblx0ICAgIGlmIChpIDw9IDMgJiYgYyA+PiAzID09IDB4MUUpIHtcblx0ICAgICAgdGhpcy5jaGFyTGVuZ3RoID0gNDtcblx0ICAgICAgYnJlYWs7XG5cdCAgICB9XG5cdCAgfVxuXHQgIHRoaXMuY2hhclJlY2VpdmVkID0gaTtcblx0fTtcblx0XG5cdFN0cmluZ0RlY29kZXIucHJvdG90eXBlLmVuZCA9IGZ1bmN0aW9uKGJ1ZmZlcikge1xuXHQgIHZhciByZXMgPSAnJztcblx0ICBpZiAoYnVmZmVyICYmIGJ1ZmZlci5sZW5ndGgpXG5cdCAgICByZXMgPSB0aGlzLndyaXRlKGJ1ZmZlcik7XG5cdFxuXHQgIGlmICh0aGlzLmNoYXJSZWNlaXZlZCkge1xuXHQgICAgdmFyIGNyID0gdGhpcy5jaGFyUmVjZWl2ZWQ7XG5cdCAgICB2YXIgYnVmID0gdGhpcy5jaGFyQnVmZmVyO1xuXHQgICAgdmFyIGVuYyA9IHRoaXMuZW5jb2Rpbmc7XG5cdCAgICByZXMgKz0gYnVmLnNsaWNlKDAsIGNyKS50b1N0cmluZyhlbmMpO1xuXHQgIH1cblx0XG5cdCAgcmV0dXJuIHJlcztcblx0fTtcblx0XG5cdGZ1bmN0aW9uIHBhc3NUaHJvdWdoV3JpdGUoYnVmZmVyKSB7XG5cdCAgcmV0dXJuIGJ1ZmZlci50b1N0cmluZyh0aGlzLmVuY29kaW5nKTtcblx0fVxuXHRcblx0ZnVuY3Rpb24gdXRmMTZEZXRlY3RJbmNvbXBsZXRlQ2hhcihidWZmZXIpIHtcblx0ICB0aGlzLmNoYXJSZWNlaXZlZCA9IGJ1ZmZlci5sZW5ndGggJSAyO1xuXHQgIHRoaXMuY2hhckxlbmd0aCA9IHRoaXMuY2hhclJlY2VpdmVkID8gMiA6IDA7XG5cdH1cblx0XG5cdGZ1bmN0aW9uIGJhc2U2NERldGVjdEluY29tcGxldGVDaGFyKGJ1ZmZlcikge1xuXHQgIHRoaXMuY2hhclJlY2VpdmVkID0gYnVmZmVyLmxlbmd0aCAlIDM7XG5cdCAgdGhpcy5jaGFyTGVuZ3RoID0gdGhpcy5jaGFyUmVjZWl2ZWQgPyAzIDogMDtcblx0fVxuXG5cbi8qKiovIH0sXG4vKiAzNSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0Ly8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG5cdC8vXG5cdC8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG5cdC8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcblx0Ly8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG5cdC8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcblx0Ly8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuXHQvLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcblx0Ly8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cdC8vXG5cdC8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG5cdC8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuXHQvL1xuXHQvLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG5cdC8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcblx0Ly8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuXHQvLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcblx0Ly8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG5cdC8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcblx0Ly8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblx0XG5cdFxuXHQvLyBhIHRyYW5zZm9ybSBzdHJlYW0gaXMgYSByZWFkYWJsZS93cml0YWJsZSBzdHJlYW0gd2hlcmUgeW91IGRvXG5cdC8vIHNvbWV0aGluZyB3aXRoIHRoZSBkYXRhLiAgU29tZXRpbWVzIGl0J3MgY2FsbGVkIGEgXCJmaWx0ZXJcIixcblx0Ly8gYnV0IHRoYXQncyBub3QgYSBncmVhdCBuYW1lIGZvciBpdCwgc2luY2UgdGhhdCBpbXBsaWVzIGEgdGhpbmcgd2hlcmVcblx0Ly8gc29tZSBiaXRzIHBhc3MgdGhyb3VnaCwgYW5kIG90aGVycyBhcmUgc2ltcGx5IGlnbm9yZWQuICAoVGhhdCB3b3VsZFxuXHQvLyBiZSBhIHZhbGlkIGV4YW1wbGUgb2YgYSB0cmFuc2Zvcm0sIG9mIGNvdXJzZS4pXG5cdC8vXG5cdC8vIFdoaWxlIHRoZSBvdXRwdXQgaXMgY2F1c2FsbHkgcmVsYXRlZCB0byB0aGUgaW5wdXQsIGl0J3Mgbm90IGFcblx0Ly8gbmVjZXNzYXJpbHkgc3ltbWV0cmljIG9yIHN5bmNocm9ub3VzIHRyYW5zZm9ybWF0aW9uLiAgRm9yIGV4YW1wbGUsXG5cdC8vIGEgemxpYiBzdHJlYW0gbWlnaHQgdGFrZSBtdWx0aXBsZSBwbGFpbi10ZXh0IHdyaXRlcygpLCBhbmQgdGhlblxuXHQvLyBlbWl0IGEgc2luZ2xlIGNvbXByZXNzZWQgY2h1bmsgc29tZSB0aW1lIGluIHRoZSBmdXR1cmUuXG5cdC8vXG5cdC8vIEhlcmUncyBob3cgdGhpcyB3b3Jrczpcblx0Ly9cblx0Ly8gVGhlIFRyYW5zZm9ybSBzdHJlYW0gaGFzIGFsbCB0aGUgYXNwZWN0cyBvZiB0aGUgcmVhZGFibGUgYW5kIHdyaXRhYmxlXG5cdC8vIHN0cmVhbSBjbGFzc2VzLiAgV2hlbiB5b3Ugd3JpdGUoY2h1bmspLCB0aGF0IGNhbGxzIF93cml0ZShjaHVuayxjYilcblx0Ly8gaW50ZXJuYWxseSwgYW5kIHJldHVybnMgZmFsc2UgaWYgdGhlcmUncyBhIGxvdCBvZiBwZW5kaW5nIHdyaXRlc1xuXHQvLyBidWZmZXJlZCB1cC4gIFdoZW4geW91IGNhbGwgcmVhZCgpLCB0aGF0IGNhbGxzIF9yZWFkKG4pIHVudGlsXG5cdC8vIHRoZXJlJ3MgZW5vdWdoIHBlbmRpbmcgcmVhZGFibGUgZGF0YSBidWZmZXJlZCB1cC5cblx0Ly9cblx0Ly8gSW4gYSB0cmFuc2Zvcm0gc3RyZWFtLCB0aGUgd3JpdHRlbiBkYXRhIGlzIHBsYWNlZCBpbiBhIGJ1ZmZlci4gIFdoZW5cblx0Ly8gX3JlYWQobikgaXMgY2FsbGVkLCBpdCB0cmFuc2Zvcm1zIHRoZSBxdWV1ZWQgdXAgZGF0YSwgY2FsbGluZyB0aGVcblx0Ly8gYnVmZmVyZWQgX3dyaXRlIGNiJ3MgYXMgaXQgY29uc3VtZXMgY2h1bmtzLiAgSWYgY29uc3VtaW5nIGEgc2luZ2xlXG5cdC8vIHdyaXR0ZW4gY2h1bmsgd291bGQgcmVzdWx0IGluIG11bHRpcGxlIG91dHB1dCBjaHVua3MsIHRoZW4gdGhlIGZpcnN0XG5cdC8vIG91dHB1dHRlZCBiaXQgY2FsbHMgdGhlIHJlYWRjYiwgYW5kIHN1YnNlcXVlbnQgY2h1bmtzIGp1c3QgZ28gaW50b1xuXHQvLyB0aGUgcmVhZCBidWZmZXIsIGFuZCB3aWxsIGNhdXNlIGl0IHRvIGVtaXQgJ3JlYWRhYmxlJyBpZiBuZWNlc3NhcnkuXG5cdC8vXG5cdC8vIFRoaXMgd2F5LCBiYWNrLXByZXNzdXJlIGlzIGFjdHVhbGx5IGRldGVybWluZWQgYnkgdGhlIHJlYWRpbmcgc2lkZSxcblx0Ly8gc2luY2UgX3JlYWQgaGFzIHRvIGJlIGNhbGxlZCB0byBzdGFydCBwcm9jZXNzaW5nIGEgbmV3IGNodW5rLiAgSG93ZXZlcixcblx0Ly8gYSBwYXRob2xvZ2ljYWwgaW5mbGF0ZSB0eXBlIG9mIHRyYW5zZm9ybSBjYW4gY2F1c2UgZXhjZXNzaXZlIGJ1ZmZlcmluZ1xuXHQvLyBoZXJlLiAgRm9yIGV4YW1wbGUsIGltYWdpbmUgYSBzdHJlYW0gd2hlcmUgZXZlcnkgYnl0ZSBvZiBpbnB1dCBpc1xuXHQvLyBpbnRlcnByZXRlZCBhcyBhbiBpbnRlZ2VyIGZyb20gMC0yNTUsIGFuZCB0aGVuIHJlc3VsdHMgaW4gdGhhdCBtYW55XG5cdC8vIGJ5dGVzIG9mIG91dHB1dC4gIFdyaXRpbmcgdGhlIDQgYnl0ZXMge2ZmLGZmLGZmLGZmfSB3b3VsZCByZXN1bHQgaW5cblx0Ly8gMWtiIG9mIGRhdGEgYmVpbmcgb3V0cHV0LiAgSW4gdGhpcyBjYXNlLCB5b3UgY291bGQgd3JpdGUgYSB2ZXJ5IHNtYWxsXG5cdC8vIGFtb3VudCBvZiBpbnB1dCwgYW5kIGVuZCB1cCB3aXRoIGEgdmVyeSBsYXJnZSBhbW91bnQgb2Ygb3V0cHV0LiAgSW5cblx0Ly8gc3VjaCBhIHBhdGhvbG9naWNhbCBpbmZsYXRpbmcgbWVjaGFuaXNtLCB0aGVyZSdkIGJlIG5vIHdheSB0byB0ZWxsXG5cdC8vIHRoZSBzeXN0ZW0gdG8gc3RvcCBkb2luZyB0aGUgdHJhbnNmb3JtLiAgQSBzaW5nbGUgNE1CIHdyaXRlIGNvdWxkXG5cdC8vIGNhdXNlIHRoZSBzeXN0ZW0gdG8gcnVuIG91dCBvZiBtZW1vcnkuXG5cdC8vXG5cdC8vIEhvd2V2ZXIsIGV2ZW4gaW4gc3VjaCBhIHBhdGhvbG9naWNhbCBjYXNlLCBvbmx5IGEgc2luZ2xlIHdyaXR0ZW4gY2h1bmtcblx0Ly8gd291bGQgYmUgY29uc3VtZWQsIGFuZCB0aGVuIHRoZSByZXN0IHdvdWxkIHdhaXQgKHVuLXRyYW5zZm9ybWVkKSB1bnRpbFxuXHQvLyB0aGUgcmVzdWx0cyBvZiB0aGUgcHJldmlvdXMgdHJhbnNmb3JtZWQgY2h1bmsgd2VyZSBjb25zdW1lZC5cblx0XG5cdG1vZHVsZS5leHBvcnRzID0gVHJhbnNmb3JtO1xuXHRcblx0dmFyIER1cGxleCA9IF9fd2VicGFja19yZXF1aXJlX18oMzIpO1xuXHRcblx0Lyo8cmVwbGFjZW1lbnQ+Ki9cblx0dmFyIHV0aWwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI5KTtcblx0dXRpbC5pbmhlcml0cyA9IF9fd2VicGFja19yZXF1aXJlX18oMzApO1xuXHQvKjwvcmVwbGFjZW1lbnQ+Ki9cblx0XG5cdHV0aWwuaW5oZXJpdHMoVHJhbnNmb3JtLCBEdXBsZXgpO1xuXHRcblx0XG5cdGZ1bmN0aW9uIFRyYW5zZm9ybVN0YXRlKG9wdGlvbnMsIHN0cmVhbSkge1xuXHQgIHRoaXMuYWZ0ZXJUcmFuc2Zvcm0gPSBmdW5jdGlvbihlciwgZGF0YSkge1xuXHQgICAgcmV0dXJuIGFmdGVyVHJhbnNmb3JtKHN0cmVhbSwgZXIsIGRhdGEpO1xuXHQgIH07XG5cdFxuXHQgIHRoaXMubmVlZFRyYW5zZm9ybSA9IGZhbHNlO1xuXHQgIHRoaXMudHJhbnNmb3JtaW5nID0gZmFsc2U7XG5cdCAgdGhpcy53cml0ZWNiID0gbnVsbDtcblx0ICB0aGlzLndyaXRlY2h1bmsgPSBudWxsO1xuXHR9XG5cdFxuXHRmdW5jdGlvbiBhZnRlclRyYW5zZm9ybShzdHJlYW0sIGVyLCBkYXRhKSB7XG5cdCAgdmFyIHRzID0gc3RyZWFtLl90cmFuc2Zvcm1TdGF0ZTtcblx0ICB0cy50cmFuc2Zvcm1pbmcgPSBmYWxzZTtcblx0XG5cdCAgdmFyIGNiID0gdHMud3JpdGVjYjtcblx0XG5cdCAgaWYgKCFjYilcblx0ICAgIHJldHVybiBzdHJlYW0uZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IoJ25vIHdyaXRlY2IgaW4gVHJhbnNmb3JtIGNsYXNzJykpO1xuXHRcblx0ICB0cy53cml0ZWNodW5rID0gbnVsbDtcblx0ICB0cy53cml0ZWNiID0gbnVsbDtcblx0XG5cdCAgaWYgKCF1dGlsLmlzTnVsbE9yVW5kZWZpbmVkKGRhdGEpKVxuXHQgICAgc3RyZWFtLnB1c2goZGF0YSk7XG5cdFxuXHQgIGlmIChjYilcblx0ICAgIGNiKGVyKTtcblx0XG5cdCAgdmFyIHJzID0gc3RyZWFtLl9yZWFkYWJsZVN0YXRlO1xuXHQgIHJzLnJlYWRpbmcgPSBmYWxzZTtcblx0ICBpZiAocnMubmVlZFJlYWRhYmxlIHx8IHJzLmxlbmd0aCA8IHJzLmhpZ2hXYXRlck1hcmspIHtcblx0ICAgIHN0cmVhbS5fcmVhZChycy5oaWdoV2F0ZXJNYXJrKTtcblx0ICB9XG5cdH1cblx0XG5cdFxuXHRmdW5jdGlvbiBUcmFuc2Zvcm0ob3B0aW9ucykge1xuXHQgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBUcmFuc2Zvcm0pKVxuXHQgICAgcmV0dXJuIG5ldyBUcmFuc2Zvcm0ob3B0aW9ucyk7XG5cdFxuXHQgIER1cGxleC5jYWxsKHRoaXMsIG9wdGlvbnMpO1xuXHRcblx0ICB0aGlzLl90cmFuc2Zvcm1TdGF0ZSA9IG5ldyBUcmFuc2Zvcm1TdGF0ZShvcHRpb25zLCB0aGlzKTtcblx0XG5cdCAgLy8gd2hlbiB0aGUgd3JpdGFibGUgc2lkZSBmaW5pc2hlcywgdGhlbiBmbHVzaCBvdXQgYW55dGhpbmcgcmVtYWluaW5nLlxuXHQgIHZhciBzdHJlYW0gPSB0aGlzO1xuXHRcblx0ICAvLyBzdGFydCBvdXQgYXNraW5nIGZvciBhIHJlYWRhYmxlIGV2ZW50IG9uY2UgZGF0YSBpcyB0cmFuc2Zvcm1lZC5cblx0ICB0aGlzLl9yZWFkYWJsZVN0YXRlLm5lZWRSZWFkYWJsZSA9IHRydWU7XG5cdFxuXHQgIC8vIHdlIGhhdmUgaW1wbGVtZW50ZWQgdGhlIF9yZWFkIG1ldGhvZCwgYW5kIGRvbmUgdGhlIG90aGVyIHRoaW5nc1xuXHQgIC8vIHRoYXQgUmVhZGFibGUgd2FudHMgYmVmb3JlIHRoZSBmaXJzdCBfcmVhZCBjYWxsLCBzbyB1bnNldCB0aGVcblx0ICAvLyBzeW5jIGd1YXJkIGZsYWcuXG5cdCAgdGhpcy5fcmVhZGFibGVTdGF0ZS5zeW5jID0gZmFsc2U7XG5cdFxuXHQgIHRoaXMub25jZSgncHJlZmluaXNoJywgZnVuY3Rpb24oKSB7XG5cdCAgICBpZiAodXRpbC5pc0Z1bmN0aW9uKHRoaXMuX2ZsdXNoKSlcblx0ICAgICAgdGhpcy5fZmx1c2goZnVuY3Rpb24oZXIpIHtcblx0ICAgICAgICBkb25lKHN0cmVhbSwgZXIpO1xuXHQgICAgICB9KTtcblx0ICAgIGVsc2Vcblx0ICAgICAgZG9uZShzdHJlYW0pO1xuXHQgIH0pO1xuXHR9XG5cdFxuXHRUcmFuc2Zvcm0ucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbihjaHVuaywgZW5jb2RpbmcpIHtcblx0ICB0aGlzLl90cmFuc2Zvcm1TdGF0ZS5uZWVkVHJhbnNmb3JtID0gZmFsc2U7XG5cdCAgcmV0dXJuIER1cGxleC5wcm90b3R5cGUucHVzaC5jYWxsKHRoaXMsIGNodW5rLCBlbmNvZGluZyk7XG5cdH07XG5cdFxuXHQvLyBUaGlzIGlzIHRoZSBwYXJ0IHdoZXJlIHlvdSBkbyBzdHVmZiFcblx0Ly8gb3ZlcnJpZGUgdGhpcyBmdW5jdGlvbiBpbiBpbXBsZW1lbnRhdGlvbiBjbGFzc2VzLlxuXHQvLyAnY2h1bmsnIGlzIGFuIGlucHV0IGNodW5rLlxuXHQvL1xuXHQvLyBDYWxsIGBwdXNoKG5ld0NodW5rKWAgdG8gcGFzcyBhbG9uZyB0cmFuc2Zvcm1lZCBvdXRwdXRcblx0Ly8gdG8gdGhlIHJlYWRhYmxlIHNpZGUuICBZb3UgbWF5IGNhbGwgJ3B1c2gnIHplcm8gb3IgbW9yZSB0aW1lcy5cblx0Ly9cblx0Ly8gQ2FsbCBgY2IoZXJyKWAgd2hlbiB5b3UgYXJlIGRvbmUgd2l0aCB0aGlzIGNodW5rLiAgSWYgeW91IHBhc3Ncblx0Ly8gYW4gZXJyb3IsIHRoZW4gdGhhdCdsbCBwdXQgdGhlIGh1cnQgb24gdGhlIHdob2xlIG9wZXJhdGlvbi4gIElmIHlvdVxuXHQvLyBuZXZlciBjYWxsIGNiKCksIHRoZW4geW91J2xsIG5ldmVyIGdldCBhbm90aGVyIGNodW5rLlxuXHRUcmFuc2Zvcm0ucHJvdG90eXBlLl90cmFuc2Zvcm0gPSBmdW5jdGlvbihjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG5cdCAgdGhyb3cgbmV3IEVycm9yKCdub3QgaW1wbGVtZW50ZWQnKTtcblx0fTtcblx0XG5cdFRyYW5zZm9ybS5wcm90b3R5cGUuX3dyaXRlID0gZnVuY3Rpb24oY2h1bmssIGVuY29kaW5nLCBjYikge1xuXHQgIHZhciB0cyA9IHRoaXMuX3RyYW5zZm9ybVN0YXRlO1xuXHQgIHRzLndyaXRlY2IgPSBjYjtcblx0ICB0cy53cml0ZWNodW5rID0gY2h1bms7XG5cdCAgdHMud3JpdGVlbmNvZGluZyA9IGVuY29kaW5nO1xuXHQgIGlmICghdHMudHJhbnNmb3JtaW5nKSB7XG5cdCAgICB2YXIgcnMgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuXHQgICAgaWYgKHRzLm5lZWRUcmFuc2Zvcm0gfHxcblx0ICAgICAgICBycy5uZWVkUmVhZGFibGUgfHxcblx0ICAgICAgICBycy5sZW5ndGggPCBycy5oaWdoV2F0ZXJNYXJrKVxuXHQgICAgICB0aGlzLl9yZWFkKHJzLmhpZ2hXYXRlck1hcmspO1xuXHQgIH1cblx0fTtcblx0XG5cdC8vIERvZXNuJ3QgbWF0dGVyIHdoYXQgdGhlIGFyZ3MgYXJlIGhlcmUuXG5cdC8vIF90cmFuc2Zvcm0gZG9lcyBhbGwgdGhlIHdvcmsuXG5cdC8vIFRoYXQgd2UgZ290IGhlcmUgbWVhbnMgdGhhdCB0aGUgcmVhZGFibGUgc2lkZSB3YW50cyBtb3JlIGRhdGEuXG5cdFRyYW5zZm9ybS5wcm90b3R5cGUuX3JlYWQgPSBmdW5jdGlvbihuKSB7XG5cdCAgdmFyIHRzID0gdGhpcy5fdHJhbnNmb3JtU3RhdGU7XG5cdFxuXHQgIGlmICghdXRpbC5pc051bGwodHMud3JpdGVjaHVuaykgJiYgdHMud3JpdGVjYiAmJiAhdHMudHJhbnNmb3JtaW5nKSB7XG5cdCAgICB0cy50cmFuc2Zvcm1pbmcgPSB0cnVlO1xuXHQgICAgdGhpcy5fdHJhbnNmb3JtKHRzLndyaXRlY2h1bmssIHRzLndyaXRlZW5jb2RpbmcsIHRzLmFmdGVyVHJhbnNmb3JtKTtcblx0ICB9IGVsc2Uge1xuXHQgICAgLy8gbWFyayB0aGF0IHdlIG5lZWQgYSB0cmFuc2Zvcm0sIHNvIHRoYXQgYW55IGRhdGEgdGhhdCBjb21lcyBpblxuXHQgICAgLy8gd2lsbCBnZXQgcHJvY2Vzc2VkLCBub3cgdGhhdCB3ZSd2ZSBhc2tlZCBmb3IgaXQuXG5cdCAgICB0cy5uZWVkVHJhbnNmb3JtID0gdHJ1ZTtcblx0ICB9XG5cdH07XG5cdFxuXHRcblx0ZnVuY3Rpb24gZG9uZShzdHJlYW0sIGVyKSB7XG5cdCAgaWYgKGVyKVxuXHQgICAgcmV0dXJuIHN0cmVhbS5lbWl0KCdlcnJvcicsIGVyKTtcblx0XG5cdCAgLy8gaWYgdGhlcmUncyBub3RoaW5nIGluIHRoZSB3cml0ZSBidWZmZXIsIHRoZW4gdGhhdCBtZWFuc1xuXHQgIC8vIHRoYXQgbm90aGluZyBtb3JlIHdpbGwgZXZlciBiZSBwcm92aWRlZFxuXHQgIHZhciB3cyA9IHN0cmVhbS5fd3JpdGFibGVTdGF0ZTtcblx0ICB2YXIgdHMgPSBzdHJlYW0uX3RyYW5zZm9ybVN0YXRlO1xuXHRcblx0ICBpZiAod3MubGVuZ3RoKVxuXHQgICAgdGhyb3cgbmV3IEVycm9yKCdjYWxsaW5nIHRyYW5zZm9ybSBkb25lIHdoZW4gd3MubGVuZ3RoICE9IDAnKTtcblx0XG5cdCAgaWYgKHRzLnRyYW5zZm9ybWluZylcblx0ICAgIHRocm93IG5ldyBFcnJvcignY2FsbGluZyB0cmFuc2Zvcm0gZG9uZSB3aGVuIHN0aWxsIHRyYW5zZm9ybWluZycpO1xuXHRcblx0ICByZXR1cm4gc3RyZWFtLnB1c2gobnVsbCk7XG5cdH1cblxuXG4vKioqLyB9LFxuLyogMzYgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuXHQvL1xuXHQvLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuXHQvLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG5cdC8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuXHQvLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG5cdC8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcblx0Ly8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG5cdC8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXHQvL1xuXHQvLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuXHQvLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblx0Ly9cblx0Ly8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuXHQvLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG5cdC8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cblx0Ly8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG5cdC8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuXHQvLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG5cdC8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cdFxuXHQvLyBhIHBhc3N0aHJvdWdoIHN0cmVhbS5cblx0Ly8gYmFzaWNhbGx5IGp1c3QgdGhlIG1vc3QgbWluaW1hbCBzb3J0IG9mIFRyYW5zZm9ybSBzdHJlYW0uXG5cdC8vIEV2ZXJ5IHdyaXR0ZW4gY2h1bmsgZ2V0cyBvdXRwdXQgYXMtaXMuXG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IFBhc3NUaHJvdWdoO1xuXHRcblx0dmFyIFRyYW5zZm9ybSA9IF9fd2VicGFja19yZXF1aXJlX18oMzUpO1xuXHRcblx0Lyo8cmVwbGFjZW1lbnQ+Ki9cblx0dmFyIHV0aWwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI5KTtcblx0dXRpbC5pbmhlcml0cyA9IF9fd2VicGFja19yZXF1aXJlX18oMzApO1xuXHQvKjwvcmVwbGFjZW1lbnQ+Ki9cblx0XG5cdHV0aWwuaW5oZXJpdHMoUGFzc1Rocm91Z2gsIFRyYW5zZm9ybSk7XG5cdFxuXHRmdW5jdGlvbiBQYXNzVGhyb3VnaChvcHRpb25zKSB7XG5cdCAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFBhc3NUaHJvdWdoKSlcblx0ICAgIHJldHVybiBuZXcgUGFzc1Rocm91Z2gob3B0aW9ucyk7XG5cdFxuXHQgIFRyYW5zZm9ybS5jYWxsKHRoaXMsIG9wdGlvbnMpO1xuXHR9XG5cdFxuXHRQYXNzVGhyb3VnaC5wcm90b3R5cGUuX3RyYW5zZm9ybSA9IGZ1bmN0aW9uKGNodW5rLCBlbmNvZGluZywgY2IpIHtcblx0ICBjYihudWxsLCBjaHVuayk7XG5cdH07XG5cblxuLyoqKi8gfSxcbi8qIDM3ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18oMzMpXG5cblxuLyoqKi8gfSxcbi8qIDM4ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18oMzIpXG5cblxuLyoqKi8gfSxcbi8qIDM5ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18oMzUpXG5cblxuLyoqKi8gfSxcbi8qIDQwICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18oMzYpXG5cblxuLyoqKi8gfSxcbi8qIDQxICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi8oZnVuY3Rpb24ocHJvY2Vzcykgey8qXG5cdCAqIGV4dHNwcmludGYuanM6IGV4dGVuZGVkIFBPU0lYLXN0eWxlIHNwcmludGZcblx0ICovXG5cdFxuXHR2YXIgbW9kX2Fzc2VydCA9IF9fd2VicGFja19yZXF1aXJlX18oMTkpO1xuXHR2YXIgbW9kX3V0aWwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIwKTtcblx0XG5cdC8qXG5cdCAqIFB1YmxpYyBpbnRlcmZhY2Vcblx0ICovXG5cdGV4cG9ydHMuc3ByaW50ZiA9IGpzU3ByaW50Zjtcblx0ZXhwb3J0cy5wcmludGYgPSBqc1ByaW50Zjtcblx0ZXhwb3J0cy5mcHJpbnRmID0ganNGcHJpbnRmO1xuXHRcblx0Lypcblx0ICogU3RyaXBwZWQgZG93biB2ZXJzaW9uIG9mIHNbbl1wcmludGYoM2MpLiAgV2UgbWFrZSBhIGJlc3QgZWZmb3J0IHRvIHRocm93IGFuXG5cdCAqIGV4Y2VwdGlvbiB3aGVuIGdpdmVuIGEgZm9ybWF0IHN0cmluZyB3ZSBkb24ndCB1bmRlcnN0YW5kLCByYXRoZXIgdGhhblxuXHQgKiBpZ25vcmluZyBpdCwgc28gdGhhdCB3ZSB3b24ndCBicmVhayBleGlzdGluZyBwcm9ncmFtcyBpZi93aGVuIHdlIGdvIGltcGxlbWVudFxuXHQgKiB0aGUgcmVzdCBvZiB0aGlzLlxuXHQgKlxuXHQgKiBUaGlzIGltcGxlbWVudGF0aW9uIGN1cnJlbnRseSBzdXBwb3J0cyBzcGVjaWZ5aW5nXG5cdCAqXHQtIGZpZWxkIGFsaWdubWVudCAoJy0nIGZsYWcpLFxuXHQgKiBcdC0gemVyby1wYWQgKCcwJyBmbGFnKVxuXHQgKlx0LSBhbHdheXMgc2hvdyBudW1lcmljIHNpZ24gKCcrJyBmbGFnKSxcblx0ICpcdC0gZmllbGQgd2lkdGhcblx0ICpcdC0gY29udmVyc2lvbnMgZm9yIHN0cmluZ3MsIGRlY2ltYWwgaW50ZWdlcnMsIGFuZCBmbG9hdHMgKG51bWJlcnMpLlxuXHQgKlx0LSBhcmd1bWVudCBzaXplIHNwZWNpZmllcnMuICBUaGVzZSBhcmUgYWxsIGFjY2VwdGVkIGJ1dCBpZ25vcmVkLCBzaW5jZVxuXHQgKlx0ICBKYXZhc2NyaXB0IGhhcyBubyBub3Rpb24gb2YgdGhlIHBoeXNpY2FsIHNpemUgb2YgYW4gYXJndW1lbnQuXG5cdCAqXG5cdCAqIEV2ZXJ5dGhpbmcgZWxzZSBpcyBjdXJyZW50bHkgdW5zdXBwb3J0ZWQsIG1vc3Qgbm90YWJseSBwcmVjaXNpb24sIHVuc2lnbmVkXG5cdCAqIG51bWJlcnMsIG5vbi1kZWNpbWFsIG51bWJlcnMsIGFuZCBjaGFyYWN0ZXJzLlxuXHQgKi9cblx0ZnVuY3Rpb24ganNTcHJpbnRmKGZtdClcblx0e1xuXHRcdHZhciByZWdleCA9IFtcblx0XHQgICAgJyhbXiVdKiknLFx0XHRcdFx0Lyogbm9ybWFsIHRleHQgKi9cblx0XHQgICAgJyUnLFx0XHRcdFx0Lyogc3RhcnQgb2YgZm9ybWF0ICovXG5cdFx0ICAgICcoW1xcJ1xcXFwtKyAjMF0qPyknLFx0XHRcdC8qIGZsYWdzIChvcHRpb25hbCkgKi9cblx0XHQgICAgJyhbMS05XVxcXFxkKik/JyxcdFx0XHQvKiB3aWR0aCAob3B0aW9uYWwpICovXG5cdFx0ICAgICcoXFxcXC4oWzEtOV1cXFxcZCopKT8nLFx0XHQvKiBwcmVjaXNpb24gKG9wdGlvbmFsKSAqL1xuXHRcdCAgICAnW2xoanp0TF0qPycsXHRcdFx0LyogbGVuZ3RoIG1vZHMgKGlnbm9yZWQpICovXG5cdFx0ICAgICcoW2Rpb3V4WGZGZUVnR2FBY0NzU3AlanJdKSdcdC8qIGNvbnZlcnNpb24gKi9cblx0XHRdLmpvaW4oJycpO1xuXHRcblx0XHR2YXIgcmUgPSBuZXcgUmVnRXhwKHJlZ2V4KTtcblx0XHR2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG5cdFx0dmFyIGZsYWdzLCB3aWR0aCwgcHJlY2lzaW9uLCBjb252ZXJzaW9uO1xuXHRcdHZhciBsZWZ0LCBwYWQsIHNpZ24sIGFyZywgbWF0Y2g7XG5cdFx0dmFyIHJldCA9ICcnO1xuXHRcdHZhciBhcmduID0gMTtcblx0XG5cdFx0bW9kX2Fzc2VydC5lcXVhbCgnc3RyaW5nJywgdHlwZW9mIChmbXQpKTtcblx0XG5cdFx0d2hpbGUgKChtYXRjaCA9IHJlLmV4ZWMoZm10KSkgIT09IG51bGwpIHtcblx0XHRcdHJldCArPSBtYXRjaFsxXTtcblx0XHRcdGZtdCA9IGZtdC5zdWJzdHJpbmcobWF0Y2hbMF0ubGVuZ3RoKTtcblx0XG5cdFx0XHRmbGFncyA9IG1hdGNoWzJdIHx8ICcnO1xuXHRcdFx0d2lkdGggPSBtYXRjaFszXSB8fCAwO1xuXHRcdFx0cHJlY2lzaW9uID0gbWF0Y2hbNF0gfHwgJyc7XG5cdFx0XHRjb252ZXJzaW9uID0gbWF0Y2hbNl07XG5cdFx0XHRsZWZ0ID0gZmFsc2U7XG5cdFx0XHRzaWduID0gZmFsc2U7XG5cdFx0XHRwYWQgPSAnICc7XG5cdFxuXHRcdFx0aWYgKGNvbnZlcnNpb24gPT0gJyUnKSB7XG5cdFx0XHRcdHJldCArPSAnJSc7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXHRcblx0XHRcdGlmIChhcmdzLmxlbmd0aCA9PT0gMClcblx0XHRcdFx0dGhyb3cgKG5ldyBFcnJvcigndG9vIGZldyBhcmdzIHRvIHNwcmludGYnKSk7XG5cdFxuXHRcdFx0YXJnID0gYXJncy5zaGlmdCgpO1xuXHRcdFx0YXJnbisrO1xuXHRcblx0XHRcdGlmIChmbGFncy5tYXRjaCgvW1xcJyAjXS8pKVxuXHRcdFx0XHR0aHJvdyAobmV3IEVycm9yKFxuXHRcdFx0XHQgICAgJ3Vuc3VwcG9ydGVkIGZsYWdzOiAnICsgZmxhZ3MpKTtcblx0XG5cdFx0XHRpZiAocHJlY2lzaW9uLmxlbmd0aCA+IDApXG5cdFx0XHRcdHRocm93IChuZXcgRXJyb3IoXG5cdFx0XHRcdCAgICAnbm9uLXplcm8gcHJlY2lzaW9uIG5vdCBzdXBwb3J0ZWQnKSk7XG5cdFxuXHRcdFx0aWYgKGZsYWdzLm1hdGNoKC8tLykpXG5cdFx0XHRcdGxlZnQgPSB0cnVlO1xuXHRcblx0XHRcdGlmIChmbGFncy5tYXRjaCgvMC8pKVxuXHRcdFx0XHRwYWQgPSAnMCc7XG5cdFxuXHRcdFx0aWYgKGZsYWdzLm1hdGNoKC9cXCsvKSlcblx0XHRcdFx0c2lnbiA9IHRydWU7XG5cdFxuXHRcdFx0c3dpdGNoIChjb252ZXJzaW9uKSB7XG5cdFx0XHRjYXNlICdzJzpcblx0XHRcdFx0aWYgKGFyZyA9PT0gdW5kZWZpbmVkIHx8IGFyZyA9PT0gbnVsbClcblx0XHRcdFx0XHR0aHJvdyAobmV3IEVycm9yKCdhcmd1bWVudCAnICsgYXJnbiArXG5cdFx0XHRcdFx0ICAgICc6IGF0dGVtcHRlZCB0byBwcmludCB1bmRlZmluZWQgb3IgbnVsbCAnICtcblx0XHRcdFx0XHQgICAgJ2FzIGEgc3RyaW5nJykpO1xuXHRcdFx0XHRyZXQgKz0gZG9QYWQocGFkLCB3aWR0aCwgbGVmdCwgYXJnLnRvU3RyaW5nKCkpO1xuXHRcdFx0XHRicmVhaztcblx0XG5cdFx0XHRjYXNlICdkJzpcblx0XHRcdFx0YXJnID0gTWF0aC5mbG9vcihhcmcpO1xuXHRcdFx0XHQvKmpzbDpmYWxsdGhydSovXG5cdFx0XHRjYXNlICdmJzpcblx0XHRcdFx0c2lnbiA9IHNpZ24gJiYgYXJnID4gMCA/ICcrJyA6ICcnO1xuXHRcdFx0XHRyZXQgKz0gc2lnbiArIGRvUGFkKHBhZCwgd2lkdGgsIGxlZnQsXG5cdFx0XHRcdCAgICBhcmcudG9TdHJpbmcoKSk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcblx0XHRcdGNhc2UgJ3gnOlxuXHRcdFx0XHRyZXQgKz0gZG9QYWQocGFkLCB3aWR0aCwgbGVmdCwgYXJnLnRvU3RyaW5nKDE2KSk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcblx0XHRcdGNhc2UgJ2onOiAvKiBub24tc3RhbmRhcmQgKi9cblx0XHRcdFx0aWYgKHdpZHRoID09PSAwKVxuXHRcdFx0XHRcdHdpZHRoID0gMTA7XG5cdFx0XHRcdHJldCArPSBtb2RfdXRpbC5pbnNwZWN0KGFyZywgZmFsc2UsIHdpZHRoKTtcblx0XHRcdFx0YnJlYWs7XG5cdFxuXHRcdFx0Y2FzZSAncic6IC8qIG5vbi1zdGFuZGFyZCAqL1xuXHRcdFx0XHRyZXQgKz0gZHVtcEV4Y2VwdGlvbihhcmcpO1xuXHRcdFx0XHRicmVhaztcblx0XG5cdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHR0aHJvdyAobmV3IEVycm9yKCd1bnN1cHBvcnRlZCBjb252ZXJzaW9uOiAnICtcblx0XHRcdFx0ICAgIGNvbnZlcnNpb24pKTtcblx0XHRcdH1cblx0XHR9XG5cdFxuXHRcdHJldCArPSBmbXQ7XG5cdFx0cmV0dXJuIChyZXQpO1xuXHR9XG5cdFxuXHRmdW5jdGlvbiBqc1ByaW50ZigpIHtcblx0XHR2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG5cdFx0YXJncy51bnNoaWZ0KHByb2Nlc3Muc3Rkb3V0KTtcblx0XHRqc0ZwcmludGYuYXBwbHkobnVsbCwgYXJncyk7XG5cdH1cblx0XG5cdGZ1bmN0aW9uIGpzRnByaW50ZihzdHJlYW0pIHtcblx0XHR2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG5cdFx0cmV0dXJuIChzdHJlYW0ud3JpdGUoanNTcHJpbnRmLmFwcGx5KHRoaXMsIGFyZ3MpKSk7XG5cdH1cblx0XG5cdGZ1bmN0aW9uIGRvUGFkKGNociwgd2lkdGgsIGxlZnQsIHN0cilcblx0e1xuXHRcdHZhciByZXQgPSBzdHI7XG5cdFxuXHRcdHdoaWxlIChyZXQubGVuZ3RoIDwgd2lkdGgpIHtcblx0XHRcdGlmIChsZWZ0KVxuXHRcdFx0XHRyZXQgKz0gY2hyO1xuXHRcdFx0ZWxzZVxuXHRcdFx0XHRyZXQgPSBjaHIgKyByZXQ7XG5cdFx0fVxuXHRcblx0XHRyZXR1cm4gKHJldCk7XG5cdH1cblx0XG5cdC8qXG5cdCAqIFRoaXMgZnVuY3Rpb24gZHVtcHMgbG9uZyBzdGFjayB0cmFjZXMgZm9yIGV4Y2VwdGlvbnMgaGF2aW5nIGEgY2F1c2UoKSBtZXRob2QuXG5cdCAqIFNlZSBub2RlLXZlcnJvciBmb3IgYW4gZXhhbXBsZS5cblx0ICovXG5cdGZ1bmN0aW9uIGR1bXBFeGNlcHRpb24oZXgpXG5cdHtcblx0XHR2YXIgcmV0O1xuXHRcblx0XHRpZiAoIShleCBpbnN0YW5jZW9mIEVycm9yKSlcblx0XHRcdHRocm93IChuZXcgRXJyb3IoanNTcHJpbnRmKCdpbnZhbGlkIHR5cGUgZm9yICUlcjogJWonLCBleCkpKTtcblx0XG5cdFx0LyogTm90ZSB0aGF0IFY4IHByZXBlbmRzIFwiZXguc3RhY2tcIiB3aXRoIGV4LnRvU3RyaW5nKCkuICovXG5cdFx0cmV0ID0gJ0VYQ0VQVElPTjogJyArIGV4LmNvbnN0cnVjdG9yLm5hbWUgKyAnOiAnICsgZXguc3RhY2s7XG5cdFxuXHRcdGlmIChleC5jYXVzZSAmJiB0eXBlb2YgKGV4LmNhdXNlKSA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdFx0dmFyIGNleCA9IGV4LmNhdXNlKCk7XG5cdFx0XHRpZiAoY2V4KSB7XG5cdFx0XHRcdHJldCArPSAnXFxuQ2F1c2VkIGJ5OiAnICsgZHVtcEV4Y2VwdGlvbihjZXgpO1xuXHRcdFx0fVxuXHRcdH1cblx0XG5cdFx0cmV0dXJuIChyZXQpO1xuXHR9XG5cdFxuXHQvKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi99LmNhbGwoZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXygxOCkpKVxuXG4vKioqLyB9LFxuLyogNDIgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqLyhmdW5jdGlvbihCdWZmZXIpIHsvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cblx0Ly9cblx0Ly8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcblx0Ly8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuXHQvLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcblx0Ly8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuXHQvLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG5cdC8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuXHQvLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcblx0Ly9cblx0Ly8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcblx0Ly8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cdC8vXG5cdC8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncblx0Ly8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuXHQvLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG5cdC8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuXHQvLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcblx0Ly8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuXHQvLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXHRcblx0Ly8gTk9URTogVGhlc2UgdHlwZSBjaGVja2luZyBmdW5jdGlvbnMgaW50ZW50aW9uYWxseSBkb24ndCB1c2UgYGluc3RhbmNlb2ZgXG5cdC8vIGJlY2F1c2UgaXQgaXMgZnJhZ2lsZSBhbmQgY2FuIGJlIGVhc2lseSBmYWtlZCB3aXRoIGBPYmplY3QuY3JlYXRlKClgLlxuXHRcblx0ZnVuY3Rpb24gaXNBcnJheShhcmcpIHtcblx0ICBpZiAoQXJyYXkuaXNBcnJheSkge1xuXHQgICAgcmV0dXJuIEFycmF5LmlzQXJyYXkoYXJnKTtcblx0ICB9XG5cdCAgcmV0dXJuIG9iamVjdFRvU3RyaW5nKGFyZykgPT09ICdbb2JqZWN0IEFycmF5XSc7XG5cdH1cblx0ZXhwb3J0cy5pc0FycmF5ID0gaXNBcnJheTtcblx0XG5cdGZ1bmN0aW9uIGlzQm9vbGVhbihhcmcpIHtcblx0ICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ2Jvb2xlYW4nO1xuXHR9XG5cdGV4cG9ydHMuaXNCb29sZWFuID0gaXNCb29sZWFuO1xuXHRcblx0ZnVuY3Rpb24gaXNOdWxsKGFyZykge1xuXHQgIHJldHVybiBhcmcgPT09IG51bGw7XG5cdH1cblx0ZXhwb3J0cy5pc051bGwgPSBpc051bGw7XG5cdFxuXHRmdW5jdGlvbiBpc051bGxPclVuZGVmaW5lZChhcmcpIHtcblx0ICByZXR1cm4gYXJnID09IG51bGw7XG5cdH1cblx0ZXhwb3J0cy5pc051bGxPclVuZGVmaW5lZCA9IGlzTnVsbE9yVW5kZWZpbmVkO1xuXHRcblx0ZnVuY3Rpb24gaXNOdW1iZXIoYXJnKSB7XG5cdCAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdudW1iZXInO1xuXHR9XG5cdGV4cG9ydHMuaXNOdW1iZXIgPSBpc051bWJlcjtcblx0XG5cdGZ1bmN0aW9uIGlzU3RyaW5nKGFyZykge1xuXHQgIHJldHVybiB0eXBlb2YgYXJnID09PSAnc3RyaW5nJztcblx0fVxuXHRleHBvcnRzLmlzU3RyaW5nID0gaXNTdHJpbmc7XG5cdFxuXHRmdW5jdGlvbiBpc1N5bWJvbChhcmcpIHtcblx0ICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ3N5bWJvbCc7XG5cdH1cblx0ZXhwb3J0cy5pc1N5bWJvbCA9IGlzU3ltYm9sO1xuXHRcblx0ZnVuY3Rpb24gaXNVbmRlZmluZWQoYXJnKSB7XG5cdCAgcmV0dXJuIGFyZyA9PT0gdm9pZCAwO1xuXHR9XG5cdGV4cG9ydHMuaXNVbmRlZmluZWQgPSBpc1VuZGVmaW5lZDtcblx0XG5cdGZ1bmN0aW9uIGlzUmVnRXhwKHJlKSB7XG5cdCAgcmV0dXJuIG9iamVjdFRvU3RyaW5nKHJlKSA9PT0gJ1tvYmplY3QgUmVnRXhwXSc7XG5cdH1cblx0ZXhwb3J0cy5pc1JlZ0V4cCA9IGlzUmVnRXhwO1xuXHRcblx0ZnVuY3Rpb24gaXNPYmplY3QoYXJnKSB7XG5cdCAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdvYmplY3QnICYmIGFyZyAhPT0gbnVsbDtcblx0fVxuXHRleHBvcnRzLmlzT2JqZWN0ID0gaXNPYmplY3Q7XG5cdFxuXHRmdW5jdGlvbiBpc0RhdGUoZCkge1xuXHQgIHJldHVybiBvYmplY3RUb1N0cmluZyhkKSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xuXHR9XG5cdGV4cG9ydHMuaXNEYXRlID0gaXNEYXRlO1xuXHRcblx0ZnVuY3Rpb24gaXNFcnJvcihlKSB7XG5cdCAgcmV0dXJuIChvYmplY3RUb1N0cmluZyhlKSA9PT0gJ1tvYmplY3QgRXJyb3JdJyB8fCBlIGluc3RhbmNlb2YgRXJyb3IpO1xuXHR9XG5cdGV4cG9ydHMuaXNFcnJvciA9IGlzRXJyb3I7XG5cdFxuXHRmdW5jdGlvbiBpc0Z1bmN0aW9uKGFyZykge1xuXHQgIHJldHVybiB0eXBlb2YgYXJnID09PSAnZnVuY3Rpb24nO1xuXHR9XG5cdGV4cG9ydHMuaXNGdW5jdGlvbiA9IGlzRnVuY3Rpb247XG5cdFxuXHRmdW5jdGlvbiBpc1ByaW1pdGl2ZShhcmcpIHtcblx0ICByZXR1cm4gYXJnID09PSBudWxsIHx8XG5cdCAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdib29sZWFuJyB8fFxuXHQgICAgICAgICB0eXBlb2YgYXJnID09PSAnbnVtYmVyJyB8fFxuXHQgICAgICAgICB0eXBlb2YgYXJnID09PSAnc3RyaW5nJyB8fFxuXHQgICAgICAgICB0eXBlb2YgYXJnID09PSAnc3ltYm9sJyB8fCAgLy8gRVM2IHN5bWJvbFxuXHQgICAgICAgICB0eXBlb2YgYXJnID09PSAndW5kZWZpbmVkJztcblx0fVxuXHRleHBvcnRzLmlzUHJpbWl0aXZlID0gaXNQcmltaXRpdmU7XG5cdFxuXHRleHBvcnRzLmlzQnVmZmVyID0gQnVmZmVyLmlzQnVmZmVyO1xuXHRcblx0ZnVuY3Rpb24gb2JqZWN0VG9TdHJpbmcobykge1xuXHQgIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobyk7XG5cdH1cblx0XG5cdC8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqL30uY2FsbChleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDE0KS5CdWZmZXIpKVxuXG4vKioqLyB9LFxuLyogNDMgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHQgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRcblx0dmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXHRcblx0dmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblx0XG5cdHZhciBfZGlzbEVycm9yID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMSk7XG5cdFxuXHR2YXIgX2Rpc2xFcnJvcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kaXNsRXJyb3IpO1xuXHRcblx0ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblx0XG5cdGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cdFxuXHRmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblx0XG5cdGZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXHRcblx0LyoqXG5cdCAqIEBhdXRob3IgQmVuamFtaW4gTWljaGFsc2tpIDxiZW5qYW1pbi5taWNoYWxza2lAZ21haWwuY29tPlxuXHQgKlxuXHQgKiBAcHVibGljXG5cdCAqL1xuXHR2YXIgQ2lyY3VsYXJEZXBlbmRlbmN5RXJyb3IgPSBmdW5jdGlvbiAoX0Rpc2xFcnJvcikge1xuXHQgIF9pbmhlcml0cyhDaXJjdWxhckRlcGVuZGVuY3lFcnJvciwgX0Rpc2xFcnJvcik7XG5cdFxuXHQgIGZ1bmN0aW9uIENpcmN1bGFyRGVwZW5kZW5jeUVycm9yKCkge1xuXHQgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENpcmN1bGFyRGVwZW5kZW5jeUVycm9yKTtcblx0XG5cdCAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKENpcmN1bGFyRGVwZW5kZW5jeUVycm9yLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoQ2lyY3VsYXJEZXBlbmRlbmN5RXJyb3IpKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcblx0ICB9XG5cdFxuXHQgIF9jcmVhdGVDbGFzcyhDaXJjdWxhckRlcGVuZGVuY3lFcnJvciwgbnVsbCwgW3tcblx0ICAgIGtleTogJ2NyZWF0ZUVycm9yJyxcblx0XG5cdFxuXHQgICAgLyoqXG5cdCAgICAgKiBAcGFyYW0ge0FycmF5PHN0cmluZz59IHNlcnZpY2VzXG5cdCAgICAgKlxuXHQgICAgICogQHJldHVybnMge0NpcmN1bGFyRGVwZW5kZW5jeUVycm9yfVxuXHQgICAgICovXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlRXJyb3Ioc2VydmljZXMpIHtcblx0ICAgICAgaWYgKCEoQXJyYXkuaXNBcnJheShzZXJ2aWNlcykgJiYgc2VydmljZXMuZXZlcnkoZnVuY3Rpb24gKGl0ZW0pIHtcblx0ICAgICAgICByZXR1cm4gdHlwZW9mIGl0ZW0gPT09ICdzdHJpbmcnO1xuXHQgICAgICB9KSkpIHtcblx0ICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdWYWx1ZSBvZiBhcmd1bWVudCBcInNlcnZpY2VzXCIgdmlvbGF0ZXMgY29udHJhY3QuXFxuXFxuRXhwZWN0ZWQ6XFxuQXJyYXk8c3RyaW5nPlxcblxcbkdvdDpcXG4nICsgX2luc3BlY3Qoc2VydmljZXMpKTtcblx0ICAgICAgfVxuXHRcblx0ICAgICAgdmFyIHBhdGggPSBbXS5jb25jYXQoc2VydmljZXMpLnJldmVyc2UoKS5qb2luKCcgPC0gJyk7XG5cdFxuXHQgICAgICByZXR1cm4gbmV3IENpcmN1bGFyRGVwZW5kZW5jeUVycm9yKHtcblx0ICAgICAgICBzZXJ2aWNlczogc2VydmljZXNcblx0ICAgICAgfSwgJ0NpcmN1bGFyIGRlcGVuZGVuY3kgZm91bmQ6ICVzJywgcGF0aCk7XG5cdCAgICB9XG5cdCAgfV0pO1xuXHRcblx0ICByZXR1cm4gQ2lyY3VsYXJEZXBlbmRlbmN5RXJyb3I7XG5cdH0oX2Rpc2xFcnJvcjIuZGVmYXVsdCk7XG5cdFxuXHRleHBvcnRzLmRlZmF1bHQgPSBDaXJjdWxhckRlcGVuZGVuY3lFcnJvcjtcblx0XG5cdGZ1bmN0aW9uIF9pbnNwZWN0KGlucHV0LCBkZXB0aCkge1xuXHQgIHZhciBtYXhEZXB0aCA9IDQ7XG5cdCAgdmFyIG1heEtleXMgPSAxNTtcblxuXHQgIGlmIChkZXB0aCA9PT0gdW5kZWZpbmVkKSB7XG5cdCAgICBkZXB0aCA9IDA7XG5cdCAgfVxuXG5cdCAgZGVwdGggKz0gMTtcblxuXHQgIGlmIChpbnB1dCA9PT0gbnVsbCkge1xuXHQgICAgcmV0dXJuICdudWxsJztcblx0ICB9IGVsc2UgaWYgKGlucHV0ID09PSB1bmRlZmluZWQpIHtcblx0ICAgIHJldHVybiAndm9pZCc7XG5cdCAgfSBlbHNlIGlmICh0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBpbnB1dCA9PT0gJ251bWJlcicgfHwgdHlwZW9mIGlucHV0ID09PSAnYm9vbGVhbicpIHtcblx0ICAgIHJldHVybiB0eXBlb2YgaW5wdXQgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKGlucHV0KTtcblx0ICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoaW5wdXQpKSB7XG5cdCAgICBpZiAoaW5wdXQubGVuZ3RoID4gMCkge1xuXHQgICAgICB2YXIgX3JldCA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICBpZiAoZGVwdGggPiBtYXhEZXB0aCkgcmV0dXJuIHtcblx0ICAgICAgICAgICAgdjogJ1suLi5dJ1xuXHQgICAgICAgICAgfTtcblxuXHQgICAgICAgIHZhciBmaXJzdCA9IF9pbnNwZWN0KGlucHV0WzBdLCBkZXB0aCk7XG5cblx0ICAgICAgICBpZiAoaW5wdXQuZXZlcnkoZnVuY3Rpb24gKGl0ZW0pIHtcblx0ICAgICAgICAgIHJldHVybiBfaW5zcGVjdChpdGVtLCBkZXB0aCkgPT09IGZpcnN0O1xuXHQgICAgICAgIH0pKSB7XG5cdCAgICAgICAgICByZXR1cm4ge1xuXHQgICAgICAgICAgICB2OiBmaXJzdC50cmltKCkgKyAnW10nXG5cdCAgICAgICAgICB9O1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICByZXR1cm4ge1xuXHQgICAgICAgICAgICB2OiAnWycgKyBpbnB1dC5zbGljZSgwLCBtYXhLZXlzKS5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcblx0ICAgICAgICAgICAgICByZXR1cm4gX2luc3BlY3QoaXRlbSwgZGVwdGgpO1xuXHQgICAgICAgICAgICB9KS5qb2luKCcsICcpICsgKGlucHV0Lmxlbmd0aCA+PSBtYXhLZXlzID8gJywgLi4uJyA6ICcnKSArICddJ1xuXHQgICAgICAgICAgfTtcblx0ICAgICAgICB9XG5cdCAgICAgIH0oKTtcblxuXHQgICAgICBpZiAoKHR5cGVvZiBfcmV0ID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihfcmV0KSkgPT09IFwib2JqZWN0XCIpIHJldHVybiBfcmV0LnY7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICByZXR1cm4gJ0FycmF5Jztcblx0ICAgIH1cblx0ICB9IGVsc2Uge1xuXHQgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhpbnB1dCk7XG5cblx0ICAgIGlmICgha2V5cy5sZW5ndGgpIHtcblx0ICAgICAgaWYgKGlucHV0LmNvbnN0cnVjdG9yICYmIGlucHV0LmNvbnN0cnVjdG9yLm5hbWUgJiYgaW5wdXQuY29uc3RydWN0b3IubmFtZSAhPT0gJ09iamVjdCcpIHtcblx0ICAgICAgICByZXR1cm4gaW5wdXQuY29uc3RydWN0b3IubmFtZTtcblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICByZXR1cm4gJ09iamVjdCc7XG5cdCAgICAgIH1cblx0ICAgIH1cblxuXHQgICAgaWYgKGRlcHRoID4gbWF4RGVwdGgpIHJldHVybiAney4uLn0nO1xuXHQgICAgdmFyIGluZGVudCA9ICcgICcucmVwZWF0KGRlcHRoIC0gMSk7XG5cdCAgICB2YXIgZW50cmllcyA9IGtleXMuc2xpY2UoMCwgbWF4S2V5cykubWFwKGZ1bmN0aW9uIChrZXkpIHtcblx0ICAgICAgcmV0dXJuICgvXihbQS1aXyRdW0EtWjAtOV8kXSopJC9pLnRlc3Qoa2V5KSA/IGtleSA6IEpTT04uc3RyaW5naWZ5KGtleSkpICsgJzogJyArIF9pbnNwZWN0KGlucHV0W2tleV0sIGRlcHRoKSArICc7Jztcblx0ICAgIH0pLmpvaW4oJ1xcbiAgJyArIGluZGVudCk7XG5cblx0ICAgIGlmIChrZXlzLmxlbmd0aCA+PSBtYXhLZXlzKSB7XG5cdCAgICAgIGVudHJpZXMgKz0gJ1xcbiAgJyArIGluZGVudCArICcuLi4nO1xuXHQgICAgfVxuXG5cdCAgICBpZiAoaW5wdXQuY29uc3RydWN0b3IgJiYgaW5wdXQuY29uc3RydWN0b3IubmFtZSAmJiBpbnB1dC5jb25zdHJ1Y3Rvci5uYW1lICE9PSAnT2JqZWN0Jykge1xuXHQgICAgICByZXR1cm4gaW5wdXQuY29uc3RydWN0b3IubmFtZSArICcge1xcbiAgJyArIGluZGVudCArIGVudHJpZXMgKyAnXFxuJyArIGluZGVudCArICd9Jztcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIHJldHVybiAne1xcbiAgJyArIGluZGVudCArIGVudHJpZXMgKyAnXFxuJyArIGluZGVudCArICd9Jztcblx0ICAgIH1cblx0ICB9XG5cdH1cblxuLyoqKi8gfSxcbi8qIDQ0ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0XG5cdHZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblx0XG5cdHZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cdFxuXHR2YXIgX2Rpc2xFcnJvciA9IF9fd2VicGFja19yZXF1aXJlX18oMTEpO1xuXHRcblx0dmFyIF9kaXNsRXJyb3IyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZGlzbEVycm9yKTtcblx0XG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cdFxuXHRmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXHRcblx0ZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cdFxuXHRmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblx0XG5cdC8qKlxuXHQgKiBAYXV0aG9yIEJlbmphbWluIE1pY2hhbHNraSA8YmVuamFtaW4ubWljaGFsc2tpQGdtYWlsLmNvbT5cblx0ICpcblx0ICogQHB1YmxpY1xuXHQgKi9cblx0dmFyIEZhY3RvcnlNZXRob2RSZXR1cm5zTm90aGluZ0Vycm9yID0gZnVuY3Rpb24gKF9EaXNsRXJyb3IpIHtcblx0ICBfaW5oZXJpdHMoRmFjdG9yeU1ldGhvZFJldHVybnNOb3RoaW5nRXJyb3IsIF9EaXNsRXJyb3IpO1xuXHRcblx0ICBmdW5jdGlvbiBGYWN0b3J5TWV0aG9kUmV0dXJuc05vdGhpbmdFcnJvcigpIHtcblx0ICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBGYWN0b3J5TWV0aG9kUmV0dXJuc05vdGhpbmdFcnJvcik7XG5cdFxuXHQgICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChGYWN0b3J5TWV0aG9kUmV0dXJuc05vdGhpbmdFcnJvci5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKEZhY3RvcnlNZXRob2RSZXR1cm5zTm90aGluZ0Vycm9yKSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG5cdCAgfVxuXHRcblx0ICBfY3JlYXRlQ2xhc3MoRmFjdG9yeU1ldGhvZFJldHVybnNOb3RoaW5nRXJyb3IsIG51bGwsIFt7XG5cdCAgICBrZXk6ICdjcmVhdGVFcnJvcicsXG5cdFxuXHRcblx0ICAgIC8qKlxuXHQgICAgICogQHBhcmFtIHtzdHJpbmd9IGlkZW50aWZpZXJcblx0ICAgICAqXG5cdCAgICAgKiBAcmV0dXJucyB7RmFjdG9yeU1ldGhvZFJldHVybnNOb3RoaW5nRXJyb3J9XG5cdCAgICAgKi9cblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBjcmVhdGVFcnJvcihpZGVudGlmaWVyKSB7XG5cdCAgICAgIGlmICghKHR5cGVvZiBpZGVudGlmaWVyID09PSAnc3RyaW5nJykpIHtcblx0ICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdWYWx1ZSBvZiBhcmd1bWVudCBcImlkZW50aWZpZXJcIiB2aW9sYXRlcyBjb250cmFjdC5cXG5cXG5FeHBlY3RlZDpcXG5zdHJpbmdcXG5cXG5Hb3Q6XFxuJyArIF9pbnNwZWN0KGlkZW50aWZpZXIpKTtcblx0ICAgICAgfVxuXHRcblx0ICAgICAgcmV0dXJuIG5ldyBGYWN0b3J5TWV0aG9kUmV0dXJuc05vdGhpbmdFcnJvcih7XG5cdCAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllclxuXHQgICAgICB9LCAnRmFjdG9yeSBtZXRob2QgZm9yIGlkZW50aWZpZXIgXCIlc1wiIHJldHVybnMgbm90aGluZycsIGlkZW50aWZpZXIpO1xuXHQgICAgfVxuXHQgIH1dKTtcblx0XG5cdCAgcmV0dXJuIEZhY3RvcnlNZXRob2RSZXR1cm5zTm90aGluZ0Vycm9yO1xuXHR9KF9kaXNsRXJyb3IyLmRlZmF1bHQpO1xuXHRcblx0ZXhwb3J0cy5kZWZhdWx0ID0gRmFjdG9yeU1ldGhvZFJldHVybnNOb3RoaW5nRXJyb3I7XG5cdFxuXHRmdW5jdGlvbiBfaW5zcGVjdChpbnB1dCwgZGVwdGgpIHtcblx0ICB2YXIgbWF4RGVwdGggPSA0O1xuXHQgIHZhciBtYXhLZXlzID0gMTU7XG5cblx0ICBpZiAoZGVwdGggPT09IHVuZGVmaW5lZCkge1xuXHQgICAgZGVwdGggPSAwO1xuXHQgIH1cblxuXHQgIGRlcHRoICs9IDE7XG5cblx0ICBpZiAoaW5wdXQgPT09IG51bGwpIHtcblx0ICAgIHJldHVybiAnbnVsbCc7XG5cdCAgfSBlbHNlIGlmIChpbnB1dCA9PT0gdW5kZWZpbmVkKSB7XG5cdCAgICByZXR1cm4gJ3ZvaWQnO1xuXHQgIH0gZWxzZSBpZiAodHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgaW5wdXQgPT09ICdudW1iZXInIHx8IHR5cGVvZiBpbnB1dCA9PT0gJ2Jvb2xlYW4nKSB7XG5cdCAgICByZXR1cm4gdHlwZW9mIGlucHV0ID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihpbnB1dCk7XG5cdCAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGlucHV0KSkge1xuXHQgICAgaWYgKGlucHV0Lmxlbmd0aCA+IDApIHtcblx0ICAgICAgdmFyIF9yZXQgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgaWYgKGRlcHRoID4gbWF4RGVwdGgpIHJldHVybiB7XG5cdCAgICAgICAgICAgIHY6ICdbLi4uXSdcblx0ICAgICAgICAgIH07XG5cblx0ICAgICAgICB2YXIgZmlyc3QgPSBfaW5zcGVjdChpbnB1dFswXSwgZGVwdGgpO1xuXG5cdCAgICAgICAgaWYgKGlucHV0LmV2ZXJ5KGZ1bmN0aW9uIChpdGVtKSB7XG5cdCAgICAgICAgICByZXR1cm4gX2luc3BlY3QoaXRlbSwgZGVwdGgpID09PSBmaXJzdDtcblx0ICAgICAgICB9KSkge1xuXHQgICAgICAgICAgcmV0dXJuIHtcblx0ICAgICAgICAgICAgdjogZmlyc3QudHJpbSgpICsgJ1tdJ1xuXHQgICAgICAgICAgfTtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgcmV0dXJuIHtcblx0ICAgICAgICAgICAgdjogJ1snICsgaW5wdXQuc2xpY2UoMCwgbWF4S2V5cykubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG5cdCAgICAgICAgICAgICAgcmV0dXJuIF9pbnNwZWN0KGl0ZW0sIGRlcHRoKTtcblx0ICAgICAgICAgICAgfSkuam9pbignLCAnKSArIChpbnB1dC5sZW5ndGggPj0gbWF4S2V5cyA/ICcsIC4uLicgOiAnJykgKyAnXSdcblx0ICAgICAgICAgIH07XG5cdCAgICAgICAgfVxuXHQgICAgICB9KCk7XG5cblx0ICAgICAgaWYgKCh0eXBlb2YgX3JldCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YoX3JldCkpID09PSBcIm9iamVjdFwiKSByZXR1cm4gX3JldC52O1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgcmV0dXJuICdBcnJheSc7XG5cdCAgICB9XG5cdCAgfSBlbHNlIHtcblx0ICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoaW5wdXQpO1xuXG5cdCAgICBpZiAoIWtleXMubGVuZ3RoKSB7XG5cdCAgICAgIGlmIChpbnB1dC5jb25zdHJ1Y3RvciAmJiBpbnB1dC5jb25zdHJ1Y3Rvci5uYW1lICYmIGlucHV0LmNvbnN0cnVjdG9yLm5hbWUgIT09ICdPYmplY3QnKSB7XG5cdCAgICAgICAgcmV0dXJuIGlucHV0LmNvbnN0cnVjdG9yLm5hbWU7XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgcmV0dXJuICdPYmplY3QnO1xuXHQgICAgICB9XG5cdCAgICB9XG5cblx0ICAgIGlmIChkZXB0aCA+IG1heERlcHRoKSByZXR1cm4gJ3suLi59Jztcblx0ICAgIHZhciBpbmRlbnQgPSAnICAnLnJlcGVhdChkZXB0aCAtIDEpO1xuXHQgICAgdmFyIGVudHJpZXMgPSBrZXlzLnNsaWNlKDAsIG1heEtleXMpLm1hcChmdW5jdGlvbiAoa2V5KSB7XG5cdCAgICAgIHJldHVybiAoL14oW0EtWl8kXVtBLVowLTlfJF0qKSQvaS50ZXN0KGtleSkgPyBrZXkgOiBKU09OLnN0cmluZ2lmeShrZXkpKSArICc6ICcgKyBfaW5zcGVjdChpbnB1dFtrZXldLCBkZXB0aCkgKyAnOyc7XG5cdCAgICB9KS5qb2luKCdcXG4gICcgKyBpbmRlbnQpO1xuXG5cdCAgICBpZiAoa2V5cy5sZW5ndGggPj0gbWF4S2V5cykge1xuXHQgICAgICBlbnRyaWVzICs9ICdcXG4gICcgKyBpbmRlbnQgKyAnLi4uJztcblx0ICAgIH1cblxuXHQgICAgaWYgKGlucHV0LmNvbnN0cnVjdG9yICYmIGlucHV0LmNvbnN0cnVjdG9yLm5hbWUgJiYgaW5wdXQuY29uc3RydWN0b3IubmFtZSAhPT0gJ09iamVjdCcpIHtcblx0ICAgICAgcmV0dXJuIGlucHV0LmNvbnN0cnVjdG9yLm5hbWUgKyAnIHtcXG4gICcgKyBpbmRlbnQgKyBlbnRyaWVzICsgJ1xcbicgKyBpbmRlbnQgKyAnfSc7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICByZXR1cm4gJ3tcXG4gICcgKyBpbmRlbnQgKyBlbnRyaWVzICsgJ1xcbicgKyBpbmRlbnQgKyAnfSc7XG5cdCAgICB9XG5cdCAgfVxuXHR9XG5cbi8qKiovIH0sXG4vKiA0NSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgdmFsdWU6IHRydWVcblx0fSk7XG5cdFxuXHR2YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cdFxuXHR2YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXHRcblx0dmFyIF9kaXNsRXJyb3IgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDExKTtcblx0XG5cdHZhciBfZGlzbEVycm9yMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2Rpc2xFcnJvcik7XG5cdFxuXHRmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXHRcblx0ZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblx0XG5cdGZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXHRcblx0ZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cdFxuXHQvKipcblx0ICogQGF1dGhvciBCZW5qYW1pbiBNaWNoYWxza2kgPGJlbmphbWluLm1pY2hhbHNraUBnbWFpbC5jb20+XG5cdCAqXG5cdCAqIEBwdWJsaWNcblx0ICovXG5cdHZhciBNZXRob2REb2VzTm90RXhpc3RFcnJvciA9IGZ1bmN0aW9uIChfRGlzbEVycm9yKSB7XG5cdCAgX2luaGVyaXRzKE1ldGhvZERvZXNOb3RFeGlzdEVycm9yLCBfRGlzbEVycm9yKTtcblx0XG5cdCAgZnVuY3Rpb24gTWV0aG9kRG9lc05vdEV4aXN0RXJyb3IoKSB7XG5cdCAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTWV0aG9kRG9lc05vdEV4aXN0RXJyb3IpO1xuXHRcblx0ICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoTWV0aG9kRG9lc05vdEV4aXN0RXJyb3IuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihNZXRob2REb2VzTm90RXhpc3RFcnJvcikpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuXHQgIH1cblx0XG5cdCAgX2NyZWF0ZUNsYXNzKE1ldGhvZERvZXNOb3RFeGlzdEVycm9yLCBudWxsLCBbe1xuXHQgICAga2V5OiAnY3JlYXRlRXJyb3InLFxuXHRcblx0XG5cdCAgICAvKipcblx0ICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtZXRob2ROYW1lXG5cdCAgICAgKlxuXHQgICAgICogQHJldHVybnMge01ldGhvZERvZXNOb3RFeGlzdEVycm9yfVxuXHQgICAgICovXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlRXJyb3IobWV0aG9kTmFtZSkge1xuXHQgICAgICBpZiAoISh0eXBlb2YgbWV0aG9kTmFtZSA9PT0gJ3N0cmluZycpKSB7XG5cdCAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVmFsdWUgb2YgYXJndW1lbnQgXCJtZXRob2ROYW1lXCIgdmlvbGF0ZXMgY29udHJhY3QuXFxuXFxuRXhwZWN0ZWQ6XFxuc3RyaW5nXFxuXFxuR290OlxcbicgKyBfaW5zcGVjdChtZXRob2ROYW1lKSk7XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIHJldHVybiBuZXcgTWV0aG9kRG9lc05vdEV4aXN0RXJyb3Ioe1xuXHQgICAgICAgIG1ldGhvZE5hbWU6IG1ldGhvZE5hbWVcblx0ICAgICAgfSwgJ01ldGhvZCBcIiVzXCIgZG9lcyBub3QgZXhpc3QnLCBtZXRob2ROYW1lKTtcblx0ICAgIH1cblx0ICB9XSk7XG5cdFxuXHQgIHJldHVybiBNZXRob2REb2VzTm90RXhpc3RFcnJvcjtcblx0fShfZGlzbEVycm9yMi5kZWZhdWx0KTtcblx0XG5cdGV4cG9ydHMuZGVmYXVsdCA9IE1ldGhvZERvZXNOb3RFeGlzdEVycm9yO1xuXHRcblx0ZnVuY3Rpb24gX2luc3BlY3QoaW5wdXQsIGRlcHRoKSB7XG5cdCAgdmFyIG1heERlcHRoID0gNDtcblx0ICB2YXIgbWF4S2V5cyA9IDE1O1xuXG5cdCAgaWYgKGRlcHRoID09PSB1bmRlZmluZWQpIHtcblx0ICAgIGRlcHRoID0gMDtcblx0ICB9XG5cblx0ICBkZXB0aCArPSAxO1xuXG5cdCAgaWYgKGlucHV0ID09PSBudWxsKSB7XG5cdCAgICByZXR1cm4gJ251bGwnO1xuXHQgIH0gZWxzZSBpZiAoaW5wdXQgPT09IHVuZGVmaW5lZCkge1xuXHQgICAgcmV0dXJuICd2b2lkJztcblx0ICB9IGVsc2UgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIGlucHV0ID09PSAnbnVtYmVyJyB8fCB0eXBlb2YgaW5wdXQgPT09ICdib29sZWFuJykge1xuXHQgICAgcmV0dXJuIHR5cGVvZiBpbnB1dCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YoaW5wdXQpO1xuXHQgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShpbnB1dCkpIHtcblx0ICAgIGlmIChpbnB1dC5sZW5ndGggPiAwKSB7XG5cdCAgICAgIHZhciBfcmV0ID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIGlmIChkZXB0aCA+IG1heERlcHRoKSByZXR1cm4ge1xuXHQgICAgICAgICAgICB2OiAnWy4uLl0nXG5cdCAgICAgICAgICB9O1xuXG5cdCAgICAgICAgdmFyIGZpcnN0ID0gX2luc3BlY3QoaW5wdXRbMF0sIGRlcHRoKTtcblxuXHQgICAgICAgIGlmIChpbnB1dC5ldmVyeShmdW5jdGlvbiAoaXRlbSkge1xuXHQgICAgICAgICAgcmV0dXJuIF9pbnNwZWN0KGl0ZW0sIGRlcHRoKSA9PT0gZmlyc3Q7XG5cdCAgICAgICAgfSkpIHtcblx0ICAgICAgICAgIHJldHVybiB7XG5cdCAgICAgICAgICAgIHY6IGZpcnN0LnRyaW0oKSArICdbXSdcblx0ICAgICAgICAgIH07XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgIHJldHVybiB7XG5cdCAgICAgICAgICAgIHY6ICdbJyArIGlucHV0LnNsaWNlKDAsIG1heEtleXMpLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuXHQgICAgICAgICAgICAgIHJldHVybiBfaW5zcGVjdChpdGVtLCBkZXB0aCk7XG5cdCAgICAgICAgICAgIH0pLmpvaW4oJywgJykgKyAoaW5wdXQubGVuZ3RoID49IG1heEtleXMgPyAnLCAuLi4nIDogJycpICsgJ10nXG5cdCAgICAgICAgICB9O1xuXHQgICAgICAgIH1cblx0ICAgICAgfSgpO1xuXG5cdCAgICAgIGlmICgodHlwZW9mIF9yZXQgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKF9yZXQpKSA9PT0gXCJvYmplY3RcIikgcmV0dXJuIF9yZXQudjtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIHJldHVybiAnQXJyYXknO1xuXHQgICAgfVxuXHQgIH0gZWxzZSB7XG5cdCAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGlucHV0KTtcblxuXHQgICAgaWYgKCFrZXlzLmxlbmd0aCkge1xuXHQgICAgICBpZiAoaW5wdXQuY29uc3RydWN0b3IgJiYgaW5wdXQuY29uc3RydWN0b3IubmFtZSAmJiBpbnB1dC5jb25zdHJ1Y3Rvci5uYW1lICE9PSAnT2JqZWN0Jykge1xuXHQgICAgICAgIHJldHVybiBpbnB1dC5jb25zdHJ1Y3Rvci5uYW1lO1xuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIHJldHVybiAnT2JqZWN0Jztcblx0ICAgICAgfVxuXHQgICAgfVxuXG5cdCAgICBpZiAoZGVwdGggPiBtYXhEZXB0aCkgcmV0dXJuICd7Li4ufSc7XG5cdCAgICB2YXIgaW5kZW50ID0gJyAgJy5yZXBlYXQoZGVwdGggLSAxKTtcblx0ICAgIHZhciBlbnRyaWVzID0ga2V5cy5zbGljZSgwLCBtYXhLZXlzKS5tYXAoZnVuY3Rpb24gKGtleSkge1xuXHQgICAgICByZXR1cm4gKC9eKFtBLVpfJF1bQS1aMC05XyRdKikkL2kudGVzdChrZXkpID8ga2V5IDogSlNPTi5zdHJpbmdpZnkoa2V5KSkgKyAnOiAnICsgX2luc3BlY3QoaW5wdXRba2V5XSwgZGVwdGgpICsgJzsnO1xuXHQgICAgfSkuam9pbignXFxuICAnICsgaW5kZW50KTtcblxuXHQgICAgaWYgKGtleXMubGVuZ3RoID49IG1heEtleXMpIHtcblx0ICAgICAgZW50cmllcyArPSAnXFxuICAnICsgaW5kZW50ICsgJy4uLic7XG5cdCAgICB9XG5cblx0ICAgIGlmIChpbnB1dC5jb25zdHJ1Y3RvciAmJiBpbnB1dC5jb25zdHJ1Y3Rvci5uYW1lICYmIGlucHV0LmNvbnN0cnVjdG9yLm5hbWUgIT09ICdPYmplY3QnKSB7XG5cdCAgICAgIHJldHVybiBpbnB1dC5jb25zdHJ1Y3Rvci5uYW1lICsgJyB7XFxuICAnICsgaW5kZW50ICsgZW50cmllcyArICdcXG4nICsgaW5kZW50ICsgJ30nO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgcmV0dXJuICd7XFxuICAnICsgaW5kZW50ICsgZW50cmllcyArICdcXG4nICsgaW5kZW50ICsgJ30nO1xuXHQgICAgfVxuXHQgIH1cblx0fVxuXG4vKioqLyB9LFxuLyogNDYgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHQgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRcblx0dmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXHRcblx0dmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblx0XG5cdHZhciBfZGlzbEVycm9yID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMSk7XG5cdFxuXHR2YXIgX2Rpc2xFcnJvcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kaXNsRXJyb3IpO1xuXHRcblx0ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblx0XG5cdGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cdFxuXHRmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblx0XG5cdGZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXHRcblx0LyoqXG5cdCAqIEBhdXRob3IgQmVuamFtaW4gTWljaGFsc2tpIDxiZW5qYW1pbi5taWNoYWxza2lAZ21haWwuY29tPlxuXHQgKlxuXHQgKiBAcHVibGljXG5cdCAqL1xuXHR2YXIgU2VydmljZURlZmluaXRpb25BbHJlYWR5VXNlZEVycm9yID0gZnVuY3Rpb24gKF9EaXNsRXJyb3IpIHtcblx0ICBfaW5oZXJpdHMoU2VydmljZURlZmluaXRpb25BbHJlYWR5VXNlZEVycm9yLCBfRGlzbEVycm9yKTtcblx0XG5cdCAgZnVuY3Rpb24gU2VydmljZURlZmluaXRpb25BbHJlYWR5VXNlZEVycm9yKCkge1xuXHQgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFNlcnZpY2VEZWZpbml0aW9uQWxyZWFkeVVzZWRFcnJvcik7XG5cdFxuXHQgICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChTZXJ2aWNlRGVmaW5pdGlvbkFscmVhZHlVc2VkRXJyb3IuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihTZXJ2aWNlRGVmaW5pdGlvbkFscmVhZHlVc2VkRXJyb3IpKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcblx0ICB9XG5cdFxuXHQgIF9jcmVhdGVDbGFzcyhTZXJ2aWNlRGVmaW5pdGlvbkFscmVhZHlVc2VkRXJyb3IsIG51bGwsIFt7XG5cdCAgICBrZXk6ICdjcmVhdGVFcnJvcicsXG5cdFxuXHRcblx0ICAgIC8qKlxuXHQgICAgICogQHBhcmFtIHtzdHJpbmd9IGlkZW50aWZpZXJcblx0ICAgICAqXG5cdCAgICAgKiBAcmV0dXJucyB7U2VydmljZURlZmluaXRpb25BbHJlYWR5VXNlZEVycm9yfVxuXHQgICAgICovXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlRXJyb3IoaWRlbnRpZmllcikge1xuXHQgICAgICBpZiAoISh0eXBlb2YgaWRlbnRpZmllciA9PT0gJ3N0cmluZycpKSB7XG5cdCAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVmFsdWUgb2YgYXJndW1lbnQgXCJpZGVudGlmaWVyXCIgdmlvbGF0ZXMgY29udHJhY3QuXFxuXFxuRXhwZWN0ZWQ6XFxuc3RyaW5nXFxuXFxuR290OlxcbicgKyBfaW5zcGVjdChpZGVudGlmaWVyKSk7XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIHJldHVybiBuZXcgU2VydmljZURlZmluaXRpb25BbHJlYWR5VXNlZEVycm9yKHtcblx0ICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyXG5cdCAgICAgIH0sICdTZXJ2aWNlIGRlZmluaXRpb24gZm9yIFwiJXNcIiBoYXMgYWxyZWFkeSBiZWVuIHVzZWQgdG8gaW5zdGFudGlhdGUgYSBzZXJ2aWNlLCByZWZ1c2luZyB0byBtb2RpZnkgaXQnLCBpZGVudGlmaWVyKTtcblx0ICAgIH1cblx0ICB9XSk7XG5cdFxuXHQgIHJldHVybiBTZXJ2aWNlRGVmaW5pdGlvbkFscmVhZHlVc2VkRXJyb3I7XG5cdH0oX2Rpc2xFcnJvcjIuZGVmYXVsdCk7XG5cdFxuXHRleHBvcnRzLmRlZmF1bHQgPSBTZXJ2aWNlRGVmaW5pdGlvbkFscmVhZHlVc2VkRXJyb3I7XG5cdFxuXHRmdW5jdGlvbiBfaW5zcGVjdChpbnB1dCwgZGVwdGgpIHtcblx0ICB2YXIgbWF4RGVwdGggPSA0O1xuXHQgIHZhciBtYXhLZXlzID0gMTU7XG5cblx0ICBpZiAoZGVwdGggPT09IHVuZGVmaW5lZCkge1xuXHQgICAgZGVwdGggPSAwO1xuXHQgIH1cblxuXHQgIGRlcHRoICs9IDE7XG5cblx0ICBpZiAoaW5wdXQgPT09IG51bGwpIHtcblx0ICAgIHJldHVybiAnbnVsbCc7XG5cdCAgfSBlbHNlIGlmIChpbnB1dCA9PT0gdW5kZWZpbmVkKSB7XG5cdCAgICByZXR1cm4gJ3ZvaWQnO1xuXHQgIH0gZWxzZSBpZiAodHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgaW5wdXQgPT09ICdudW1iZXInIHx8IHR5cGVvZiBpbnB1dCA9PT0gJ2Jvb2xlYW4nKSB7XG5cdCAgICByZXR1cm4gdHlwZW9mIGlucHV0ID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihpbnB1dCk7XG5cdCAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGlucHV0KSkge1xuXHQgICAgaWYgKGlucHV0Lmxlbmd0aCA+IDApIHtcblx0ICAgICAgdmFyIF9yZXQgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgaWYgKGRlcHRoID4gbWF4RGVwdGgpIHJldHVybiB7XG5cdCAgICAgICAgICAgIHY6ICdbLi4uXSdcblx0ICAgICAgICAgIH07XG5cblx0ICAgICAgICB2YXIgZmlyc3QgPSBfaW5zcGVjdChpbnB1dFswXSwgZGVwdGgpO1xuXG5cdCAgICAgICAgaWYgKGlucHV0LmV2ZXJ5KGZ1bmN0aW9uIChpdGVtKSB7XG5cdCAgICAgICAgICByZXR1cm4gX2luc3BlY3QoaXRlbSwgZGVwdGgpID09PSBmaXJzdDtcblx0ICAgICAgICB9KSkge1xuXHQgICAgICAgICAgcmV0dXJuIHtcblx0ICAgICAgICAgICAgdjogZmlyc3QudHJpbSgpICsgJ1tdJ1xuXHQgICAgICAgICAgfTtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgcmV0dXJuIHtcblx0ICAgICAgICAgICAgdjogJ1snICsgaW5wdXQuc2xpY2UoMCwgbWF4S2V5cykubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG5cdCAgICAgICAgICAgICAgcmV0dXJuIF9pbnNwZWN0KGl0ZW0sIGRlcHRoKTtcblx0ICAgICAgICAgICAgfSkuam9pbignLCAnKSArIChpbnB1dC5sZW5ndGggPj0gbWF4S2V5cyA/ICcsIC4uLicgOiAnJykgKyAnXSdcblx0ICAgICAgICAgIH07XG5cdCAgICAgICAgfVxuXHQgICAgICB9KCk7XG5cblx0ICAgICAgaWYgKCh0eXBlb2YgX3JldCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YoX3JldCkpID09PSBcIm9iamVjdFwiKSByZXR1cm4gX3JldC52O1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgcmV0dXJuICdBcnJheSc7XG5cdCAgICB9XG5cdCAgfSBlbHNlIHtcblx0ICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoaW5wdXQpO1xuXG5cdCAgICBpZiAoIWtleXMubGVuZ3RoKSB7XG5cdCAgICAgIGlmIChpbnB1dC5jb25zdHJ1Y3RvciAmJiBpbnB1dC5jb25zdHJ1Y3Rvci5uYW1lICYmIGlucHV0LmNvbnN0cnVjdG9yLm5hbWUgIT09ICdPYmplY3QnKSB7XG5cdCAgICAgICAgcmV0dXJuIGlucHV0LmNvbnN0cnVjdG9yLm5hbWU7XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgcmV0dXJuICdPYmplY3QnO1xuXHQgICAgICB9XG5cdCAgICB9XG5cblx0ICAgIGlmIChkZXB0aCA+IG1heERlcHRoKSByZXR1cm4gJ3suLi59Jztcblx0ICAgIHZhciBpbmRlbnQgPSAnICAnLnJlcGVhdChkZXB0aCAtIDEpO1xuXHQgICAgdmFyIGVudHJpZXMgPSBrZXlzLnNsaWNlKDAsIG1heEtleXMpLm1hcChmdW5jdGlvbiAoa2V5KSB7XG5cdCAgICAgIHJldHVybiAoL14oW0EtWl8kXVtBLVowLTlfJF0qKSQvaS50ZXN0KGtleSkgPyBrZXkgOiBKU09OLnN0cmluZ2lmeShrZXkpKSArICc6ICcgKyBfaW5zcGVjdChpbnB1dFtrZXldLCBkZXB0aCkgKyAnOyc7XG5cdCAgICB9KS5qb2luKCdcXG4gICcgKyBpbmRlbnQpO1xuXG5cdCAgICBpZiAoa2V5cy5sZW5ndGggPj0gbWF4S2V5cykge1xuXHQgICAgICBlbnRyaWVzICs9ICdcXG4gICcgKyBpbmRlbnQgKyAnLi4uJztcblx0ICAgIH1cblxuXHQgICAgaWYgKGlucHV0LmNvbnN0cnVjdG9yICYmIGlucHV0LmNvbnN0cnVjdG9yLm5hbWUgJiYgaW5wdXQuY29uc3RydWN0b3IubmFtZSAhPT0gJ09iamVjdCcpIHtcblx0ICAgICAgcmV0dXJuIGlucHV0LmNvbnN0cnVjdG9yLm5hbWUgKyAnIHtcXG4gICcgKyBpbmRlbnQgKyBlbnRyaWVzICsgJ1xcbicgKyBpbmRlbnQgKyAnfSc7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICByZXR1cm4gJ3tcXG4gICcgKyBpbmRlbnQgKyBlbnRyaWVzICsgJ1xcbicgKyBpbmRlbnQgKyAnfSc7XG5cdCAgICB9XG5cdCAgfVxuXHR9XG5cbi8qKiovIH0sXG4vKiA0NyAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgdmFsdWU6IHRydWVcblx0fSk7XG5cdFxuXHR2YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cdFxuXHR2YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXHRcblx0dmFyIF9kaXNsRXJyb3IgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDExKTtcblx0XG5cdHZhciBfZGlzbEVycm9yMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2Rpc2xFcnJvcik7XG5cdFxuXHRmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXHRcblx0ZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblx0XG5cdGZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXHRcblx0ZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cdFxuXHQvKipcblx0ICogQGF1dGhvciBCZW5qYW1pbiBNaWNoYWxza2kgPGJlbmphbWluLm1pY2hhbHNraUBnbWFpbC5jb20+XG5cdCAqXG5cdCAqIEBwdWJsaWNcblx0ICovXG5cdHZhciBVbmRlZmluZWRQYXJhbWV0ZXJFcnJvciA9IGZ1bmN0aW9uIChfRGlzbEVycm9yKSB7XG5cdCAgX2luaGVyaXRzKFVuZGVmaW5lZFBhcmFtZXRlckVycm9yLCBfRGlzbEVycm9yKTtcblx0XG5cdCAgZnVuY3Rpb24gVW5kZWZpbmVkUGFyYW1ldGVyRXJyb3IoKSB7XG5cdCAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVW5kZWZpbmVkUGFyYW1ldGVyRXJyb3IpO1xuXHRcblx0ICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoVW5kZWZpbmVkUGFyYW1ldGVyRXJyb3IuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihVbmRlZmluZWRQYXJhbWV0ZXJFcnJvcikpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuXHQgIH1cblx0XG5cdCAgX2NyZWF0ZUNsYXNzKFVuZGVmaW5lZFBhcmFtZXRlckVycm9yLCBudWxsLCBbe1xuXHQgICAga2V5OiAnY3JlYXRlRXJyb3InLFxuXHRcblx0XG5cdCAgICAvKipcblx0ICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZGVudGlmaWVyXG5cdCAgICAgKlxuXHQgICAgICogQHJldHVybnMge1VuZGVmaW5lZFBhcmFtZXRlckVycm9yfVxuXHQgICAgICovXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlRXJyb3IoaWRlbnRpZmllcikge1xuXHQgICAgICBpZiAoISh0eXBlb2YgaWRlbnRpZmllciA9PT0gJ3N0cmluZycpKSB7XG5cdCAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVmFsdWUgb2YgYXJndW1lbnQgXCJpZGVudGlmaWVyXCIgdmlvbGF0ZXMgY29udHJhY3QuXFxuXFxuRXhwZWN0ZWQ6XFxuc3RyaW5nXFxuXFxuR290OlxcbicgKyBfaW5zcGVjdChpZGVudGlmaWVyKSk7XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIHJldHVybiBuZXcgVW5kZWZpbmVkUGFyYW1ldGVyRXJyb3Ioe1xuXHQgICAgICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXJcblx0ICAgICAgfSwgJ1VuZGVmaW5lZCBwYXJhbWV0ZXIgZm9yIGlkZW50aWZpZXIgXCIlc1wiJywgaWRlbnRpZmllcik7XG5cdCAgICB9XG5cdCAgfV0pO1xuXHRcblx0ICByZXR1cm4gVW5kZWZpbmVkUGFyYW1ldGVyRXJyb3I7XG5cdH0oX2Rpc2xFcnJvcjIuZGVmYXVsdCk7XG5cdFxuXHRleHBvcnRzLmRlZmF1bHQgPSBVbmRlZmluZWRQYXJhbWV0ZXJFcnJvcjtcblx0XG5cdGZ1bmN0aW9uIF9pbnNwZWN0KGlucHV0LCBkZXB0aCkge1xuXHQgIHZhciBtYXhEZXB0aCA9IDQ7XG5cdCAgdmFyIG1heEtleXMgPSAxNTtcblxuXHQgIGlmIChkZXB0aCA9PT0gdW5kZWZpbmVkKSB7XG5cdCAgICBkZXB0aCA9IDA7XG5cdCAgfVxuXG5cdCAgZGVwdGggKz0gMTtcblxuXHQgIGlmIChpbnB1dCA9PT0gbnVsbCkge1xuXHQgICAgcmV0dXJuICdudWxsJztcblx0ICB9IGVsc2UgaWYgKGlucHV0ID09PSB1bmRlZmluZWQpIHtcblx0ICAgIHJldHVybiAndm9pZCc7XG5cdCAgfSBlbHNlIGlmICh0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBpbnB1dCA9PT0gJ251bWJlcicgfHwgdHlwZW9mIGlucHV0ID09PSAnYm9vbGVhbicpIHtcblx0ICAgIHJldHVybiB0eXBlb2YgaW5wdXQgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKGlucHV0KTtcblx0ICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoaW5wdXQpKSB7XG5cdCAgICBpZiAoaW5wdXQubGVuZ3RoID4gMCkge1xuXHQgICAgICB2YXIgX3JldCA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICBpZiAoZGVwdGggPiBtYXhEZXB0aCkgcmV0dXJuIHtcblx0ICAgICAgICAgICAgdjogJ1suLi5dJ1xuXHQgICAgICAgICAgfTtcblxuXHQgICAgICAgIHZhciBmaXJzdCA9IF9pbnNwZWN0KGlucHV0WzBdLCBkZXB0aCk7XG5cblx0ICAgICAgICBpZiAoaW5wdXQuZXZlcnkoZnVuY3Rpb24gKGl0ZW0pIHtcblx0ICAgICAgICAgIHJldHVybiBfaW5zcGVjdChpdGVtLCBkZXB0aCkgPT09IGZpcnN0O1xuXHQgICAgICAgIH0pKSB7XG5cdCAgICAgICAgICByZXR1cm4ge1xuXHQgICAgICAgICAgICB2OiBmaXJzdC50cmltKCkgKyAnW10nXG5cdCAgICAgICAgICB9O1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICByZXR1cm4ge1xuXHQgICAgICAgICAgICB2OiAnWycgKyBpbnB1dC5zbGljZSgwLCBtYXhLZXlzKS5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcblx0ICAgICAgICAgICAgICByZXR1cm4gX2luc3BlY3QoaXRlbSwgZGVwdGgpO1xuXHQgICAgICAgICAgICB9KS5qb2luKCcsICcpICsgKGlucHV0Lmxlbmd0aCA+PSBtYXhLZXlzID8gJywgLi4uJyA6ICcnKSArICddJ1xuXHQgICAgICAgICAgfTtcblx0ICAgICAgICB9XG5cdCAgICAgIH0oKTtcblxuXHQgICAgICBpZiAoKHR5cGVvZiBfcmV0ID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihfcmV0KSkgPT09IFwib2JqZWN0XCIpIHJldHVybiBfcmV0LnY7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICByZXR1cm4gJ0FycmF5Jztcblx0ICAgIH1cblx0ICB9IGVsc2Uge1xuXHQgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhpbnB1dCk7XG5cblx0ICAgIGlmICgha2V5cy5sZW5ndGgpIHtcblx0ICAgICAgaWYgKGlucHV0LmNvbnN0cnVjdG9yICYmIGlucHV0LmNvbnN0cnVjdG9yLm5hbWUgJiYgaW5wdXQuY29uc3RydWN0b3IubmFtZSAhPT0gJ09iamVjdCcpIHtcblx0ICAgICAgICByZXR1cm4gaW5wdXQuY29uc3RydWN0b3IubmFtZTtcblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICByZXR1cm4gJ09iamVjdCc7XG5cdCAgICAgIH1cblx0ICAgIH1cblxuXHQgICAgaWYgKGRlcHRoID4gbWF4RGVwdGgpIHJldHVybiAney4uLn0nO1xuXHQgICAgdmFyIGluZGVudCA9ICcgICcucmVwZWF0KGRlcHRoIC0gMSk7XG5cdCAgICB2YXIgZW50cmllcyA9IGtleXMuc2xpY2UoMCwgbWF4S2V5cykubWFwKGZ1bmN0aW9uIChrZXkpIHtcblx0ICAgICAgcmV0dXJuICgvXihbQS1aXyRdW0EtWjAtOV8kXSopJC9pLnRlc3Qoa2V5KSA/IGtleSA6IEpTT04uc3RyaW5naWZ5KGtleSkpICsgJzogJyArIF9pbnNwZWN0KGlucHV0W2tleV0sIGRlcHRoKSArICc7Jztcblx0ICAgIH0pLmpvaW4oJ1xcbiAgJyArIGluZGVudCk7XG5cblx0ICAgIGlmIChrZXlzLmxlbmd0aCA+PSBtYXhLZXlzKSB7XG5cdCAgICAgIGVudHJpZXMgKz0gJ1xcbiAgJyArIGluZGVudCArICcuLi4nO1xuXHQgICAgfVxuXG5cdCAgICBpZiAoaW5wdXQuY29uc3RydWN0b3IgJiYgaW5wdXQuY29uc3RydWN0b3IubmFtZSAmJiBpbnB1dC5jb25zdHJ1Y3Rvci5uYW1lICE9PSAnT2JqZWN0Jykge1xuXHQgICAgICByZXR1cm4gaW5wdXQuY29uc3RydWN0b3IubmFtZSArICcge1xcbiAgJyArIGluZGVudCArIGVudHJpZXMgKyAnXFxuJyArIGluZGVudCArICd9Jztcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIHJldHVybiAne1xcbiAgJyArIGluZGVudCArIGVudHJpZXMgKyAnXFxuJyArIGluZGVudCArICd9Jztcblx0ICAgIH1cblx0ICB9XG5cdH1cblxuLyoqKi8gfSxcbi8qIDQ4ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0XG5cdHZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblx0XG5cdHZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cdFxuXHR2YXIgX2Rpc2xFcnJvciA9IF9fd2VicGFja19yZXF1aXJlX18oMTEpO1xuXHRcblx0dmFyIF9kaXNsRXJyb3IyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZGlzbEVycm9yKTtcblx0XG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cdFxuXHRmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXHRcblx0ZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cdFxuXHRmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblx0XG5cdC8qKlxuXHQgKiBAYXV0aG9yIEJlbmphbWluIE1pY2hhbHNraSA8YmVuamFtaW4ubWljaGFsc2tpQGdtYWlsLmNvbT5cblx0ICpcblx0ICogQHB1YmxpY1xuXHQgKi9cblx0dmFyIFVuZGVmaW5lZFNlcnZpY2VEZWZpbml0aW9uQW5kSW5zdGFuY2VFcnJvciA9IGZ1bmN0aW9uIChfRGlzbEVycm9yKSB7XG5cdCAgX2luaGVyaXRzKFVuZGVmaW5lZFNlcnZpY2VEZWZpbml0aW9uQW5kSW5zdGFuY2VFcnJvciwgX0Rpc2xFcnJvcik7XG5cdFxuXHQgIGZ1bmN0aW9uIFVuZGVmaW5lZFNlcnZpY2VEZWZpbml0aW9uQW5kSW5zdGFuY2VFcnJvcigpIHtcblx0ICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBVbmRlZmluZWRTZXJ2aWNlRGVmaW5pdGlvbkFuZEluc3RhbmNlRXJyb3IpO1xuXHRcblx0ICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoVW5kZWZpbmVkU2VydmljZURlZmluaXRpb25BbmRJbnN0YW5jZUVycm9yLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoVW5kZWZpbmVkU2VydmljZURlZmluaXRpb25BbmRJbnN0YW5jZUVycm9yKSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG5cdCAgfVxuXHRcblx0ICBfY3JlYXRlQ2xhc3MoVW5kZWZpbmVkU2VydmljZURlZmluaXRpb25BbmRJbnN0YW5jZUVycm9yLCBudWxsLCBbe1xuXHQgICAga2V5OiAnY3JlYXRlRXJyb3InLFxuXHRcblx0XG5cdCAgICAvKipcblx0ICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZGVudGlmaWVyXG5cdCAgICAgKlxuXHQgICAgICogQHJldHVybnMge1VuZGVmaW5lZFNlcnZpY2VEZWZpbml0aW9uQW5kSW5zdGFuY2VFcnJvcn1cblx0ICAgICAqL1xuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZUVycm9yKGlkZW50aWZpZXIpIHtcblx0ICAgICAgaWYgKCEodHlwZW9mIGlkZW50aWZpZXIgPT09ICdzdHJpbmcnKSkge1xuXHQgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1ZhbHVlIG9mIGFyZ3VtZW50IFwiaWRlbnRpZmllclwiIHZpb2xhdGVzIGNvbnRyYWN0LlxcblxcbkV4cGVjdGVkOlxcbnN0cmluZ1xcblxcbkdvdDpcXG4nICsgX2luc3BlY3QoaWRlbnRpZmllcikpO1xuXHQgICAgICB9XG5cdFxuXHQgICAgICByZXR1cm4gbmV3IFVuZGVmaW5lZFNlcnZpY2VEZWZpbml0aW9uQW5kSW5zdGFuY2VFcnJvcih7XG5cdCAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllclxuXHQgICAgICB9LCAnVW5kZWZpbmVkIHNlcnZpY2UgZGVmaW5pdGlvbiBhbmQgaW5zdGFuY2UgZm9yIGlkZW50aWZpZXIgXCIlc1wiJywgaWRlbnRpZmllcik7XG5cdCAgICB9XG5cdCAgfV0pO1xuXHRcblx0ICByZXR1cm4gVW5kZWZpbmVkU2VydmljZURlZmluaXRpb25BbmRJbnN0YW5jZUVycm9yO1xuXHR9KF9kaXNsRXJyb3IyLmRlZmF1bHQpO1xuXHRcblx0ZXhwb3J0cy5kZWZhdWx0ID0gVW5kZWZpbmVkU2VydmljZURlZmluaXRpb25BbmRJbnN0YW5jZUVycm9yO1xuXHRcblx0ZnVuY3Rpb24gX2luc3BlY3QoaW5wdXQsIGRlcHRoKSB7XG5cdCAgdmFyIG1heERlcHRoID0gNDtcblx0ICB2YXIgbWF4S2V5cyA9IDE1O1xuXG5cdCAgaWYgKGRlcHRoID09PSB1bmRlZmluZWQpIHtcblx0ICAgIGRlcHRoID0gMDtcblx0ICB9XG5cblx0ICBkZXB0aCArPSAxO1xuXG5cdCAgaWYgKGlucHV0ID09PSBudWxsKSB7XG5cdCAgICByZXR1cm4gJ251bGwnO1xuXHQgIH0gZWxzZSBpZiAoaW5wdXQgPT09IHVuZGVmaW5lZCkge1xuXHQgICAgcmV0dXJuICd2b2lkJztcblx0ICB9IGVsc2UgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIGlucHV0ID09PSAnbnVtYmVyJyB8fCB0eXBlb2YgaW5wdXQgPT09ICdib29sZWFuJykge1xuXHQgICAgcmV0dXJuIHR5cGVvZiBpbnB1dCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YoaW5wdXQpO1xuXHQgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShpbnB1dCkpIHtcblx0ICAgIGlmIChpbnB1dC5sZW5ndGggPiAwKSB7XG5cdCAgICAgIHZhciBfcmV0ID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIGlmIChkZXB0aCA+IG1heERlcHRoKSByZXR1cm4ge1xuXHQgICAgICAgICAgICB2OiAnWy4uLl0nXG5cdCAgICAgICAgICB9O1xuXG5cdCAgICAgICAgdmFyIGZpcnN0ID0gX2luc3BlY3QoaW5wdXRbMF0sIGRlcHRoKTtcblxuXHQgICAgICAgIGlmIChpbnB1dC5ldmVyeShmdW5jdGlvbiAoaXRlbSkge1xuXHQgICAgICAgICAgcmV0dXJuIF9pbnNwZWN0KGl0ZW0sIGRlcHRoKSA9PT0gZmlyc3Q7XG5cdCAgICAgICAgfSkpIHtcblx0ICAgICAgICAgIHJldHVybiB7XG5cdCAgICAgICAgICAgIHY6IGZpcnN0LnRyaW0oKSArICdbXSdcblx0ICAgICAgICAgIH07XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgIHJldHVybiB7XG5cdCAgICAgICAgICAgIHY6ICdbJyArIGlucHV0LnNsaWNlKDAsIG1heEtleXMpLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuXHQgICAgICAgICAgICAgIHJldHVybiBfaW5zcGVjdChpdGVtLCBkZXB0aCk7XG5cdCAgICAgICAgICAgIH0pLmpvaW4oJywgJykgKyAoaW5wdXQubGVuZ3RoID49IG1heEtleXMgPyAnLCAuLi4nIDogJycpICsgJ10nXG5cdCAgICAgICAgICB9O1xuXHQgICAgICAgIH1cblx0ICAgICAgfSgpO1xuXG5cdCAgICAgIGlmICgodHlwZW9mIF9yZXQgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKF9yZXQpKSA9PT0gXCJvYmplY3RcIikgcmV0dXJuIF9yZXQudjtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIHJldHVybiAnQXJyYXknO1xuXHQgICAgfVxuXHQgIH0gZWxzZSB7XG5cdCAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGlucHV0KTtcblxuXHQgICAgaWYgKCFrZXlzLmxlbmd0aCkge1xuXHQgICAgICBpZiAoaW5wdXQuY29uc3RydWN0b3IgJiYgaW5wdXQuY29uc3RydWN0b3IubmFtZSAmJiBpbnB1dC5jb25zdHJ1Y3Rvci5uYW1lICE9PSAnT2JqZWN0Jykge1xuXHQgICAgICAgIHJldHVybiBpbnB1dC5jb25zdHJ1Y3Rvci5uYW1lO1xuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIHJldHVybiAnT2JqZWN0Jztcblx0ICAgICAgfVxuXHQgICAgfVxuXG5cdCAgICBpZiAoZGVwdGggPiBtYXhEZXB0aCkgcmV0dXJuICd7Li4ufSc7XG5cdCAgICB2YXIgaW5kZW50ID0gJyAgJy5yZXBlYXQoZGVwdGggLSAxKTtcblx0ICAgIHZhciBlbnRyaWVzID0ga2V5cy5zbGljZSgwLCBtYXhLZXlzKS5tYXAoZnVuY3Rpb24gKGtleSkge1xuXHQgICAgICByZXR1cm4gKC9eKFtBLVpfJF1bQS1aMC05XyRdKikkL2kudGVzdChrZXkpID8ga2V5IDogSlNPTi5zdHJpbmdpZnkoa2V5KSkgKyAnOiAnICsgX2luc3BlY3QoaW5wdXRba2V5XSwgZGVwdGgpICsgJzsnO1xuXHQgICAgfSkuam9pbignXFxuICAnICsgaW5kZW50KTtcblxuXHQgICAgaWYgKGtleXMubGVuZ3RoID49IG1heEtleXMpIHtcblx0ICAgICAgZW50cmllcyArPSAnXFxuICAnICsgaW5kZW50ICsgJy4uLic7XG5cdCAgICB9XG5cblx0ICAgIGlmIChpbnB1dC5jb25zdHJ1Y3RvciAmJiBpbnB1dC5jb25zdHJ1Y3Rvci5uYW1lICYmIGlucHV0LmNvbnN0cnVjdG9yLm5hbWUgIT09ICdPYmplY3QnKSB7XG5cdCAgICAgIHJldHVybiBpbnB1dC5jb25zdHJ1Y3Rvci5uYW1lICsgJyB7XFxuICAnICsgaW5kZW50ICsgZW50cmllcyArICdcXG4nICsgaW5kZW50ICsgJ30nO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgcmV0dXJuICd7XFxuICAnICsgaW5kZW50ICsgZW50cmllcyArICdcXG4nICsgaW5kZW50ICsgJ30nO1xuXHQgICAgfVxuXHQgIH1cblx0fVxuXG4vKioqLyB9LFxuLyogNDkgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHQgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRcblx0dmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXHRcblx0dmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblx0XG5cdHZhciBfZGlzbEVycm9yID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMSk7XG5cdFxuXHR2YXIgX2Rpc2xFcnJvcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kaXNsRXJyb3IpO1xuXHRcblx0ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblx0XG5cdGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cdFxuXHRmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblx0XG5cdGZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXHRcblx0LyoqXG5cdCAqIEBhdXRob3IgQmVuamFtaW4gTWljaGFsc2tpIDxiZW5qYW1pbi5taWNoYWxza2lAZ21haWwuY29tPlxuXHQgKlxuXHQgKiBAcHVibGljXG5cdCAqL1xuXHR2YXIgVW5kZWZpbmVkU2VydmljZURlZmluaXRpb25FcnJvciA9IGZ1bmN0aW9uIChfRGlzbEVycm9yKSB7XG5cdCAgX2luaGVyaXRzKFVuZGVmaW5lZFNlcnZpY2VEZWZpbml0aW9uRXJyb3IsIF9EaXNsRXJyb3IpO1xuXHRcblx0ICBmdW5jdGlvbiBVbmRlZmluZWRTZXJ2aWNlRGVmaW5pdGlvbkVycm9yKCkge1xuXHQgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFVuZGVmaW5lZFNlcnZpY2VEZWZpbml0aW9uRXJyb3IpO1xuXHRcblx0ICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoVW5kZWZpbmVkU2VydmljZURlZmluaXRpb25FcnJvci5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFVuZGVmaW5lZFNlcnZpY2VEZWZpbml0aW9uRXJyb3IpKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcblx0ICB9XG5cdFxuXHQgIF9jcmVhdGVDbGFzcyhVbmRlZmluZWRTZXJ2aWNlRGVmaW5pdGlvbkVycm9yLCBudWxsLCBbe1xuXHQgICAga2V5OiAnY3JlYXRlRXJyb3InLFxuXHRcblx0XG5cdCAgICAvKipcblx0ICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZGVudGlmaWVyXG5cdCAgICAgKlxuXHQgICAgICogQHJldHVybnMge1VuZGVmaW5lZFNlcnZpY2VEZWZpbml0aW9uRXJyb3J9XG5cdCAgICAgKi9cblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBjcmVhdGVFcnJvcihpZGVudGlmaWVyKSB7XG5cdCAgICAgIGlmICghKHR5cGVvZiBpZGVudGlmaWVyID09PSAnc3RyaW5nJykpIHtcblx0ICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdWYWx1ZSBvZiBhcmd1bWVudCBcImlkZW50aWZpZXJcIiB2aW9sYXRlcyBjb250cmFjdC5cXG5cXG5FeHBlY3RlZDpcXG5zdHJpbmdcXG5cXG5Hb3Q6XFxuJyArIF9pbnNwZWN0KGlkZW50aWZpZXIpKTtcblx0ICAgICAgfVxuXHRcblx0ICAgICAgcmV0dXJuIG5ldyBVbmRlZmluZWRTZXJ2aWNlRGVmaW5pdGlvbkVycm9yKHtcblx0ICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyXG5cdCAgICAgIH0sICdVbmRlZmluZWQgc2VydmljZSBkZWZpbml0aW9uIGZvciBpZGVudGlmaWVyIFwiJXNcIicsIGlkZW50aWZpZXIpO1xuXHQgICAgfVxuXHQgIH1dKTtcblx0XG5cdCAgcmV0dXJuIFVuZGVmaW5lZFNlcnZpY2VEZWZpbml0aW9uRXJyb3I7XG5cdH0oX2Rpc2xFcnJvcjIuZGVmYXVsdCk7XG5cdFxuXHRleHBvcnRzLmRlZmF1bHQgPSBVbmRlZmluZWRTZXJ2aWNlRGVmaW5pdGlvbkVycm9yO1xuXHRcblx0ZnVuY3Rpb24gX2luc3BlY3QoaW5wdXQsIGRlcHRoKSB7XG5cdCAgdmFyIG1heERlcHRoID0gNDtcblx0ICB2YXIgbWF4S2V5cyA9IDE1O1xuXG5cdCAgaWYgKGRlcHRoID09PSB1bmRlZmluZWQpIHtcblx0ICAgIGRlcHRoID0gMDtcblx0ICB9XG5cblx0ICBkZXB0aCArPSAxO1xuXG5cdCAgaWYgKGlucHV0ID09PSBudWxsKSB7XG5cdCAgICByZXR1cm4gJ251bGwnO1xuXHQgIH0gZWxzZSBpZiAoaW5wdXQgPT09IHVuZGVmaW5lZCkge1xuXHQgICAgcmV0dXJuICd2b2lkJztcblx0ICB9IGVsc2UgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIGlucHV0ID09PSAnbnVtYmVyJyB8fCB0eXBlb2YgaW5wdXQgPT09ICdib29sZWFuJykge1xuXHQgICAgcmV0dXJuIHR5cGVvZiBpbnB1dCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YoaW5wdXQpO1xuXHQgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShpbnB1dCkpIHtcblx0ICAgIGlmIChpbnB1dC5sZW5ndGggPiAwKSB7XG5cdCAgICAgIHZhciBfcmV0ID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIGlmIChkZXB0aCA+IG1heERlcHRoKSByZXR1cm4ge1xuXHQgICAgICAgICAgICB2OiAnWy4uLl0nXG5cdCAgICAgICAgICB9O1xuXG5cdCAgICAgICAgdmFyIGZpcnN0ID0gX2luc3BlY3QoaW5wdXRbMF0sIGRlcHRoKTtcblxuXHQgICAgICAgIGlmIChpbnB1dC5ldmVyeShmdW5jdGlvbiAoaXRlbSkge1xuXHQgICAgICAgICAgcmV0dXJuIF9pbnNwZWN0KGl0ZW0sIGRlcHRoKSA9PT0gZmlyc3Q7XG5cdCAgICAgICAgfSkpIHtcblx0ICAgICAgICAgIHJldHVybiB7XG5cdCAgICAgICAgICAgIHY6IGZpcnN0LnRyaW0oKSArICdbXSdcblx0ICAgICAgICAgIH07XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgIHJldHVybiB7XG5cdCAgICAgICAgICAgIHY6ICdbJyArIGlucHV0LnNsaWNlKDAsIG1heEtleXMpLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuXHQgICAgICAgICAgICAgIHJldHVybiBfaW5zcGVjdChpdGVtLCBkZXB0aCk7XG5cdCAgICAgICAgICAgIH0pLmpvaW4oJywgJykgKyAoaW5wdXQubGVuZ3RoID49IG1heEtleXMgPyAnLCAuLi4nIDogJycpICsgJ10nXG5cdCAgICAgICAgICB9O1xuXHQgICAgICAgIH1cblx0ICAgICAgfSgpO1xuXG5cdCAgICAgIGlmICgodHlwZW9mIF9yZXQgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKF9yZXQpKSA9PT0gXCJvYmplY3RcIikgcmV0dXJuIF9yZXQudjtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIHJldHVybiAnQXJyYXknO1xuXHQgICAgfVxuXHQgIH0gZWxzZSB7XG5cdCAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGlucHV0KTtcblxuXHQgICAgaWYgKCFrZXlzLmxlbmd0aCkge1xuXHQgICAgICBpZiAoaW5wdXQuY29uc3RydWN0b3IgJiYgaW5wdXQuY29uc3RydWN0b3IubmFtZSAmJiBpbnB1dC5jb25zdHJ1Y3Rvci5uYW1lICE9PSAnT2JqZWN0Jykge1xuXHQgICAgICAgIHJldHVybiBpbnB1dC5jb25zdHJ1Y3Rvci5uYW1lO1xuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIHJldHVybiAnT2JqZWN0Jztcblx0ICAgICAgfVxuXHQgICAgfVxuXG5cdCAgICBpZiAoZGVwdGggPiBtYXhEZXB0aCkgcmV0dXJuICd7Li4ufSc7XG5cdCAgICB2YXIgaW5kZW50ID0gJyAgJy5yZXBlYXQoZGVwdGggLSAxKTtcblx0ICAgIHZhciBlbnRyaWVzID0ga2V5cy5zbGljZSgwLCBtYXhLZXlzKS5tYXAoZnVuY3Rpb24gKGtleSkge1xuXHQgICAgICByZXR1cm4gKC9eKFtBLVpfJF1bQS1aMC05XyRdKikkL2kudGVzdChrZXkpID8ga2V5IDogSlNPTi5zdHJpbmdpZnkoa2V5KSkgKyAnOiAnICsgX2luc3BlY3QoaW5wdXRba2V5XSwgZGVwdGgpICsgJzsnO1xuXHQgICAgfSkuam9pbignXFxuICAnICsgaW5kZW50KTtcblxuXHQgICAgaWYgKGtleXMubGVuZ3RoID49IG1heEtleXMpIHtcblx0ICAgICAgZW50cmllcyArPSAnXFxuICAnICsgaW5kZW50ICsgJy4uLic7XG5cdCAgICB9XG5cblx0ICAgIGlmIChpbnB1dC5jb25zdHJ1Y3RvciAmJiBpbnB1dC5jb25zdHJ1Y3Rvci5uYW1lICYmIGlucHV0LmNvbnN0cnVjdG9yLm5hbWUgIT09ICdPYmplY3QnKSB7XG5cdCAgICAgIHJldHVybiBpbnB1dC5jb25zdHJ1Y3Rvci5uYW1lICsgJyB7XFxuICAnICsgaW5kZW50ICsgZW50cmllcyArICdcXG4nICsgaW5kZW50ICsgJ30nO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgcmV0dXJuICd7XFxuICAnICsgaW5kZW50ICsgZW50cmllcyArICdcXG4nICsgaW5kZW50ICsgJ30nO1xuXHQgICAgfVxuXHQgIH1cblx0fVxuXG4vKioqLyB9LFxuLyogNTAgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHQgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRcblx0dmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXHRcblx0dmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblx0XG5cdHZhciBfZGlzbEVycm9yID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMSk7XG5cdFxuXHR2YXIgX2Rpc2xFcnJvcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kaXNsRXJyb3IpO1xuXHRcblx0ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblx0XG5cdGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cdFxuXHRmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblx0XG5cdGZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXHRcblx0LyoqXG5cdCAqIEBhdXRob3IgQmVuamFtaW4gTWljaGFsc2tpIDxiZW5qYW1pbi5taWNoYWxza2lAZ21haWwuY29tPlxuXHQgKlxuXHQgKiBAcHVibGljXG5cdCAqL1xuXHR2YXIgVW5zdXBwb3J0ZWRBcmd1bWVudFR5cGVFcnJvciA9IGZ1bmN0aW9uIChfRGlzbEVycm9yKSB7XG5cdCAgX2luaGVyaXRzKFVuc3VwcG9ydGVkQXJndW1lbnRUeXBlRXJyb3IsIF9EaXNsRXJyb3IpO1xuXHRcblx0ICBmdW5jdGlvbiBVbnN1cHBvcnRlZEFyZ3VtZW50VHlwZUVycm9yKCkge1xuXHQgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFVuc3VwcG9ydGVkQXJndW1lbnRUeXBlRXJyb3IpO1xuXHRcblx0ICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoVW5zdXBwb3J0ZWRBcmd1bWVudFR5cGVFcnJvci5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFVuc3VwcG9ydGVkQXJndW1lbnRUeXBlRXJyb3IpKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcblx0ICB9XG5cdFxuXHQgIF9jcmVhdGVDbGFzcyhVbnN1cHBvcnRlZEFyZ3VtZW50VHlwZUVycm9yLCBudWxsLCBbe1xuXHQgICAga2V5OiAnY3JlYXRlRXJyb3InLFxuXHRcblx0XG5cdCAgICAvKipcblx0ICAgICAqIEBwYXJhbSB7YW55fSBhcmdcblx0ICAgICAqXG5cdCAgICAgKiBAcmV0dXJucyB7VW5zdXBwb3J0ZWRBcmd1bWVudFR5cGVFcnJvcn1cblx0ICAgICAqL1xuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZUVycm9yKGFyZykge1xuXHQgICAgICByZXR1cm4gbmV3IFVuc3VwcG9ydGVkQXJndW1lbnRUeXBlRXJyb3Ioe1xuXHQgICAgICAgIGFyZzogYXJnXG5cdCAgICAgIH0sICdVbnN1cHBvcnRlZCBhcmcgb2YgdHlwZSBcIiVzXCInLCB0eXBlb2YgYXJnID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihhcmcpKTtcblx0ICAgIH1cblx0ICB9XSk7XG5cdFxuXHQgIHJldHVybiBVbnN1cHBvcnRlZEFyZ3VtZW50VHlwZUVycm9yO1xuXHR9KF9kaXNsRXJyb3IyLmRlZmF1bHQpO1xuXHRcblx0ZXhwb3J0cy5kZWZhdWx0ID0gVW5zdXBwb3J0ZWRBcmd1bWVudFR5cGVFcnJvcjtcblx0XG5cdGZ1bmN0aW9uIF9pbnNwZWN0KGlucHV0LCBkZXB0aCkge1xuXHQgIHZhciBtYXhEZXB0aCA9IDQ7XG5cdCAgdmFyIG1heEtleXMgPSAxNTtcblxuXHQgIGlmIChkZXB0aCA9PT0gdW5kZWZpbmVkKSB7XG5cdCAgICBkZXB0aCA9IDA7XG5cdCAgfVxuXG5cdCAgZGVwdGggKz0gMTtcblxuXHQgIGlmIChpbnB1dCA9PT0gbnVsbCkge1xuXHQgICAgcmV0dXJuICdudWxsJztcblx0ICB9IGVsc2UgaWYgKGlucHV0ID09PSB1bmRlZmluZWQpIHtcblx0ICAgIHJldHVybiAndm9pZCc7XG5cdCAgfSBlbHNlIGlmICh0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBpbnB1dCA9PT0gJ251bWJlcicgfHwgdHlwZW9mIGlucHV0ID09PSAnYm9vbGVhbicpIHtcblx0ICAgIHJldHVybiB0eXBlb2YgaW5wdXQgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKGlucHV0KTtcblx0ICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoaW5wdXQpKSB7XG5cdCAgICBpZiAoaW5wdXQubGVuZ3RoID4gMCkge1xuXHQgICAgICB2YXIgX3JldCA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICBpZiAoZGVwdGggPiBtYXhEZXB0aCkgcmV0dXJuIHtcblx0ICAgICAgICAgICAgdjogJ1suLi5dJ1xuXHQgICAgICAgICAgfTtcblxuXHQgICAgICAgIHZhciBmaXJzdCA9IF9pbnNwZWN0KGlucHV0WzBdLCBkZXB0aCk7XG5cblx0ICAgICAgICBpZiAoaW5wdXQuZXZlcnkoZnVuY3Rpb24gKGl0ZW0pIHtcblx0ICAgICAgICAgIHJldHVybiBfaW5zcGVjdChpdGVtLCBkZXB0aCkgPT09IGZpcnN0O1xuXHQgICAgICAgIH0pKSB7XG5cdCAgICAgICAgICByZXR1cm4ge1xuXHQgICAgICAgICAgICB2OiBmaXJzdC50cmltKCkgKyAnW10nXG5cdCAgICAgICAgICB9O1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICByZXR1cm4ge1xuXHQgICAgICAgICAgICB2OiAnWycgKyBpbnB1dC5zbGljZSgwLCBtYXhLZXlzKS5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcblx0ICAgICAgICAgICAgICByZXR1cm4gX2luc3BlY3QoaXRlbSwgZGVwdGgpO1xuXHQgICAgICAgICAgICB9KS5qb2luKCcsICcpICsgKGlucHV0Lmxlbmd0aCA+PSBtYXhLZXlzID8gJywgLi4uJyA6ICcnKSArICddJ1xuXHQgICAgICAgICAgfTtcblx0ICAgICAgICB9XG5cdCAgICAgIH0oKTtcblxuXHQgICAgICBpZiAoKHR5cGVvZiBfcmV0ID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihfcmV0KSkgPT09IFwib2JqZWN0XCIpIHJldHVybiBfcmV0LnY7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICByZXR1cm4gJ0FycmF5Jztcblx0ICAgIH1cblx0ICB9IGVsc2Uge1xuXHQgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhpbnB1dCk7XG5cblx0ICAgIGlmICgha2V5cy5sZW5ndGgpIHtcblx0ICAgICAgaWYgKGlucHV0LmNvbnN0cnVjdG9yICYmIGlucHV0LmNvbnN0cnVjdG9yLm5hbWUgJiYgaW5wdXQuY29uc3RydWN0b3IubmFtZSAhPT0gJ09iamVjdCcpIHtcblx0ICAgICAgICByZXR1cm4gaW5wdXQuY29uc3RydWN0b3IubmFtZTtcblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICByZXR1cm4gJ09iamVjdCc7XG5cdCAgICAgIH1cblx0ICAgIH1cblxuXHQgICAgaWYgKGRlcHRoID4gbWF4RGVwdGgpIHJldHVybiAney4uLn0nO1xuXHQgICAgdmFyIGluZGVudCA9ICcgICcucmVwZWF0KGRlcHRoIC0gMSk7XG5cdCAgICB2YXIgZW50cmllcyA9IGtleXMuc2xpY2UoMCwgbWF4S2V5cykubWFwKGZ1bmN0aW9uIChrZXkpIHtcblx0ICAgICAgcmV0dXJuICgvXihbQS1aXyRdW0EtWjAtOV8kXSopJC9pLnRlc3Qoa2V5KSA/IGtleSA6IEpTT04uc3RyaW5naWZ5KGtleSkpICsgJzogJyArIF9pbnNwZWN0KGlucHV0W2tleV0sIGRlcHRoKSArICc7Jztcblx0ICAgIH0pLmpvaW4oJ1xcbiAgJyArIGluZGVudCk7XG5cblx0ICAgIGlmIChrZXlzLmxlbmd0aCA+PSBtYXhLZXlzKSB7XG5cdCAgICAgIGVudHJpZXMgKz0gJ1xcbiAgJyArIGluZGVudCArICcuLi4nO1xuXHQgICAgfVxuXG5cdCAgICBpZiAoaW5wdXQuY29uc3RydWN0b3IgJiYgaW5wdXQuY29uc3RydWN0b3IubmFtZSAmJiBpbnB1dC5jb25zdHJ1Y3Rvci5uYW1lICE9PSAnT2JqZWN0Jykge1xuXHQgICAgICByZXR1cm4gaW5wdXQuY29uc3RydWN0b3IubmFtZSArICcge1xcbiAgJyArIGluZGVudCArIGVudHJpZXMgKyAnXFxuJyArIGluZGVudCArICd9Jztcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIHJldHVybiAne1xcbiAgJyArIGluZGVudCArIGVudHJpZXMgKyAnXFxuJyArIGluZGVudCArICd9Jztcblx0ICAgIH1cblx0ICB9XG5cdH1cblxuLyoqKi8gfSxcbi8qIDUxICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0XG5cdHZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblx0XG5cdHZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cdFxuXHR2YXIgX2Rpc2xFcnJvciA9IF9fd2VicGFja19yZXF1aXJlX18oMTEpO1xuXHRcblx0dmFyIF9kaXNsRXJyb3IyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZGlzbEVycm9yKTtcblx0XG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cdFxuXHRmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXHRcblx0ZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cdFxuXHRmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblx0XG5cdC8qKlxuXHQgKiBAYXV0aG9yIEJlbmphbWluIE1pY2hhbHNraSA8YmVuamFtaW4ubWljaGFsc2tpQGdtYWlsLmNvbT5cblx0ICpcblx0ICogQHB1YmxpY1xuXHQgKi9cblx0dmFyIEdldFNlcnZpY2VFcnJvciA9IGZ1bmN0aW9uIChfRGlzbEVycm9yKSB7XG5cdCAgX2luaGVyaXRzKEdldFNlcnZpY2VFcnJvciwgX0Rpc2xFcnJvcik7XG5cdFxuXHQgIGZ1bmN0aW9uIEdldFNlcnZpY2VFcnJvcigpIHtcblx0ICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBHZXRTZXJ2aWNlRXJyb3IpO1xuXHRcblx0ICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoR2V0U2VydmljZUVycm9yLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoR2V0U2VydmljZUVycm9yKSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG5cdCAgfVxuXHRcblx0ICBfY3JlYXRlQ2xhc3MoR2V0U2VydmljZUVycm9yLCBudWxsLCBbe1xuXHQgICAga2V5OiAnY3JlYXRlRXJyb3InLFxuXHRcblx0XG5cdCAgICAvKipcblx0ICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZGVudGlmaWVyXG5cdCAgICAgKiBAcGFyYW0ge0Vycm9yfSBjYXVzZVxuXHQgICAgICpcblx0ICAgICAqIEByZXR1cm5zIHtNZXRob2REb2VzTm90RXhpc3RFcnJvcn1cblx0ICAgICAqL1xuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZUVycm9yKGlkZW50aWZpZXIsIGNhdXNlKSB7XG5cdCAgICAgIGlmICghKHR5cGVvZiBpZGVudGlmaWVyID09PSAnc3RyaW5nJykpIHtcblx0ICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdWYWx1ZSBvZiBhcmd1bWVudCBcImlkZW50aWZpZXJcIiB2aW9sYXRlcyBjb250cmFjdC5cXG5cXG5FeHBlY3RlZDpcXG5zdHJpbmdcXG5cXG5Hb3Q6XFxuJyArIF9pbnNwZWN0KGlkZW50aWZpZXIpKTtcblx0ICAgICAgfVxuXHRcblx0ICAgICAgaWYgKCEoY2F1c2UgaW5zdGFuY2VvZiBFcnJvcikpIHtcblx0ICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdWYWx1ZSBvZiBhcmd1bWVudCBcImNhdXNlXCIgdmlvbGF0ZXMgY29udHJhY3QuXFxuXFxuRXhwZWN0ZWQ6XFxuRXJyb3JcXG5cXG5Hb3Q6XFxuJyArIF9pbnNwZWN0KGNhdXNlKSk7XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIHJldHVybiBuZXcgR2V0U2VydmljZUVycm9yKHtcblx0ICAgICAgICBjYXVzZTogY2F1c2UsXG5cdCAgICAgICAgaW5mbzoge1xuXHQgICAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllclxuXHQgICAgICAgIH1cblx0ICAgICAgfSwgJ0Vycm9yIGdldHRpbmcgc2VydmljZSBcIiVzXCInLCBpZGVudGlmaWVyKTtcblx0ICAgIH1cblx0ICB9XSk7XG5cdFxuXHQgIHJldHVybiBHZXRTZXJ2aWNlRXJyb3I7XG5cdH0oX2Rpc2xFcnJvcjIuZGVmYXVsdCk7XG5cdFxuXHRleHBvcnRzLmRlZmF1bHQgPSBHZXRTZXJ2aWNlRXJyb3I7XG5cdFxuXHRmdW5jdGlvbiBfaW5zcGVjdChpbnB1dCwgZGVwdGgpIHtcblx0ICB2YXIgbWF4RGVwdGggPSA0O1xuXHQgIHZhciBtYXhLZXlzID0gMTU7XG5cblx0ICBpZiAoZGVwdGggPT09IHVuZGVmaW5lZCkge1xuXHQgICAgZGVwdGggPSAwO1xuXHQgIH1cblxuXHQgIGRlcHRoICs9IDE7XG5cblx0ICBpZiAoaW5wdXQgPT09IG51bGwpIHtcblx0ICAgIHJldHVybiAnbnVsbCc7XG5cdCAgfSBlbHNlIGlmIChpbnB1dCA9PT0gdW5kZWZpbmVkKSB7XG5cdCAgICByZXR1cm4gJ3ZvaWQnO1xuXHQgIH0gZWxzZSBpZiAodHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgaW5wdXQgPT09ICdudW1iZXInIHx8IHR5cGVvZiBpbnB1dCA9PT0gJ2Jvb2xlYW4nKSB7XG5cdCAgICByZXR1cm4gdHlwZW9mIGlucHV0ID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihpbnB1dCk7XG5cdCAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGlucHV0KSkge1xuXHQgICAgaWYgKGlucHV0Lmxlbmd0aCA+IDApIHtcblx0ICAgICAgdmFyIF9yZXQgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgaWYgKGRlcHRoID4gbWF4RGVwdGgpIHJldHVybiB7XG5cdCAgICAgICAgICAgIHY6ICdbLi4uXSdcblx0ICAgICAgICAgIH07XG5cblx0ICAgICAgICB2YXIgZmlyc3QgPSBfaW5zcGVjdChpbnB1dFswXSwgZGVwdGgpO1xuXG5cdCAgICAgICAgaWYgKGlucHV0LmV2ZXJ5KGZ1bmN0aW9uIChpdGVtKSB7XG5cdCAgICAgICAgICByZXR1cm4gX2luc3BlY3QoaXRlbSwgZGVwdGgpID09PSBmaXJzdDtcblx0ICAgICAgICB9KSkge1xuXHQgICAgICAgICAgcmV0dXJuIHtcblx0ICAgICAgICAgICAgdjogZmlyc3QudHJpbSgpICsgJ1tdJ1xuXHQgICAgICAgICAgfTtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgcmV0dXJuIHtcblx0ICAgICAgICAgICAgdjogJ1snICsgaW5wdXQuc2xpY2UoMCwgbWF4S2V5cykubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG5cdCAgICAgICAgICAgICAgcmV0dXJuIF9pbnNwZWN0KGl0ZW0sIGRlcHRoKTtcblx0ICAgICAgICAgICAgfSkuam9pbignLCAnKSArIChpbnB1dC5sZW5ndGggPj0gbWF4S2V5cyA/ICcsIC4uLicgOiAnJykgKyAnXSdcblx0ICAgICAgICAgIH07XG5cdCAgICAgICAgfVxuXHQgICAgICB9KCk7XG5cblx0ICAgICAgaWYgKCh0eXBlb2YgX3JldCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YoX3JldCkpID09PSBcIm9iamVjdFwiKSByZXR1cm4gX3JldC52O1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgcmV0dXJuICdBcnJheSc7XG5cdCAgICB9XG5cdCAgfSBlbHNlIHtcblx0ICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoaW5wdXQpO1xuXG5cdCAgICBpZiAoIWtleXMubGVuZ3RoKSB7XG5cdCAgICAgIGlmIChpbnB1dC5jb25zdHJ1Y3RvciAmJiBpbnB1dC5jb25zdHJ1Y3Rvci5uYW1lICYmIGlucHV0LmNvbnN0cnVjdG9yLm5hbWUgIT09ICdPYmplY3QnKSB7XG5cdCAgICAgICAgcmV0dXJuIGlucHV0LmNvbnN0cnVjdG9yLm5hbWU7XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgcmV0dXJuICdPYmplY3QnO1xuXHQgICAgICB9XG5cdCAgICB9XG5cblx0ICAgIGlmIChkZXB0aCA+IG1heERlcHRoKSByZXR1cm4gJ3suLi59Jztcblx0ICAgIHZhciBpbmRlbnQgPSAnICAnLnJlcGVhdChkZXB0aCAtIDEpO1xuXHQgICAgdmFyIGVudHJpZXMgPSBrZXlzLnNsaWNlKDAsIG1heEtleXMpLm1hcChmdW5jdGlvbiAoa2V5KSB7XG5cdCAgICAgIHJldHVybiAoL14oW0EtWl8kXVtBLVowLTlfJF0qKSQvaS50ZXN0KGtleSkgPyBrZXkgOiBKU09OLnN0cmluZ2lmeShrZXkpKSArICc6ICcgKyBfaW5zcGVjdChpbnB1dFtrZXldLCBkZXB0aCkgKyAnOyc7XG5cdCAgICB9KS5qb2luKCdcXG4gICcgKyBpbmRlbnQpO1xuXG5cdCAgICBpZiAoa2V5cy5sZW5ndGggPj0gbWF4S2V5cykge1xuXHQgICAgICBlbnRyaWVzICs9ICdcXG4gICcgKyBpbmRlbnQgKyAnLi4uJztcblx0ICAgIH1cblxuXHQgICAgaWYgKGlucHV0LmNvbnN0cnVjdG9yICYmIGlucHV0LmNvbnN0cnVjdG9yLm5hbWUgJiYgaW5wdXQuY29uc3RydWN0b3IubmFtZSAhPT0gJ09iamVjdCcpIHtcblx0ICAgICAgcmV0dXJuIGlucHV0LmNvbnN0cnVjdG9yLm5hbWUgKyAnIHtcXG4gICcgKyBpbmRlbnQgKyBlbnRyaWVzICsgJ1xcbicgKyBpbmRlbnQgKyAnfSc7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICByZXR1cm4gJ3tcXG4gICcgKyBpbmRlbnQgKyBlbnRyaWVzICsgJ1xcbicgKyBpbmRlbnQgKyAnfSc7XG5cdCAgICB9XG5cdCAgfVxuXHR9XG5cbi8qKiovIH0sXG4vKiA1MiAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0XG5cdHZhciBTZXJ2aWNlID0gZXhwb3J0cy5TZXJ2aWNlID0gZnVuY3Rpb24gKCkge1xuXHQgIGZ1bmN0aW9uIFNlcnZpY2UoaW5wdXQpIHtcblx0ICAgIHJldHVybiBpbnB1dCBpbnN0YW5jZW9mIE9iamVjdCB8fCB0eXBlb2YgaW5wdXQgPT09ICdmdW5jdGlvbic7XG5cdCAgfVxuXHRcblx0ICA7XG5cdCAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFNlcnZpY2UsIFN5bWJvbC5oYXNJbnN0YW5jZSwge1xuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIHZhbHVlKGlucHV0KSB7XG5cdCAgICAgIHJldHVybiBTZXJ2aWNlKGlucHV0KTtcblx0ICAgIH1cblx0ICB9KTtcblx0ICByZXR1cm4gU2VydmljZTtcblx0fSgpO1xuXG4vKioqLyB9LFxuLyogNTMgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgdmFsdWU6IHRydWVcblx0fSk7XG5cdFxuXHR2YXIgUGFyYW1ldGVyVmFsdWUgPSBleHBvcnRzLlBhcmFtZXRlclZhbHVlID0gZnVuY3Rpb24gKCkge1xuXHQgIGZ1bmN0aW9uIFBhcmFtZXRlclZhbHVlKGlucHV0KSB7XG5cdCAgICByZXR1cm4gdHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgaW5wdXQgPT09ICdudW1iZXInIHx8IHR5cGVvZiBpbnB1dCA9PT0gJ2Jvb2xlYW4nIHx8IGlucHV0ID09IG51bGw7XG5cdCAgfVxuXHRcblx0ICA7XG5cdCAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFBhcmFtZXRlclZhbHVlLCBTeW1ib2wuaGFzSW5zdGFuY2UsIHtcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiB2YWx1ZShpbnB1dCkge1xuXHQgICAgICByZXR1cm4gUGFyYW1ldGVyVmFsdWUoaW5wdXQpO1xuXHQgICAgfVxuXHQgIH0pO1xuXHQgIHJldHVybiBQYXJhbWV0ZXJWYWx1ZTtcblx0fSgpO1xuXG4vKioqLyB9XG4vKioqKioqLyBdKVxufSk7XG47XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIGRpLWRldi5qcyIsIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKVxuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuXG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRleHBvcnRzOiB7fSxcbiBcdFx0XHRpZDogbW9kdWxlSWQsXG4gXHRcdFx0bG9hZGVkOiBmYWxzZVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sb2FkZWQgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHdlYnBhY2svYm9vdHN0cmFwIGUyZTkwYzhiMzRkMWM2MGY5YWJjIiwiaW1wb3J0IENvbnRhaW5lciBmcm9tICcuL3NyYy9jb250YWluZXInXG5pbXBvcnQgQ2xhc3NDb25zdHJ1Y3RvckRlZmluaXRpb24gZnJvbSAnLi9zcmMvY2xhc3MtY29uc3RydWN0b3ItZGVmaW5pdGlvbidcbmltcG9ydCBGYWN0b3J5RGVmaW5pdGlvbiBmcm9tICcuL3NyYy9mYWN0b3J5LWRlZmluaXRpb24nXG5pbXBvcnQgUmVmZXJlbmNlIGZyb20gJy4vc3JjL3JlZmVyZW5jZSdcbmltcG9ydCBQYXJhbWV0ZXIgZnJvbSAnLi9zcmMvcGFyYW1ldGVyJ1xuaW1wb3J0IE1ldGhvZENhbGwgZnJvbSAnLi9zcmMvbWV0aG9kLWNhbGwnXG5pbXBvcnQgZXJyb3JzIGZyb20gJy4vc3JjL2Vycm9ycydcblxuY29uc3QgZXhwb3J0cyA9IHtcbiAgQ29udGFpbmVyLFxuICBDbGFzc0NvbnN0cnVjdG9yRGVmaW5pdGlvbixcbiAgRmFjdG9yeURlZmluaXRpb24sXG4gIFJlZmVyZW5jZSxcbiAgUGFyYW1ldGVyLFxuICBNZXRob2RDYWxsXG59XG5cbmZvciAobGV0IGkgaW4gZXJyb3JzKSB7XG4gIGlmIChlcnJvcnMuaGFzT3duUHJvcGVydHkoaSkpIHtcbiAgICBleHBvcnRzW2ldID0gZXJyb3JzW2ldXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9pbmRleC5qcyIsImltcG9ydCBEZWZpbml0aW9uIGZyb20gJy4vZGVmaW5pdGlvbidcbmltcG9ydCBDbGFzc0NvbnN0cnVjdG9yRGVmaW5pdGlvbiBmcm9tICcuL2NsYXNzLWNvbnN0cnVjdG9yLWRlZmluaXRpb24nXG5pbXBvcnQgRmFjdG9yeURlZmluaXRpb24gZnJvbSAnLi9mYWN0b3J5LWRlZmluaXRpb24nXG5pbXBvcnQgUmVmZXJlbmNlIGZyb20gJy4vcmVmZXJlbmNlJ1xuaW1wb3J0IFBhcmFtZXRlciBmcm9tICcuL3BhcmFtZXRlcidcbmltcG9ydCBNZXRob2RDYWxsIGZyb20gJy4vbWV0aG9kLWNhbGwnXG5cbmltcG9ydCB7XG4gIENpcmN1bGFyRGVwZW5kZW5jeUVycm9yLFxuICBVbnN1cHBvcnRlZEFyZ3VtZW50VHlwZUVycm9yLFxuICBVbmRlZmluZWRTZXJ2aWNlRGVmaW5pdGlvbkFuZEluc3RhbmNlRXJyb3IsXG4gIFVuZGVmaW5lZFNlcnZpY2VEZWZpbml0aW9uRXJyb3IsXG4gIFNlcnZpY2VEZWZpbml0aW9uQWxyZWFkeVVzZWRFcnJvcixcbiAgVW5kZWZpbmVkUGFyYW1ldGVyRXJyb3IsXG4gIEZhY3RvcnlNZXRob2RSZXR1cm5zTm90aGluZ0Vycm9yLFxuICBNZXRob2REb2VzTm90RXhpc3RFcnJvcixcbiAgQ2Fubm90TG9jYXRlU2VydmljZUNsYXNzQ29uc3RydWN0b3JFcnJvcixcbiAgR2V0U2VydmljZUVycm9yXG59IGZyb20gJy4vZXJyb3JzJ1xuXG5pbXBvcnQgdHlwZSB7U2VydmljZX0gZnJvbSAnLi90eXBlcy9zZXJ2aWNlJ1xuaW1wb3J0IHR5cGUge1BhcmFtZXRlclZhbHVlfSBmcm9tICcuL3R5cGVzL3BhcmFtZXRlci12YWx1ZSdcbmltcG9ydCB0eXBlIHtJbmplY3RhYmxlQXJndW1lbnRzfSBmcm9tICcuL3R5cGVzL2luamVjdGFibGUtYXJndW1lbnRzJ1xuXG50eXBlIExvYWRpbmdPYmplY3QgPSB7XG4gIG9iajogT2JqZWN0PHN0cmluZywgYm9vbGVhbj4sXG4gIGFycjogQXJyYXk8c3RyaW5nPlxufVxudHlwZSBMb2NhdG9yQ2FsbGJhY2sgPSAoaWRlbnRpZmllcjogc3RyaW5nKSA9PiAoP0Z1bmN0aW9uKVxuXG4vKipcbiAqIEBhdXRob3IgQmVuamFtaW4gTWljaGFsc2tpIDxiZW5qYW1pbi5taWNoYWxza2lAZ21haWwuY29tPlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuY2xhc3MgQ29udGFpbmVyIHtcblxuICAvKipcbiAgICogQ29uc3RydWN0b3JcbiAgICovXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuX3NlcnZpY2VzQnlJZGVudGlmaWVyID0ge31cbiAgICB0aGlzLl9zZXJ2aWNlRGVmaW5pdGlvbnNCeUlkZW50aWZpZXIgPSB7fVxuICAgIHRoaXMuX3BhcmFtZXRlcnNCeUlkZW50aWZpZXIgPSB7fVxuICAgIHRoaXMuX3NlcnZpY2VEZWZpbml0aW9uc0FscmVhZHlVc2VkVG9JbnN0YW50aWF0ZUJ5SWRlbnRpZmllciA9IHt9XG4gICAgdGhpcy5fY2xhc3NDb25zdHJ1Y3RvckxvY2F0b3JzID0gW11cbiAgICB0aGlzLl9pbnN0YW5jZUxvY2F0b3JzID0gW11cbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHNlcnZpY2UgYXNzb2NpYXRlZCB3aXRoIGlkZW50aWZpZXJcbiAgICpcbiAgICogQHBhcmFtIHsuLi5zdHJpbmd9IGlkZW50aWZpZXJzXG4gICAqXG4gICAqIEBwcm9taXNlXG4gICAqIEByZXNvbHZlIHtBcnJheTxTZXJ2aWNlPn1cbiAgICogQHJlamVjdCB7R2V0U2VydmljZUVycm9yfSBpbiBjYXNlIGFueSBFcnJvciBpcyByYWlzZWQgd2hlbiBpbnN0YW50aWF0aW5nIHNlcnZpY2VcbiAgICpcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgZ2V0KC4uLmlkZW50aWZpZXJzOiBBcnJheTxzdHJpbmc+KTogUHJvbWlzZTxBcnJheTxTZXJ2aWNlPj4ge1xuICAgIGNvbnN0IHByb21pc2VzID0gW11cblxuICAgIGlkZW50aWZpZXJzLmZvckVhY2goKGlkZW50aWZpZXI6IHN0cmluZyk6IHZvaWQgPT4ge1xuICAgICAgcHJvbWlzZXMucHVzaChcbiAgICAgICAgdGhpc1xuICAgICAgICAgIC5fZG9HZXRTZXJ2aWNlKGlkZW50aWZpZXIsIHsgb2JqOiB7fSwgYXJyOiBbXSB9KVxuICAgICAgICAgIC5jYXRjaCgoZTogRXJyb3IpOiB2b2lkID0+IHtcbiAgICAgICAgICAgIHRocm93IEdldFNlcnZpY2VFcnJvci5jcmVhdGVFcnJvcihpZGVudGlmaWVyLCBlKVxuICAgICAgICAgIH0pXG4gICAgICApXG4gICAgfSlcblxuICAgIHJldHVybiBQcm9taXNlLmFsbChwcm9taXNlcylcbiAgfVxuXG4gIC8qKlxuICAgKiBBc3NvY2lhdGVzIHNlcnZpY2Ugd2l0aCBpZGVudGlmaWVyXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpZGVudGlmaWVyXG4gICAqIEBwYXJhbSB7U2VydmljZX0gaW5zdGFuY2Ugc2VydmljZSBpbnN0YW5jZVxuICAgKlxuICAgKiBAcmV0dXJucyB7Q29udGFpbmVyfSBjdXJyZW50IENvbnRhaW5lciBpbnN0YW5jZVxuICAgKlxuICAgKiBAcHVibGljXG4gICAqL1xuICBzZXQoaWRlbnRpZmllcjogc3RyaW5nLCBpbnN0YW5jZTogU2VydmljZSk6IENvbnRhaW5lciB7XG4gICAgdGhpcy5fc2VydmljZXNCeUlkZW50aWZpZXJbaWRlbnRpZmllcl0gPSBpbnN0YW5jZVxuXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRydWUgaWYgY29udGFpbmVyIGhhcyBzZXJ2aWNlLCB0aGF0IGlzIGVpdGhlciBpZjpcbiAgICogKiBpdCBoYXMgYSB7QGxpbmsgRGVmaW5pdGlvbn1cbiAgICogKiBpdCBoYXMgYmVlbiBpbnN0YW50aWF0ZWRcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGlkZW50aWZpZXJcbiAgICpcbiAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAqL1xuICBoYXMoaWRlbnRpZmllcjogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuaGFzRGVmaW5pdGlvbihpZGVudGlmaWVyKSB8fCB0aGlzLmhhc0luc3RhbmNlKGlkZW50aWZpZXIpXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0cnVlIGlmIHRoZSBzZXJ2aWNlIGhhcyBhIGRlZmluaXRpb25cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGlkZW50aWZpZXJcbiAgICpcbiAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAqXG4gICAqIEBwdWJsaWNcbiAgICovXG4gIGhhc0RlZmluaXRpb24oaWRlbnRpZmllcjogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZCAhPT0gdGhpcy5fc2VydmljZURlZmluaXRpb25zQnlJZGVudGlmaWVyW2lkZW50aWZpZXJdXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0cnVlIGlmIHRoZSBzZXJ2aWNlIGhhcyBhbiBpbnN0YW5jZSwgZWl0aGVyIGJlY2F1c2U6XG4gICAqICogaXQgaGFzIGJlZW4gaW5zdGFudGlhdGVkIHZpYSBpdHMge0BsaW5rIERlZmluaXRpb259XG4gICAqICogaXQgaGFzIGJlZW4gc2V0IGRpcmVjdGx5IHZpYSB7QGxpbmsgc2V0fSBtZXRob2RcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGlkZW50aWZpZXJcbiAgICpcbiAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAqXG4gICAqIEBwdWJsaWNcbiAgICovXG4gIGhhc0luc3RhbmNlKGlkZW50aWZpZXI6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB1bmRlZmluZWQgIT09IHRoaXMuX3NlcnZpY2VzQnlJZGVudGlmaWVyW2lkZW50aWZpZXJdXG4gIH1cblxuICAvKipcbiAgICogR2V0cyBzZXJ2aWNlIHtAbGluayBEZWZpbml0aW9ufSBhc3NvY2lhdGVkIHdpdGggaWRlbnRpZmllclxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gaWRlbnRpZmllclxuICAgKlxuICAgKiBAcmV0dXJucyB7RGVmaW5pdGlvbn1cbiAgICpcbiAgICogQHRocm93cyB7VW5kZWZpbmVkU2VydmljZURlZmluaXRpb25FcnJvcn0gaWYgdGhlcmUgaXMgbm8gc2VydmljZSBkZWZpbml0aW9uIGZvciBnaXZlbiBpZGVudGlmaWVyXG4gICAqXG4gICAqIEBwdWJsaWNcbiAgICovXG4gIGdldERlZmluaXRpb24oaWRlbnRpZmllcjogc3RyaW5nKTogRGVmaW5pdGlvbiB7XG4gICAgY29uc3QgZGVmaW5pdGlvbiA9IHRoaXMuX3NlcnZpY2VEZWZpbml0aW9uc0J5SWRlbnRpZmllcltpZGVudGlmaWVyXVxuXG4gICAgaWYgKHVuZGVmaW5lZCA9PT0gZGVmaW5pdGlvbikge1xuICAgICAgdGhyb3cgVW5kZWZpbmVkU2VydmljZURlZmluaXRpb25FcnJvci5jcmVhdGVFcnJvcihpZGVudGlmaWVyKVxuICAgIH1cblxuICAgIHJldHVybiBkZWZpbml0aW9uXG4gIH1cblxuICAvKipcbiAgICogQXNzb2NpYXRlcyBzZXJ2aWNlIHtAbGluayBEZWZpbml0aW9ufSB3aXRoIGlkZW50aWZpZXJcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGlkZW50aWZpZXIgc2VydmljZSBpZGVudGlmaWVyXG4gICAqIEBwYXJhbSB7RGVmaW5pdGlvbn0gZGVmaW5pdGlvbiBzZXJ2aWNlIGRlZmluaXRpb25cbiAgICpcbiAgICogQHJldHVybnMge0NvbnRhaW5lcn0gY3VycmVudCBDb250YWluZXIgaW5zdGFuY2VcbiAgICpcbiAgICogQHRocm93cyB7U2VydmljZURlZmluaXRpb25BbHJlYWR5VXNlZEVycm9yfSBpZiB0aGUgc2VydmljZSBkZWZpbml0aW9uIGhhcyBhbHJlYWR5IGJlZW4gdXNlZCB0byBpbnN0YW50aWF0ZSBhIHNlcnZpY2VcbiAgICpcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgc2V0RGVmaW5pdGlvbihpZGVudGlmaWVyOiBzdHJpbmcsIGRlZmluaXRpb246IERlZmluaXRpb24pOiBDb250YWluZXIge1xuICAgIGlmICh0aGlzLl9zZXJ2aWNlRGVmaW5pdGlvbnNBbHJlYWR5VXNlZFRvSW5zdGFudGlhdGVCeUlkZW50aWZpZXJbaWRlbnRpZmllcl0pIHtcbiAgICAgIHRocm93IFNlcnZpY2VEZWZpbml0aW9uQWxyZWFkeVVzZWRFcnJvci5jcmVhdGVFcnJvcihpZGVudGlmaWVyKVxuICAgIH1cblxuICAgIHRoaXMuX3NlcnZpY2VEZWZpbml0aW9uc0FscmVhZHlVc2VkVG9JbnN0YW50aWF0ZUJ5SWRlbnRpZmllcltpZGVudGlmaWVyXSA9IGZhbHNlXG4gICAgdGhpcy5fc2VydmljZURlZmluaXRpb25zQnlJZGVudGlmaWVyW2lkZW50aWZpZXJdID0gZGVmaW5pdGlvblxuXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHBhcmFtZXRlciBhc3NvY2lhdGVkIHdpdGggaWRlbnRpZmllclxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gaWRlbnRpZmllciBwYXJhbWV0ZXIgaWRlbnRpZmllclxuICAgKlxuICAgKiBAcmV0dXJucyB7UGFyYW1ldGVyVmFsdWV9IHBhcmFtZXRlciB2YWx1ZVxuICAgKlxuICAgKiBAdGhyb3dzIHtVbmRlZmluZWRQYXJhbWV0ZXJFcnJvcn0gaWYgdGhlcmUgaXMgbm8gcGFyYW1ldGVyIGZvciBnaXZlbiBpZGVudGlmaWVyXG4gICAqXG4gICAqIEBwdWJsaWNcbiAgICovXG4gIGdldFBhcmFtZXRlcihpZGVudGlmaWVyOiBzdHJpbmcpOiBQYXJhbWV0ZXJWYWx1ZSB7XG4gICAgaWYgKHVuZGVmaW5lZCA9PT0gdGhpcy5fcGFyYW1ldGVyc0J5SWRlbnRpZmllcltpZGVudGlmaWVyXSkge1xuICAgICAgdGhyb3cgVW5kZWZpbmVkUGFyYW1ldGVyRXJyb3IuY3JlYXRlRXJyb3IoaWRlbnRpZmllcilcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fcGFyYW1ldGVyc0J5SWRlbnRpZmllcltpZGVudGlmaWVyXVxuICB9XG5cbiAgLyoqXG4gICAqIEFzc29jaWF0ZXMgcGFyYW1ldGVyIHdpdGggaWRlbnRpZmllclxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gaWRlbnRpZmllclxuICAgKiBAcGFyYW0ge1BhcmFtZXRlclZhbHVlfSB2YWx1ZVxuICAgKlxuICAgKiBAcmV0dXJucyB7Q29udGFpbmVyfSBjdXJyZW50IENvbnRhaW5lciBpbnN0YW5jZVxuICAgKlxuICAgKiBAcHVibGljXG4gICAqL1xuICBzZXRQYXJhbWV0ZXIoaWRlbnRpZmllcjogc3RyaW5nLCB2YWx1ZTogUGFyYW1ldGVyVmFsdWUpOiBDb250YWluZXIge1xuICAgIHRoaXMuX3BhcmFtZXRlcnNCeUlkZW50aWZpZXJbaWRlbnRpZmllcl0gPSB2YWx1ZVxuXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRydWUgaWYgY29udGFpbmVyIGhhcyBwYXJhbWV0ZXIsIGZhbHNlIG90aGVyd2lzZVxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gaWRlbnRpZmllclxuICAgKlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICovXG4gIGhhc1BhcmFtZXRlcihpZGVudGlmaWVyOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkICE9PSB0aGlzLl9wYXJhbWV0ZXJzQnlJZGVudGlmaWVyW2lkZW50aWZpZXJdXG4gIH1cblxuICAvKipcbiAgICogUmVnaXN0ZXJzIFxuICAgKiBcbiAgICogQHBhcmFtIHtMb2NhdG9yQ2FsbGJhY2t9IGxvY2F0b3JcbiAgICpcbiAgICogQHJldHVybnMge0NvbnRhaW5lcn0gY3VycmVudCBDb250YWluZXIgaW5zdGFuY2VcbiAgICpcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgcmVnaXN0ZXJDbGFzc0NvbnN0cnVjdG9yTG9jYXRvcihsb2NhdG9yOiBMb2NhdG9yQ2FsbGJhY2spOiBDb250YWluZXIge1xuICAgIHRoaXMuX2NsYXNzQ29uc3RydWN0b3JMb2NhdG9ycy5wdXNoKGxvY2F0b3IpXG5cbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7TG9jYXRvckNhbGxiYWNrfSBsb2NhdG9yXG4gICAqXG4gICAqIEByZXR1cm5zIHtDb250YWluZXJ9IGN1cnJlbnQgQ29udGFpbmVyIGluc3RhbmNlXG4gICAqXG4gICAqIEBwdWJsaWNcbiAgICovXG4gIHJlZ2lzdGVySW5zdGFuY2VMb2NhdG9yKGxvY2F0b3I6IExvY2F0b3JDYWxsYmFjayk6IENvbnRhaW5lciB7XG4gICAgdGhpcy5faW5zdGFuY2VMb2NhdG9ycy5wdXNoKGxvY2F0b3IpXG5cbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgLyoqXG4gICAqIFJlc29sdmVzIHNlcnZpY2UgZGVmaW5pdGlvbiBhcmd1bWVudHMsIHRoZW4gdXNlcyB0aGVtIHRvIGluc3RhbnRpYXRlIHRoZSBzZXJ2aWNlLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gaWRlbnRpZmllclxuICAgKiBAcGFyYW0ge0RlZmluaXRpb259IGRlZmluaXRpb25cbiAgICogQHBhcmFtIHtMb2FkaW5nT2JqZWN0fSBsb2FkaW5nIGFuIG9iamVjdCB0aGF0IGtlZXBzIHRyYWNrIG9mIHNlcnZpY2UgaW5zdGFudGlhdGlvbnMsXG4gICAqIHVzZWQgdG8gcHJldmVudCBjaXJjdWxhciBkZXBlbmRlbmN5IHJlbGF0ZWQgaW5maW5pdGUgbG9vcHNcbiAgICpcbiAgICogQHByb21pc2VcbiAgICogQHJlc29sdmUge1NlcnZpY2V9XG4gICAqIEByZWplY3Qge0ZhY3RvcnlNZXRob2RSZXR1cm5zTm90aGluZ0Vycm9yfSBpbiBjYXNlIGEgZmFjdG9yeSBtZXRob2QgcmV0dXJucyBub3RoaW5nXG4gICAqIEByZWplY3Qge01ldGhvZERvZXNOb3RFeGlzdEVycm9yfSBpbiBjYXNlIGEgbWV0aG9kIGNhbGwgY2FsbHMgYSBtZXRob2QgdGhhdCBkb2VzIG5vdCBleGlzdFxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2luc3RhbnRpYXRlKGlkZW50aWZpZXI6IHN0cmluZywgZGVmaW5pdGlvbjogRGVmaW5pdGlvbiwgbG9hZGluZzogTG9hZGluZ09iamVjdCk6IFByb21pc2U8U2VydmljZT4ge1xuICAgIHJldHVybiB0aGlzXG4gICAgICAuX3Jlc29sdmVBcmdzKGRlZmluaXRpb24uYXJncywgbG9hZGluZylcbiAgICAgIC50aGVuKChhcmdzOiBBcnJheSk6IFByb21pc2UgPT4ge1xuICAgICAgICBsZXQgaW5zdGFuY2VcblxuICAgICAgICBpZiAoZGVmaW5pdGlvbiBpbnN0YW5jZW9mIENsYXNzQ29uc3RydWN0b3JEZWZpbml0aW9uKSB7XG4gICAgICAgICAgY29uc3QgY2xhc3NDb25zdHJ1Y3RvciA9IHRoaXMuX2xvY2F0ZVNlcnZpY2VDbGFzc0NvbnN0cnVjdG9yKGRlZmluaXRpb24uY2xhc3NDb25zdHJ1Y3RvcklkZW50aWZpZXIpXG5cbiAgICAgICAgICBpbnN0YW5jZSA9IG5ldyAoRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQuYXBwbHkoY2xhc3NDb25zdHJ1Y3RvciwgWyB1bmRlZmluZWQgXS5jb25jYXQoYXJncykpKVxuICAgICAgICB9IGVsc2UgaWYgKGRlZmluaXRpb24gaW5zdGFuY2VvZiBGYWN0b3J5RGVmaW5pdGlvbikge1xuICAgICAgICAgIGluc3RhbmNlID0gZGVmaW5pdGlvbi5mYWN0b3J5LmFwcGx5KHVuZGVmaW5lZCwgYXJncylcblxuICAgICAgICAgIGlmICh1bmRlZmluZWQgPT09IGluc3RhbmNlKSB7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoRmFjdG9yeU1ldGhvZFJldHVybnNOb3RoaW5nRXJyb3IuY3JlYXRlRXJyb3IoaWRlbnRpZmllcikpXG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICBjb25zdCBtZXRob2RDYWxsc1Byb21pc2VzID0gW11cblxuICAgICAgICAgIGxldCBpLCBtZXRob2RDYWxsXG5cbiAgICAgICAgICBjb25zdCBjYWxsTWV0aG9kID0gKG1ldGhvZFRvQ2FsbDogRnVuY3Rpb24pOiB2b2lkID0+IHtcbiAgICAgICAgICAgIG1ldGhvZENhbGxzUHJvbWlzZXMucHVzaChcbiAgICAgICAgICAgICAgdGhpc1xuICAgICAgICAgICAgICAgIC5fcmVzb2x2ZUFyZ3MobWV0aG9kQ2FsbC5hcmdzLCBsb2FkaW5nKVxuICAgICAgICAgICAgICAgIC50aGVuKChhcmdzOiBBcnJheSk6ID8oUHJvbWlzZXxtaXhlZCkgPT4ge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIG1ldGhvZFRvQ2FsbC5hcHBseShpbnN0YW5jZSwgYXJncylcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgKVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGZ1bmN0aW9uIGdldE1ldGhvZENhbGwoaSk6IE1ldGhvZENhbGwge1xuICAgICAgICAgICAgcmV0dXJuIGRlZmluaXRpb24ubWV0aG9kQ2FsbHNbaV1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBmb3IgKGkgaW4gZGVmaW5pdGlvbi5tZXRob2RDYWxscykge1xuICAgICAgICAgICAgaWYgKGRlZmluaXRpb24ubWV0aG9kQ2FsbHMuaGFzT3duUHJvcGVydHkoaSkpIHtcbiAgICAgICAgICAgICAgbWV0aG9kQ2FsbCA9IGdldE1ldGhvZENhbGwoaSlcblxuICAgICAgICAgICAgICBjb25zdCBtZXRob2ROYW1lID0gbWV0aG9kQ2FsbC5uYW1lXG4gICAgICAgICAgICAgIGNvbnN0IG1ldGhvZFRvQ2FsbCA9IGluc3RhbmNlW21ldGhvZE5hbWVdXG5cbiAgICAgICAgICAgICAgaWYgKHVuZGVmaW5lZCA9PT0gbWV0aG9kVG9DYWxsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlamVjdChNZXRob2REb2VzTm90RXhpc3RFcnJvci5jcmVhdGVFcnJvcihtZXRob2ROYW1lKSlcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGNhbGxNZXRob2QobWV0aG9kVG9DYWxsKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiByZXNvbHZlKFxuICAgICAgICAgICAgUHJvbWlzZVxuICAgICAgICAgICAgICAuYWxsKG1ldGhvZENhbGxzUHJvbWlzZXMpXG4gICAgICAgICAgICAgIC50aGVuKCgpOiBTZXJ2aWNlID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaW5zdGFuY2VcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICApXG4gICAgICAgIH0pXG4gICAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIFVzZWQgaW50ZXJuYWxseSB0byBsb2NhdGUgYSBzZXJ2aWNlIGNsYXNzIGNvbnN0cnVjdG9yLCBpZiBpdCBoYXMgYmVlbiBtYWRlIGF2YWlsYWJsZSB0byB0aGUgY29udGFpbmVyIGluc3RhbmNlLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gaWRlbnRpZmllclxuICAgKlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IGEgc2VydmljZSBjbGFzcyBjb25zdHJ1Y3RvclxuICAgKlxuICAgKiBAdGhyb3dzIHtDYW5ub3RMb2NhdGVTZXJ2aWNlQ2xhc3NDb25zdHJ1Y3RvckVycm9yfSBpZiB0aGUgc2VydmljZSBjbGFzcyBjb25zdHJ1Y3RvciBjYW5ub3QgYmUgZm91bmRcbiAgICpcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9sb2NhdGVTZXJ2aWNlQ2xhc3NDb25zdHJ1Y3RvcihpZGVudGlmaWVyOiBzdHJpbmcpOiBGdW5jdGlvbiB7XG4gICAgbGV0IGksIGNsYXNzQ29uc3RydWN0b3JcblxuICAgIGZvciAoaSBpbiB0aGlzLl9jbGFzc0NvbnN0cnVjdG9yTG9jYXRvcnMpIHtcbiAgICAgIGlmICh0aGlzLl9jbGFzc0NvbnN0cnVjdG9yTG9jYXRvcnMuaGFzT3duUHJvcGVydHkoaSkpIHtcbiAgICAgICAgY2xhc3NDb25zdHJ1Y3RvciA9IHRoaXMuX2NsYXNzQ29uc3RydWN0b3JMb2NhdG9yc1tpXShpZGVudGlmaWVyKVxuXG4gICAgICAgIGlmICh1bmRlZmluZWQgIT09IGNsYXNzQ29uc3RydWN0b3IpIHtcbiAgICAgICAgICByZXR1cm4gY2xhc3NDb25zdHJ1Y3RvclxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhyb3cgQ2Fubm90TG9jYXRlU2VydmljZUNsYXNzQ29uc3RydWN0b3JFcnJvci5jcmVhdGVFcnJvcihpZGVudGlmaWVyKVxuICB9XG5cblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IGlkZW50aWZpZXJcbiAgICpcbiAgICogQHJldHVybnMgez9TZXJ2aWNlfVxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2xvY2F0ZUluc3RhbmNlKGlkZW50aWZpZXI6IHN0cmluZyk6ID9TZXJ2aWNlIHtcbiAgICBsZXQgaVxuICAgIGxldCBpbnN0YW5jZVxuXG4gICAgZm9yIChpIGluIHRoaXMuX2luc3RhbmNlTG9jYXRvcnMpIHtcbiAgICAgIGlmICh0aGlzLl9pbnN0YW5jZUxvY2F0b3JzLmhhc093blByb3BlcnR5KGkpKSB7XG4gICAgICAgIGluc3RhbmNlID0gdGhpcy5faW5zdGFuY2VMb2NhdG9yc1tpXShpZGVudGlmaWVyKVxuXG4gICAgICAgIGlmICh1bmRlZmluZWQgIT09IGluc3RhbmNlKSB7XG4gICAgICAgICAgcmV0dXJuIGluc3RhbmNlXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmVzb2x2ZXMgZ2l2ZW4gYXJndW1lbnRzLlxuICAgKlxuICAgKiBAcGFyYW0ge0luamVjdGFibGVBcmd1bWVudHN9IGFyZ3NcbiAgICogQHBhcmFtIHtMb2FkaW5nT2JqZWN0fSBsb2FkaW5nIGFuIG9iamVjdCB0aGF0IGtlZXBzIHRyYWNrIG9mIHNlcnZpY2UgaW5zdGFudGlhdGlvbnMsXG4gICAqIHVzZWQgdG8gcHJldmVudCBjaXJjdWxhciBkZXBlbmRlbmN5IHJlbGF0ZWQgaW5maW5pdGUgbG9vcHNcbiAgICpcbiAgICogQHByb21pc2Uge0FycmF5PFNlcnZpY2V8UGFyYW1ldGVyVmFsdWU+fSBhbiBhcnJheSBvZiBzZXJ2aWNlIGluc3RhbmNlcyBvciBwYXJhbWV0ZXIgdmFsdWVzXG4gICAqIEByZWplY3Qge1Vuc3VwcG9ydGVkQXJndW1lbnRUeXBlRXJyb3J9XG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfcmVzb2x2ZUFyZ3MoYXJnczogSW5qZWN0YWJsZUFyZ3VtZW50cywgbG9hZGluZzogTG9hZGluZ09iamVjdCk6IFByb21pc2U8QXJyYXk8U2VydmljZXxQYXJhbWV0ZXJWYWx1ZT4+IHtcbiAgICBjb25zdCBwcm9taXNlcyA9IFtdXG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmU6IEZ1bmN0aW9uLCByZWplY3Q6IEZ1bmN0aW9uKTogdm9pZCA9PiB7XG4gICAgICBsZXQgaSwgYXJnXG5cbiAgICAgIGZvciAoaSBpbiBhcmdzKSB7XG4gICAgICAgIGlmIChhcmdzLmhhc093blByb3BlcnR5KGkpKSB7XG4gICAgICAgICAgYXJnID0gYXJnc1tpXVxuXG4gICAgICAgICAgaWYgKGFyZyBpbnN0YW5jZW9mIFJlZmVyZW5jZSkge1xuICAgICAgICAgICAgY29uc3QgaWQgPSBhcmcuaWRcblxuICAgICAgICAgICAgcHJvbWlzZXMucHVzaChcbiAgICAgICAgICAgICAgdGhpcy5fZG9HZXRTZXJ2aWNlKGlkLCBDb250YWluZXIuX2RlZXBDb3B5TG9hZGluZyhsb2FkaW5nKSlcbiAgICAgICAgICAgIClcbiAgICAgICAgICB9IGVsc2UgaWYgKGFyZyBpbnN0YW5jZW9mIFBhcmFtZXRlcikge1xuICAgICAgICAgICAgcHJvbWlzZXMucHVzaChcbiAgICAgICAgICAgICAgdGhpcy5nZXRQYXJhbWV0ZXIoYXJnLmlkKVxuICAgICAgICAgICAgKVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gcmVqZWN0KFVuc3VwcG9ydGVkQXJndW1lbnRUeXBlRXJyb3IuY3JlYXRlRXJyb3IoYXJnKSlcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlc29sdmUoUHJvbWlzZS5hbGwocHJvbWlzZXMpKVxuICAgIH0pXG4gIH1cblxuICAvKipcbiAgICogVXNlZCBpbnRlcm5hbGx5IHRvIHJldHJpZXZlIGEgc2VydmljZSBieSBpdHMgaWRlbnRpZmllci5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGlkZW50aWZpZXIgdGhlIGlkZW50aWZpZXIgb2YgdGhlIHNlcnZpY2VcbiAgICogQHBhcmFtIHtMb2FkaW5nT2JqZWN0fSBsb2FkaW5nIGFuIG9iamVjdCB0aGF0IGtlZXBzIHRyYWNrIG9mIHNlcnZpY2UgaW5zdGFudGlhdGlvbnMsXG4gICAqIHVzZWQgdG8gcHJldmVudCBjaXJjdWxhciBkZXBlbmRlbmN5IHJlbGF0ZWQgaW5maW5pdGUgbG9vcHNcbiAgICpcbiAgICogQHByb21pc2VcbiAgICogQHJlc29sdmUge1NlcnZpY2V9IGEgc2VydmljZSBpbnN0YW5jZVxuICAgKiBAcmVqZWN0IHtDaXJjdWxhckRlcGVuZGVuY3lFcnJvcn0gaW4gY2FzZSBvZiBhIGNpcmN1bGFyIGRlcGVuZGVuY3lcbiAgICogQHJlamVjdCB7VW5kZWZpbmVkU2VydmljZURlZmluaXRpb25BbmRJbnN0YW5jZUVycm9yfSBpbiBjYXNlIG5laXRoZXIgYW4gaW5zdGFuY2Ugbm9yIGEgZGVmaW5pdGlvbiBpcyBmb3VuZFxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2RvR2V0U2VydmljZShpZGVudGlmaWVyOiBzdHJpbmcsIGxvYWRpbmc6IExvYWRpbmdPYmplY3QpOiBQcm9taXNlPFNlcnZpY2V8Q2lyY3VsYXJEZXBlbmRlbmN5RXJyb3J8VW5kZWZpbmVkU2VydmljZURlZmluaXRpb25BbmRJbnN0YW5jZUVycm9yPiB7XG4gICAgaWYgKHVuZGVmaW5lZCAhPT0gbG9hZGluZy5vYmpbaWRlbnRpZmllcl0pIHtcbiAgICAgIGNvbnN0IHNlcnZpY2VzID0gW11cbiAgICAgICAgLmNvbmNhdChsb2FkaW5nLmFycilcbiAgICAgICAgLmNvbmNhdChbIGlkZW50aWZpZXIgXSlcblxuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KENpcmN1bGFyRGVwZW5kZW5jeUVycm9yLmNyZWF0ZUVycm9yKHNlcnZpY2VzKSlcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuaGFzSW5zdGFuY2UoaWRlbnRpZmllcikpIHtcbiAgICAgIGlmICghdGhpcy5oYXNEZWZpbml0aW9uKGlkZW50aWZpZXIpKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuX2xvY2F0ZUluc3RhbmNlKGlkZW50aWZpZXIpXG5cbiAgICAgICAgaWYgKHVuZGVmaW5lZCAhPT0gcmVzdWx0KSB7XG4gICAgICAgICAgLyoqXG4gICAgICAgICAgICogSW4gY2FzZSBsb2NhdGUgaW5zdGFuY2UgcmV0dXJucyBhIHByb21pc2UsIHJlc29sdmUgcHJvbWlzZVxuICAgICAgICAgICAqL1xuICAgICAgICAgIHJldHVybiBQcm9taXNlXG4gICAgICAgICAgICAucmVzb2x2ZShyZXN1bHQpXG4gICAgICAgICAgICAudGhlbigoaW5zdGFuY2U6ID9TZXJ2aWNlKTogUHJvbWlzZTxTZXJ2aWNlfFVuZGVmaW5lZFNlcnZpY2VEZWZpbml0aW9uQW5kSW5zdGFuY2VFcnJvcj4gPT4ge1xuICAgICAgICAgICAgICBpZiAodW5kZWZpbmVkID09PSBpbnN0YW5jZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChVbmRlZmluZWRTZXJ2aWNlRGVmaW5pdGlvbkFuZEluc3RhbmNlRXJyb3IuY3JlYXRlRXJyb3IoaWRlbnRpZmllcikpXG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGluc3RhbmNlKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChVbmRlZmluZWRTZXJ2aWNlRGVmaW5pdGlvbkFuZEluc3RhbmNlRXJyb3IuY3JlYXRlRXJyb3IoaWRlbnRpZmllcikpXG4gICAgICB9XG5cbiAgICAgIGxvYWRpbmcub2JqW2lkZW50aWZpZXJdID0gdHJ1ZVxuICAgICAgbG9hZGluZy5hcnIucHVzaChpZGVudGlmaWVyKVxuXG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCBwcm9taXNlID0gdGhpcy5faW5zdGFudGlhdGUoaWRlbnRpZmllciwgdGhpcy5nZXREZWZpbml0aW9uKGlkZW50aWZpZXIpLCBsb2FkaW5nKVxuXG4gICAgICAgIHRoaXMuX3NlcnZpY2VEZWZpbml0aW9uc0FscmVhZHlVc2VkVG9JbnN0YW50aWF0ZUJ5SWRlbnRpZmllcltpZGVudGlmaWVyXSA9IHRydWVcblxuICAgICAgICB0aGlzLl9zZXJ2aWNlc0J5SWRlbnRpZmllcltpZGVudGlmaWVyXSA9IHByb21pc2VcbiAgICAgIH0gY2F0Y2goZSkge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZSlcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMuX3NlcnZpY2VzQnlJZGVudGlmaWVyW2lkZW50aWZpZXJdKVxuICB9XG5cbiAgLyoqXG4gICAqIE1ha2VzIGEgZGVlcCBjb3B5IG9mIGxvYWRpbmcgb2JqZWN0IHNvIGFzIG5vdCB0byBtb2RpZnkgaXQgYnkgcmVmZXJlbmNlLlxuICAgKlxuICAgKiBAcGFyYW0ge0xvYWRpbmdPYmplY3R9IGxvYWRpbmcgbG9hZGluZyBvYmplY3QgaW5zdGFuY2VcbiAgICpcbiAgICogQHJldHVybnMge0xvYWRpbmdPYmplY3R9IGxvYWRpbmcgYSBkZWVwIGNvcHkgb2YgdGhlIG9yaWdpbmFsIGxvYWRpbmcgcGFyYW1ldGVyXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBzdGF0aWMgX2RlZXBDb3B5TG9hZGluZyhsb2FkaW5nOiBMb2FkaW5nT2JqZWN0KTogTG9hZGluZ09iamVjdCB7XG4gICAgY29uc3QgbmV3TG9hZGluZyA9IHtcbiAgICAgIG9iajoge30sXG4gICAgICBhcnI6IFtdLmNvbmNhdChsb2FkaW5nLmFycilcbiAgICB9XG5cbiAgICBmb3IgKGxldCBpIGluIGxvYWRpbmcub2JqKSB7XG4gICAgICBpZiAobG9hZGluZy5vYmouaGFzT3duUHJvcGVydHkoaSkpIHtcbiAgICAgICAgbmV3TG9hZGluZy5vYmpbaV0gPSBsb2FkaW5nLm9ialtpXVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBuZXdMb2FkaW5nXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ29udGFpbmVyXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2NvbnRhaW5lci5qcyIsImltcG9ydCBNZXRob2RDYWxsIGZyb20gJy4vbWV0aG9kLWNhbGwnXG5cbmltcG9ydCB0eXBlIHtJbmplY3RhYmxlQXJndW1lbnRzfSBmcm9tICcuL3R5cGVzL2luamVjdGFibGUtYXJndW1lbnRzJ1xuXG4vKipcbiAqIEBhdXRob3IgQmVuamFtaW4gTWljaGFsc2tpIDxiZW5qYW1pbi5taWNoYWxza2lAZ21haWwuY29tPlxuICpcbiAqIEBwcml2YXRlXG4gKi9cbmNsYXNzIERlZmluaXRpb24ge1xuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3RvclxuICAgKlxuICAgKiBAcGFyYW0gez9JbmplY3RhYmxlQXJndW1lbnRzfSBbYXJncz1bXV1cbiAgICovXG4gIGNvbnN0cnVjdG9yKGFyZ3M6ID9JbmplY3RhYmxlQXJndW1lbnRzID0gW10pIHtcbiAgICB0aGlzLl9tZXRob2RDYWxscyA9IFtdXG4gICAgdGhpcy5fYXJncyA9IGFyZ3NcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIG1ldGhvZENhbGxzXG4gICAqXG4gICAqIEBwYXJhbSB7QXJyYXk8TWV0aG9kQ2FsbD59IG1ldGhvZENhbGxzXG4gICAqL1xuICBzZXQgbWV0aG9kQ2FsbHMobWV0aG9kQ2FsbHM6IEFycmF5PE1ldGhvZENhbGw+KTogdm9pZCB7XG4gICAgdGhpcy5fbWV0aG9kQ2FsbHMgPSBtZXRob2RDYWxsc1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgbWV0aG9kQ2FsbHNcbiAgICpcbiAgICogQHJldHVybnMge0FycmF5PE1ldGhvZENhbGw+fVxuICAgKi9cbiAgZ2V0IG1ldGhvZENhbGxzKCk6IEFycmF5PE1ldGhvZENhbGw+IHtcbiAgICByZXR1cm4gdGhpcy5fbWV0aG9kQ2FsbHNcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIGFyZ3NcbiAgICpcbiAgICogQHJldHVybnMge0luamVjdGFibGVBcmd1bWVudHN9XG4gICAqL1xuICBnZXQgYXJncygpOiBJbmplY3RhYmxlQXJndW1lbnRzIHtcbiAgICByZXR1cm4gdGhpcy5fYXJnc1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IERlZmluaXRpb25cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvZGVmaW5pdGlvbi5qcyIsImltcG9ydCB0eXBlIHtJbmplY3RhYmxlQXJndW1lbnRzfSBmcm9tICcuL3R5cGVzL2luamVjdGFibGUtYXJndW1lbnRzJ1xuXG4vKipcbiAqIEBhdXRob3IgQmVuamFtaW4gTWljaGFsc2tpIDxiZW5qYW1pbi5taWNoYWxza2lAZ21haWwuY29tPlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuY2xhc3MgTWV0aG9kQ2FsbCB7XG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdG9yXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIG1ldGhvZCBuYW1lXG4gICAqIEBwYXJhbSB7P0luamVjdGFibGVBcmd1bWVudHN9IFthcmdzPVtdXVxuICAgKlxuICAgKiBAcHVibGljXG4gICAqL1xuICBjb25zdHJ1Y3RvcihuYW1lOiBzdHJpbmcsIGFyZ3M6ID9JbmplY3RhYmxlQXJndW1lbnRzID0gW10pIHtcbiAgICB0aGlzLl9uYW1lID0gbmFtZVxuICAgIHRoaXMuX2FyZ3MgPSBhcmdzXG4gIH1cblxuICAvKipcbiAgICogR2V0cyBuYW1lXG4gICAqXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAqXG4gICAqIEBwdWJsaWNcbiAgICovXG4gIGdldCBuYW1lKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX25hbWVcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIGFyZ3NcbiAgICpcbiAgICogQHJldHVybnMge0luamVjdGFibGVBcmd1bWVudHN9XG4gICAqXG4gICAqIEBwdWJsaWNcbiAgICovXG4gIGdldCBhcmdzKCk6IEluamVjdGFibGVBcmd1bWVudHMge1xuICAgIHJldHVybiB0aGlzLl9hcmdzXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgTWV0aG9kQ2FsbFxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9tZXRob2QtY2FsbC5qcyIsImltcG9ydCBSZWZlcmVuY2UgZnJvbSAnLi4vcmVmZXJlbmNlJ1xuaW1wb3J0IFBhcmFtZXRlciBmcm9tICcuLi9wYXJhbWV0ZXInXG5cbmV4cG9ydCB0eXBlIEluamVjdGFibGVBcmd1bWVudHMgPSBBcnJheTxSZWZlcmVuY2V8UGFyYW1ldGVyPlxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL3R5cGVzL2luamVjdGFibGUtYXJndW1lbnRzLmpzIiwiLyoqXG4gKiBAYXV0aG9yIEJlbmphbWluIE1pY2hhbHNraSA8YmVuamFtaW4ubWljaGFsc2tpQGdtYWlsLmNvbT5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmNsYXNzIFJlZmVyZW5jZSB7XG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdG9yXG4gICAqIFxuICAgKiBAcGFyYW0ge3N0cmluZ30gaWRcbiAgICpcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgY29uc3RydWN0b3IoaWQ6IHN0cmluZykge1xuICAgIHRoaXMuX2lkID0gaWRcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIGlkXG4gICAqXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAqXG4gICAqIEBwdWJsaWNcbiAgICovXG4gIGdldCBpZCgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLl9pZFxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFJlZmVyZW5jZVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9yZWZlcmVuY2UuanMiLCIvKipcbiAqIEBhdXRob3IgQmVuamFtaW4gTWljaGFsc2tpIDxiZW5qYW1pbi5taWNoYWxza2lAZ21haWwuY29tPlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuY2xhc3MgUGFyYW1ldGVyIHtcblxuICAvKipcbiAgICogQ29uc3RydWN0b3JcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGlkXG4gICAqXG4gICAqIEBwdWJsaWNcbiAgICovXG4gIGNvbnN0cnVjdG9yKGlkOiBzdHJpbmcpIHtcbiAgICB0aGlzLl9pZCA9IGlkXG4gIH1cblxuICAvKipcbiAgICogR2V0cyBpZFxuICAgKlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKlxuICAgKiBAcHVibGljXG4gICAqL1xuICBnZXQgaWQoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5faWRcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBQYXJhbWV0ZXJcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvcGFyYW1ldGVyLmpzIiwiaW1wb3J0IERlZmluaXRpb24gZnJvbSAnLi9kZWZpbml0aW9uJ1xuXG5pbXBvcnQgdHlwZSB7SW5qZWN0YWJsZUFyZ3VtZW50c30gZnJvbSAnLi90eXBlcy9pbmplY3RhYmxlLWFyZ3VtZW50cydcblxuLyoqXG4gKiBAYXV0aG9yIEJlbmphbWluIE1pY2hhbHNraSA8YmVuamFtaW4ubWljaGFsc2tpQGdtYWlsLmNvbT5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmNsYXNzIENsYXNzQ29uc3RydWN0b3JEZWZpbml0aW9uIGV4dGVuZHMgRGVmaW5pdGlvbiB7XG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdG9yXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjbGFzc0NvbnN0cnVjdG9ySWRlbnRpZmllclxuICAgKiBAcGFyYW0gez9JbmplY3RhYmxlQXJndW1lbnRzfSBbYXJncz1bXV1cbiAgICovXG4gIGNvbnN0cnVjdG9yKGNsYXNzQ29uc3RydWN0b3JJZGVudGlmaWVyOiBzdHJpbmcsIGFyZ3M6ID9JbmplY3RhYmxlQXJndW1lbnRzID0gW10pIHtcbiAgICBzdXBlcihhcmdzKVxuXG4gICAgdGhpcy5fY2xhc3NDb25zdHJ1Y3RvcklkZW50aWZpZXIgPSBjbGFzc0NvbnN0cnVjdG9ySWRlbnRpZmllclxuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgY2xhc3NDb25zdHJ1Y3RvcklkZW50aWZpZXJcbiAgICpcbiAgICogQHJldHVybnMge3N0cmluZ31cbiAgICovXG4gIGdldCBjbGFzc0NvbnN0cnVjdG9ySWRlbnRpZmllcigpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLl9jbGFzc0NvbnN0cnVjdG9ySWRlbnRpZmllclxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IENsYXNzQ29uc3RydWN0b3JEZWZpbml0aW9uXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2NsYXNzLWNvbnN0cnVjdG9yLWRlZmluaXRpb24uanMiLCJpbXBvcnQgRGVmaW5pdGlvbiBmcm9tICcuL2RlZmluaXRpb24nXG5cbmltcG9ydCB0eXBlIHtJbmplY3RhYmxlQXJndW1lbnRzfSBmcm9tICcuL3R5cGVzL2luamVjdGFibGUtYXJndW1lbnRzJ1xuXG4vKipcbiAqIEBhdXRob3IgQmVuamFtaW4gTWljaGFsc2tpIDxiZW5qYW1pbi5taWNoYWxza2lAZ21haWwuY29tPlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuY2xhc3MgRmFjdG9yeURlZmluaXRpb24gZXh0ZW5kcyBEZWZpbml0aW9uIHtcbiAgXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3RvclxuICAgKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmYWN0b3J5XG4gICAqIEBwYXJhbSB7P0luamVjdGFibGVBcmd1bWVudHN9IFthcmdzPVtdXVxuICAgKi9cbiAgY29uc3RydWN0b3IoZmFjdG9yeTogRnVuY3Rpb24sIGFyZ3M6ID9JbmplY3RhYmxlQXJndW1lbnRzID0gW10pIHtcbiAgICBzdXBlcihhcmdzKVxuXG4gICAgdGhpcy5fZmFjdG9yeSA9IGZhY3RvcnlcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIGZhY3RvcnlcbiAgICpcbiAgICogQHJldHVybnMge0Z1bmN0aW9ufVxuICAgKi9cbiAgZ2V0IGZhY3RvcnkoKTogRnVuY3Rpb24ge1xuICAgIHJldHVybiB0aGlzLl9mYWN0b3J5XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgRmFjdG9yeURlZmluaXRpb25cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvZmFjdG9yeS1kZWZpbml0aW9uLmpzIiwiaW1wb3J0IENhbm5vdExvY2F0ZVNlcnZpY2VDbGFzc0NvbnN0cnVjdG9yRXJyb3IgZnJvbSAnLi9lcnJvcnMvY2Fubm90LWxvY2F0ZS1zZXJ2aWNlLWNsYXNzLWNvbnN0cnVjdG9yLWVycm9yJ1xuaW1wb3J0IENpcmN1bGFyRGVwZW5kZW5jeUVycm9yIGZyb20gJy4vZXJyb3JzL2NpcmN1bGFyLWRlcGVuZGVuY3ktZXJyb3InXG5pbXBvcnQgRGlzbEVycm9yIGZyb20gJy4vZXJyb3JzL2Rpc2wtZXJyb3InXG5pbXBvcnQgRmFjdG9yeU1ldGhvZFJldHVybnNOb3RoaW5nRXJyb3IgZnJvbSAnLi9lcnJvcnMvZmFjdG9yeS1tZXRob2QtcmV0dXJucy1ub3RoaW5nLWVycm9yJ1xuaW1wb3J0IE1ldGhvZERvZXNOb3RFeGlzdEVycm9yIGZyb20gJy4vZXJyb3JzL21ldGhvZC1kb2VzLW5vdC1leGlzdC1lcnJvcidcbmltcG9ydCBTZXJ2aWNlRGVmaW5pdGlvbkFscmVhZHlVc2VkRXJyb3IgZnJvbSAnLi9lcnJvcnMvc2VydmljZS1kZWZpbml0aW9uLWFscmVhZHktdXNlZC1lcnJvcidcbmltcG9ydCBVbmRlZmluZWRQYXJhbWV0ZXJFcnJvciBmcm9tICcuL2Vycm9ycy91bmRlZmluZWQtcGFyYW1ldGVyLWVycm9yJ1xuaW1wb3J0IFVuZGVmaW5lZFNlcnZpY2VEZWZpbml0aW9uQW5kSW5zdGFuY2VFcnJvciBmcm9tICcuL2Vycm9ycy91bmRlZmluZWQtc2VydmljZS1kZWZpbml0aW9uLWFuZC1pbnN0YW5jZS1lcnJvcidcbmltcG9ydCBVbmRlZmluZWRTZXJ2aWNlRGVmaW5pdGlvbkVycm9yIGZyb20gJy4vZXJyb3JzL3VuZGVmaW5lZC1zZXJ2aWNlLWRlZmluaXRpb24tZXJyb3InXG5pbXBvcnQgVW5zdXBwb3J0ZWRBcmd1bWVudFR5cGVFcnJvciBmcm9tICcuL2Vycm9ycy91bnN1cHBvcnRlZC1hcmd1bWVudC10eXBlLWVycm9yJ1xuaW1wb3J0IEdldFNlcnZpY2VFcnJvciBmcm9tICcuL2Vycm9ycy9nZXQtc2VydmljZS1lcnJvcidcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIENhbm5vdExvY2F0ZVNlcnZpY2VDbGFzc0NvbnN0cnVjdG9yRXJyb3IsXG4gIENpcmN1bGFyRGVwZW5kZW5jeUVycm9yLFxuICBEaXNsRXJyb3IsXG4gIEZhY3RvcnlNZXRob2RSZXR1cm5zTm90aGluZ0Vycm9yLFxuICBNZXRob2REb2VzTm90RXhpc3RFcnJvcixcbiAgU2VydmljZURlZmluaXRpb25BbHJlYWR5VXNlZEVycm9yLFxuICBVbmRlZmluZWRQYXJhbWV0ZXJFcnJvcixcbiAgVW5kZWZpbmVkU2VydmljZURlZmluaXRpb25BbmRJbnN0YW5jZUVycm9yLFxuICBVbmRlZmluZWRTZXJ2aWNlRGVmaW5pdGlvbkVycm9yLFxuICBVbnN1cHBvcnRlZEFyZ3VtZW50VHlwZUVycm9yLFxuICBHZXRTZXJ2aWNlRXJyb3Jcbn1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvZXJyb3JzLmpzIiwiaW1wb3J0IERpc2xFcnJvciBmcm9tICcuL2Rpc2wtZXJyb3InXG5cbi8qKlxuICogQGF1dGhvciBCZW5qYW1pbiBNaWNoYWxza2kgPGJlbmphbWluLm1pY2hhbHNraUBnbWFpbC5jb20+XG4gKlxuICogQHB1YmxpY1xuICovXG5jbGFzcyBDYW5ub3RMb2NhdGVTZXJ2aWNlQ2xhc3NDb25zdHJ1Y3RvckVycm9yIGV4dGVuZHMgRGlzbEVycm9yIHtcblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNsYXNzTmFtZVxuICAgKlxuICAgKiBAcmV0dXJucyB7Q2Fubm90TG9jYXRlU2VydmljZUNsYXNzQ29uc3RydWN0b3JFcnJvcn1cbiAgICovXG4gIHN0YXRpYyBjcmVhdGVFcnJvcihjbGFzc05hbWU6IHN0cmluZyk6IENhbm5vdExvY2F0ZVNlcnZpY2VDbGFzc0NvbnN0cnVjdG9yRXJyb3Ige1xuICAgIHJldHVybiBuZXcgQ2Fubm90TG9jYXRlU2VydmljZUNsYXNzQ29uc3RydWN0b3JFcnJvcihcbiAgICAgIHtcbiAgICAgICAgY2xhc3NOYW1lXG4gICAgICB9LFxuICAgICAgJ0Nhbm5vdCBsb2NhdGUgc2VydmljZSBjbGFzcyBjb25zdHJ1Y3RvciBmb3IgY2xhc3MgXCIlc1wiJyxcbiAgICAgIGNsYXNzTmFtZVxuICAgIClcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBDYW5ub3RMb2NhdGVTZXJ2aWNlQ2xhc3NDb25zdHJ1Y3RvckVycm9yXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvZXJyb3JzL2Nhbm5vdC1sb2NhdGUtc2VydmljZS1jbGFzcy1jb25zdHJ1Y3Rvci1lcnJvci5qcyIsImltcG9ydCBWRXJyb3IgZnJvbSAndmVycm9yJ1xuXG4vKipcbiAqIEBhdXRob3IgQmVuamFtaW4gTWljaGFsc2tpIDxiZW5qYW1pbi5taWNoYWxza2lAZ21haWwuY29tPlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuY2xhc3MgRGlzbEVycm9yIGV4dGVuZHMgVkVycm9yIHtcblxufVxuXG5leHBvcnQgZGVmYXVsdCBEaXNsRXJyb3JcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9lcnJvcnMvZGlzbC1lcnJvci5qcyIsIi8qXG4gKiB2ZXJyb3IuanM6IHJpY2hlciBKYXZhU2NyaXB0IGVycm9yc1xuICovXG5cbnZhciBtb2RfYXNzZXJ0cGx1cyA9IHJlcXVpcmUoJ2Fzc2VydC1wbHVzJyk7XG52YXIgbW9kX3V0aWwgPSByZXF1aXJlKCd1dGlsJyk7XG5cbnZhciBtb2RfZXh0c3ByaW50ZiA9IHJlcXVpcmUoJ2V4dHNwcmludGYnKTtcbnZhciBtb2RfaXNFcnJvciA9IHJlcXVpcmUoJ2NvcmUtdXRpbC1pcycpLmlzRXJyb3I7XG52YXIgc3ByaW50ZiA9IG1vZF9leHRzcHJpbnRmLnNwcmludGY7XG5cbi8qXG4gKiBQdWJsaWMgaW50ZXJmYWNlXG4gKi9cblxuLyogU28geW91IGNhbiAndmFyIFZFcnJvciA9IHJlcXVpcmUoJ3ZlcnJvcicpJyAqL1xubW9kdWxlLmV4cG9ydHMgPSBWRXJyb3I7XG4vKiBGb3IgY29tcGF0aWJpbGl0eSAqL1xuVkVycm9yLlZFcnJvciA9IFZFcnJvcjtcbi8qIE90aGVyIGV4cG9ydGVkIGNsYXNzZXMgKi9cblZFcnJvci5TRXJyb3IgPSBTRXJyb3I7XG5WRXJyb3IuV0Vycm9yID0gV0Vycm9yO1xuVkVycm9yLk11bHRpRXJyb3IgPSBNdWx0aUVycm9yO1xuXG4vKlxuICogQ29tbW9uIGZ1bmN0aW9uIHVzZWQgdG8gcGFyc2UgY29uc3RydWN0b3IgYXJndW1lbnRzIGZvciBWRXJyb3IsIFdFcnJvciwgYW5kXG4gKiBTRXJyb3IuICBOYW1lZCBhcmd1bWVudHMgdG8gdGhpcyBmdW5jdGlvbjpcbiAqXG4gKiAgICAgc3RyaWN0XHRcdGZvcmNlIHN0cmljdCBpbnRlcnByZXRhdGlvbiBvZiBzcHJpbnRmIGFyZ3VtZW50cywgZXZlblxuICogICAgIFx0XHRcdGlmIHRoZSBvcHRpb25zIGluIFwiYXJndlwiIGRvbid0IHNheSBzb1xuICpcbiAqICAgICBhcmd2XHRcdGVycm9yJ3MgY29uc3RydWN0b3IgYXJndW1lbnRzLCB3aGljaCBhcmUgdG8gYmVcbiAqICAgICBcdFx0XHRpbnRlcnByZXRlZCBhcyBkZXNjcmliZWQgaW4gUkVBRE1FLm1kLiAgRm9yIHF1aWNrXG4gKiAgICAgXHRcdFx0cmVmZXJlbmNlLCBcImFyZ3ZcIiBoYXMgb25lIG9mIHRoZSBmb2xsb3dpbmcgZm9ybXM6XG4gKlxuICogICAgICAgICAgWyBzcHJpbnRmX2FyZ3MuLi4gXSAgICAgICAgICAgKGFyZ3ZbMF0gaXMgYSBzdHJpbmcpXG4gKiAgICAgICAgICBbIGNhdXNlLCBzcHJpbnRmX2FyZ3MuLi4gXSAgICAoYXJndlswXSBpcyBhbiBFcnJvcilcbiAqICAgICAgICAgIFsgb3B0aW9ucywgc3ByaW50Zl9hcmdzLi4uIF0gIChhcmd2WzBdIGlzIGFuIG9iamVjdClcbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIG5vcm1hbGl6ZXMgdGhlc2UgZm9ybXMsIHByb2R1Y2luZyBhbiBvYmplY3Qgd2l0aCB0aGUgZm9sbG93aW5nXG4gKiBwcm9wZXJ0aWVzOlxuICpcbiAqICAgIG9wdGlvbnMgICAgICAgICAgIGVxdWl2YWxlbnQgdG8gXCJvcHRpb25zXCIgaW4gdGhpcmQgZm9ybS4gIFRoaXMgd2lsbCBuZXZlclxuICogICAgXHRcdFx0YmUgYSBkaXJlY3QgcmVmZXJlbmNlIHRvIHdoYXQgdGhlIGNhbGxlciBwYXNzZWQgaW5cbiAqICAgIFx0XHRcdChpLmUuLCBpdCBtYXkgYmUgYSBzaGFsbG93IGNvcHkpLCBzbyBpdCBjYW4gYmUgZnJlZWx5XG4gKiAgICBcdFx0XHRtb2RpZmllZC5cbiAqXG4gKiAgICBzaG9ydG1lc3NhZ2UgICAgICByZXN1bHQgb2Ygc3ByaW50ZihzcHJpbnRmX2FyZ3MpLCB0YWtpbmcgb3B0aW9ucy5zdHJpY3RcbiAqICAgIFx0XHRcdGludG8gYWNjb3VudCBhcyBkZXNjcmliZWQgaW4gUkVBRE1FLm1kLlxuICovXG5mdW5jdGlvbiBwYXJzZUNvbnN0cnVjdG9yQXJndW1lbnRzKGFyZ3MpXG57XG5cdHZhciBhcmd2LCBvcHRpb25zLCBzcHJpbnRmX2FyZ3MsIHNob3J0bWVzc2FnZSwgaztcblxuXHRtb2RfYXNzZXJ0cGx1cy5vYmplY3QoYXJncywgJ2FyZ3MnKTtcblx0bW9kX2Fzc2VydHBsdXMuYm9vbChhcmdzLnN0cmljdCwgJ2FyZ3Muc3RyaWN0Jyk7XG5cdG1vZF9hc3NlcnRwbHVzLmFycmF5KGFyZ3MuYXJndiwgJ2FyZ3MuYXJndicpO1xuXHRhcmd2ID0gYXJncy5hcmd2O1xuXG5cdC8qXG5cdCAqIEZpcnN0LCBmaWd1cmUgb3V0IHdoaWNoIGZvcm0gb2YgaW52b2NhdGlvbiB3ZSd2ZSBiZWVuIGdpdmVuLlxuXHQgKi9cblx0aWYgKGFyZ3YubGVuZ3RoID09PSAwKSB7XG5cdFx0b3B0aW9ucyA9IHt9O1xuXHRcdHNwcmludGZfYXJncyA9IFtdO1xuXHR9IGVsc2UgaWYgKG1vZF9pc0Vycm9yKGFyZ3ZbMF0pKSB7XG5cdFx0b3B0aW9ucyA9IHsgJ2NhdXNlJzogYXJndlswXSB9O1xuXHRcdHNwcmludGZfYXJncyA9IGFyZ3Yuc2xpY2UoMSk7XG5cdH0gZWxzZSBpZiAodHlwZW9mIChhcmd2WzBdKSA9PT0gJ29iamVjdCcpIHtcblx0XHRvcHRpb25zID0ge307XG5cdFx0Zm9yIChrIGluIGFyZ3ZbMF0pIHtcblx0XHRcdG9wdGlvbnNba10gPSBhcmd2WzBdW2tdO1xuXHRcdH1cblx0XHRzcHJpbnRmX2FyZ3MgPSBhcmd2LnNsaWNlKDEpO1xuXHR9IGVsc2Uge1xuXHRcdG1vZF9hc3NlcnRwbHVzLnN0cmluZyhhcmd2WzBdLFxuXHRcdCAgICAnZmlyc3QgYXJndW1lbnQgdG8gVkVycm9yLCBTRXJyb3IsIG9yIFdFcnJvciAnICtcblx0XHQgICAgJ2NvbnN0cnVjdG9yIG11c3QgYmUgYSBzdHJpbmcsIG9iamVjdCwgb3IgRXJyb3InKTtcblx0XHRvcHRpb25zID0ge307XG5cdFx0c3ByaW50Zl9hcmdzID0gYXJndjtcblx0fVxuXG5cdC8qXG5cdCAqIE5vdyBjb25zdHJ1Y3QgdGhlIGVycm9yJ3MgbWVzc2FnZS5cblx0ICpcblx0ICogZXh0c3ByaW50ZiAod2hpY2ggd2UgaW52b2tlIGhlcmUgd2l0aCBvdXIgY2FsbGVyJ3MgYXJndW1lbnRzIGluIG9yZGVyXG5cdCAqIHRvIGNvbnN0cnVjdCB0aGlzIEVycm9yJ3MgbWVzc2FnZSkgaXMgc3RyaWN0IGluIGl0cyBpbnRlcnByZXRhdGlvbiBvZlxuXHQgKiB2YWx1ZXMgdG8gYmUgcHJvY2Vzc2VkIGJ5IHRoZSBcIiVzXCIgc3BlY2lmaWVyLiAgVGhlIHZhbHVlIHBhc3NlZCB0b1xuXHQgKiBleHRzcHJpbnRmIG11c3QgYWN0dWFsbHkgYmUgYSBzdHJpbmcgb3Igc29tZXRoaW5nIGNvbnZlcnRpYmxlIHRvIGFcblx0ICogU3RyaW5nIHVzaW5nIC50b1N0cmluZygpLiAgUGFzc2luZyBvdGhlciB2YWx1ZXMgKG5vdGFibHkgXCJudWxsXCIgYW5kXG5cdCAqIFwidW5kZWZpbmVkXCIpIGlzIGNvbnNpZGVyZWQgYSBwcm9ncmFtbWVyIGVycm9yLiAgVGhlIGFzc3VtcHRpb24gaXNcblx0ICogdGhhdCBpZiB5b3UgYWN0dWFsbHkgd2FudCB0byBwcmludCB0aGUgc3RyaW5nIFwibnVsbFwiIG9yIFwidW5kZWZpbmVkXCIsXG5cdCAqIHRoZW4gdGhhdCdzIGVhc3kgdG8gZG8gdGhhdCB3aGVuIHlvdSdyZSBjYWxsaW5nIGV4dHNwcmludGY7IG9uIHRoZVxuXHQgKiBvdGhlciBoYW5kLCBpZiB5b3UgZGlkIE5PVCB3YW50IHRoYXQgKGkuZS4sIHRoZXJlJ3MgYWN0dWFsbHkgYSBidWdcblx0ICogd2hlcmUgdGhlIHByb2dyYW0gYXNzdW1lcyBzb21lIHZhcmlhYmxlIGlzIG5vbi1udWxsIGFuZCB0cmllcyB0b1xuXHQgKiBwcmludCBpdCwgd2hpY2ggbWlnaHQgaGFwcGVuIHdoZW4gY29uc3RydWN0aW5nIGEgcGFja2V0IG9yIGZpbGUgaW5cblx0ICogc29tZSBzcGVjaWZpYyBmb3JtYXQpLCB0aGVuIGl0J3MgYmV0dGVyIHRvIHN0b3AgaW1tZWRpYXRlbHkgdGhhblxuXHQgKiBwcm9kdWNlIGJvZ3VzIG91dHB1dC5cblx0ICpcblx0ICogSG93ZXZlciwgc29tZXRpbWVzIHRoZSBidWcgaXMgb25seSBpbiB0aGUgY29kZSBjYWxsaW5nIFZFcnJvciwgYW5kIGFcblx0ICogcHJvZ3JhbW1lciBtaWdodCBwcmVmZXIgdG8gaGF2ZSB0aGUgZXJyb3IgbWVzc2FnZSBjb250YWluIFwibnVsbFwiIG9yXG5cdCAqIFwidW5kZWZpbmVkXCIgcmF0aGVyIHRoYW4gaGF2ZSB0aGUgYnVnIGluIHRoZSBlcnJvciBwYXRoIGNyYXNoIHRoZVxuXHQgKiBwcm9ncmFtIChtYWtpbmcgdGhlIGZpcnN0IGJ1ZyBoYXJkZXIgdG8gaWRlbnRpZnkpLiAgRm9yIHRoYXQgcmVhc29uLFxuXHQgKiBieSBkZWZhdWx0IFZFcnJvciBjb252ZXJ0cyBcIm51bGxcIiBvciBcInVuZGVmaW5lZFwiIGFyZ3VtZW50cyB0byB0aGVpclxuXHQgKiBzdHJpbmcgcmVwcmVzZW50YXRpb25zIGFuZCBwYXNzZXMgdGhvc2UgdG8gZXh0c3ByaW50Zi4gIFByb2dyYW1tZXJzXG5cdCAqIGRlc2lyaW5nIHRoZSBzdHJpY3QgYmVoYXZpb3IgY2FuIHVzZSB0aGUgU0Vycm9yIGNsYXNzIG9yIHBhc3MgdGhlXG5cdCAqIFwic3RyaWN0XCIgb3B0aW9uIHRvIHRoZSBWRXJyb3IgY29uc3RydWN0b3IuXG5cdCAqL1xuXHRtb2RfYXNzZXJ0cGx1cy5vYmplY3Qob3B0aW9ucyk7XG5cdGlmICghb3B0aW9ucy5zdHJpY3QgJiYgIWFyZ3Muc3RyaWN0KSB7XG5cdFx0c3ByaW50Zl9hcmdzID0gc3ByaW50Zl9hcmdzLm1hcChmdW5jdGlvbiAoYSkge1xuXHRcdFx0cmV0dXJuIChhID09PSBudWxsID8gJ251bGwnIDpcblx0XHRcdCAgICBhID09PSB1bmRlZmluZWQgPyAndW5kZWZpbmVkJyA6IGEpO1xuXHRcdH0pO1xuXHR9XG5cblx0aWYgKHNwcmludGZfYXJncy5sZW5ndGggPT09IDApIHtcblx0XHRzaG9ydG1lc3NhZ2UgPSAnJztcblx0fSBlbHNlIHtcblx0XHRzaG9ydG1lc3NhZ2UgPSBzcHJpbnRmLmFwcGx5KG51bGwsIHNwcmludGZfYXJncyk7XG5cdH1cblxuXHRyZXR1cm4gKHtcblx0ICAgICdvcHRpb25zJzogb3B0aW9ucyxcblx0ICAgICdzaG9ydG1lc3NhZ2UnOiBzaG9ydG1lc3NhZ2Vcblx0fSk7XG59XG5cbi8qXG4gKiBTZWUgUkVBRE1FLm1kIGZvciByZWZlcmVuY2UgZG9jdW1lbnRhdGlvbi5cbiAqL1xuZnVuY3Rpb24gVkVycm9yKClcbntcblx0dmFyIGFyZ3MsIG9iaiwgcGFyc2VkLCBjYXVzZSwgY3RvciwgbWVzc2FnZSwgaztcblxuXHRhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAwKTtcblxuXHQvKlxuXHQgKiBUaGlzIGlzIGEgcmVncmV0dGFibGUgcGF0dGVybiwgYnV0IEphdmFTY3JpcHQncyBidWlsdC1pbiBFcnJvciBjbGFzc1xuXHQgKiBpcyBkZWZpbmVkIHRvIHdvcmsgdGhpcyB3YXksIHNvIHdlIGFsbG93IHRoZSBjb25zdHJ1Y3RvciB0byBiZSBjYWxsZWRcblx0ICogd2l0aG91dCBcIm5ld1wiLlxuXHQgKi9cblx0aWYgKCEodGhpcyBpbnN0YW5jZW9mIFZFcnJvcikpIHtcblx0XHRvYmogPSBPYmplY3QuY3JlYXRlKFZFcnJvci5wcm90b3R5cGUpO1xuXHRcdFZFcnJvci5hcHBseShvYmosIGFyZ3VtZW50cyk7XG5cdFx0cmV0dXJuIChvYmopO1xuXHR9XG5cblx0Lypcblx0ICogRm9yIGNvbnZlbmllbmNlIGFuZCBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSwgd2Ugc3VwcG9ydCBzZXZlcmFsXG5cdCAqIGRpZmZlcmVudCBjYWxsaW5nIGZvcm1zLiAgTm9ybWFsaXplIHRoZW0gaGVyZS5cblx0ICovXG5cdHBhcnNlZCA9IHBhcnNlQ29uc3RydWN0b3JBcmd1bWVudHMoe1xuXHQgICAgJ2FyZ3YnOiBhcmdzLFxuXHQgICAgJ3N0cmljdCc6IGZhbHNlXG5cdH0pO1xuXG5cdC8qXG5cdCAqIElmIHdlJ3ZlIGJlZW4gZ2l2ZW4gYSBuYW1lLCBhcHBseSBpdCBub3cuXG5cdCAqL1xuXHRpZiAocGFyc2VkLm9wdGlvbnMubmFtZSkge1xuXHRcdG1vZF9hc3NlcnRwbHVzLnN0cmluZyhwYXJzZWQub3B0aW9ucy5uYW1lLFxuXHRcdCAgICAnZXJyb3JcXCdzIFwibmFtZVwiIG11c3QgYmUgYSBzdHJpbmcnKTtcblx0XHR0aGlzLm5hbWUgPSBwYXJzZWQub3B0aW9ucy5uYW1lO1xuXHR9XG5cblx0Lypcblx0ICogRm9yIGRlYnVnZ2luZywgd2Uga2VlcCB0cmFjayBvZiB0aGUgb3JpZ2luYWwgc2hvcnQgbWVzc2FnZSAoYXR0YWNoZWRcblx0ICogdGhpcyBFcnJvciBwYXJ0aWN1bGFybHkpIHNlcGFyYXRlbHkgZnJvbSB0aGUgY29tcGxldGUgbWVzc2FnZSAod2hpY2hcblx0ICogaW5jbHVkZXMgdGhlIG1lc3NhZ2VzIG9mIG91ciBjYXVzZSBjaGFpbikuXG5cdCAqL1xuXHR0aGlzLmpzZV9zaG9ydG1zZyA9IHBhcnNlZC5zaG9ydG1lc3NhZ2U7XG5cdG1lc3NhZ2UgPSBwYXJzZWQuc2hvcnRtZXNzYWdlO1xuXG5cdC8qXG5cdCAqIElmIHdlJ3ZlIGJlZW4gZ2l2ZW4gYSBjYXVzZSwgcmVjb3JkIGEgcmVmZXJlbmNlIHRvIGl0IGFuZCB1cGRhdGUgb3VyXG5cdCAqIG1lc3NhZ2UgYXBwcm9wcmlhdGVseS5cblx0ICovXG5cdGNhdXNlID0gcGFyc2VkLm9wdGlvbnMuY2F1c2U7XG5cdGlmIChjYXVzZSkge1xuXHRcdG1vZF9hc3NlcnRwbHVzLm9rKG1vZF9pc0Vycm9yKGNhdXNlKSwgJ2NhdXNlIGlzIG5vdCBhbiBFcnJvcicpO1xuXHRcdHRoaXMuanNlX2NhdXNlID0gY2F1c2U7XG5cblx0XHRpZiAoIXBhcnNlZC5vcHRpb25zLnNraXBDYXVzZU1lc3NhZ2UpIHtcblx0XHRcdG1lc3NhZ2UgKz0gJzogJyArIGNhdXNlLm1lc3NhZ2U7XG5cdFx0fVxuXHR9XG5cblx0Lypcblx0ICogSWYgd2UndmUgYmVlbiBnaXZlbiBhbiBvYmplY3Qgd2l0aCBwcm9wZXJ0aWVzLCBzaGFsbG93LWNvcHkgdGhhdFxuXHQgKiBoZXJlLiAgV2UgZG9uJ3Qgd2FudCB0byB1c2UgYSBkZWVwIGNvcHkgaW4gY2FzZSB0aGVyZSBhcmUgbm9uLXBsYWluXG5cdCAqIG9iamVjdHMgaGVyZSwgYnV0IHdlIGRvbid0IHdhbnQgdG8gdXNlIHRoZSBvcmlnaW5hbCBvYmplY3QgaW4gY2FzZVxuXHQgKiB0aGUgY2FsbGVyIG1vZGlmaWVzIGl0IGxhdGVyLlxuXHQgKi9cblx0dGhpcy5qc2VfaW5mbyA9IHt9O1xuXHRpZiAocGFyc2VkLm9wdGlvbnMuaW5mbykge1xuXHRcdGZvciAoayBpbiBwYXJzZWQub3B0aW9ucy5pbmZvKSB7XG5cdFx0XHR0aGlzLmpzZV9pbmZvW2tdID0gcGFyc2VkLm9wdGlvbnMuaW5mb1trXTtcblx0XHR9XG5cdH1cblxuXHR0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xuXHRFcnJvci5jYWxsKHRoaXMsIG1lc3NhZ2UpO1xuXG5cdGlmIChFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSkge1xuXHRcdGN0b3IgPSBwYXJzZWQub3B0aW9ucy5jb25zdHJ1Y3Rvck9wdCB8fCB0aGlzLmNvbnN0cnVjdG9yO1xuXHRcdEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIGN0b3IpO1xuXHR9XG5cblx0cmV0dXJuICh0aGlzKTtcbn1cblxubW9kX3V0aWwuaW5oZXJpdHMoVkVycm9yLCBFcnJvcik7XG5WRXJyb3IucHJvdG90eXBlLm5hbWUgPSAnVkVycm9yJztcblxuVkVycm9yLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHZlX3RvU3RyaW5nKClcbntcblx0dmFyIHN0ciA9ICh0aGlzLmhhc093blByb3BlcnR5KCduYW1lJykgJiYgdGhpcy5uYW1lIHx8XG5cdFx0dGhpcy5jb25zdHJ1Y3Rvci5uYW1lIHx8IHRoaXMuY29uc3RydWN0b3IucHJvdG90eXBlLm5hbWUpO1xuXHRpZiAodGhpcy5tZXNzYWdlKVxuXHRcdHN0ciArPSAnOiAnICsgdGhpcy5tZXNzYWdlO1xuXG5cdHJldHVybiAoc3RyKTtcbn07XG5cbi8qXG4gKiBUaGlzIG1ldGhvZCBpcyBwcm92aWRlZCBmb3IgY29tcGF0aWJpbGl0eS4gIE5ldyBjYWxsZXJzIHNob3VsZCB1c2VcbiAqIFZFcnJvci5jYXVzZSgpIGluc3RlYWQuICBUaGF0IG1ldGhvZCBhbHNvIHVzZXMgdGhlIHNhbmVyIGBudWxsYCByZXR1cm4gdmFsdWVcbiAqIHdoZW4gdGhlcmUgaXMgbm8gY2F1c2UuXG4gKi9cblZFcnJvci5wcm90b3R5cGUuY2F1c2UgPSBmdW5jdGlvbiB2ZV9jYXVzZSgpXG57XG5cdHZhciBjYXVzZSA9IFZFcnJvci5jYXVzZSh0aGlzKTtcblx0cmV0dXJuIChjYXVzZSA9PT0gbnVsbCA/IHVuZGVmaW5lZCA6IGNhdXNlKTtcbn07XG5cbi8qXG4gKiBTdGF0aWMgbWV0aG9kc1xuICpcbiAqIFRoZXNlIGNsYXNzLWxldmVsIG1ldGhvZHMgYXJlIHByb3ZpZGVkIHNvIHRoYXQgY2FsbGVycyBjYW4gdXNlIHRoZW0gb25cbiAqIGluc3RhbmNlcyBvZiBFcnJvcnMgdGhhdCBhcmUgbm90IFZFcnJvcnMuICBOZXcgaW50ZXJmYWNlcyBzaG91bGQgYmUgcHJvdmlkZWRcbiAqIG9ubHkgdXNpbmcgc3RhdGljIG1ldGhvZHMgdG8gZWxpbWluYXRlIHRoZSBjbGFzcyBvZiBwcm9ncmFtbWluZyBtaXN0YWtlIHdoZXJlXG4gKiBwZW9wbGUgZmFpbCB0byBjaGVjayB3aGV0aGVyIHRoZSBFcnJvciBvYmplY3QgaGFzIHRoZSBjb3JyZXNwb25kaW5nIG1ldGhvZHMuXG4gKi9cblxuVkVycm9yLmNhdXNlID0gZnVuY3Rpb24gKGVycilcbntcblx0bW9kX2Fzc2VydHBsdXMub2sobW9kX2lzRXJyb3IoZXJyKSwgJ2VyciBtdXN0IGJlIGFuIEVycm9yJyk7XG5cdHJldHVybiAobW9kX2lzRXJyb3IoZXJyLmpzZV9jYXVzZSkgPyBlcnIuanNlX2NhdXNlIDogbnVsbCk7XG59O1xuXG5WRXJyb3IuaW5mbyA9IGZ1bmN0aW9uIChlcnIpXG57XG5cdHZhciBydiwgY2F1c2UsIGs7XG5cblx0bW9kX2Fzc2VydHBsdXMub2sobW9kX2lzRXJyb3IoZXJyKSwgJ2VyciBtdXN0IGJlIGFuIEVycm9yJyk7XG5cdGNhdXNlID0gVkVycm9yLmNhdXNlKGVycik7XG5cdGlmIChjYXVzZSAhPT0gbnVsbCkge1xuXHRcdHJ2ID0gVkVycm9yLmluZm8oY2F1c2UpO1xuXHR9IGVsc2Uge1xuXHRcdHJ2ID0ge307XG5cdH1cblxuXHRpZiAodHlwZW9mIChlcnIuanNlX2luZm8pID09ICdvYmplY3QnICYmIGVyci5qc2VfaW5mbyAhPT0gbnVsbCkge1xuXHRcdGZvciAoayBpbiBlcnIuanNlX2luZm8pIHtcblx0XHRcdHJ2W2tdID0gZXJyLmpzZV9pbmZvW2tdO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiAocnYpO1xufTtcblxuVkVycm9yLmZpbmRDYXVzZUJ5TmFtZSA9IGZ1bmN0aW9uIChlcnIsIG5hbWUpXG57XG5cdHZhciBjYXVzZTtcblxuXHRtb2RfYXNzZXJ0cGx1cy5vayhtb2RfaXNFcnJvcihlcnIpLCAnZXJyIG11c3QgYmUgYW4gRXJyb3InKTtcblx0bW9kX2Fzc2VydHBsdXMuc3RyaW5nKG5hbWUpO1xuXHRtb2RfYXNzZXJ0cGx1cy5vayhuYW1lLmxlbmd0aCA+IDAsICduYW1lIGNhbm5vdCBiZSBlbXB0eScpO1xuXG5cdGZvciAoY2F1c2UgPSBlcnI7IGNhdXNlICE9PSBudWxsOyBjYXVzZSA9IFZFcnJvci5jYXVzZShjYXVzZSkpIHtcblx0XHRtb2RfYXNzZXJ0cGx1cy5vayhtb2RfaXNFcnJvcihjYXVzZSkpO1xuXHRcdGlmIChjYXVzZS5uYW1lID09IG5hbWUpIHtcblx0XHRcdHJldHVybiAoY2F1c2UpO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiAobnVsbCk7XG59O1xuXG5WRXJyb3IuZnVsbFN0YWNrID0gZnVuY3Rpb24gKGVycilcbntcblx0bW9kX2Fzc2VydHBsdXMub2sobW9kX2lzRXJyb3IoZXJyKSwgJ2VyciBtdXN0IGJlIGFuIEVycm9yJyk7XG5cblx0dmFyIGNhdXNlID0gVkVycm9yLmNhdXNlKGVycik7XG5cblx0aWYgKGNhdXNlKSB7XG5cdFx0cmV0dXJuIChlcnIuc3RhY2sgKyAnXFxuY2F1c2VkIGJ5OiAnICsgVkVycm9yLmZ1bGxTdGFjayhjYXVzZSkpO1xuXHR9XG5cblx0cmV0dXJuIChlcnIuc3RhY2spO1xufTtcblxuXG4vKlxuICogU0Vycm9yIGlzIGxpa2UgVkVycm9yLCBidXQgc3RyaWN0ZXIgYWJvdXQgdHlwZXMuICBZb3UgY2Fubm90IHBhc3MgXCJudWxsXCIgb3JcbiAqIFwidW5kZWZpbmVkXCIgYXMgc3RyaW5nIGFyZ3VtZW50cyB0byB0aGUgZm9ybWF0dGVyLlxuICovXG5mdW5jdGlvbiBTRXJyb3IoKVxue1xuXHR2YXIgYXJncywgb2JqLCBwYXJzZWQsIG9wdGlvbnM7XG5cblx0YXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMCk7XG5cdGlmICghKHRoaXMgaW5zdGFuY2VvZiBTRXJyb3IpKSB7XG5cdFx0b2JqID0gT2JqZWN0LmNyZWF0ZShTRXJyb3IucHJvdG90eXBlKTtcblx0XHRTRXJyb3IuYXBwbHkob2JqLCBhcmd1bWVudHMpO1xuXHRcdHJldHVybiAob2JqKTtcblx0fVxuXG5cdHBhcnNlZCA9IHBhcnNlQ29uc3RydWN0b3JBcmd1bWVudHMoe1xuXHQgICAgJ2FyZ3YnOiBhcmdzLFxuXHQgICAgJ3N0cmljdCc6IHRydWVcblx0fSk7XG5cblx0b3B0aW9ucyA9IHBhcnNlZC5vcHRpb25zO1xuXHRWRXJyb3IuY2FsbCh0aGlzLCBvcHRpb25zLCAnJXMnLCBwYXJzZWQuc2hvcnRtZXNzYWdlKTtcblxuXHRyZXR1cm4gKHRoaXMpO1xufVxuXG4vKlxuICogV2UgZG9uJ3QgYm90aGVyIHNldHRpbmcgU0Vycm9yLnByb3RvdHlwZS5uYW1lIGJlY2F1c2Ugb25jZSBjb25zdHJ1Y3RlZCxcbiAqIFNFcnJvcnMgYXJlIGp1c3QgbGlrZSBWRXJyb3JzLlxuICovXG5tb2RfdXRpbC5pbmhlcml0cyhTRXJyb3IsIFZFcnJvcik7XG5cblxuLypcbiAqIFJlcHJlc2VudHMgYSBjb2xsZWN0aW9uIG9mIGVycm9ycyBmb3IgdGhlIHB1cnBvc2Ugb2YgY29uc3VtZXJzIHRoYXQgZ2VuZXJhbGx5XG4gKiBvbmx5IGRlYWwgd2l0aCBvbmUgZXJyb3IuICBDYWxsZXJzIGNhbiBleHRyYWN0IHRoZSBpbmRpdmlkdWFsIGVycm9yc1xuICogY29udGFpbmVkIGluIHRoaXMgb2JqZWN0LCBidXQgbWF5IGFsc28ganVzdCB0cmVhdCBpdCBhcyBhIG5vcm1hbCBzaW5nbGVcbiAqIGVycm9yLCBpbiB3aGljaCBjYXNlIGEgc3VtbWFyeSBtZXNzYWdlIHdpbGwgYmUgcHJpbnRlZC5cbiAqL1xuZnVuY3Rpb24gTXVsdGlFcnJvcihlcnJvcnMpXG57XG5cdG1vZF9hc3NlcnRwbHVzLmFycmF5KGVycm9ycywgJ2xpc3Qgb2YgZXJyb3JzJyk7XG5cdG1vZF9hc3NlcnRwbHVzLm9rKGVycm9ycy5sZW5ndGggPiAwLCAnbXVzdCBiZSBhdCBsZWFzdCBvbmUgZXJyb3InKTtcblx0dGhpcy5hc2VfZXJyb3JzID0gZXJyb3JzO1xuXG5cdFZFcnJvci5jYWxsKHRoaXMsIHtcblx0ICAgICdjYXVzZSc6IGVycm9yc1swXVxuXHR9LCAnZmlyc3Qgb2YgJWQgZXJyb3IlcycsIGVycm9ycy5sZW5ndGgsIGVycm9ycy5sZW5ndGggPT0gMSA/ICcnIDogJ3MnKTtcbn1cblxubW9kX3V0aWwuaW5oZXJpdHMoTXVsdGlFcnJvciwgVkVycm9yKTtcbk11bHRpRXJyb3IucHJvdG90eXBlLm5hbWUgPSAnTXVsdGlFcnJvcic7XG5cbk11bHRpRXJyb3IucHJvdG90eXBlLmVycm9ycyA9IGZ1bmN0aW9uIG1lX2Vycm9ycygpXG57XG5cdHJldHVybiAodGhpcy5hc2VfZXJyb3JzLnNsaWNlKDApKTtcbn07XG5cblxuLypcbiAqIFNlZSBSRUFETUUubWQgZm9yIHJlZmVyZW5jZSBkZXRhaWxzLlxuICovXG5mdW5jdGlvbiBXRXJyb3IoKVxue1xuXHR2YXIgYXJncywgb2JqLCBwYXJzZWQsIG9wdGlvbnM7XG5cblx0YXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMCk7XG5cdGlmICghKHRoaXMgaW5zdGFuY2VvZiBXRXJyb3IpKSB7XG5cdFx0b2JqID0gT2JqZWN0LmNyZWF0ZShXRXJyb3IucHJvdG90eXBlKTtcblx0XHRXRXJyb3IuYXBwbHkob2JqLCBhcmdzKTtcblx0XHRyZXR1cm4gKG9iaik7XG5cdH1cblxuXHRwYXJzZWQgPSBwYXJzZUNvbnN0cnVjdG9yQXJndW1lbnRzKHtcblx0ICAgICdhcmd2JzogYXJncyxcblx0ICAgICdzdHJpY3QnOiBmYWxzZVxuXHR9KTtcblxuXHRvcHRpb25zID0gcGFyc2VkLm9wdGlvbnM7XG5cdG9wdGlvbnNbJ3NraXBDYXVzZU1lc3NhZ2UnXSA9IHRydWU7XG5cdFZFcnJvci5jYWxsKHRoaXMsIG9wdGlvbnMsICclcycsIHBhcnNlZC5zaG9ydG1lc3NhZ2UpO1xuXG5cdHJldHVybiAodGhpcyk7XG59XG5cbm1vZF91dGlsLmluaGVyaXRzKFdFcnJvciwgVkVycm9yKTtcbldFcnJvci5wcm90b3R5cGUubmFtZSA9ICdXRXJyb3InO1xuXG5XRXJyb3IucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gd2VfdG9TdHJpbmcoKVxue1xuXHR2YXIgc3RyID0gKHRoaXMuaGFzT3duUHJvcGVydHkoJ25hbWUnKSAmJiB0aGlzLm5hbWUgfHxcblx0XHR0aGlzLmNvbnN0cnVjdG9yLm5hbWUgfHwgdGhpcy5jb25zdHJ1Y3Rvci5wcm90b3R5cGUubmFtZSk7XG5cdGlmICh0aGlzLm1lc3NhZ2UpXG5cdFx0c3RyICs9ICc6ICcgKyB0aGlzLm1lc3NhZ2U7XG5cdGlmICh0aGlzLmpzZV9jYXVzZSAmJiB0aGlzLmpzZV9jYXVzZS5tZXNzYWdlKVxuXHRcdHN0ciArPSAnOyBjYXVzZWQgYnkgJyArIHRoaXMuanNlX2NhdXNlLnRvU3RyaW5nKCk7XG5cblx0cmV0dXJuIChzdHIpO1xufTtcblxuLypcbiAqIEZvciBwdXJlbHkgaGlzdG9yaWNhbCByZWFzb25zLCBXRXJyb3IncyBjYXVzZSgpIGZ1bmN0aW9uIGFsbG93cyB5b3UgdG8gc2V0XG4gKiB0aGUgY2F1c2UuXG4gKi9cbldFcnJvci5wcm90b3R5cGUuY2F1c2UgPSBmdW5jdGlvbiB3ZV9jYXVzZShjKVxue1xuXHRpZiAobW9kX2lzRXJyb3IoYykpXG5cdFx0dGhpcy5qc2VfY2F1c2UgPSBjO1xuXG5cdHJldHVybiAodGhpcy5qc2VfY2F1c2UpO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi92ZXJyb3IvbGliL3ZlcnJvci5qc1xuLy8gbW9kdWxlIGlkID0gMTJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gQ29weXJpZ2h0IChjKSAyMDEyLCBNYXJrIENhdmFnZS4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIENvcHlyaWdodCAyMDE1IEpveWVudCwgSW5jLlxuXG52YXIgYXNzZXJ0ID0gcmVxdWlyZSgnYXNzZXJ0Jyk7XG52YXIgU3RyZWFtID0gcmVxdWlyZSgnc3RyZWFtJykuU3RyZWFtO1xudmFyIHV0aWwgPSByZXF1aXJlKCd1dGlsJyk7XG5cblxuLy8vLS0tIEdsb2JhbHNcblxuLyogSlNTVFlMRUQgKi9cbnZhciBVVUlEX1JFR0VYUCA9IC9eW2EtZkEtRjAtOV17OH0tW2EtZkEtRjAtOV17NH0tW2EtZkEtRjAtOV17NH0tW2EtZkEtRjAtOV17NH0tW2EtZkEtRjAtOV17MTJ9JC87XG5cblxuLy8vLS0tIEludGVybmFsXG5cbmZ1bmN0aW9uIF9jYXBpdGFsaXplKHN0cikge1xuICAgIHJldHVybiAoc3RyLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgc3RyLnNsaWNlKDEpKTtcbn1cblxuZnVuY3Rpb24gX3Rvc3MobmFtZSwgZXhwZWN0ZWQsIG9wZXIsIGFyZywgYWN0dWFsKSB7XG4gICAgdGhyb3cgbmV3IGFzc2VydC5Bc3NlcnRpb25FcnJvcih7XG4gICAgICAgIG1lc3NhZ2U6IHV0aWwuZm9ybWF0KCclcyAoJXMpIGlzIHJlcXVpcmVkJywgbmFtZSwgZXhwZWN0ZWQpLFxuICAgICAgICBhY3R1YWw6IChhY3R1YWwgPT09IHVuZGVmaW5lZCkgPyB0eXBlb2YgKGFyZykgOiBhY3R1YWwoYXJnKSxcbiAgICAgICAgZXhwZWN0ZWQ6IGV4cGVjdGVkLFxuICAgICAgICBvcGVyYXRvcjogb3BlciB8fCAnPT09JyxcbiAgICAgICAgc3RhY2tTdGFydEZ1bmN0aW9uOiBfdG9zcy5jYWxsZXJcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gX2dldENsYXNzKGFyZykge1xuICAgIHJldHVybiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGFyZykuc2xpY2UoOCwgLTEpKTtcbn1cblxuZnVuY3Rpb24gbm9vcCgpIHtcbiAgICAvLyBXaHkgZXZlbiBib3RoZXIgd2l0aCBhc3NlcnRzP1xufVxuXG5cbi8vLy0tLSBFeHBvcnRzXG5cbnZhciB0eXBlcyA9IHtcbiAgICBib29sOiB7XG4gICAgICAgIGNoZWNrOiBmdW5jdGlvbiAoYXJnKSB7IHJldHVybiB0eXBlb2YgKGFyZykgPT09ICdib29sZWFuJzsgfVxuICAgIH0sXG4gICAgZnVuYzoge1xuICAgICAgICBjaGVjazogZnVuY3Rpb24gKGFyZykgeyByZXR1cm4gdHlwZW9mIChhcmcpID09PSAnZnVuY3Rpb24nOyB9XG4gICAgfSxcbiAgICBzdHJpbmc6IHtcbiAgICAgICAgY2hlY2s6IGZ1bmN0aW9uIChhcmcpIHsgcmV0dXJuIHR5cGVvZiAoYXJnKSA9PT0gJ3N0cmluZyc7IH1cbiAgICB9LFxuICAgIG9iamVjdDoge1xuICAgICAgICBjaGVjazogZnVuY3Rpb24gKGFyZykge1xuICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiAoYXJnKSA9PT0gJ29iamVjdCcgJiYgYXJnICE9PSBudWxsO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBudW1iZXI6IHtcbiAgICAgICAgY2hlY2s6IGZ1bmN0aW9uIChhcmcpIHtcbiAgICAgICAgICAgIHJldHVybiB0eXBlb2YgKGFyZykgPT09ICdudW1iZXInICYmICFpc05hTihhcmcpO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBmaW5pdGU6IHtcbiAgICAgICAgY2hlY2s6IGZ1bmN0aW9uIChhcmcpIHtcbiAgICAgICAgICAgIHJldHVybiB0eXBlb2YgKGFyZykgPT09ICdudW1iZXInICYmICFpc05hTihhcmcpICYmIGlzRmluaXRlKGFyZyk7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIGJ1ZmZlcjoge1xuICAgICAgICBjaGVjazogZnVuY3Rpb24gKGFyZykgeyByZXR1cm4gQnVmZmVyLmlzQnVmZmVyKGFyZyk7IH0sXG4gICAgICAgIG9wZXJhdG9yOiAnQnVmZmVyLmlzQnVmZmVyJ1xuICAgIH0sXG4gICAgYXJyYXk6IHtcbiAgICAgICAgY2hlY2s6IGZ1bmN0aW9uIChhcmcpIHsgcmV0dXJuIEFycmF5LmlzQXJyYXkoYXJnKTsgfSxcbiAgICAgICAgb3BlcmF0b3I6ICdBcnJheS5pc0FycmF5J1xuICAgIH0sXG4gICAgc3RyZWFtOiB7XG4gICAgICAgIGNoZWNrOiBmdW5jdGlvbiAoYXJnKSB7IHJldHVybiBhcmcgaW5zdGFuY2VvZiBTdHJlYW07IH0sXG4gICAgICAgIG9wZXJhdG9yOiAnaW5zdGFuY2VvZicsXG4gICAgICAgIGFjdHVhbDogX2dldENsYXNzXG4gICAgfSxcbiAgICBkYXRlOiB7XG4gICAgICAgIGNoZWNrOiBmdW5jdGlvbiAoYXJnKSB7IHJldHVybiBhcmcgaW5zdGFuY2VvZiBEYXRlOyB9LFxuICAgICAgICBvcGVyYXRvcjogJ2luc3RhbmNlb2YnLFxuICAgICAgICBhY3R1YWw6IF9nZXRDbGFzc1xuICAgIH0sXG4gICAgcmVnZXhwOiB7XG4gICAgICAgIGNoZWNrOiBmdW5jdGlvbiAoYXJnKSB7IHJldHVybiBhcmcgaW5zdGFuY2VvZiBSZWdFeHA7IH0sXG4gICAgICAgIG9wZXJhdG9yOiAnaW5zdGFuY2VvZicsXG4gICAgICAgIGFjdHVhbDogX2dldENsYXNzXG4gICAgfSxcbiAgICB1dWlkOiB7XG4gICAgICAgIGNoZWNrOiBmdW5jdGlvbiAoYXJnKSB7XG4gICAgICAgICAgICByZXR1cm4gdHlwZW9mIChhcmcpID09PSAnc3RyaW5nJyAmJiBVVUlEX1JFR0VYUC50ZXN0KGFyZyk7XG4gICAgICAgIH0sXG4gICAgICAgIG9wZXJhdG9yOiAnaXNVVUlEJ1xuICAgIH1cbn07XG5cbmZ1bmN0aW9uIF9zZXRFeHBvcnRzKG5kZWJ1Zykge1xuICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXModHlwZXMpO1xuICAgIHZhciBvdXQ7XG5cbiAgICAvKiByZS1leHBvcnQgc3RhbmRhcmQgYXNzZXJ0ICovXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfTkRFQlVHKSB7XG4gICAgICAgIG91dCA9IG5vb3A7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgb3V0ID0gZnVuY3Rpb24gKGFyZywgbXNnKSB7XG4gICAgICAgICAgICBpZiAoIWFyZykge1xuICAgICAgICAgICAgICAgIF90b3NzKG1zZywgJ3RydWUnLCBhcmcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8qIHN0YW5kYXJkIGNoZWNrcyAqL1xuICAgIGtleXMuZm9yRWFjaChmdW5jdGlvbiAoaykge1xuICAgICAgICBpZiAobmRlYnVnKSB7XG4gICAgICAgICAgICBvdXRba10gPSBub29wO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciB0eXBlID0gdHlwZXNba107XG4gICAgICAgIG91dFtrXSA9IGZ1bmN0aW9uIChhcmcsIG1zZykge1xuICAgICAgICAgICAgaWYgKCF0eXBlLmNoZWNrKGFyZykpIHtcbiAgICAgICAgICAgICAgICBfdG9zcyhtc2csIGssIHR5cGUub3BlcmF0b3IsIGFyZywgdHlwZS5hY3R1YWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH0pO1xuXG4gICAgLyogb3B0aW9uYWwgY2hlY2tzICovXG4gICAga2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrKSB7XG4gICAgICAgIHZhciBuYW1lID0gJ29wdGlvbmFsJyArIF9jYXBpdGFsaXplKGspO1xuICAgICAgICBpZiAobmRlYnVnKSB7XG4gICAgICAgICAgICBvdXRbbmFtZV0gPSBub29wO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciB0eXBlID0gdHlwZXNba107XG4gICAgICAgIG91dFtuYW1lXSA9IGZ1bmN0aW9uIChhcmcsIG1zZykge1xuICAgICAgICAgICAgaWYgKGFyZyA9PT0gdW5kZWZpbmVkIHx8IGFyZyA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghdHlwZS5jaGVjayhhcmcpKSB7XG4gICAgICAgICAgICAgICAgX3Rvc3MobXNnLCBrLCB0eXBlLm9wZXJhdG9yLCBhcmcsIHR5cGUuYWN0dWFsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9KTtcblxuICAgIC8qIGFycmF5T2YgY2hlY2tzICovXG4gICAga2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrKSB7XG4gICAgICAgIHZhciBuYW1lID0gJ2FycmF5T2YnICsgX2NhcGl0YWxpemUoayk7XG4gICAgICAgIGlmIChuZGVidWcpIHtcbiAgICAgICAgICAgIG91dFtuYW1lXSA9IG5vb3A7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHR5cGUgPSB0eXBlc1trXTtcbiAgICAgICAgdmFyIGV4cGVjdGVkID0gJ1snICsgayArICddJztcbiAgICAgICAgb3V0W25hbWVdID0gZnVuY3Rpb24gKGFyZywgbXNnKSB7XG4gICAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoYXJnKSkge1xuICAgICAgICAgICAgICAgIF90b3NzKG1zZywgZXhwZWN0ZWQsIHR5cGUub3BlcmF0b3IsIGFyZywgdHlwZS5hY3R1YWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGk7XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgYXJnLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKCF0eXBlLmNoZWNrKGFyZ1tpXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgX3Rvc3MobXNnLCBleHBlY3RlZCwgdHlwZS5vcGVyYXRvciwgYXJnLCB0eXBlLmFjdHVhbCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH0pO1xuXG4gICAgLyogb3B0aW9uYWxBcnJheU9mIGNoZWNrcyAqL1xuICAgIGtleXMuZm9yRWFjaChmdW5jdGlvbiAoaykge1xuICAgICAgICB2YXIgbmFtZSA9ICdvcHRpb25hbEFycmF5T2YnICsgX2NhcGl0YWxpemUoayk7XG4gICAgICAgIGlmIChuZGVidWcpIHtcbiAgICAgICAgICAgIG91dFtuYW1lXSA9IG5vb3A7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHR5cGUgPSB0eXBlc1trXTtcbiAgICAgICAgdmFyIGV4cGVjdGVkID0gJ1snICsgayArICddJztcbiAgICAgICAgb3V0W25hbWVdID0gZnVuY3Rpb24gKGFyZywgbXNnKSB7XG4gICAgICAgICAgICBpZiAoYXJnID09PSB1bmRlZmluZWQgfHwgYXJnID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGFyZykpIHtcbiAgICAgICAgICAgICAgICBfdG9zcyhtc2csIGV4cGVjdGVkLCB0eXBlLm9wZXJhdG9yLCBhcmcsIHR5cGUuYWN0dWFsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBpO1xuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGFyZy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmICghdHlwZS5jaGVjayhhcmdbaV0pKSB7XG4gICAgICAgICAgICAgICAgICAgIF90b3NzKG1zZywgZXhwZWN0ZWQsIHR5cGUub3BlcmF0b3IsIGFyZywgdHlwZS5hY3R1YWwpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9KTtcblxuICAgIC8qIHJlLWV4cG9ydCBidWlsdC1pbiBhc3NlcnRpb25zICovXG4gICAgT2JqZWN0LmtleXMoYXNzZXJ0KS5mb3JFYWNoKGZ1bmN0aW9uIChrKSB7XG4gICAgICAgIGlmIChrID09PSAnQXNzZXJ0aW9uRXJyb3InKSB7XG4gICAgICAgICAgICBvdXRba10gPSBhc3NlcnRba107XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5kZWJ1Zykge1xuICAgICAgICAgICAgb3V0W2tdID0gbm9vcDtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBvdXRba10gPSBhc3NlcnRba107XG4gICAgfSk7XG5cbiAgICAvKiBleHBvcnQgb3Vyc2VsdmVzIChmb3IgdW5pdCB0ZXN0cyBfb25seV8pICovXG4gICAgb3V0Ll9zZXRFeHBvcnRzID0gX3NldEV4cG9ydHM7XG5cbiAgICByZXR1cm4gb3V0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9zZXRFeHBvcnRzKHByb2Nlc3MuZW52Lk5PREVfTkRFQlVHKTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi92ZXJyb3Ivfi9hc3NlcnQtcGx1cy9hc3NlcnQuanNcbi8vIG1vZHVsZSBpZCA9IDEzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qIVxuICogVGhlIGJ1ZmZlciBtb2R1bGUgZnJvbSBub2RlLmpzLCBmb3IgdGhlIGJyb3dzZXIuXG4gKlxuICogQGF1dGhvciAgIEZlcm9zcyBBYm91a2hhZGlqZWggPGZlcm9zc0BmZXJvc3Mub3JnPiA8aHR0cDovL2Zlcm9zcy5vcmc+XG4gKiBAbGljZW5zZSAgTUlUXG4gKi9cbi8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvICovXG5cbid1c2Ugc3RyaWN0J1xuXG52YXIgYmFzZTY0ID0gcmVxdWlyZSgnYmFzZTY0LWpzJylcbnZhciBpZWVlNzU0ID0gcmVxdWlyZSgnaWVlZTc1NCcpXG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJ2lzYXJyYXknKVxuXG5leHBvcnRzLkJ1ZmZlciA9IEJ1ZmZlclxuZXhwb3J0cy5TbG93QnVmZmVyID0gU2xvd0J1ZmZlclxuZXhwb3J0cy5JTlNQRUNUX01BWF9CWVRFUyA9IDUwXG5cbi8qKlxuICogSWYgYEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUYDpcbiAqICAgPT09IHRydWUgICAgVXNlIFVpbnQ4QXJyYXkgaW1wbGVtZW50YXRpb24gKGZhc3Rlc3QpXG4gKiAgID09PSBmYWxzZSAgIFVzZSBPYmplY3QgaW1wbGVtZW50YXRpb24gKG1vc3QgY29tcGF0aWJsZSwgZXZlbiBJRTYpXG4gKlxuICogQnJvd3NlcnMgdGhhdCBzdXBwb3J0IHR5cGVkIGFycmF5cyBhcmUgSUUgMTArLCBGaXJlZm94IDQrLCBDaHJvbWUgNyssIFNhZmFyaSA1LjErLFxuICogT3BlcmEgMTEuNissIGlPUyA0LjIrLlxuICpcbiAqIER1ZSB0byB2YXJpb3VzIGJyb3dzZXIgYnVncywgc29tZXRpbWVzIHRoZSBPYmplY3QgaW1wbGVtZW50YXRpb24gd2lsbCBiZSB1c2VkIGV2ZW5cbiAqIHdoZW4gdGhlIGJyb3dzZXIgc3VwcG9ydHMgdHlwZWQgYXJyYXlzLlxuICpcbiAqIE5vdGU6XG4gKlxuICogICAtIEZpcmVmb3ggNC0yOSBsYWNrcyBzdXBwb3J0IGZvciBhZGRpbmcgbmV3IHByb3BlcnRpZXMgdG8gYFVpbnQ4QXJyYXlgIGluc3RhbmNlcyxcbiAqICAgICBTZWU6IGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTY5NTQzOC5cbiAqXG4gKiAgIC0gQ2hyb21lIDktMTAgaXMgbWlzc2luZyB0aGUgYFR5cGVkQXJyYXkucHJvdG90eXBlLnN1YmFycmF5YCBmdW5jdGlvbi5cbiAqXG4gKiAgIC0gSUUxMCBoYXMgYSBicm9rZW4gYFR5cGVkQXJyYXkucHJvdG90eXBlLnN1YmFycmF5YCBmdW5jdGlvbiB3aGljaCByZXR1cm5zIGFycmF5cyBvZlxuICogICAgIGluY29ycmVjdCBsZW5ndGggaW4gc29tZSBzaXR1YXRpb25zLlxuXG4gKiBXZSBkZXRlY3QgdGhlc2UgYnVnZ3kgYnJvd3NlcnMgYW5kIHNldCBgQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlRgIHRvIGBmYWxzZWAgc28gdGhleVxuICogZ2V0IHRoZSBPYmplY3QgaW1wbGVtZW50YXRpb24sIHdoaWNoIGlzIHNsb3dlciBidXQgYmVoYXZlcyBjb3JyZWN0bHkuXG4gKi9cbkJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUID0gZ2xvYmFsLlRZUEVEX0FSUkFZX1NVUFBPUlQgIT09IHVuZGVmaW5lZFxuICA/IGdsb2JhbC5UWVBFRF9BUlJBWV9TVVBQT1JUXG4gIDogdHlwZWRBcnJheVN1cHBvcnQoKVxuXG4vKlxuICogRXhwb3J0IGtNYXhMZW5ndGggYWZ0ZXIgdHlwZWQgYXJyYXkgc3VwcG9ydCBpcyBkZXRlcm1pbmVkLlxuICovXG5leHBvcnRzLmtNYXhMZW5ndGggPSBrTWF4TGVuZ3RoKClcblxuZnVuY3Rpb24gdHlwZWRBcnJheVN1cHBvcnQgKCkge1xuICB0cnkge1xuICAgIHZhciBhcnIgPSBuZXcgVWludDhBcnJheSgxKVxuICAgIGFyci5fX3Byb3RvX18gPSB7X19wcm90b19fOiBVaW50OEFycmF5LnByb3RvdHlwZSwgZm9vOiBmdW5jdGlvbiAoKSB7IHJldHVybiA0MiB9fVxuICAgIHJldHVybiBhcnIuZm9vKCkgPT09IDQyICYmIC8vIHR5cGVkIGFycmF5IGluc3RhbmNlcyBjYW4gYmUgYXVnbWVudGVkXG4gICAgICAgIHR5cGVvZiBhcnIuc3ViYXJyYXkgPT09ICdmdW5jdGlvbicgJiYgLy8gY2hyb21lIDktMTAgbGFjayBgc3ViYXJyYXlgXG4gICAgICAgIGFyci5zdWJhcnJheSgxLCAxKS5ieXRlTGVuZ3RoID09PSAwIC8vIGllMTAgaGFzIGJyb2tlbiBgc3ViYXJyYXlgXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG5mdW5jdGlvbiBrTWF4TGVuZ3RoICgpIHtcbiAgcmV0dXJuIEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUXG4gICAgPyAweDdmZmZmZmZmXG4gICAgOiAweDNmZmZmZmZmXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUJ1ZmZlciAodGhhdCwgbGVuZ3RoKSB7XG4gIGlmIChrTWF4TGVuZ3RoKCkgPCBsZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW52YWxpZCB0eXBlZCBhcnJheSBsZW5ndGgnKVxuICB9XG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIC8vIFJldHVybiBhbiBhdWdtZW50ZWQgYFVpbnQ4QXJyYXlgIGluc3RhbmNlLCBmb3IgYmVzdCBwZXJmb3JtYW5jZVxuICAgIHRoYXQgPSBuZXcgVWludDhBcnJheShsZW5ndGgpXG4gICAgdGhhdC5fX3Byb3RvX18gPSBCdWZmZXIucHJvdG90eXBlXG4gIH0gZWxzZSB7XG4gICAgLy8gRmFsbGJhY2s6IFJldHVybiBhbiBvYmplY3QgaW5zdGFuY2Ugb2YgdGhlIEJ1ZmZlciBjbGFzc1xuICAgIGlmICh0aGF0ID09PSBudWxsKSB7XG4gICAgICB0aGF0ID0gbmV3IEJ1ZmZlcihsZW5ndGgpXG4gICAgfVxuICAgIHRoYXQubGVuZ3RoID0gbGVuZ3RoXG4gIH1cblxuICByZXR1cm4gdGhhdFxufVxuXG4vKipcbiAqIFRoZSBCdWZmZXIgY29uc3RydWN0b3IgcmV0dXJucyBpbnN0YW5jZXMgb2YgYFVpbnQ4QXJyYXlgIHRoYXQgaGF2ZSB0aGVpclxuICogcHJvdG90eXBlIGNoYW5nZWQgdG8gYEJ1ZmZlci5wcm90b3R5cGVgLiBGdXJ0aGVybW9yZSwgYEJ1ZmZlcmAgaXMgYSBzdWJjbGFzcyBvZlxuICogYFVpbnQ4QXJyYXlgLCBzbyB0aGUgcmV0dXJuZWQgaW5zdGFuY2VzIHdpbGwgaGF2ZSBhbGwgdGhlIG5vZGUgYEJ1ZmZlcmAgbWV0aG9kc1xuICogYW5kIHRoZSBgVWludDhBcnJheWAgbWV0aG9kcy4gU3F1YXJlIGJyYWNrZXQgbm90YXRpb24gd29ya3MgYXMgZXhwZWN0ZWQgLS0gaXRcbiAqIHJldHVybnMgYSBzaW5nbGUgb2N0ZXQuXG4gKlxuICogVGhlIGBVaW50OEFycmF5YCBwcm90b3R5cGUgcmVtYWlucyB1bm1vZGlmaWVkLlxuICovXG5cbmZ1bmN0aW9uIEJ1ZmZlciAoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCAmJiAhKHRoaXMgaW5zdGFuY2VvZiBCdWZmZXIpKSB7XG4gICAgcmV0dXJuIG5ldyBCdWZmZXIoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG4gIH1cblxuICAvLyBDb21tb24gY2FzZS5cbiAgaWYgKHR5cGVvZiBhcmcgPT09ICdudW1iZXInKSB7XG4gICAgaWYgKHR5cGVvZiBlbmNvZGluZ09yT2Zmc2V0ID09PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnSWYgZW5jb2RpbmcgaXMgc3BlY2lmaWVkIHRoZW4gdGhlIGZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmcnXG4gICAgICApXG4gICAgfVxuICAgIHJldHVybiBhbGxvY1Vuc2FmZSh0aGlzLCBhcmcpXG4gIH1cbiAgcmV0dXJuIGZyb20odGhpcywgYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG59XG5cbkJ1ZmZlci5wb29sU2l6ZSA9IDgxOTIgLy8gbm90IHVzZWQgYnkgdGhpcyBpbXBsZW1lbnRhdGlvblxuXG4vLyBUT0RPOiBMZWdhY3ksIG5vdCBuZWVkZWQgYW55bW9yZS4gUmVtb3ZlIGluIG5leHQgbWFqb3IgdmVyc2lvbi5cbkJ1ZmZlci5fYXVnbWVudCA9IGZ1bmN0aW9uIChhcnIpIHtcbiAgYXJyLl9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgcmV0dXJuIGFyclxufVxuXG5mdW5jdGlvbiBmcm9tICh0aGF0LCB2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJ2YWx1ZVwiIGFyZ3VtZW50IG11c3Qgbm90IGJlIGEgbnVtYmVyJylcbiAgfVxuXG4gIGlmICh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmIHZhbHVlIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHtcbiAgICByZXR1cm4gZnJvbUFycmF5QnVmZmVyKHRoYXQsIHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG4gIH1cblxuICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBmcm9tU3RyaW5nKHRoYXQsIHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0KVxuICB9XG5cbiAgcmV0dXJuIGZyb21PYmplY3QodGhhdCwgdmFsdWUpXG59XG5cbi8qKlxuICogRnVuY3Rpb25hbGx5IGVxdWl2YWxlbnQgdG8gQnVmZmVyKGFyZywgZW5jb2RpbmcpIGJ1dCB0aHJvd3MgYSBUeXBlRXJyb3JcbiAqIGlmIHZhbHVlIGlzIGEgbnVtYmVyLlxuICogQnVmZmVyLmZyb20oc3RyWywgZW5jb2RpbmddKVxuICogQnVmZmVyLmZyb20oYXJyYXkpXG4gKiBCdWZmZXIuZnJvbShidWZmZXIpXG4gKiBCdWZmZXIuZnJvbShhcnJheUJ1ZmZlclssIGJ5dGVPZmZzZXRbLCBsZW5ndGhdXSlcbiAqKi9cbkJ1ZmZlci5mcm9tID0gZnVuY3Rpb24gKHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGZyb20obnVsbCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gIEJ1ZmZlci5wcm90b3R5cGUuX19wcm90b19fID0gVWludDhBcnJheS5wcm90b3R5cGVcbiAgQnVmZmVyLl9fcHJvdG9fXyA9IFVpbnQ4QXJyYXlcbiAgaWYgKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC5zcGVjaWVzICYmXG4gICAgICBCdWZmZXJbU3ltYm9sLnNwZWNpZXNdID09PSBCdWZmZXIpIHtcbiAgICAvLyBGaXggc3ViYXJyYXkoKSBpbiBFUzIwMTYuIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXIvcHVsbC85N1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShCdWZmZXIsIFN5bWJvbC5zcGVjaWVzLCB7XG4gICAgICB2YWx1ZTogbnVsbCxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pXG4gIH1cbn1cblxuZnVuY3Rpb24gYXNzZXJ0U2l6ZSAoc2l6ZSkge1xuICBpZiAodHlwZW9mIHNpemUgIT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJzaXplXCIgYXJndW1lbnQgbXVzdCBiZSBhIG51bWJlcicpXG4gIH0gZWxzZSBpZiAoc2l6ZSA8IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXCJzaXplXCIgYXJndW1lbnQgbXVzdCBub3QgYmUgbmVnYXRpdmUnKVxuICB9XG59XG5cbmZ1bmN0aW9uIGFsbG9jICh0aGF0LCBzaXplLCBmaWxsLCBlbmNvZGluZykge1xuICBhc3NlcnRTaXplKHNpemUpXG4gIGlmIChzaXplIDw9IDApIHtcbiAgICByZXR1cm4gY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUpXG4gIH1cbiAgaWYgKGZpbGwgIT09IHVuZGVmaW5lZCkge1xuICAgIC8vIE9ubHkgcGF5IGF0dGVudGlvbiB0byBlbmNvZGluZyBpZiBpdCdzIGEgc3RyaW5nLiBUaGlzXG4gICAgLy8gcHJldmVudHMgYWNjaWRlbnRhbGx5IHNlbmRpbmcgaW4gYSBudW1iZXIgdGhhdCB3b3VsZFxuICAgIC8vIGJlIGludGVycHJldHRlZCBhcyBhIHN0YXJ0IG9mZnNldC5cbiAgICByZXR1cm4gdHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJ1xuICAgICAgPyBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSkuZmlsbChmaWxsLCBlbmNvZGluZylcbiAgICAgIDogY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUpLmZpbGwoZmlsbClcbiAgfVxuICByZXR1cm4gY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUpXG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBmaWxsZWQgQnVmZmVyIGluc3RhbmNlLlxuICogYWxsb2Moc2l6ZVssIGZpbGxbLCBlbmNvZGluZ11dKVxuICoqL1xuQnVmZmVyLmFsbG9jID0gZnVuY3Rpb24gKHNpemUsIGZpbGwsIGVuY29kaW5nKSB7XG4gIHJldHVybiBhbGxvYyhudWxsLCBzaXplLCBmaWxsLCBlbmNvZGluZylcbn1cblxuZnVuY3Rpb24gYWxsb2NVbnNhZmUgKHRoYXQsIHNpemUpIHtcbiAgYXNzZXJ0U2l6ZShzaXplKVxuICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUgPCAwID8gMCA6IGNoZWNrZWQoc2l6ZSkgfCAwKVxuICBpZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzaXplOyArK2kpIHtcbiAgICAgIHRoYXRbaV0gPSAwXG4gICAgfVxuICB9XG4gIHJldHVybiB0aGF0XG59XG5cbi8qKlxuICogRXF1aXZhbGVudCB0byBCdWZmZXIobnVtKSwgYnkgZGVmYXVsdCBjcmVhdGVzIGEgbm9uLXplcm8tZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS5cbiAqICovXG5CdWZmZXIuYWxsb2NVbnNhZmUgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICByZXR1cm4gYWxsb2NVbnNhZmUobnVsbCwgc2l6ZSlcbn1cbi8qKlxuICogRXF1aXZhbGVudCB0byBTbG93QnVmZmVyKG51bSksIGJ5IGRlZmF1bHQgY3JlYXRlcyBhIG5vbi16ZXJvLWZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuXG4gKi9cbkJ1ZmZlci5hbGxvY1Vuc2FmZVNsb3cgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICByZXR1cm4gYWxsb2NVbnNhZmUobnVsbCwgc2l6ZSlcbn1cblxuZnVuY3Rpb24gZnJvbVN0cmluZyAodGhhdCwgc3RyaW5nLCBlbmNvZGluZykge1xuICBpZiAodHlwZW9mIGVuY29kaW5nICE9PSAnc3RyaW5nJyB8fCBlbmNvZGluZyA9PT0gJycpIHtcbiAgICBlbmNvZGluZyA9ICd1dGY4J1xuICB9XG5cbiAgaWYgKCFCdWZmZXIuaXNFbmNvZGluZyhlbmNvZGluZykpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImVuY29kaW5nXCIgbXVzdCBiZSBhIHZhbGlkIHN0cmluZyBlbmNvZGluZycpXG4gIH1cblxuICB2YXIgbGVuZ3RoID0gYnl0ZUxlbmd0aChzdHJpbmcsIGVuY29kaW5nKSB8IDBcbiAgdGhhdCA9IGNyZWF0ZUJ1ZmZlcih0aGF0LCBsZW5ndGgpXG5cbiAgdmFyIGFjdHVhbCA9IHRoYXQud3JpdGUoc3RyaW5nLCBlbmNvZGluZylcblxuICBpZiAoYWN0dWFsICE9PSBsZW5ndGgpIHtcbiAgICAvLyBXcml0aW5nIGEgaGV4IHN0cmluZywgZm9yIGV4YW1wbGUsIHRoYXQgY29udGFpbnMgaW52YWxpZCBjaGFyYWN0ZXJzIHdpbGxcbiAgICAvLyBjYXVzZSBldmVyeXRoaW5nIGFmdGVyIHRoZSBmaXJzdCBpbnZhbGlkIGNoYXJhY3RlciB0byBiZSBpZ25vcmVkLiAoZS5nLlxuICAgIC8vICdhYnh4Y2QnIHdpbGwgYmUgdHJlYXRlZCBhcyAnYWInKVxuICAgIHRoYXQgPSB0aGF0LnNsaWNlKDAsIGFjdHVhbClcbiAgfVxuXG4gIHJldHVybiB0aGF0XG59XG5cbmZ1bmN0aW9uIGZyb21BcnJheUxpa2UgKHRoYXQsIGFycmF5KSB7XG4gIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGggPCAwID8gMCA6IGNoZWNrZWQoYXJyYXkubGVuZ3RoKSB8IDBcbiAgdGhhdCA9IGNyZWF0ZUJ1ZmZlcih0aGF0LCBsZW5ndGgpXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpICs9IDEpIHtcbiAgICB0aGF0W2ldID0gYXJyYXlbaV0gJiAyNTVcbiAgfVxuICByZXR1cm4gdGhhdFxufVxuXG5mdW5jdGlvbiBmcm9tQXJyYXlCdWZmZXIgKHRoYXQsIGFycmF5LCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgYXJyYXkuYnl0ZUxlbmd0aCAvLyB0aGlzIHRocm93cyBpZiBgYXJyYXlgIGlzIG5vdCBhIHZhbGlkIEFycmF5QnVmZmVyXG5cbiAgaWYgKGJ5dGVPZmZzZXQgPCAwIHx8IGFycmF5LmJ5dGVMZW5ndGggPCBieXRlT2Zmc2V0KSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1xcJ29mZnNldFxcJyBpcyBvdXQgb2YgYm91bmRzJylcbiAgfVxuXG4gIGlmIChhcnJheS5ieXRlTGVuZ3RoIDwgYnl0ZU9mZnNldCArIChsZW5ndGggfHwgMCkpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXFwnbGVuZ3RoXFwnIGlzIG91dCBvZiBib3VuZHMnKVxuICB9XG5cbiAgaWYgKGJ5dGVPZmZzZXQgPT09IHVuZGVmaW5lZCAmJiBsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXkpXG4gIH0gZWxzZSBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICBhcnJheSA9IG5ldyBVaW50OEFycmF5KGFycmF5LCBieXRlT2Zmc2V0KVxuICB9IGVsc2Uge1xuICAgIGFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXksIGJ5dGVPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIC8vIFJldHVybiBhbiBhdWdtZW50ZWQgYFVpbnQ4QXJyYXlgIGluc3RhbmNlLCBmb3IgYmVzdCBwZXJmb3JtYW5jZVxuICAgIHRoYXQgPSBhcnJheVxuICAgIHRoYXQuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxuICB9IGVsc2Uge1xuICAgIC8vIEZhbGxiYWNrOiBSZXR1cm4gYW4gb2JqZWN0IGluc3RhbmNlIG9mIHRoZSBCdWZmZXIgY2xhc3NcbiAgICB0aGF0ID0gZnJvbUFycmF5TGlrZSh0aGF0LCBhcnJheSlcbiAgfVxuICByZXR1cm4gdGhhdFxufVxuXG5mdW5jdGlvbiBmcm9tT2JqZWN0ICh0aGF0LCBvYmopIHtcbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihvYmopKSB7XG4gICAgdmFyIGxlbiA9IGNoZWNrZWQob2JqLmxlbmd0aCkgfCAwXG4gICAgdGhhdCA9IGNyZWF0ZUJ1ZmZlcih0aGF0LCBsZW4pXG5cbiAgICBpZiAodGhhdC5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiB0aGF0XG4gICAgfVxuXG4gICAgb2JqLmNvcHkodGhhdCwgMCwgMCwgbGVuKVxuICAgIHJldHVybiB0aGF0XG4gIH1cblxuICBpZiAob2JqKSB7XG4gICAgaWYgKCh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgIG9iai5idWZmZXIgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikgfHwgJ2xlbmd0aCcgaW4gb2JqKSB7XG4gICAgICBpZiAodHlwZW9mIG9iai5sZW5ndGggIT09ICdudW1iZXInIHx8IGlzbmFuKG9iai5sZW5ndGgpKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVCdWZmZXIodGhhdCwgMClcbiAgICAgIH1cbiAgICAgIHJldHVybiBmcm9tQXJyYXlMaWtlKHRoYXQsIG9iailcbiAgICB9XG5cbiAgICBpZiAob2JqLnR5cGUgPT09ICdCdWZmZXInICYmIGlzQXJyYXkob2JqLmRhdGEpKSB7XG4gICAgICByZXR1cm4gZnJvbUFycmF5TGlrZSh0aGF0LCBvYmouZGF0YSlcbiAgICB9XG4gIH1cblxuICB0aHJvdyBuZXcgVHlwZUVycm9yKCdGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nLCBCdWZmZXIsIEFycmF5QnVmZmVyLCBBcnJheSwgb3IgYXJyYXktbGlrZSBvYmplY3QuJylcbn1cblxuZnVuY3Rpb24gY2hlY2tlZCAobGVuZ3RoKSB7XG4gIC8vIE5vdGU6IGNhbm5vdCB1c2UgYGxlbmd0aCA8IGtNYXhMZW5ndGgoKWAgaGVyZSBiZWNhdXNlIHRoYXQgZmFpbHMgd2hlblxuICAvLyBsZW5ndGggaXMgTmFOICh3aGljaCBpcyBvdGhlcndpc2UgY29lcmNlZCB0byB6ZXJvLilcbiAgaWYgKGxlbmd0aCA+PSBrTWF4TGVuZ3RoKCkpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQXR0ZW1wdCB0byBhbGxvY2F0ZSBCdWZmZXIgbGFyZ2VyIHRoYW4gbWF4aW11bSAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAnc2l6ZTogMHgnICsga01heExlbmd0aCgpLnRvU3RyaW5nKDE2KSArICcgYnl0ZXMnKVxuICB9XG4gIHJldHVybiBsZW5ndGggfCAwXG59XG5cbmZ1bmN0aW9uIFNsb3dCdWZmZXIgKGxlbmd0aCkge1xuICBpZiAoK2xlbmd0aCAhPSBsZW5ndGgpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBlcWVxZXFcbiAgICBsZW5ndGggPSAwXG4gIH1cbiAgcmV0dXJuIEJ1ZmZlci5hbGxvYygrbGVuZ3RoKVxufVxuXG5CdWZmZXIuaXNCdWZmZXIgPSBmdW5jdGlvbiBpc0J1ZmZlciAoYikge1xuICByZXR1cm4gISEoYiAhPSBudWxsICYmIGIuX2lzQnVmZmVyKVxufVxuXG5CdWZmZXIuY29tcGFyZSA9IGZ1bmN0aW9uIGNvbXBhcmUgKGEsIGIpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYSkgfHwgIUJ1ZmZlci5pc0J1ZmZlcihiKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50cyBtdXN0IGJlIEJ1ZmZlcnMnKVxuICB9XG5cbiAgaWYgKGEgPT09IGIpIHJldHVybiAwXG5cbiAgdmFyIHggPSBhLmxlbmd0aFxuICB2YXIgeSA9IGIubGVuZ3RoXG5cbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IE1hdGgubWluKHgsIHkpOyBpIDwgbGVuOyArK2kpIHtcbiAgICBpZiAoYVtpXSAhPT0gYltpXSkge1xuICAgICAgeCA9IGFbaV1cbiAgICAgIHkgPSBiW2ldXG4gICAgICBicmVha1xuICAgIH1cbiAgfVxuXG4gIGlmICh4IDwgeSkgcmV0dXJuIC0xXG4gIGlmICh5IDwgeCkgcmV0dXJuIDFcbiAgcmV0dXJuIDBcbn1cblxuQnVmZmVyLmlzRW5jb2RpbmcgPSBmdW5jdGlvbiBpc0VuY29kaW5nIChlbmNvZGluZykge1xuICBzd2l0Y2ggKFN0cmluZyhlbmNvZGluZykudG9Mb3dlckNhc2UoKSkge1xuICAgIGNhc2UgJ2hleCc6XG4gICAgY2FzZSAndXRmOCc6XG4gICAgY2FzZSAndXRmLTgnOlxuICAgIGNhc2UgJ2FzY2lpJzpcbiAgICBjYXNlICdsYXRpbjEnOlxuICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgY2FzZSAnYmFzZTY0JzpcbiAgICBjYXNlICd1Y3MyJzpcbiAgICBjYXNlICd1Y3MtMic6XG4gICAgY2FzZSAndXRmMTZsZSc6XG4gICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgcmV0dXJuIHRydWVcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZhbHNlXG4gIH1cbn1cblxuQnVmZmVyLmNvbmNhdCA9IGZ1bmN0aW9uIGNvbmNhdCAobGlzdCwgbGVuZ3RoKSB7XG4gIGlmICghaXNBcnJheShsaXN0KSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wibGlzdFwiIGFyZ3VtZW50IG11c3QgYmUgYW4gQXJyYXkgb2YgQnVmZmVycycpXG4gIH1cblxuICBpZiAobGlzdC5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gQnVmZmVyLmFsbG9jKDApXG4gIH1cblxuICB2YXIgaVxuICBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICBsZW5ndGggPSAwXG4gICAgZm9yIChpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyArK2kpIHtcbiAgICAgIGxlbmd0aCArPSBsaXN0W2ldLmxlbmd0aFxuICAgIH1cbiAgfVxuXG4gIHZhciBidWZmZXIgPSBCdWZmZXIuYWxsb2NVbnNhZmUobGVuZ3RoKVxuICB2YXIgcG9zID0gMFxuICBmb3IgKGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7ICsraSkge1xuICAgIHZhciBidWYgPSBsaXN0W2ldXG4gICAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYnVmKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJsaXN0XCIgYXJndW1lbnQgbXVzdCBiZSBhbiBBcnJheSBvZiBCdWZmZXJzJylcbiAgICB9XG4gICAgYnVmLmNvcHkoYnVmZmVyLCBwb3MpXG4gICAgcG9zICs9IGJ1Zi5sZW5ndGhcbiAgfVxuICByZXR1cm4gYnVmZmVyXG59XG5cbmZ1bmN0aW9uIGJ5dGVMZW5ndGggKHN0cmluZywgZW5jb2RpbmcpIHtcbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihzdHJpbmcpKSB7XG4gICAgcmV0dXJuIHN0cmluZy5sZW5ndGhcbiAgfVxuICBpZiAodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgQXJyYXlCdWZmZXIuaXNWaWV3ID09PSAnZnVuY3Rpb24nICYmXG4gICAgICAoQXJyYXlCdWZmZXIuaXNWaWV3KHN0cmluZykgfHwgc3RyaW5nIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpKSB7XG4gICAgcmV0dXJuIHN0cmluZy5ieXRlTGVuZ3RoXG4gIH1cbiAgaWYgKHR5cGVvZiBzdHJpbmcgIT09ICdzdHJpbmcnKSB7XG4gICAgc3RyaW5nID0gJycgKyBzdHJpbmdcbiAgfVxuXG4gIHZhciBsZW4gPSBzdHJpbmcubGVuZ3RoXG4gIGlmIChsZW4gPT09IDApIHJldHVybiAwXG5cbiAgLy8gVXNlIGEgZm9yIGxvb3AgdG8gYXZvaWQgcmVjdXJzaW9uXG4gIHZhciBsb3dlcmVkQ2FzZSA9IGZhbHNlXG4gIGZvciAoOzspIHtcbiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICBjYXNlICdhc2NpaSc6XG4gICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuIGxlblxuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICBjYXNlIHVuZGVmaW5lZDpcbiAgICAgICAgcmV0dXJuIHV0ZjhUb0J5dGVzKHN0cmluZykubGVuZ3RoXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gbGVuICogMlxuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGxlbiA+Pj4gMVxuICAgICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgICAgcmV0dXJuIGJhc2U2NFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGhcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgcmV0dXJuIHV0ZjhUb0J5dGVzKHN0cmluZykubGVuZ3RoIC8vIGFzc3VtZSB1dGY4XG4gICAgICAgIGVuY29kaW5nID0gKCcnICsgZW5jb2RpbmcpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgbG93ZXJlZENhc2UgPSB0cnVlXG4gICAgfVxuICB9XG59XG5CdWZmZXIuYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGhcblxuZnVuY3Rpb24gc2xvd1RvU3RyaW5nIChlbmNvZGluZywgc3RhcnQsIGVuZCkge1xuICB2YXIgbG93ZXJlZENhc2UgPSBmYWxzZVxuXG4gIC8vIE5vIG5lZWQgdG8gdmVyaWZ5IHRoYXQgXCJ0aGlzLmxlbmd0aCA8PSBNQVhfVUlOVDMyXCIgc2luY2UgaXQncyBhIHJlYWQtb25seVxuICAvLyBwcm9wZXJ0eSBvZiBhIHR5cGVkIGFycmF5LlxuXG4gIC8vIFRoaXMgYmVoYXZlcyBuZWl0aGVyIGxpa2UgU3RyaW5nIG5vciBVaW50OEFycmF5IGluIHRoYXQgd2Ugc2V0IHN0YXJ0L2VuZFxuICAvLyB0byB0aGVpciB1cHBlci9sb3dlciBib3VuZHMgaWYgdGhlIHZhbHVlIHBhc3NlZCBpcyBvdXQgb2YgcmFuZ2UuXG4gIC8vIHVuZGVmaW5lZCBpcyBoYW5kbGVkIHNwZWNpYWxseSBhcyBwZXIgRUNNQS0yNjIgNnRoIEVkaXRpb24sXG4gIC8vIFNlY3Rpb24gMTMuMy4zLjcgUnVudGltZSBTZW1hbnRpY3M6IEtleWVkQmluZGluZ0luaXRpYWxpemF0aW9uLlxuICBpZiAoc3RhcnQgPT09IHVuZGVmaW5lZCB8fCBzdGFydCA8IDApIHtcbiAgICBzdGFydCA9IDBcbiAgfVxuICAvLyBSZXR1cm4gZWFybHkgaWYgc3RhcnQgPiB0aGlzLmxlbmd0aC4gRG9uZSBoZXJlIHRvIHByZXZlbnQgcG90ZW50aWFsIHVpbnQzMlxuICAvLyBjb2VyY2lvbiBmYWlsIGJlbG93LlxuICBpZiAoc3RhcnQgPiB0aGlzLmxlbmd0aCkge1xuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkIHx8IGVuZCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgZW5kID0gdGhpcy5sZW5ndGhcbiAgfVxuXG4gIGlmIChlbmQgPD0gMCkge1xuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgLy8gRm9yY2UgY29lcnNpb24gdG8gdWludDMyLiBUaGlzIHdpbGwgYWxzbyBjb2VyY2UgZmFsc2V5L05hTiB2YWx1ZXMgdG8gMC5cbiAgZW5kID4+Pj0gMFxuICBzdGFydCA+Pj49IDBcblxuICBpZiAoZW5kIDw9IHN0YXJ0KSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICBpZiAoIWVuY29kaW5nKSBlbmNvZGluZyA9ICd1dGY4J1xuXG4gIHdoaWxlICh0cnVlKSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGhleFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgICByZXR1cm4gdXRmOFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgICAgcmV0dXJuIGFzY2lpU2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiBsYXRpbjFTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICByZXR1cm4gYmFzZTY0U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuIHV0ZjE2bGVTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAobG93ZXJlZENhc2UpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgICAgICAgZW5jb2RpbmcgPSAoZW5jb2RpbmcgKyAnJykudG9Mb3dlckNhc2UoKVxuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICB9XG4gIH1cbn1cblxuLy8gVGhlIHByb3BlcnR5IGlzIHVzZWQgYnkgYEJ1ZmZlci5pc0J1ZmZlcmAgYW5kIGBpcy1idWZmZXJgIChpbiBTYWZhcmkgNS03KSB0byBkZXRlY3Rcbi8vIEJ1ZmZlciBpbnN0YW5jZXMuXG5CdWZmZXIucHJvdG90eXBlLl9pc0J1ZmZlciA9IHRydWVcblxuZnVuY3Rpb24gc3dhcCAoYiwgbiwgbSkge1xuICB2YXIgaSA9IGJbbl1cbiAgYltuXSA9IGJbbV1cbiAgYlttXSA9IGlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwMTYgPSBmdW5jdGlvbiBzd2FwMTYgKCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbiAlIDIgIT09IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDE2LWJpdHMnKVxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDIpIHtcbiAgICBzd2FwKHRoaXMsIGksIGkgKyAxKVxuICB9XG4gIHJldHVybiB0aGlzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc3dhcDMyID0gZnVuY3Rpb24gc3dhcDMyICgpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIGlmIChsZW4gJSA0ICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0J1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiAzMi1iaXRzJylcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSA0KSB7XG4gICAgc3dhcCh0aGlzLCBpLCBpICsgMylcbiAgICBzd2FwKHRoaXMsIGkgKyAxLCBpICsgMilcbiAgfVxuICByZXR1cm4gdGhpc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnN3YXA2NCA9IGZ1bmN0aW9uIHN3YXA2NCAoKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuICUgOCAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgNjQtYml0cycpXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gOCkge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDcpXG4gICAgc3dhcCh0aGlzLCBpICsgMSwgaSArIDYpXG4gICAgc3dhcCh0aGlzLCBpICsgMiwgaSArIDUpXG4gICAgc3dhcCh0aGlzLCBpICsgMywgaSArIDQpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nICgpIHtcbiAgdmFyIGxlbmd0aCA9IHRoaXMubGVuZ3RoIHwgMFxuICBpZiAobGVuZ3RoID09PSAwKSByZXR1cm4gJydcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHJldHVybiB1dGY4U2xpY2UodGhpcywgMCwgbGVuZ3RoKVxuICByZXR1cm4gc2xvd1RvU3RyaW5nLmFwcGx5KHRoaXMsIGFyZ3VtZW50cylcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5lcXVhbHMgPSBmdW5jdGlvbiBlcXVhbHMgKGIpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYikpIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXInKVxuICBpZiAodGhpcyA9PT0gYikgcmV0dXJuIHRydWVcbiAgcmV0dXJuIEJ1ZmZlci5jb21wYXJlKHRoaXMsIGIpID09PSAwXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuaW5zcGVjdCA9IGZ1bmN0aW9uIGluc3BlY3QgKCkge1xuICB2YXIgc3RyID0gJydcbiAgdmFyIG1heCA9IGV4cG9ydHMuSU5TUEVDVF9NQVhfQllURVNcbiAgaWYgKHRoaXMubGVuZ3RoID4gMCkge1xuICAgIHN0ciA9IHRoaXMudG9TdHJpbmcoJ2hleCcsIDAsIG1heCkubWF0Y2goLy57Mn0vZykuam9pbignICcpXG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbWF4KSBzdHIgKz0gJyAuLi4gJ1xuICB9XG4gIHJldHVybiAnPEJ1ZmZlciAnICsgc3RyICsgJz4nXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuY29tcGFyZSA9IGZ1bmN0aW9uIGNvbXBhcmUgKHRhcmdldCwgc3RhcnQsIGVuZCwgdGhpc1N0YXJ0LCB0aGlzRW5kKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKHRhcmdldCkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyJylcbiAgfVxuXG4gIGlmIChzdGFydCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgc3RhcnQgPSAwXG4gIH1cbiAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZW5kID0gdGFyZ2V0ID8gdGFyZ2V0Lmxlbmd0aCA6IDBcbiAgfVxuICBpZiAodGhpc1N0YXJ0ID09PSB1bmRlZmluZWQpIHtcbiAgICB0aGlzU3RhcnQgPSAwXG4gIH1cbiAgaWYgKHRoaXNFbmQgPT09IHVuZGVmaW5lZCkge1xuICAgIHRoaXNFbmQgPSB0aGlzLmxlbmd0aFxuICB9XG5cbiAgaWYgKHN0YXJ0IDwgMCB8fCBlbmQgPiB0YXJnZXQubGVuZ3RoIHx8IHRoaXNTdGFydCA8IDAgfHwgdGhpc0VuZCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ291dCBvZiByYW5nZSBpbmRleCcpXG4gIH1cblxuICBpZiAodGhpc1N0YXJ0ID49IHRoaXNFbmQgJiYgc3RhcnQgPj0gZW5kKSB7XG4gICAgcmV0dXJuIDBcbiAgfVxuICBpZiAodGhpc1N0YXJ0ID49IHRoaXNFbmQpIHtcbiAgICByZXR1cm4gLTFcbiAgfVxuICBpZiAoc3RhcnQgPj0gZW5kKSB7XG4gICAgcmV0dXJuIDFcbiAgfVxuXG4gIHN0YXJ0ID4+Pj0gMFxuICBlbmQgPj4+PSAwXG4gIHRoaXNTdGFydCA+Pj49IDBcbiAgdGhpc0VuZCA+Pj49IDBcblxuICBpZiAodGhpcyA9PT0gdGFyZ2V0KSByZXR1cm4gMFxuXG4gIHZhciB4ID0gdGhpc0VuZCAtIHRoaXNTdGFydFxuICB2YXIgeSA9IGVuZCAtIHN0YXJ0XG4gIHZhciBsZW4gPSBNYXRoLm1pbih4LCB5KVxuXG4gIHZhciB0aGlzQ29weSA9IHRoaXMuc2xpY2UodGhpc1N0YXJ0LCB0aGlzRW5kKVxuICB2YXIgdGFyZ2V0Q29weSA9IHRhcmdldC5zbGljZShzdGFydCwgZW5kKVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcbiAgICBpZiAodGhpc0NvcHlbaV0gIT09IHRhcmdldENvcHlbaV0pIHtcbiAgICAgIHggPSB0aGlzQ29weVtpXVxuICAgICAgeSA9IHRhcmdldENvcHlbaV1cbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgaWYgKHggPCB5KSByZXR1cm4gLTFcbiAgaWYgKHkgPCB4KSByZXR1cm4gMVxuICByZXR1cm4gMFxufVxuXG4vLyBGaW5kcyBlaXRoZXIgdGhlIGZpcnN0IGluZGV4IG9mIGB2YWxgIGluIGBidWZmZXJgIGF0IG9mZnNldCA+PSBgYnl0ZU9mZnNldGAsXG4vLyBPUiB0aGUgbGFzdCBpbmRleCBvZiBgdmFsYCBpbiBgYnVmZmVyYCBhdCBvZmZzZXQgPD0gYGJ5dGVPZmZzZXRgLlxuLy9cbi8vIEFyZ3VtZW50czpcbi8vIC0gYnVmZmVyIC0gYSBCdWZmZXIgdG8gc2VhcmNoXG4vLyAtIHZhbCAtIGEgc3RyaW5nLCBCdWZmZXIsIG9yIG51bWJlclxuLy8gLSBieXRlT2Zmc2V0IC0gYW4gaW5kZXggaW50byBgYnVmZmVyYDsgd2lsbCBiZSBjbGFtcGVkIHRvIGFuIGludDMyXG4vLyAtIGVuY29kaW5nIC0gYW4gb3B0aW9uYWwgZW5jb2RpbmcsIHJlbGV2YW50IGlzIHZhbCBpcyBhIHN0cmluZ1xuLy8gLSBkaXIgLSB0cnVlIGZvciBpbmRleE9mLCBmYWxzZSBmb3IgbGFzdEluZGV4T2ZcbmZ1bmN0aW9uIGJpZGlyZWN0aW9uYWxJbmRleE9mIChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcikge1xuICAvLyBFbXB0eSBidWZmZXIgbWVhbnMgbm8gbWF0Y2hcbiAgaWYgKGJ1ZmZlci5sZW5ndGggPT09IDApIHJldHVybiAtMVxuXG4gIC8vIE5vcm1hbGl6ZSBieXRlT2Zmc2V0XG4gIGlmICh0eXBlb2YgYnl0ZU9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICBlbmNvZGluZyA9IGJ5dGVPZmZzZXRcbiAgICBieXRlT2Zmc2V0ID0gMFxuICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPiAweDdmZmZmZmZmKSB7XG4gICAgYnl0ZU9mZnNldCA9IDB4N2ZmZmZmZmZcbiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0IDwgLTB4ODAwMDAwMDApIHtcbiAgICBieXRlT2Zmc2V0ID0gLTB4ODAwMDAwMDBcbiAgfVxuICBieXRlT2Zmc2V0ID0gK2J5dGVPZmZzZXQgIC8vIENvZXJjZSB0byBOdW1iZXIuXG4gIGlmIChpc05hTihieXRlT2Zmc2V0KSkge1xuICAgIC8vIGJ5dGVPZmZzZXQ6IGl0IGl0J3MgdW5kZWZpbmVkLCBudWxsLCBOYU4sIFwiZm9vXCIsIGV0Yywgc2VhcmNoIHdob2xlIGJ1ZmZlclxuICAgIGJ5dGVPZmZzZXQgPSBkaXIgPyAwIDogKGJ1ZmZlci5sZW5ndGggLSAxKVxuICB9XG5cbiAgLy8gTm9ybWFsaXplIGJ5dGVPZmZzZXQ6IG5lZ2F0aXZlIG9mZnNldHMgc3RhcnQgZnJvbSB0aGUgZW5kIG9mIHRoZSBidWZmZXJcbiAgaWYgKGJ5dGVPZmZzZXQgPCAwKSBieXRlT2Zmc2V0ID0gYnVmZmVyLmxlbmd0aCArIGJ5dGVPZmZzZXRcbiAgaWYgKGJ5dGVPZmZzZXQgPj0gYnVmZmVyLmxlbmd0aCkge1xuICAgIGlmIChkaXIpIHJldHVybiAtMVxuICAgIGVsc2UgYnl0ZU9mZnNldCA9IGJ1ZmZlci5sZW5ndGggLSAxXG4gIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA8IDApIHtcbiAgICBpZiAoZGlyKSBieXRlT2Zmc2V0ID0gMFxuICAgIGVsc2UgcmV0dXJuIC0xXG4gIH1cblxuICAvLyBOb3JtYWxpemUgdmFsXG4gIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgIHZhbCA9IEJ1ZmZlci5mcm9tKHZhbCwgZW5jb2RpbmcpXG4gIH1cblxuICAvLyBGaW5hbGx5LCBzZWFyY2ggZWl0aGVyIGluZGV4T2YgKGlmIGRpciBpcyB0cnVlKSBvciBsYXN0SW5kZXhPZlxuICBpZiAoQnVmZmVyLmlzQnVmZmVyKHZhbCkpIHtcbiAgICAvLyBTcGVjaWFsIGNhc2U6IGxvb2tpbmcgZm9yIGVtcHR5IHN0cmluZy9idWZmZXIgYWx3YXlzIGZhaWxzXG4gICAgaWYgKHZhbC5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiAtMVxuICAgIH1cbiAgICByZXR1cm4gYXJyYXlJbmRleE9mKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgdmFsID0gdmFsICYgMHhGRiAvLyBTZWFyY2ggZm9yIGEgYnl0ZSB2YWx1ZSBbMC0yNTVdXG4gICAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUICYmXG4gICAgICAgIHR5cGVvZiBVaW50OEFycmF5LnByb3RvdHlwZS5pbmRleE9mID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBpZiAoZGlyKSB7XG4gICAgICAgIHJldHVybiBVaW50OEFycmF5LnByb3RvdHlwZS5pbmRleE9mLmNhbGwoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gVWludDhBcnJheS5wcm90b3R5cGUubGFzdEluZGV4T2YuY2FsbChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldClcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGFycmF5SW5kZXhPZihidWZmZXIsIFsgdmFsIF0sIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpXG4gIH1cblxuICB0aHJvdyBuZXcgVHlwZUVycm9yKCd2YWwgbXVzdCBiZSBzdHJpbmcsIG51bWJlciBvciBCdWZmZXInKVxufVxuXG5mdW5jdGlvbiBhcnJheUluZGV4T2YgKGFyciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKSB7XG4gIHZhciBpbmRleFNpemUgPSAxXG4gIHZhciBhcnJMZW5ndGggPSBhcnIubGVuZ3RoXG4gIHZhciB2YWxMZW5ndGggPSB2YWwubGVuZ3RoXG5cbiAgaWYgKGVuY29kaW5nICE9PSB1bmRlZmluZWQpIHtcbiAgICBlbmNvZGluZyA9IFN0cmluZyhlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgIGlmIChlbmNvZGluZyA9PT0gJ3VjczInIHx8IGVuY29kaW5nID09PSAndWNzLTInIHx8XG4gICAgICAgIGVuY29kaW5nID09PSAndXRmMTZsZScgfHwgZW5jb2RpbmcgPT09ICd1dGYtMTZsZScpIHtcbiAgICAgIGlmIChhcnIubGVuZ3RoIDwgMiB8fCB2YWwubGVuZ3RoIDwgMikge1xuICAgICAgICByZXR1cm4gLTFcbiAgICAgIH1cbiAgICAgIGluZGV4U2l6ZSA9IDJcbiAgICAgIGFyckxlbmd0aCAvPSAyXG4gICAgICB2YWxMZW5ndGggLz0gMlxuICAgICAgYnl0ZU9mZnNldCAvPSAyXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVhZCAoYnVmLCBpKSB7XG4gICAgaWYgKGluZGV4U2l6ZSA9PT0gMSkge1xuICAgICAgcmV0dXJuIGJ1ZltpXVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gYnVmLnJlYWRVSW50MTZCRShpICogaW5kZXhTaXplKVxuICAgIH1cbiAgfVxuXG4gIHZhciBpXG4gIGlmIChkaXIpIHtcbiAgICB2YXIgZm91bmRJbmRleCA9IC0xXG4gICAgZm9yIChpID0gYnl0ZU9mZnNldDsgaSA8IGFyckxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAocmVhZChhcnIsIGkpID09PSByZWFkKHZhbCwgZm91bmRJbmRleCA9PT0gLTEgPyAwIDogaSAtIGZvdW5kSW5kZXgpKSB7XG4gICAgICAgIGlmIChmb3VuZEluZGV4ID09PSAtMSkgZm91bmRJbmRleCA9IGlcbiAgICAgICAgaWYgKGkgLSBmb3VuZEluZGV4ICsgMSA9PT0gdmFsTGVuZ3RoKSByZXR1cm4gZm91bmRJbmRleCAqIGluZGV4U2l6ZVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGZvdW5kSW5kZXggIT09IC0xKSBpIC09IGkgLSBmb3VuZEluZGV4XG4gICAgICAgIGZvdW5kSW5kZXggPSAtMVxuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAoYnl0ZU9mZnNldCArIHZhbExlbmd0aCA+IGFyckxlbmd0aCkgYnl0ZU9mZnNldCA9IGFyckxlbmd0aCAtIHZhbExlbmd0aFxuICAgIGZvciAoaSA9IGJ5dGVPZmZzZXQ7IGkgPj0gMDsgaS0tKSB7XG4gICAgICB2YXIgZm91bmQgPSB0cnVlXG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHZhbExlbmd0aDsgaisrKSB7XG4gICAgICAgIGlmIChyZWFkKGFyciwgaSArIGopICE9PSByZWFkKHZhbCwgaikpIHtcbiAgICAgICAgICBmb3VuZCA9IGZhbHNlXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGZvdW5kKSByZXR1cm4gaVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiAtMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluY2x1ZGVzID0gZnVuY3Rpb24gaW5jbHVkZXMgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIHRoaXMuaW5kZXhPZih2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSAhPT0gLTFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbmRleE9mID0gZnVuY3Rpb24gaW5kZXhPZiAodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykge1xuICByZXR1cm4gYmlkaXJlY3Rpb25hbEluZGV4T2YodGhpcywgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgdHJ1ZSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5sYXN0SW5kZXhPZiA9IGZ1bmN0aW9uIGxhc3RJbmRleE9mICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7XG4gIHJldHVybiBiaWRpcmVjdGlvbmFsSW5kZXhPZih0aGlzLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBmYWxzZSlcbn1cblxuZnVuY3Rpb24gaGV4V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICBvZmZzZXQgPSBOdW1iZXIob2Zmc2V0KSB8fCAwXG4gIHZhciByZW1haW5pbmcgPSBidWYubGVuZ3RoIC0gb2Zmc2V0XG4gIGlmICghbGVuZ3RoKSB7XG4gICAgbGVuZ3RoID0gcmVtYWluaW5nXG4gIH0gZWxzZSB7XG4gICAgbGVuZ3RoID0gTnVtYmVyKGxlbmd0aClcbiAgICBpZiAobGVuZ3RoID4gcmVtYWluaW5nKSB7XG4gICAgICBsZW5ndGggPSByZW1haW5pbmdcbiAgICB9XG4gIH1cblxuICAvLyBtdXN0IGJlIGFuIGV2ZW4gbnVtYmVyIG9mIGRpZ2l0c1xuICB2YXIgc3RyTGVuID0gc3RyaW5nLmxlbmd0aFxuICBpZiAoc3RyTGVuICUgMiAhPT0gMCkgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCBoZXggc3RyaW5nJylcblxuICBpZiAobGVuZ3RoID4gc3RyTGVuIC8gMikge1xuICAgIGxlbmd0aCA9IHN0ckxlbiAvIDJcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgdmFyIHBhcnNlZCA9IHBhcnNlSW50KHN0cmluZy5zdWJzdHIoaSAqIDIsIDIpLCAxNilcbiAgICBpZiAoaXNOYU4ocGFyc2VkKSkgcmV0dXJuIGlcbiAgICBidWZbb2Zmc2V0ICsgaV0gPSBwYXJzZWRcbiAgfVxuICByZXR1cm4gaVxufVxuXG5mdW5jdGlvbiB1dGY4V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcih1dGY4VG9CeXRlcyhzdHJpbmcsIGJ1Zi5sZW5ndGggLSBvZmZzZXQpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiBhc2NpaVdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIoYXNjaWlUb0J5dGVzKHN0cmluZyksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGxhdGluMVdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGFzY2lpV3JpdGUoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiBiYXNlNjRXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKGJhc2U2NFRvQnl0ZXMoc3RyaW5nKSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gdWNzMldyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIodXRmMTZsZVRvQnl0ZXMoc3RyaW5nLCBidWYubGVuZ3RoIC0gb2Zmc2V0KSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIHdyaXRlIChzdHJpbmcsIG9mZnNldCwgbGVuZ3RoLCBlbmNvZGluZykge1xuICAvLyBCdWZmZXIjd3JpdGUoc3RyaW5nKVxuICBpZiAob2Zmc2V0ID09PSB1bmRlZmluZWQpIHtcbiAgICBlbmNvZGluZyA9ICd1dGY4J1xuICAgIGxlbmd0aCA9IHRoaXMubGVuZ3RoXG4gICAgb2Zmc2V0ID0gMFxuICAvLyBCdWZmZXIjd3JpdGUoc3RyaW5nLCBlbmNvZGluZylcbiAgfSBlbHNlIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCAmJiB0eXBlb2Ygb2Zmc2V0ID09PSAnc3RyaW5nJykge1xuICAgIGVuY29kaW5nID0gb2Zmc2V0XG4gICAgbGVuZ3RoID0gdGhpcy5sZW5ndGhcbiAgICBvZmZzZXQgPSAwXG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcsIG9mZnNldFssIGxlbmd0aF1bLCBlbmNvZGluZ10pXG4gIH0gZWxzZSBpZiAoaXNGaW5pdGUob2Zmc2V0KSkge1xuICAgIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgICBpZiAoaXNGaW5pdGUobGVuZ3RoKSkge1xuICAgICAgbGVuZ3RoID0gbGVuZ3RoIHwgMFxuICAgICAgaWYgKGVuY29kaW5nID09PSB1bmRlZmluZWQpIGVuY29kaW5nID0gJ3V0ZjgnXG4gICAgfSBlbHNlIHtcbiAgICAgIGVuY29kaW5nID0gbGVuZ3RoXG4gICAgICBsZW5ndGggPSB1bmRlZmluZWRcbiAgICB9XG4gIC8vIGxlZ2FjeSB3cml0ZShzdHJpbmcsIGVuY29kaW5nLCBvZmZzZXQsIGxlbmd0aCkgLSByZW1vdmUgaW4gdjAuMTNcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAnQnVmZmVyLndyaXRlKHN0cmluZywgZW5jb2RpbmcsIG9mZnNldFssIGxlbmd0aF0pIGlzIG5vIGxvbmdlciBzdXBwb3J0ZWQnXG4gICAgKVxuICB9XG5cbiAgdmFyIHJlbWFpbmluZyA9IHRoaXMubGVuZ3RoIC0gb2Zmc2V0XG4gIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCB8fCBsZW5ndGggPiByZW1haW5pbmcpIGxlbmd0aCA9IHJlbWFpbmluZ1xuXG4gIGlmICgoc3RyaW5nLmxlbmd0aCA+IDAgJiYgKGxlbmd0aCA8IDAgfHwgb2Zmc2V0IDwgMCkpIHx8IG9mZnNldCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0F0dGVtcHQgdG8gd3JpdGUgb3V0c2lkZSBidWZmZXIgYm91bmRzJylcbiAgfVxuXG4gIGlmICghZW5jb2RpbmcpIGVuY29kaW5nID0gJ3V0ZjgnXG5cbiAgdmFyIGxvd2VyZWRDYXNlID0gZmFsc2VcbiAgZm9yICg7Oykge1xuICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgIHJldHVybiBoZXhXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgICAgcmV0dXJuIHV0ZjhXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICdhc2NpaSc6XG4gICAgICAgIHJldHVybiBhc2NpaVdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gbGF0aW4xV3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgICAgLy8gV2FybmluZzogbWF4TGVuZ3RoIG5vdCB0YWtlbiBpbnRvIGFjY291bnQgaW4gYmFzZTY0V3JpdGVcbiAgICAgICAgcmV0dXJuIGJhc2U2NFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiB1Y3MyV3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gICAgICAgIGVuY29kaW5nID0gKCcnICsgZW5jb2RpbmcpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgbG93ZXJlZENhc2UgPSB0cnVlXG4gICAgfVxuICB9XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OICgpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAnQnVmZmVyJyxcbiAgICBkYXRhOiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCh0aGlzLl9hcnIgfHwgdGhpcywgMClcbiAgfVxufVxuXG5mdW5jdGlvbiBiYXNlNjRTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIGlmIChzdGFydCA9PT0gMCAmJiBlbmQgPT09IGJ1Zi5sZW5ndGgpIHtcbiAgICByZXR1cm4gYmFzZTY0LmZyb21CeXRlQXJyYXkoYnVmKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBiYXNlNjQuZnJvbUJ5dGVBcnJheShidWYuc2xpY2Uoc3RhcnQsIGVuZCkpXG4gIH1cbn1cblxuZnVuY3Rpb24gdXRmOFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKVxuICB2YXIgcmVzID0gW11cblxuICB2YXIgaSA9IHN0YXJ0XG4gIHdoaWxlIChpIDwgZW5kKSB7XG4gICAgdmFyIGZpcnN0Qnl0ZSA9IGJ1ZltpXVxuICAgIHZhciBjb2RlUG9pbnQgPSBudWxsXG4gICAgdmFyIGJ5dGVzUGVyU2VxdWVuY2UgPSAoZmlyc3RCeXRlID4gMHhFRikgPyA0XG4gICAgICA6IChmaXJzdEJ5dGUgPiAweERGKSA/IDNcbiAgICAgIDogKGZpcnN0Qnl0ZSA+IDB4QkYpID8gMlxuICAgICAgOiAxXG5cbiAgICBpZiAoaSArIGJ5dGVzUGVyU2VxdWVuY2UgPD0gZW5kKSB7XG4gICAgICB2YXIgc2Vjb25kQnl0ZSwgdGhpcmRCeXRlLCBmb3VydGhCeXRlLCB0ZW1wQ29kZVBvaW50XG5cbiAgICAgIHN3aXRjaCAoYnl0ZXNQZXJTZXF1ZW5jZSkge1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgaWYgKGZpcnN0Qnl0ZSA8IDB4ODApIHtcbiAgICAgICAgICAgIGNvZGVQb2ludCA9IGZpcnN0Qnl0ZVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgc2Vjb25kQnl0ZSA9IGJ1ZltpICsgMV1cbiAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCkge1xuICAgICAgICAgICAgdGVtcENvZGVQb2ludCA9IChmaXJzdEJ5dGUgJiAweDFGKSA8PCAweDYgfCAoc2Vjb25kQnl0ZSAmIDB4M0YpXG4gICAgICAgICAgICBpZiAodGVtcENvZGVQb2ludCA+IDB4N0YpIHtcbiAgICAgICAgICAgICAgY29kZVBvaW50ID0gdGVtcENvZGVQb2ludFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgc2Vjb25kQnl0ZSA9IGJ1ZltpICsgMV1cbiAgICAgICAgICB0aGlyZEJ5dGUgPSBidWZbaSArIDJdXG4gICAgICAgICAgaWYgKChzZWNvbmRCeXRlICYgMHhDMCkgPT09IDB4ODAgJiYgKHRoaXJkQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4RikgPDwgMHhDIHwgKHNlY29uZEJ5dGUgJiAweDNGKSA8PCAweDYgfCAodGhpcmRCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHg3RkYgJiYgKHRlbXBDb2RlUG9pbnQgPCAweEQ4MDAgfHwgdGVtcENvZGVQb2ludCA+IDB4REZGRikpIHtcbiAgICAgICAgICAgICAgY29kZVBvaW50ID0gdGVtcENvZGVQb2ludFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgc2Vjb25kQnl0ZSA9IGJ1ZltpICsgMV1cbiAgICAgICAgICB0aGlyZEJ5dGUgPSBidWZbaSArIDJdXG4gICAgICAgICAgZm91cnRoQnl0ZSA9IGJ1ZltpICsgM11cbiAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAodGhpcmRCeXRlICYgMHhDMCkgPT09IDB4ODAgJiYgKGZvdXJ0aEJ5dGUgJiAweEMwKSA9PT0gMHg4MCkge1xuICAgICAgICAgICAgdGVtcENvZGVQb2ludCA9IChmaXJzdEJ5dGUgJiAweEYpIDw8IDB4MTIgfCAoc2Vjb25kQnl0ZSAmIDB4M0YpIDw8IDB4QyB8ICh0aGlyZEJ5dGUgJiAweDNGKSA8PCAweDYgfCAoZm91cnRoQnl0ZSAmIDB4M0YpXG4gICAgICAgICAgICBpZiAodGVtcENvZGVQb2ludCA+IDB4RkZGRiAmJiB0ZW1wQ29kZVBvaW50IDwgMHgxMTAwMDApIHtcbiAgICAgICAgICAgICAgY29kZVBvaW50ID0gdGVtcENvZGVQb2ludFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoY29kZVBvaW50ID09PSBudWxsKSB7XG4gICAgICAvLyB3ZSBkaWQgbm90IGdlbmVyYXRlIGEgdmFsaWQgY29kZVBvaW50IHNvIGluc2VydCBhXG4gICAgICAvLyByZXBsYWNlbWVudCBjaGFyIChVK0ZGRkQpIGFuZCBhZHZhbmNlIG9ubHkgMSBieXRlXG4gICAgICBjb2RlUG9pbnQgPSAweEZGRkRcbiAgICAgIGJ5dGVzUGVyU2VxdWVuY2UgPSAxXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPiAweEZGRkYpIHtcbiAgICAgIC8vIGVuY29kZSB0byB1dGYxNiAoc3Vycm9nYXRlIHBhaXIgZGFuY2UpXG4gICAgICBjb2RlUG9pbnQgLT0gMHgxMDAwMFxuICAgICAgcmVzLnB1c2goY29kZVBvaW50ID4+PiAxMCAmIDB4M0ZGIHwgMHhEODAwKVxuICAgICAgY29kZVBvaW50ID0gMHhEQzAwIHwgY29kZVBvaW50ICYgMHgzRkZcbiAgICB9XG5cbiAgICByZXMucHVzaChjb2RlUG9pbnQpXG4gICAgaSArPSBieXRlc1BlclNlcXVlbmNlXG4gIH1cblxuICByZXR1cm4gZGVjb2RlQ29kZVBvaW50c0FycmF5KHJlcylcbn1cblxuLy8gQmFzZWQgb24gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjI3NDcyNzIvNjgwNzQyLCB0aGUgYnJvd3NlciB3aXRoXG4vLyB0aGUgbG93ZXN0IGxpbWl0IGlzIENocm9tZSwgd2l0aCAweDEwMDAwIGFyZ3MuXG4vLyBXZSBnbyAxIG1hZ25pdHVkZSBsZXNzLCBmb3Igc2FmZXR5XG52YXIgTUFYX0FSR1VNRU5UU19MRU5HVEggPSAweDEwMDBcblxuZnVuY3Rpb24gZGVjb2RlQ29kZVBvaW50c0FycmF5IChjb2RlUG9pbnRzKSB7XG4gIHZhciBsZW4gPSBjb2RlUG9pbnRzLmxlbmd0aFxuICBpZiAobGVuIDw9IE1BWF9BUkdVTUVOVFNfTEVOR1RIKSB7XG4gICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoU3RyaW5nLCBjb2RlUG9pbnRzKSAvLyBhdm9pZCBleHRyYSBzbGljZSgpXG4gIH1cblxuICAvLyBEZWNvZGUgaW4gY2h1bmtzIHRvIGF2b2lkIFwiY2FsbCBzdGFjayBzaXplIGV4Y2VlZGVkXCIuXG4gIHZhciByZXMgPSAnJ1xuICB2YXIgaSA9IDBcbiAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICByZXMgKz0gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShcbiAgICAgIFN0cmluZyxcbiAgICAgIGNvZGVQb2ludHMuc2xpY2UoaSwgaSArPSBNQVhfQVJHVU1FTlRTX0xFTkdUSClcbiAgICApXG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBhc2NpaVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHJldCA9ICcnXG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcblxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgIHJldCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ1ZltpXSAmIDB4N0YpXG4gIH1cbiAgcmV0dXJuIHJldFxufVxuXG5mdW5jdGlvbiBsYXRpbjFTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciByZXQgPSAnJ1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG5cbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICByZXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShidWZbaV0pXG4gIH1cbiAgcmV0dXJuIHJldFxufVxuXG5mdW5jdGlvbiBoZXhTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciBsZW4gPSBidWYubGVuZ3RoXG5cbiAgaWYgKCFzdGFydCB8fCBzdGFydCA8IDApIHN0YXJ0ID0gMFxuICBpZiAoIWVuZCB8fCBlbmQgPCAwIHx8IGVuZCA+IGxlbikgZW5kID0gbGVuXG5cbiAgdmFyIG91dCA9ICcnXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgb3V0ICs9IHRvSGV4KGJ1ZltpXSlcbiAgfVxuICByZXR1cm4gb3V0XG59XG5cbmZ1bmN0aW9uIHV0ZjE2bGVTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciBieXRlcyA9IGJ1Zi5zbGljZShzdGFydCwgZW5kKVxuICB2YXIgcmVzID0gJydcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBieXRlcy5sZW5ndGg7IGkgKz0gMikge1xuICAgIHJlcyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ5dGVzW2ldICsgYnl0ZXNbaSArIDFdICogMjU2KVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zbGljZSA9IGZ1bmN0aW9uIHNsaWNlIChzdGFydCwgZW5kKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBzdGFydCA9IH5+c3RhcnRcbiAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW4gOiB+fmVuZFxuXG4gIGlmIChzdGFydCA8IDApIHtcbiAgICBzdGFydCArPSBsZW5cbiAgICBpZiAoc3RhcnQgPCAwKSBzdGFydCA9IDBcbiAgfSBlbHNlIGlmIChzdGFydCA+IGxlbikge1xuICAgIHN0YXJ0ID0gbGVuXG4gIH1cblxuICBpZiAoZW5kIDwgMCkge1xuICAgIGVuZCArPSBsZW5cbiAgICBpZiAoZW5kIDwgMCkgZW5kID0gMFxuICB9IGVsc2UgaWYgKGVuZCA+IGxlbikge1xuICAgIGVuZCA9IGxlblxuICB9XG5cbiAgaWYgKGVuZCA8IHN0YXJ0KSBlbmQgPSBzdGFydFxuXG4gIHZhciBuZXdCdWZcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgbmV3QnVmID0gdGhpcy5zdWJhcnJheShzdGFydCwgZW5kKVxuICAgIG5ld0J1Zi5fX3Byb3RvX18gPSBCdWZmZXIucHJvdG90eXBlXG4gIH0gZWxzZSB7XG4gICAgdmFyIHNsaWNlTGVuID0gZW5kIC0gc3RhcnRcbiAgICBuZXdCdWYgPSBuZXcgQnVmZmVyKHNsaWNlTGVuLCB1bmRlZmluZWQpXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzbGljZUxlbjsgKytpKSB7XG4gICAgICBuZXdCdWZbaV0gPSB0aGlzW2kgKyBzdGFydF1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3QnVmXG59XG5cbi8qXG4gKiBOZWVkIHRvIG1ha2Ugc3VyZSB0aGF0IGJ1ZmZlciBpc24ndCB0cnlpbmcgdG8gd3JpdGUgb3V0IG9mIGJvdW5kcy5cbiAqL1xuZnVuY3Rpb24gY2hlY2tPZmZzZXQgKG9mZnNldCwgZXh0LCBsZW5ndGgpIHtcbiAgaWYgKChvZmZzZXQgJSAxKSAhPT0gMCB8fCBvZmZzZXQgPCAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignb2Zmc2V0IGlzIG5vdCB1aW50JylcbiAgaWYgKG9mZnNldCArIGV4dCA+IGxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RyeWluZyB0byBhY2Nlc3MgYmV5b25kIGJ1ZmZlciBsZW5ndGgnKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50TEUgPSBmdW5jdGlvbiByZWFkVUludExFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XVxuICB2YXIgbXVsID0gMVxuICB2YXIgaSA9IDBcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyBpXSAqIG11bFxuICB9XG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50QkUgPSBmdW5jdGlvbiByZWFkVUludEJFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuICB9XG5cbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0ICsgLS1ieXRlTGVuZ3RoXVxuICB2YXIgbXVsID0gMVxuICB3aGlsZSAoYnl0ZUxlbmd0aCA+IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyAtLWJ5dGVMZW5ndGhdICogbXVsXG4gIH1cblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQ4ID0gZnVuY3Rpb24gcmVhZFVJbnQ4IChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMSwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiB0aGlzW29mZnNldF1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDE2TEUgPSBmdW5jdGlvbiByZWFkVUludDE2TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIHRoaXNbb2Zmc2V0XSB8ICh0aGlzW29mZnNldCArIDFdIDw8IDgpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQxNkJFID0gZnVuY3Rpb24gcmVhZFVJbnQxNkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiAodGhpc1tvZmZzZXRdIDw8IDgpIHwgdGhpc1tvZmZzZXQgKyAxXVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MzJMRSA9IGZ1bmN0aW9uIHJlYWRVSW50MzJMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAoKHRoaXNbb2Zmc2V0XSkgfFxuICAgICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOCkgfFxuICAgICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgMTYpKSArXG4gICAgICAodGhpc1tvZmZzZXQgKyAzXSAqIDB4MTAwMDAwMClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDMyQkUgPSBmdW5jdGlvbiByZWFkVUludDMyQkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSAqIDB4MTAwMDAwMCkgK1xuICAgICgodGhpc1tvZmZzZXQgKyAxXSA8PCAxNikgfFxuICAgICh0aGlzW29mZnNldCArIDJdIDw8IDgpIHxcbiAgICB0aGlzW29mZnNldCArIDNdKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnRMRSA9IGZ1bmN0aW9uIHJlYWRJbnRMRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldF1cbiAgdmFyIG11bCA9IDFcbiAgdmFyIGkgPSAwXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgaV0gKiBtdWxcbiAgfVxuICBtdWwgKj0gMHg4MFxuXG4gIGlmICh2YWwgPj0gbXVsKSB2YWwgLT0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpXG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnRCRSA9IGZ1bmN0aW9uIHJlYWRJbnRCRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuXG4gIHZhciBpID0gYnl0ZUxlbmd0aFxuICB2YXIgbXVsID0gMVxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAtLWldXG4gIHdoaWxlIChpID4gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIC0taV0gKiBtdWxcbiAgfVxuICBtdWwgKj0gMHg4MFxuXG4gIGlmICh2YWwgPj0gbXVsKSB2YWwgLT0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpXG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQ4ID0gZnVuY3Rpb24gcmVhZEludDggKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAxLCB0aGlzLmxlbmd0aClcbiAgaWYgKCEodGhpc1tvZmZzZXRdICYgMHg4MCkpIHJldHVybiAodGhpc1tvZmZzZXRdKVxuICByZXR1cm4gKCgweGZmIC0gdGhpc1tvZmZzZXRdICsgMSkgKiAtMSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MTZMRSA9IGZ1bmN0aW9uIHJlYWRJbnQxNkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldF0gfCAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KVxuICByZXR1cm4gKHZhbCAmIDB4ODAwMCkgPyB2YWwgfCAweEZGRkYwMDAwIDogdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDE2QkUgPSBmdW5jdGlvbiByZWFkSW50MTZCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAxXSB8ICh0aGlzW29mZnNldF0gPDwgOClcbiAgcmV0dXJuICh2YWwgJiAweDgwMDApID8gdmFsIHwgMHhGRkZGMDAwMCA6IHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQzMkxFID0gZnVuY3Rpb24gcmVhZEludDMyTEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSkgfFxuICAgICh0aGlzW29mZnNldCArIDFdIDw8IDgpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCAxNikgfFxuICAgICh0aGlzW29mZnNldCArIDNdIDw8IDI0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQzMkJFID0gZnVuY3Rpb24gcmVhZEludDMyQkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSA8PCAyNCkgfFxuICAgICh0aGlzW29mZnNldCArIDFdIDw8IDE2KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgOCkgfFxuICAgICh0aGlzW29mZnNldCArIDNdKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRGbG9hdExFID0gZnVuY3Rpb24gcmVhZEZsb2F0TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIHRydWUsIDIzLCA0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRGbG9hdEJFID0gZnVuY3Rpb24gcmVhZEZsb2F0QkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIGZhbHNlLCAyMywgNClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRG91YmxlTEUgPSBmdW5jdGlvbiByZWFkRG91YmxlTEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA4LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIHRydWUsIDUyLCA4KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWREb3VibGVCRSA9IGZ1bmN0aW9uIHJlYWREb3VibGVCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDgsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgZmFsc2UsIDUyLCA4KVxufVxuXG5mdW5jdGlvbiBjaGVja0ludCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBleHQsIG1heCwgbWluKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGJ1ZikpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wiYnVmZmVyXCIgYXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlciBpbnN0YW5jZScpXG4gIGlmICh2YWx1ZSA+IG1heCB8fCB2YWx1ZSA8IG1pbikgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1widmFsdWVcIiBhcmd1bWVudCBpcyBvdXQgb2YgYm91bmRzJylcbiAgaWYgKG9mZnNldCArIGV4dCA+IGJ1Zi5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludExFID0gZnVuY3Rpb24gd3JpdGVVSW50TEUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbWF4Qnl0ZXMgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCkgLSAxXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbWF4Qnl0ZXMsIDApXG4gIH1cblxuICB2YXIgbXVsID0gMVxuICB2YXIgaSA9IDBcbiAgdGhpc1tvZmZzZXRdID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICh2YWx1ZSAvIG11bCkgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludEJFID0gZnVuY3Rpb24gd3JpdGVVSW50QkUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbWF4Qnl0ZXMgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCkgLSAxXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbWF4Qnl0ZXMsIDApXG4gIH1cblxuICB2YXIgaSA9IGJ5dGVMZW5ndGggLSAxXG4gIHZhciBtdWwgPSAxXG4gIHRoaXNbb2Zmc2V0ICsgaV0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKC0taSA+PSAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICh2YWx1ZSAvIG11bCkgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDggPSBmdW5jdGlvbiB3cml0ZVVJbnQ4ICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDEsIDB4ZmYsIDApXG4gIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHZhbHVlID0gTWF0aC5mbG9vcih2YWx1ZSlcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDFcbn1cblxuZnVuY3Rpb24gb2JqZWN0V3JpdGVVSW50MTYgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuKSB7XG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZmZmICsgdmFsdWUgKyAxXG4gIGZvciAodmFyIGkgPSAwLCBqID0gTWF0aC5taW4oYnVmLmxlbmd0aCAtIG9mZnNldCwgMik7IGkgPCBqOyArK2kpIHtcbiAgICBidWZbb2Zmc2V0ICsgaV0gPSAodmFsdWUgJiAoMHhmZiA8PCAoOCAqIChsaXR0bGVFbmRpYW4gPyBpIDogMSAtIGkpKSkpID4+PlxuICAgICAgKGxpdHRsZUVuZGlhbiA/IGkgOiAxIC0gaSkgKiA4XG4gIH1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQxNkxFID0gZnVuY3Rpb24gd3JpdGVVSW50MTZMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweGZmZmYsIDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MTZCRSA9IGZ1bmN0aW9uIHdyaXRlVUludDE2QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHhmZmZmLCAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuZnVuY3Rpb24gb2JqZWN0V3JpdGVVSW50MzIgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuKSB7XG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZmZmZmZmZiArIHZhbHVlICsgMVxuICBmb3IgKHZhciBpID0gMCwgaiA9IE1hdGgubWluKGJ1Zi5sZW5ndGggLSBvZmZzZXQsIDQpOyBpIDwgajsgKytpKSB7XG4gICAgYnVmW29mZnNldCArIGldID0gKHZhbHVlID4+PiAobGl0dGxlRW5kaWFuID8gaSA6IDMgLSBpKSAqIDgpICYgMHhmZlxuICB9XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MzJMRSA9IGZ1bmN0aW9uIHdyaXRlVUludDMyTEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHhmZmZmZmZmZiwgMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSA+Pj4gMjQpXG4gICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQzMkJFID0gZnVuY3Rpb24gd3JpdGVVSW50MzJCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweGZmZmZmZmZmLCAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDI0KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDE2KVxuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludExFID0gZnVuY3Rpb24gd3JpdGVJbnRMRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgdmFyIGxpbWl0ID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGggLSAxKVxuXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbGltaXQgLSAxLCAtbGltaXQpXG4gIH1cblxuICB2YXIgaSA9IDBcbiAgdmFyIG11bCA9IDFcbiAgdmFyIHN1YiA9IDBcbiAgdGhpc1tvZmZzZXRdID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgaWYgKHZhbHVlIDwgMCAmJiBzdWIgPT09IDAgJiYgdGhpc1tvZmZzZXQgKyBpIC0gMV0gIT09IDApIHtcbiAgICAgIHN1YiA9IDFcbiAgICB9XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICgodmFsdWUgLyBtdWwpID4+IDApIC0gc3ViICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludEJFID0gZnVuY3Rpb24gd3JpdGVJbnRCRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgdmFyIGxpbWl0ID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGggLSAxKVxuXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbGltaXQgLSAxLCAtbGltaXQpXG4gIH1cblxuICB2YXIgaSA9IGJ5dGVMZW5ndGggLSAxXG4gIHZhciBtdWwgPSAxXG4gIHZhciBzdWIgPSAwXG4gIHRoaXNbb2Zmc2V0ICsgaV0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKC0taSA+PSAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgaWYgKHZhbHVlIDwgMCAmJiBzdWIgPT09IDAgJiYgdGhpc1tvZmZzZXQgKyBpICsgMV0gIT09IDApIHtcbiAgICAgIHN1YiA9IDFcbiAgICB9XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICgodmFsdWUgLyBtdWwpID4+IDApIC0gc3ViICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDggPSBmdW5jdGlvbiB3cml0ZUludDggKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMSwgMHg3ZiwgLTB4ODApXG4gIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHZhbHVlID0gTWF0aC5mbG9vcih2YWx1ZSlcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmICsgdmFsdWUgKyAxXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyAxXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQxNkxFID0gZnVuY3Rpb24gd3JpdGVJbnQxNkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4N2ZmZiwgLTB4ODAwMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDE2QkUgPSBmdW5jdGlvbiB3cml0ZUludDE2QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHg3ZmZmLCAtMHg4MDAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDMyTEUgPSBmdW5jdGlvbiB3cml0ZUludDMyTEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHg3ZmZmZmZmZiwgLTB4ODAwMDAwMDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiAxNilcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlID4+PiAyNClcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQzMkJFID0gZnVuY3Rpb24gd3JpdGVJbnQzMkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4N2ZmZmZmZmYsIC0weDgwMDAwMDAwKVxuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmZmZmZmZmYgKyB2YWx1ZSArIDFcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiAyNClcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiAxNilcbiAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgJiAweGZmKVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbmZ1bmN0aW9uIGNoZWNrSUVFRTc1NCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBleHQsIG1heCwgbWluKSB7XG4gIGlmIChvZmZzZXQgKyBleHQgPiBidWYubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJylcbiAgaWYgKG9mZnNldCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxufVxuXG5mdW5jdGlvbiB3cml0ZUZsb2F0IChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNoZWNrSUVFRTc1NChidWYsIHZhbHVlLCBvZmZzZXQsIDQsIDMuNDAyODIzNDY2Mzg1Mjg4NmUrMzgsIC0zLjQwMjgyMzQ2NjM4NTI4ODZlKzM4KVxuICB9XG4gIGllZWU3NTQud3JpdGUoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIDIzLCA0KVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRmxvYXRMRSA9IGZ1bmN0aW9uIHdyaXRlRmxvYXRMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRmxvYXQodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSwgbm9Bc3NlcnQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVGbG9hdEJFID0gZnVuY3Rpb24gd3JpdGVGbG9hdEJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVGbG9hdCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSwgbm9Bc3NlcnQpXG59XG5cbmZ1bmN0aW9uIHdyaXRlRG91YmxlIChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNoZWNrSUVFRTc1NChidWYsIHZhbHVlLCBvZmZzZXQsIDgsIDEuNzk3NjkzMTM0ODYyMzE1N0UrMzA4LCAtMS43OTc2OTMxMzQ4NjIzMTU3RSszMDgpXG4gIH1cbiAgaWVlZTc1NC53cml0ZShidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgNTIsIDgpXG4gIHJldHVybiBvZmZzZXQgKyA4XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVEb3VibGVMRSA9IGZ1bmN0aW9uIHdyaXRlRG91YmxlTEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZURvdWJsZSh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZURvdWJsZUJFID0gZnVuY3Rpb24gd3JpdGVEb3VibGVCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRG91YmxlKHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydClcbn1cblxuLy8gY29weSh0YXJnZXRCdWZmZXIsIHRhcmdldFN0YXJ0PTAsIHNvdXJjZVN0YXJ0PTAsIHNvdXJjZUVuZD1idWZmZXIubGVuZ3RoKVxuQnVmZmVyLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gY29weSAodGFyZ2V0LCB0YXJnZXRTdGFydCwgc3RhcnQsIGVuZCkge1xuICBpZiAoIXN0YXJ0KSBzdGFydCA9IDBcbiAgaWYgKCFlbmQgJiYgZW5kICE9PSAwKSBlbmQgPSB0aGlzLmxlbmd0aFxuICBpZiAodGFyZ2V0U3RhcnQgPj0gdGFyZ2V0Lmxlbmd0aCkgdGFyZ2V0U3RhcnQgPSB0YXJnZXQubGVuZ3RoXG4gIGlmICghdGFyZ2V0U3RhcnQpIHRhcmdldFN0YXJ0ID0gMFxuICBpZiAoZW5kID4gMCAmJiBlbmQgPCBzdGFydCkgZW5kID0gc3RhcnRcblxuICAvLyBDb3B5IDAgYnl0ZXM7IHdlJ3JlIGRvbmVcbiAgaWYgKGVuZCA9PT0gc3RhcnQpIHJldHVybiAwXG4gIGlmICh0YXJnZXQubGVuZ3RoID09PSAwIHx8IHRoaXMubGVuZ3RoID09PSAwKSByZXR1cm4gMFxuXG4gIC8vIEZhdGFsIGVycm9yIGNvbmRpdGlvbnNcbiAgaWYgKHRhcmdldFN0YXJ0IDwgMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCd0YXJnZXRTdGFydCBvdXQgb2YgYm91bmRzJylcbiAgfVxuICBpZiAoc3RhcnQgPCAwIHx8IHN0YXJ0ID49IHRoaXMubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignc291cmNlU3RhcnQgb3V0IG9mIGJvdW5kcycpXG4gIGlmIChlbmQgPCAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignc291cmNlRW5kIG91dCBvZiBib3VuZHMnKVxuXG4gIC8vIEFyZSB3ZSBvb2I/XG4gIGlmIChlbmQgPiB0aGlzLmxlbmd0aCkgZW5kID0gdGhpcy5sZW5ndGhcbiAgaWYgKHRhcmdldC5sZW5ndGggLSB0YXJnZXRTdGFydCA8IGVuZCAtIHN0YXJ0KSB7XG4gICAgZW5kID0gdGFyZ2V0Lmxlbmd0aCAtIHRhcmdldFN0YXJ0ICsgc3RhcnRcbiAgfVxuXG4gIHZhciBsZW4gPSBlbmQgLSBzdGFydFxuICB2YXIgaVxuXG4gIGlmICh0aGlzID09PSB0YXJnZXQgJiYgc3RhcnQgPCB0YXJnZXRTdGFydCAmJiB0YXJnZXRTdGFydCA8IGVuZCkge1xuICAgIC8vIGRlc2NlbmRpbmcgY29weSBmcm9tIGVuZFxuICAgIGZvciAoaSA9IGxlbiAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICB0YXJnZXRbaSArIHRhcmdldFN0YXJ0XSA9IHRoaXNbaSArIHN0YXJ0XVxuICAgIH1cbiAgfSBlbHNlIGlmIChsZW4gPCAxMDAwIHx8ICFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIC8vIGFzY2VuZGluZyBjb3B5IGZyb20gc3RhcnRcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcbiAgICAgIHRhcmdldFtpICsgdGFyZ2V0U3RhcnRdID0gdGhpc1tpICsgc3RhcnRdXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIFVpbnQ4QXJyYXkucHJvdG90eXBlLnNldC5jYWxsKFxuICAgICAgdGFyZ2V0LFxuICAgICAgdGhpcy5zdWJhcnJheShzdGFydCwgc3RhcnQgKyBsZW4pLFxuICAgICAgdGFyZ2V0U3RhcnRcbiAgICApXG4gIH1cblxuICByZXR1cm4gbGVuXG59XG5cbi8vIFVzYWdlOlxuLy8gICAgYnVmZmVyLmZpbGwobnVtYmVyWywgb2Zmc2V0WywgZW5kXV0pXG4vLyAgICBidWZmZXIuZmlsbChidWZmZXJbLCBvZmZzZXRbLCBlbmRdXSlcbi8vICAgIGJ1ZmZlci5maWxsKHN0cmluZ1ssIG9mZnNldFssIGVuZF1dWywgZW5jb2RpbmddKVxuQnVmZmVyLnByb3RvdHlwZS5maWxsID0gZnVuY3Rpb24gZmlsbCAodmFsLCBzdGFydCwgZW5kLCBlbmNvZGluZykge1xuICAvLyBIYW5kbGUgc3RyaW5nIGNhc2VzOlxuICBpZiAodHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpIHtcbiAgICBpZiAodHlwZW9mIHN0YXJ0ID09PSAnc3RyaW5nJykge1xuICAgICAgZW5jb2RpbmcgPSBzdGFydFxuICAgICAgc3RhcnQgPSAwXG4gICAgICBlbmQgPSB0aGlzLmxlbmd0aFxuICAgIH0gZWxzZSBpZiAodHlwZW9mIGVuZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGVuY29kaW5nID0gZW5kXG4gICAgICBlbmQgPSB0aGlzLmxlbmd0aFxuICAgIH1cbiAgICBpZiAodmFsLmxlbmd0aCA9PT0gMSkge1xuICAgICAgdmFyIGNvZGUgPSB2YWwuY2hhckNvZGVBdCgwKVxuICAgICAgaWYgKGNvZGUgPCAyNTYpIHtcbiAgICAgICAgdmFsID0gY29kZVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZW5jb2RpbmcgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgZW5jb2RpbmcgIT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdlbmNvZGluZyBtdXN0IGJlIGEgc3RyaW5nJylcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBlbmNvZGluZyA9PT0gJ3N0cmluZycgJiYgIUJ1ZmZlci5pc0VuY29kaW5nKGVuY29kaW5nKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICAgIH1cbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgIHZhbCA9IHZhbCAmIDI1NVxuICB9XG5cbiAgLy8gSW52YWxpZCByYW5nZXMgYXJlIG5vdCBzZXQgdG8gYSBkZWZhdWx0LCBzbyBjYW4gcmFuZ2UgY2hlY2sgZWFybHkuXG4gIGlmIChzdGFydCA8IDAgfHwgdGhpcy5sZW5ndGggPCBzdGFydCB8fCB0aGlzLmxlbmd0aCA8IGVuZCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdPdXQgb2YgcmFuZ2UgaW5kZXgnKVxuICB9XG5cbiAgaWYgKGVuZCA8PSBzdGFydCkge1xuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICBzdGFydCA9IHN0YXJ0ID4+PiAwXG4gIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gdGhpcy5sZW5ndGggOiBlbmQgPj4+IDBcblxuICBpZiAoIXZhbCkgdmFsID0gMFxuXG4gIHZhciBpXG4gIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgIGZvciAoaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICAgIHRoaXNbaV0gPSB2YWxcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFyIGJ5dGVzID0gQnVmZmVyLmlzQnVmZmVyKHZhbClcbiAgICAgID8gdmFsXG4gICAgICA6IHV0ZjhUb0J5dGVzKG5ldyBCdWZmZXIodmFsLCBlbmNvZGluZykudG9TdHJpbmcoKSlcbiAgICB2YXIgbGVuID0gYnl0ZXMubGVuZ3RoXG4gICAgZm9yIChpID0gMDsgaSA8IGVuZCAtIHN0YXJ0OyArK2kpIHtcbiAgICAgIHRoaXNbaSArIHN0YXJ0XSA9IGJ5dGVzW2kgJSBsZW5dXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXNcbn1cblxuLy8gSEVMUEVSIEZVTkNUSU9OU1xuLy8gPT09PT09PT09PT09PT09PVxuXG52YXIgSU5WQUxJRF9CQVNFNjRfUkUgPSAvW14rXFwvMC05QS1aYS16LV9dL2dcblxuZnVuY3Rpb24gYmFzZTY0Y2xlYW4gKHN0cikge1xuICAvLyBOb2RlIHN0cmlwcyBvdXQgaW52YWxpZCBjaGFyYWN0ZXJzIGxpa2UgXFxuIGFuZCBcXHQgZnJvbSB0aGUgc3RyaW5nLCBiYXNlNjQtanMgZG9lcyBub3RcbiAgc3RyID0gc3RyaW5ndHJpbShzdHIpLnJlcGxhY2UoSU5WQUxJRF9CQVNFNjRfUkUsICcnKVxuICAvLyBOb2RlIGNvbnZlcnRzIHN0cmluZ3Mgd2l0aCBsZW5ndGggPCAyIHRvICcnXG4gIGlmIChzdHIubGVuZ3RoIDwgMikgcmV0dXJuICcnXG4gIC8vIE5vZGUgYWxsb3dzIGZvciBub24tcGFkZGVkIGJhc2U2NCBzdHJpbmdzIChtaXNzaW5nIHRyYWlsaW5nID09PSksIGJhc2U2NC1qcyBkb2VzIG5vdFxuICB3aGlsZSAoc3RyLmxlbmd0aCAlIDQgIT09IDApIHtcbiAgICBzdHIgPSBzdHIgKyAnPSdcbiAgfVxuICByZXR1cm4gc3RyXG59XG5cbmZ1bmN0aW9uIHN0cmluZ3RyaW0gKHN0cikge1xuICBpZiAoc3RyLnRyaW0pIHJldHVybiBzdHIudHJpbSgpXG4gIHJldHVybiBzdHIucmVwbGFjZSgvXlxccyt8XFxzKyQvZywgJycpXG59XG5cbmZ1bmN0aW9uIHRvSGV4IChuKSB7XG4gIGlmIChuIDwgMTYpIHJldHVybiAnMCcgKyBuLnRvU3RyaW5nKDE2KVxuICByZXR1cm4gbi50b1N0cmluZygxNilcbn1cblxuZnVuY3Rpb24gdXRmOFRvQnl0ZXMgKHN0cmluZywgdW5pdHMpIHtcbiAgdW5pdHMgPSB1bml0cyB8fCBJbmZpbml0eVxuICB2YXIgY29kZVBvaW50XG4gIHZhciBsZW5ndGggPSBzdHJpbmcubGVuZ3RoXG4gIHZhciBsZWFkU3Vycm9nYXRlID0gbnVsbFxuICB2YXIgYnl0ZXMgPSBbXVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICBjb2RlUG9pbnQgPSBzdHJpbmcuY2hhckNvZGVBdChpKVxuXG4gICAgLy8gaXMgc3Vycm9nYXRlIGNvbXBvbmVudFxuICAgIGlmIChjb2RlUG9pbnQgPiAweEQ3RkYgJiYgY29kZVBvaW50IDwgMHhFMDAwKSB7XG4gICAgICAvLyBsYXN0IGNoYXIgd2FzIGEgbGVhZFxuICAgICAgaWYgKCFsZWFkU3Vycm9nYXRlKSB7XG4gICAgICAgIC8vIG5vIGxlYWQgeWV0XG4gICAgICAgIGlmIChjb2RlUG9pbnQgPiAweERCRkYpIHtcbiAgICAgICAgICAvLyB1bmV4cGVjdGVkIHRyYWlsXG4gICAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfSBlbHNlIGlmIChpICsgMSA9PT0gbGVuZ3RoKSB7XG4gICAgICAgICAgLy8gdW5wYWlyZWQgbGVhZFxuICAgICAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH1cblxuICAgICAgICAvLyB2YWxpZCBsZWFkXG4gICAgICAgIGxlYWRTdXJyb2dhdGUgPSBjb2RlUG9pbnRcblxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICAvLyAyIGxlYWRzIGluIGEgcm93XG4gICAgICBpZiAoY29kZVBvaW50IDwgMHhEQzAwKSB7XG4gICAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgICAgICBsZWFkU3Vycm9nYXRlID0gY29kZVBvaW50XG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIC8vIHZhbGlkIHN1cnJvZ2F0ZSBwYWlyXG4gICAgICBjb2RlUG9pbnQgPSAobGVhZFN1cnJvZ2F0ZSAtIDB4RDgwMCA8PCAxMCB8IGNvZGVQb2ludCAtIDB4REMwMCkgKyAweDEwMDAwXG4gICAgfSBlbHNlIGlmIChsZWFkU3Vycm9nYXRlKSB7XG4gICAgICAvLyB2YWxpZCBibXAgY2hhciwgYnV0IGxhc3QgY2hhciB3YXMgYSBsZWFkXG4gICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICB9XG5cbiAgICBsZWFkU3Vycm9nYXRlID0gbnVsbFxuXG4gICAgLy8gZW5jb2RlIHV0ZjhcbiAgICBpZiAoY29kZVBvaW50IDwgMHg4MCkge1xuICAgICAgaWYgKCh1bml0cyAtPSAxKSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKGNvZGVQb2ludClcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA8IDB4ODAwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDIpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDYgfCAweEMwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHgxMDAwMCkge1xuICAgICAgaWYgKCh1bml0cyAtPSAzKSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHhDIHwgMHhFMCxcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiAmIDB4M0YgfCAweDgwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHgxMTAwMDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gNCkgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgY29kZVBvaW50ID4+IDB4MTIgfCAweEYwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHhDICYgMHgzRiB8IDB4ODAsXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDYgJiAweDNGIHwgMHg4MCxcbiAgICAgICAgY29kZVBvaW50ICYgMHgzRiB8IDB4ODBcbiAgICAgIClcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGNvZGUgcG9pbnQnKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBieXRlc1xufVxuXG5mdW5jdGlvbiBhc2NpaVRvQnl0ZXMgKHN0cikge1xuICB2YXIgYnl0ZUFycmF5ID0gW11cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyArK2kpIHtcbiAgICAvLyBOb2RlJ3MgY29kZSBzZWVtcyB0byBiZSBkb2luZyB0aGlzIGFuZCBub3QgJiAweDdGLi5cbiAgICBieXRlQXJyYXkucHVzaChzdHIuY2hhckNvZGVBdChpKSAmIDB4RkYpXG4gIH1cbiAgcmV0dXJuIGJ5dGVBcnJheVxufVxuXG5mdW5jdGlvbiB1dGYxNmxlVG9CeXRlcyAoc3RyLCB1bml0cykge1xuICB2YXIgYywgaGksIGxvXG4gIHZhciBieXRlQXJyYXkgPSBbXVxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSkge1xuICAgIGlmICgodW5pdHMgLT0gMikgPCAwKSBicmVha1xuXG4gICAgYyA9IHN0ci5jaGFyQ29kZUF0KGkpXG4gICAgaGkgPSBjID4+IDhcbiAgICBsbyA9IGMgJSAyNTZcbiAgICBieXRlQXJyYXkucHVzaChsbylcbiAgICBieXRlQXJyYXkucHVzaChoaSlcbiAgfVxuXG4gIHJldHVybiBieXRlQXJyYXlcbn1cblxuZnVuY3Rpb24gYmFzZTY0VG9CeXRlcyAoc3RyKSB7XG4gIHJldHVybiBiYXNlNjQudG9CeXRlQXJyYXkoYmFzZTY0Y2xlYW4oc3RyKSlcbn1cblxuZnVuY3Rpb24gYmxpdEJ1ZmZlciAoc3JjLCBkc3QsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoKGkgKyBvZmZzZXQgPj0gZHN0Lmxlbmd0aCkgfHwgKGkgPj0gc3JjLmxlbmd0aCkpIGJyZWFrXG4gICAgZHN0W2kgKyBvZmZzZXRdID0gc3JjW2ldXG4gIH1cbiAgcmV0dXJuIGlcbn1cblxuZnVuY3Rpb24gaXNuYW4gKHZhbCkge1xuICByZXR1cm4gdmFsICE9PSB2YWwgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zZWxmLWNvbXBhcmVcbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vICh3ZWJwYWNrKS9+L25vZGUtbGlicy1icm93c2VyL34vYnVmZmVyL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAxNFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCdcblxuZXhwb3J0cy5ieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aFxuZXhwb3J0cy50b0J5dGVBcnJheSA9IHRvQnl0ZUFycmF5XG5leHBvcnRzLmZyb21CeXRlQXJyYXkgPSBmcm9tQnl0ZUFycmF5XG5cbnZhciBsb29rdXAgPSBbXVxudmFyIHJldkxvb2t1cCA9IFtdXG52YXIgQXJyID0gdHlwZW9mIFVpbnQ4QXJyYXkgIT09ICd1bmRlZmluZWQnID8gVWludDhBcnJheSA6IEFycmF5XG5cbnZhciBjb2RlID0gJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky8nXG5mb3IgKHZhciBpID0gMCwgbGVuID0gY29kZS5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICBsb29rdXBbaV0gPSBjb2RlW2ldXG4gIHJldkxvb2t1cFtjb2RlLmNoYXJDb2RlQXQoaSldID0gaVxufVxuXG5yZXZMb29rdXBbJy0nLmNoYXJDb2RlQXQoMCldID0gNjJcbnJldkxvb2t1cFsnXycuY2hhckNvZGVBdCgwKV0gPSA2M1xuXG5mdW5jdGlvbiBwbGFjZUhvbGRlcnNDb3VudCAoYjY0KSB7XG4gIHZhciBsZW4gPSBiNjQubGVuZ3RoXG4gIGlmIChsZW4gJSA0ID4gMCkge1xuICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBzdHJpbmcuIExlbmd0aCBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgNCcpXG4gIH1cblxuICAvLyB0aGUgbnVtYmVyIG9mIGVxdWFsIHNpZ25zIChwbGFjZSBob2xkZXJzKVxuICAvLyBpZiB0aGVyZSBhcmUgdHdvIHBsYWNlaG9sZGVycywgdGhhbiB0aGUgdHdvIGNoYXJhY3RlcnMgYmVmb3JlIGl0XG4gIC8vIHJlcHJlc2VudCBvbmUgYnl0ZVxuICAvLyBpZiB0aGVyZSBpcyBvbmx5IG9uZSwgdGhlbiB0aGUgdGhyZWUgY2hhcmFjdGVycyBiZWZvcmUgaXQgcmVwcmVzZW50IDIgYnl0ZXNcbiAgLy8gdGhpcyBpcyBqdXN0IGEgY2hlYXAgaGFjayB0byBub3QgZG8gaW5kZXhPZiB0d2ljZVxuICByZXR1cm4gYjY0W2xlbiAtIDJdID09PSAnPScgPyAyIDogYjY0W2xlbiAtIDFdID09PSAnPScgPyAxIDogMFxufVxuXG5mdW5jdGlvbiBieXRlTGVuZ3RoIChiNjQpIHtcbiAgLy8gYmFzZTY0IGlzIDQvMyArIHVwIHRvIHR3byBjaGFyYWN0ZXJzIG9mIHRoZSBvcmlnaW5hbCBkYXRhXG4gIHJldHVybiBiNjQubGVuZ3RoICogMyAvIDQgLSBwbGFjZUhvbGRlcnNDb3VudChiNjQpXG59XG5cbmZ1bmN0aW9uIHRvQnl0ZUFycmF5IChiNjQpIHtcbiAgdmFyIGksIGosIGwsIHRtcCwgcGxhY2VIb2xkZXJzLCBhcnJcbiAgdmFyIGxlbiA9IGI2NC5sZW5ndGhcbiAgcGxhY2VIb2xkZXJzID0gcGxhY2VIb2xkZXJzQ291bnQoYjY0KVxuXG4gIGFyciA9IG5ldyBBcnIobGVuICogMyAvIDQgLSBwbGFjZUhvbGRlcnMpXG5cbiAgLy8gaWYgdGhlcmUgYXJlIHBsYWNlaG9sZGVycywgb25seSBnZXQgdXAgdG8gdGhlIGxhc3QgY29tcGxldGUgNCBjaGFyc1xuICBsID0gcGxhY2VIb2xkZXJzID4gMCA/IGxlbiAtIDQgOiBsZW5cblxuICB2YXIgTCA9IDBcblxuICBmb3IgKGkgPSAwLCBqID0gMDsgaSA8IGw7IGkgKz0gNCwgaiArPSAzKSB7XG4gICAgdG1wID0gKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMTgpIHwgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldIDw8IDEyKSB8IChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDIpXSA8PCA2KSB8IHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMyldXG4gICAgYXJyW0wrK10gPSAodG1wID4+IDE2KSAmIDB4RkZcbiAgICBhcnJbTCsrXSA9ICh0bXAgPj4gOCkgJiAweEZGXG4gICAgYXJyW0wrK10gPSB0bXAgJiAweEZGXG4gIH1cblxuICBpZiAocGxhY2VIb2xkZXJzID09PSAyKSB7XG4gICAgdG1wID0gKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMikgfCAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPj4gNClcbiAgICBhcnJbTCsrXSA9IHRtcCAmIDB4RkZcbiAgfSBlbHNlIGlmIChwbGFjZUhvbGRlcnMgPT09IDEpIHtcbiAgICB0bXAgPSAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAxMCkgfCAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPDwgNCkgfCAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAyKV0gPj4gMilcbiAgICBhcnJbTCsrXSA9ICh0bXAgPj4gOCkgJiAweEZGXG4gICAgYXJyW0wrK10gPSB0bXAgJiAweEZGXG4gIH1cblxuICByZXR1cm4gYXJyXG59XG5cbmZ1bmN0aW9uIHRyaXBsZXRUb0Jhc2U2NCAobnVtKSB7XG4gIHJldHVybiBsb29rdXBbbnVtID4+IDE4ICYgMHgzRl0gKyBsb29rdXBbbnVtID4+IDEyICYgMHgzRl0gKyBsb29rdXBbbnVtID4+IDYgJiAweDNGXSArIGxvb2t1cFtudW0gJiAweDNGXVxufVxuXG5mdW5jdGlvbiBlbmNvZGVDaHVuayAodWludDgsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHRtcFxuICB2YXIgb3V0cHV0ID0gW11cbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpICs9IDMpIHtcbiAgICB0bXAgPSAodWludDhbaV0gPDwgMTYpICsgKHVpbnQ4W2kgKyAxXSA8PCA4KSArICh1aW50OFtpICsgMl0pXG4gICAgb3V0cHV0LnB1c2godHJpcGxldFRvQmFzZTY0KHRtcCkpXG4gIH1cbiAgcmV0dXJuIG91dHB1dC5qb2luKCcnKVxufVxuXG5mdW5jdGlvbiBmcm9tQnl0ZUFycmF5ICh1aW50OCkge1xuICB2YXIgdG1wXG4gIHZhciBsZW4gPSB1aW50OC5sZW5ndGhcbiAgdmFyIGV4dHJhQnl0ZXMgPSBsZW4gJSAzIC8vIGlmIHdlIGhhdmUgMSBieXRlIGxlZnQsIHBhZCAyIGJ5dGVzXG4gIHZhciBvdXRwdXQgPSAnJ1xuICB2YXIgcGFydHMgPSBbXVxuICB2YXIgbWF4Q2h1bmtMZW5ndGggPSAxNjM4MyAvLyBtdXN0IGJlIG11bHRpcGxlIG9mIDNcblxuICAvLyBnbyB0aHJvdWdoIHRoZSBhcnJheSBldmVyeSB0aHJlZSBieXRlcywgd2UnbGwgZGVhbCB3aXRoIHRyYWlsaW5nIHN0dWZmIGxhdGVyXG4gIGZvciAodmFyIGkgPSAwLCBsZW4yID0gbGVuIC0gZXh0cmFCeXRlczsgaSA8IGxlbjI7IGkgKz0gbWF4Q2h1bmtMZW5ndGgpIHtcbiAgICBwYXJ0cy5wdXNoKGVuY29kZUNodW5rKHVpbnQ4LCBpLCAoaSArIG1heENodW5rTGVuZ3RoKSA+IGxlbjIgPyBsZW4yIDogKGkgKyBtYXhDaHVua0xlbmd0aCkpKVxuICB9XG5cbiAgLy8gcGFkIHRoZSBlbmQgd2l0aCB6ZXJvcywgYnV0IG1ha2Ugc3VyZSB0byBub3QgZm9yZ2V0IHRoZSBleHRyYSBieXRlc1xuICBpZiAoZXh0cmFCeXRlcyA9PT0gMSkge1xuICAgIHRtcCA9IHVpbnQ4W2xlbiAtIDFdXG4gICAgb3V0cHV0ICs9IGxvb2t1cFt0bXAgPj4gMl1cbiAgICBvdXRwdXQgKz0gbG9va3VwWyh0bXAgPDwgNCkgJiAweDNGXVxuICAgIG91dHB1dCArPSAnPT0nXG4gIH0gZWxzZSBpZiAoZXh0cmFCeXRlcyA9PT0gMikge1xuICAgIHRtcCA9ICh1aW50OFtsZW4gLSAyXSA8PCA4KSArICh1aW50OFtsZW4gLSAxXSlcbiAgICBvdXRwdXQgKz0gbG9va3VwW3RtcCA+PiAxMF1cbiAgICBvdXRwdXQgKz0gbG9va3VwWyh0bXAgPj4gNCkgJiAweDNGXVxuICAgIG91dHB1dCArPSBsb29rdXBbKHRtcCA8PCAyKSAmIDB4M0ZdXG4gICAgb3V0cHV0ICs9ICc9J1xuICB9XG5cbiAgcGFydHMucHVzaChvdXRwdXQpXG5cbiAgcmV0dXJuIHBhcnRzLmpvaW4oJycpXG59XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAod2VicGFjaykvfi9ub2RlLWxpYnMtYnJvd3Nlci9+L2J1ZmZlci9+L2Jhc2U2NC1qcy9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gMTVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiZXhwb3J0cy5yZWFkID0gZnVuY3Rpb24gKGJ1ZmZlciwgb2Zmc2V0LCBpc0xFLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGUsIG1cbiAgdmFyIGVMZW4gPSBuQnl0ZXMgKiA4IC0gbUxlbiAtIDFcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDFcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxXG4gIHZhciBuQml0cyA9IC03XG4gIHZhciBpID0gaXNMRSA/IChuQnl0ZXMgLSAxKSA6IDBcbiAgdmFyIGQgPSBpc0xFID8gLTEgOiAxXG4gIHZhciBzID0gYnVmZmVyW29mZnNldCArIGldXG5cbiAgaSArPSBkXG5cbiAgZSA9IHMgJiAoKDEgPDwgKC1uQml0cykpIC0gMSlcbiAgcyA+Pj0gKC1uQml0cylcbiAgbkJpdHMgKz0gZUxlblxuICBmb3IgKDsgbkJpdHMgPiAwOyBlID0gZSAqIDI1NiArIGJ1ZmZlcltvZmZzZXQgKyBpXSwgaSArPSBkLCBuQml0cyAtPSA4KSB7fVxuXG4gIG0gPSBlICYgKCgxIDw8ICgtbkJpdHMpKSAtIDEpXG4gIGUgPj49ICgtbkJpdHMpXG4gIG5CaXRzICs9IG1MZW5cbiAgZm9yICg7IG5CaXRzID4gMDsgbSA9IG0gKiAyNTYgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBpZiAoZSA9PT0gMCkge1xuICAgIGUgPSAxIC0gZUJpYXNcbiAgfSBlbHNlIGlmIChlID09PSBlTWF4KSB7XG4gICAgcmV0dXJuIG0gPyBOYU4gOiAoKHMgPyAtMSA6IDEpICogSW5maW5pdHkpXG4gIH0gZWxzZSB7XG4gICAgbSA9IG0gKyBNYXRoLnBvdygyLCBtTGVuKVxuICAgIGUgPSBlIC0gZUJpYXNcbiAgfVxuICByZXR1cm4gKHMgPyAtMSA6IDEpICogbSAqIE1hdGgucG93KDIsIGUgLSBtTGVuKVxufVxuXG5leHBvcnRzLndyaXRlID0gZnVuY3Rpb24gKGJ1ZmZlciwgdmFsdWUsIG9mZnNldCwgaXNMRSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBlLCBtLCBjXG4gIHZhciBlTGVuID0gbkJ5dGVzICogOCAtIG1MZW4gLSAxXG4gIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxXG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMVxuICB2YXIgcnQgPSAobUxlbiA9PT0gMjMgPyBNYXRoLnBvdygyLCAtMjQpIC0gTWF0aC5wb3coMiwgLTc3KSA6IDApXG4gIHZhciBpID0gaXNMRSA/IDAgOiAobkJ5dGVzIC0gMSlcbiAgdmFyIGQgPSBpc0xFID8gMSA6IC0xXG4gIHZhciBzID0gdmFsdWUgPCAwIHx8ICh2YWx1ZSA9PT0gMCAmJiAxIC8gdmFsdWUgPCAwKSA/IDEgOiAwXG5cbiAgdmFsdWUgPSBNYXRoLmFicyh2YWx1ZSlcblxuICBpZiAoaXNOYU4odmFsdWUpIHx8IHZhbHVlID09PSBJbmZpbml0eSkge1xuICAgIG0gPSBpc05hTih2YWx1ZSkgPyAxIDogMFxuICAgIGUgPSBlTWF4XG4gIH0gZWxzZSB7XG4gICAgZSA9IE1hdGguZmxvb3IoTWF0aC5sb2codmFsdWUpIC8gTWF0aC5MTjIpXG4gICAgaWYgKHZhbHVlICogKGMgPSBNYXRoLnBvdygyLCAtZSkpIDwgMSkge1xuICAgICAgZS0tXG4gICAgICBjICo9IDJcbiAgICB9XG4gICAgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICB2YWx1ZSArPSBydCAvIGNcbiAgICB9IGVsc2Uge1xuICAgICAgdmFsdWUgKz0gcnQgKiBNYXRoLnBvdygyLCAxIC0gZUJpYXMpXG4gICAgfVxuICAgIGlmICh2YWx1ZSAqIGMgPj0gMikge1xuICAgICAgZSsrXG4gICAgICBjIC89IDJcbiAgICB9XG5cbiAgICBpZiAoZSArIGVCaWFzID49IGVNYXgpIHtcbiAgICAgIG0gPSAwXG4gICAgICBlID0gZU1heFxuICAgIH0gZWxzZSBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIG0gPSAodmFsdWUgKiBjIC0gMSkgKiBNYXRoLnBvdygyLCBtTGVuKVxuICAgICAgZSA9IGUgKyBlQmlhc1xuICAgIH0gZWxzZSB7XG4gICAgICBtID0gdmFsdWUgKiBNYXRoLnBvdygyLCBlQmlhcyAtIDEpICogTWF0aC5wb3coMiwgbUxlbilcbiAgICAgIGUgPSAwXG4gICAgfVxuICB9XG5cbiAgZm9yICg7IG1MZW4gPj0gODsgYnVmZmVyW29mZnNldCArIGldID0gbSAmIDB4ZmYsIGkgKz0gZCwgbSAvPSAyNTYsIG1MZW4gLT0gOCkge31cblxuICBlID0gKGUgPDwgbUxlbikgfCBtXG4gIGVMZW4gKz0gbUxlblxuICBmb3IgKDsgZUxlbiA+IDA7IGJ1ZmZlcltvZmZzZXQgKyBpXSA9IGUgJiAweGZmLCBpICs9IGQsIGUgLz0gMjU2LCBlTGVuIC09IDgpIHt9XG5cbiAgYnVmZmVyW29mZnNldCArIGkgLSBkXSB8PSBzICogMTI4XG59XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAod2VicGFjaykvfi9ub2RlLWxpYnMtYnJvd3Nlci9+L2J1ZmZlci9+L2llZWU3NTQvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDE2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKGFycikge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChhcnIpID09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gKHdlYnBhY2spL34vbm9kZS1saWJzLWJyb3dzZXIvfi9idWZmZXIvfi9pc2FycmF5L2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAxN1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXJcbnZhciBwcm9jZXNzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcblxuLy8gY2FjaGVkIGZyb20gd2hhdGV2ZXIgZ2xvYmFsIGlzIHByZXNlbnQgc28gdGhhdCB0ZXN0IHJ1bm5lcnMgdGhhdCBzdHViIGl0XG4vLyBkb24ndCBicmVhayB0aGluZ3MuICBCdXQgd2UgbmVlZCB0byB3cmFwIGl0IGluIGEgdHJ5IGNhdGNoIGluIGNhc2UgaXQgaXNcbi8vIHdyYXBwZWQgaW4gc3RyaWN0IG1vZGUgY29kZSB3aGljaCBkb2Vzbid0IGRlZmluZSBhbnkgZ2xvYmFscy4gIEl0J3MgaW5zaWRlIGFcbi8vIGZ1bmN0aW9uIGJlY2F1c2UgdHJ5L2NhdGNoZXMgZGVvcHRpbWl6ZSBpbiBjZXJ0YWluIGVuZ2luZXMuXG5cbnZhciBjYWNoZWRTZXRUaW1lb3V0O1xudmFyIGNhY2hlZENsZWFyVGltZW91dDtcblxuZnVuY3Rpb24gZGVmYXVsdFNldFRpbW91dCgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3NldFRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRDbGVhclRpbWVvdXQgKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG4oZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2V0VGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2YgY2xlYXJUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgIH1cbn0gKCkpXG5mdW5jdGlvbiBydW5UaW1lb3V0KGZ1bikge1xuICAgIGlmIChjYWNoZWRTZXRUaW1lb3V0ID09PSBzZXRUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICAvLyBpZiBzZXRUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkU2V0VGltZW91dCA9PT0gZGVmYXVsdFNldFRpbW91dCB8fCAhY2FjaGVkU2V0VGltZW91dCkgJiYgc2V0VGltZW91dCkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dChmdW4sIDApO1xuICAgIH0gY2F0Y2goZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwobnVsbCwgZnVuLCAwKTtcbiAgICAgICAgfSBjYXRjaChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yXG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKHRoaXMsIGZ1biwgMCk7XG4gICAgICAgIH1cbiAgICB9XG5cblxufVxuZnVuY3Rpb24gcnVuQ2xlYXJUaW1lb3V0KG1hcmtlcikge1xuICAgIGlmIChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGNsZWFyVGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICAvLyBpZiBjbGVhclRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGRlZmF1bHRDbGVhclRpbWVvdXQgfHwgIWNhY2hlZENsZWFyVGltZW91dCkgJiYgY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCAgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbChudWxsLCBtYXJrZXIpO1xuICAgICAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yLlxuICAgICAgICAgICAgLy8gU29tZSB2ZXJzaW9ucyBvZiBJLkUuIGhhdmUgZGlmZmVyZW50IHJ1bGVzIGZvciBjbGVhclRpbWVvdXQgdnMgc2V0VGltZW91dFxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKHRoaXMsIG1hcmtlcik7XG4gICAgICAgIH1cbiAgICB9XG5cblxuXG59XG52YXIgcXVldWUgPSBbXTtcbnZhciBkcmFpbmluZyA9IGZhbHNlO1xudmFyIGN1cnJlbnRRdWV1ZTtcbnZhciBxdWV1ZUluZGV4ID0gLTE7XG5cbmZ1bmN0aW9uIGNsZWFuVXBOZXh0VGljaygpIHtcbiAgICBpZiAoIWRyYWluaW5nIHx8ICFjdXJyZW50UXVldWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIGlmIChjdXJyZW50UXVldWUubGVuZ3RoKSB7XG4gICAgICAgIHF1ZXVlID0gY3VycmVudFF1ZXVlLmNvbmNhdChxdWV1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgIH1cbiAgICBpZiAocXVldWUubGVuZ3RoKSB7XG4gICAgICAgIGRyYWluUXVldWUoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRyYWluUXVldWUoKSB7XG4gICAgaWYgKGRyYWluaW5nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHRpbWVvdXQgPSBydW5UaW1lb3V0KGNsZWFuVXBOZXh0VGljayk7XG4gICAgZHJhaW5pbmcgPSB0cnVlO1xuXG4gICAgdmFyIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB3aGlsZShsZW4pIHtcbiAgICAgICAgY3VycmVudFF1ZXVlID0gcXVldWU7XG4gICAgICAgIHF1ZXVlID0gW107XG4gICAgICAgIHdoaWxlICgrK3F1ZXVlSW5kZXggPCBsZW4pIHtcbiAgICAgICAgICAgIGlmIChjdXJyZW50UXVldWUpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50UXVldWVbcXVldWVJbmRleF0ucnVuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgICAgICBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgfVxuICAgIGN1cnJlbnRRdWV1ZSA9IG51bGw7XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBydW5DbGVhclRpbWVvdXQodGltZW91dCk7XG59XG5cbnByb2Nlc3MubmV4dFRpY2sgPSBmdW5jdGlvbiAoZnVuKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcXVldWUucHVzaChuZXcgSXRlbShmdW4sIGFyZ3MpKTtcbiAgICBpZiAocXVldWUubGVuZ3RoID09PSAxICYmICFkcmFpbmluZykge1xuICAgICAgICBydW5UaW1lb3V0KGRyYWluUXVldWUpO1xuICAgIH1cbn07XG5cbi8vIHY4IGxpa2VzIHByZWRpY3RpYmxlIG9iamVjdHNcbmZ1bmN0aW9uIEl0ZW0oZnVuLCBhcnJheSkge1xuICAgIHRoaXMuZnVuID0gZnVuO1xuICAgIHRoaXMuYXJyYXkgPSBhcnJheTtcbn1cbkl0ZW0ucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmZ1bi5hcHBseShudWxsLCB0aGlzLmFycmF5KTtcbn07XG5wcm9jZXNzLnRpdGxlID0gJ2Jyb3dzZXInO1xucHJvY2Vzcy5icm93c2VyID0gdHJ1ZTtcbnByb2Nlc3MuZW52ID0ge307XG5wcm9jZXNzLmFyZ3YgPSBbXTtcbnByb2Nlc3MudmVyc2lvbiA9ICcnOyAvLyBlbXB0eSBzdHJpbmcgdG8gYXZvaWQgcmVnZXhwIGlzc3Vlc1xucHJvY2Vzcy52ZXJzaW9ucyA9IHt9O1xuXG5mdW5jdGlvbiBub29wKCkge31cblxucHJvY2Vzcy5vbiA9IG5vb3A7XG5wcm9jZXNzLmFkZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3Mub25jZSA9IG5vb3A7XG5wcm9jZXNzLm9mZiA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUxpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlQWxsTGlzdGVuZXJzID0gbm9vcDtcbnByb2Nlc3MuZW1pdCA9IG5vb3A7XG5cbnByb2Nlc3MuYmluZGluZyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcblxucHJvY2Vzcy5jd2QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnLycgfTtcbnByb2Nlc3MuY2hkaXIgPSBmdW5jdGlvbiAoZGlyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5wcm9jZXNzLnVtYXNrID0gZnVuY3Rpb24oKSB7IHJldHVybiAwOyB9O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gKHdlYnBhY2spL34vbm9kZS1saWJzLWJyb3dzZXIvfi9wcm9jZXNzL2Jyb3dzZXIuanNcbi8vIG1vZHVsZSBpZCA9IDE4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcblxuLy8gY29tcGFyZSBhbmQgaXNCdWZmZXIgdGFrZW4gZnJvbSBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlci9ibG9iLzY4MGU5ZTVlNDg4ZjIyYWFjMjc1OTlhNTdkYzg0NGE2MzE1OTI4ZGQvaW5kZXguanNcbi8vIG9yaWdpbmFsIG5vdGljZTpcblxuLyohXG4gKiBUaGUgYnVmZmVyIG1vZHVsZSBmcm9tIG5vZGUuanMsIGZvciB0aGUgYnJvd3Nlci5cbiAqXG4gKiBAYXV0aG9yICAgRmVyb3NzIEFib3VraGFkaWplaCA8ZmVyb3NzQGZlcm9zcy5vcmc+IDxodHRwOi8vZmVyb3NzLm9yZz5cbiAqIEBsaWNlbnNlICBNSVRcbiAqL1xuZnVuY3Rpb24gY29tcGFyZShhLCBiKSB7XG4gIGlmIChhID09PSBiKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cblxuICB2YXIgeCA9IGEubGVuZ3RoO1xuICB2YXIgeSA9IGIubGVuZ3RoO1xuXG4gIGZvciAodmFyIGkgPSAwLCBsZW4gPSBNYXRoLm1pbih4LCB5KTsgaSA8IGxlbjsgKytpKSB7XG4gICAgaWYgKGFbaV0gIT09IGJbaV0pIHtcbiAgICAgIHggPSBhW2ldO1xuICAgICAgeSA9IGJbaV07XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBpZiAoeCA8IHkpIHtcbiAgICByZXR1cm4gLTE7XG4gIH1cbiAgaWYgKHkgPCB4KSB7XG4gICAgcmV0dXJuIDE7XG4gIH1cbiAgcmV0dXJuIDA7XG59XG5mdW5jdGlvbiBpc0J1ZmZlcihiKSB7XG4gIGlmIChnbG9iYWwuQnVmZmVyICYmIHR5cGVvZiBnbG9iYWwuQnVmZmVyLmlzQnVmZmVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGdsb2JhbC5CdWZmZXIuaXNCdWZmZXIoYik7XG4gIH1cbiAgcmV0dXJuICEhKGIgIT0gbnVsbCAmJiBiLl9pc0J1ZmZlcik7XG59XG5cbi8vIGJhc2VkIG9uIG5vZGUgYXNzZXJ0LCBvcmlnaW5hbCBub3RpY2U6XG5cbi8vIGh0dHA6Ly93aWtpLmNvbW1vbmpzLm9yZy93aWtpL1VuaXRfVGVzdGluZy8xLjBcbi8vXG4vLyBUSElTIElTIE5PVCBURVNURUQgTk9SIExJS0VMWSBUTyBXT1JLIE9VVFNJREUgVjghXG4vL1xuLy8gT3JpZ2luYWxseSBmcm9tIG5hcndoYWwuanMgKGh0dHA6Ly9uYXJ3aGFsanMub3JnKVxuLy8gQ29weXJpZ2h0IChjKSAyMDA5IFRob21hcyBSb2JpbnNvbiA8Mjgwbm9ydGguY29tPlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbi8vIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlICdTb2Z0d2FyZScpLCB0b1xuLy8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGVcbi8vIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vclxuLy8gc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbi8vIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbi8vIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCAnQVMgSVMnLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4vLyBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbi8vIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuLy8gQVVUSE9SUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU5cbi8vIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT05cbi8vIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG52YXIgdXRpbCA9IHJlcXVpcmUoJ3V0aWwvJyk7XG52YXIgaGFzT3duID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBwU2xpY2UgPSBBcnJheS5wcm90b3R5cGUuc2xpY2U7XG52YXIgZnVuY3Rpb25zSGF2ZU5hbWVzID0gKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGZvbygpIHt9Lm5hbWUgPT09ICdmb28nO1xufSgpKTtcbmZ1bmN0aW9uIHBUb1N0cmluZyAob2JqKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqKTtcbn1cbmZ1bmN0aW9uIGlzVmlldyhhcnJidWYpIHtcbiAgaWYgKGlzQnVmZmVyKGFycmJ1ZikpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKHR5cGVvZiBnbG9iYWwuQXJyYXlCdWZmZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKHR5cGVvZiBBcnJheUJ1ZmZlci5pc1ZpZXcgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gQXJyYXlCdWZmZXIuaXNWaWV3KGFycmJ1Zik7XG4gIH1cbiAgaWYgKCFhcnJidWYpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKGFycmJ1ZiBpbnN0YW5jZW9mIERhdGFWaWV3KSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaWYgKGFycmJ1Zi5idWZmZXIgJiYgYXJyYnVmLmJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuLy8gMS4gVGhlIGFzc2VydCBtb2R1bGUgcHJvdmlkZXMgZnVuY3Rpb25zIHRoYXQgdGhyb3dcbi8vIEFzc2VydGlvbkVycm9yJ3Mgd2hlbiBwYXJ0aWN1bGFyIGNvbmRpdGlvbnMgYXJlIG5vdCBtZXQuIFRoZVxuLy8gYXNzZXJ0IG1vZHVsZSBtdXN0IGNvbmZvcm0gdG8gdGhlIGZvbGxvd2luZyBpbnRlcmZhY2UuXG5cbnZhciBhc3NlcnQgPSBtb2R1bGUuZXhwb3J0cyA9IG9rO1xuXG4vLyAyLiBUaGUgQXNzZXJ0aW9uRXJyb3IgaXMgZGVmaW5lZCBpbiBhc3NlcnQuXG4vLyBuZXcgYXNzZXJ0LkFzc2VydGlvbkVycm9yKHsgbWVzc2FnZTogbWVzc2FnZSxcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3R1YWw6IGFjdHVhbCxcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHBlY3RlZDogZXhwZWN0ZWQgfSlcblxudmFyIHJlZ2V4ID0gL1xccypmdW5jdGlvblxccysoW15cXChcXHNdKilcXHMqLztcbi8vIGJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9samhhcmIvZnVuY3Rpb24ucHJvdG90eXBlLm5hbWUvYmxvYi9hZGVlZWVjOGJmY2M2MDY4YjE4N2Q3ZDlmYjNkNWJiMWQzYTMwODk5L2ltcGxlbWVudGF0aW9uLmpzXG5mdW5jdGlvbiBnZXROYW1lKGZ1bmMpIHtcbiAgaWYgKCF1dGlsLmlzRnVuY3Rpb24oZnVuYykpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKGZ1bmN0aW9uc0hhdmVOYW1lcykge1xuICAgIHJldHVybiBmdW5jLm5hbWU7XG4gIH1cbiAgdmFyIHN0ciA9IGZ1bmMudG9TdHJpbmcoKTtcbiAgdmFyIG1hdGNoID0gc3RyLm1hdGNoKHJlZ2V4KTtcbiAgcmV0dXJuIG1hdGNoICYmIG1hdGNoWzFdO1xufVxuYXNzZXJ0LkFzc2VydGlvbkVycm9yID0gZnVuY3Rpb24gQXNzZXJ0aW9uRXJyb3Iob3B0aW9ucykge1xuICB0aGlzLm5hbWUgPSAnQXNzZXJ0aW9uRXJyb3InO1xuICB0aGlzLmFjdHVhbCA9IG9wdGlvbnMuYWN0dWFsO1xuICB0aGlzLmV4cGVjdGVkID0gb3B0aW9ucy5leHBlY3RlZDtcbiAgdGhpcy5vcGVyYXRvciA9IG9wdGlvbnMub3BlcmF0b3I7XG4gIGlmIChvcHRpb25zLm1lc3NhZ2UpIHtcbiAgICB0aGlzLm1lc3NhZ2UgPSBvcHRpb25zLm1lc3NhZ2U7XG4gICAgdGhpcy5nZW5lcmF0ZWRNZXNzYWdlID0gZmFsc2U7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5tZXNzYWdlID0gZ2V0TWVzc2FnZSh0aGlzKTtcbiAgICB0aGlzLmdlbmVyYXRlZE1lc3NhZ2UgPSB0cnVlO1xuICB9XG4gIHZhciBzdGFja1N0YXJ0RnVuY3Rpb24gPSBvcHRpb25zLnN0YWNrU3RhcnRGdW5jdGlvbiB8fCBmYWlsO1xuICBpZiAoRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UpIHtcbiAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCBzdGFja1N0YXJ0RnVuY3Rpb24pO1xuICB9IGVsc2Uge1xuICAgIC8vIG5vbiB2OCBicm93c2VycyBzbyB3ZSBjYW4gaGF2ZSBhIHN0YWNrdHJhY2VcbiAgICB2YXIgZXJyID0gbmV3IEVycm9yKCk7XG4gICAgaWYgKGVyci5zdGFjaykge1xuICAgICAgdmFyIG91dCA9IGVyci5zdGFjaztcblxuICAgICAgLy8gdHJ5IHRvIHN0cmlwIHVzZWxlc3MgZnJhbWVzXG4gICAgICB2YXIgZm5fbmFtZSA9IGdldE5hbWUoc3RhY2tTdGFydEZ1bmN0aW9uKTtcbiAgICAgIHZhciBpZHggPSBvdXQuaW5kZXhPZignXFxuJyArIGZuX25hbWUpO1xuICAgICAgaWYgKGlkeCA+PSAwKSB7XG4gICAgICAgIC8vIG9uY2Ugd2UgaGF2ZSBsb2NhdGVkIHRoZSBmdW5jdGlvbiBmcmFtZVxuICAgICAgICAvLyB3ZSBuZWVkIHRvIHN0cmlwIG91dCBldmVyeXRoaW5nIGJlZm9yZSBpdCAoYW5kIGl0cyBsaW5lKVxuICAgICAgICB2YXIgbmV4dF9saW5lID0gb3V0LmluZGV4T2YoJ1xcbicsIGlkeCArIDEpO1xuICAgICAgICBvdXQgPSBvdXQuc3Vic3RyaW5nKG5leHRfbGluZSArIDEpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnN0YWNrID0gb3V0O1xuICAgIH1cbiAgfVxufTtcblxuLy8gYXNzZXJ0LkFzc2VydGlvbkVycm9yIGluc3RhbmNlb2YgRXJyb3JcbnV0aWwuaW5oZXJpdHMoYXNzZXJ0LkFzc2VydGlvbkVycm9yLCBFcnJvcik7XG5cbmZ1bmN0aW9uIHRydW5jYXRlKHMsIG4pIHtcbiAgaWYgKHR5cGVvZiBzID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBzLmxlbmd0aCA8IG4gPyBzIDogcy5zbGljZSgwLCBuKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gcztcbiAgfVxufVxuZnVuY3Rpb24gaW5zcGVjdChzb21ldGhpbmcpIHtcbiAgaWYgKGZ1bmN0aW9uc0hhdmVOYW1lcyB8fCAhdXRpbC5pc0Z1bmN0aW9uKHNvbWV0aGluZykpIHtcbiAgICByZXR1cm4gdXRpbC5pbnNwZWN0KHNvbWV0aGluZyk7XG4gIH1cbiAgdmFyIHJhd25hbWUgPSBnZXROYW1lKHNvbWV0aGluZyk7XG4gIHZhciBuYW1lID0gcmF3bmFtZSA/ICc6ICcgKyByYXduYW1lIDogJyc7XG4gIHJldHVybiAnW0Z1bmN0aW9uJyArICBuYW1lICsgJ10nO1xufVxuZnVuY3Rpb24gZ2V0TWVzc2FnZShzZWxmKSB7XG4gIHJldHVybiB0cnVuY2F0ZShpbnNwZWN0KHNlbGYuYWN0dWFsKSwgMTI4KSArICcgJyArXG4gICAgICAgICBzZWxmLm9wZXJhdG9yICsgJyAnICtcbiAgICAgICAgIHRydW5jYXRlKGluc3BlY3Qoc2VsZi5leHBlY3RlZCksIDEyOCk7XG59XG5cbi8vIEF0IHByZXNlbnQgb25seSB0aGUgdGhyZWUga2V5cyBtZW50aW9uZWQgYWJvdmUgYXJlIHVzZWQgYW5kXG4vLyB1bmRlcnN0b29kIGJ5IHRoZSBzcGVjLiBJbXBsZW1lbnRhdGlvbnMgb3Igc3ViIG1vZHVsZXMgY2FuIHBhc3Ncbi8vIG90aGVyIGtleXMgdG8gdGhlIEFzc2VydGlvbkVycm9yJ3MgY29uc3RydWN0b3IgLSB0aGV5IHdpbGwgYmVcbi8vIGlnbm9yZWQuXG5cbi8vIDMuIEFsbCBvZiB0aGUgZm9sbG93aW5nIGZ1bmN0aW9ucyBtdXN0IHRocm93IGFuIEFzc2VydGlvbkVycm9yXG4vLyB3aGVuIGEgY29ycmVzcG9uZGluZyBjb25kaXRpb24gaXMgbm90IG1ldCwgd2l0aCBhIG1lc3NhZ2UgdGhhdFxuLy8gbWF5IGJlIHVuZGVmaW5lZCBpZiBub3QgcHJvdmlkZWQuICBBbGwgYXNzZXJ0aW9uIG1ldGhvZHMgcHJvdmlkZVxuLy8gYm90aCB0aGUgYWN0dWFsIGFuZCBleHBlY3RlZCB2YWx1ZXMgdG8gdGhlIGFzc2VydGlvbiBlcnJvciBmb3Jcbi8vIGRpc3BsYXkgcHVycG9zZXMuXG5cbmZ1bmN0aW9uIGZhaWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSwgb3BlcmF0b3IsIHN0YWNrU3RhcnRGdW5jdGlvbikge1xuICB0aHJvdyBuZXcgYXNzZXJ0LkFzc2VydGlvbkVycm9yKHtcbiAgICBtZXNzYWdlOiBtZXNzYWdlLFxuICAgIGFjdHVhbDogYWN0dWFsLFxuICAgIGV4cGVjdGVkOiBleHBlY3RlZCxcbiAgICBvcGVyYXRvcjogb3BlcmF0b3IsXG4gICAgc3RhY2tTdGFydEZ1bmN0aW9uOiBzdGFja1N0YXJ0RnVuY3Rpb25cbiAgfSk7XG59XG5cbi8vIEVYVEVOU0lPTiEgYWxsb3dzIGZvciB3ZWxsIGJlaGF2ZWQgZXJyb3JzIGRlZmluZWQgZWxzZXdoZXJlLlxuYXNzZXJ0LmZhaWwgPSBmYWlsO1xuXG4vLyA0LiBQdXJlIGFzc2VydGlvbiB0ZXN0cyB3aGV0aGVyIGEgdmFsdWUgaXMgdHJ1dGh5LCBhcyBkZXRlcm1pbmVkXG4vLyBieSAhIWd1YXJkLlxuLy8gYXNzZXJ0Lm9rKGd1YXJkLCBtZXNzYWdlX29wdCk7XG4vLyBUaGlzIHN0YXRlbWVudCBpcyBlcXVpdmFsZW50IHRvIGFzc2VydC5lcXVhbCh0cnVlLCAhIWd1YXJkLFxuLy8gbWVzc2FnZV9vcHQpOy4gVG8gdGVzdCBzdHJpY3RseSBmb3IgdGhlIHZhbHVlIHRydWUsIHVzZVxuLy8gYXNzZXJ0LnN0cmljdEVxdWFsKHRydWUsIGd1YXJkLCBtZXNzYWdlX29wdCk7LlxuXG5mdW5jdGlvbiBvayh2YWx1ZSwgbWVzc2FnZSkge1xuICBpZiAoIXZhbHVlKSBmYWlsKHZhbHVlLCB0cnVlLCBtZXNzYWdlLCAnPT0nLCBhc3NlcnQub2spO1xufVxuYXNzZXJ0Lm9rID0gb2s7XG5cbi8vIDUuIFRoZSBlcXVhbGl0eSBhc3NlcnRpb24gdGVzdHMgc2hhbGxvdywgY29lcmNpdmUgZXF1YWxpdHkgd2l0aFxuLy8gPT0uXG4vLyBhc3NlcnQuZXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZV9vcHQpO1xuXG5hc3NlcnQuZXF1YWwgPSBmdW5jdGlvbiBlcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlKSB7XG4gIGlmIChhY3R1YWwgIT0gZXhwZWN0ZWQpIGZhaWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSwgJz09JywgYXNzZXJ0LmVxdWFsKTtcbn07XG5cbi8vIDYuIFRoZSBub24tZXF1YWxpdHkgYXNzZXJ0aW9uIHRlc3RzIGZvciB3aGV0aGVyIHR3byBvYmplY3RzIGFyZSBub3QgZXF1YWxcbi8vIHdpdGggIT0gYXNzZXJ0Lm5vdEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2Vfb3B0KTtcblxuYXNzZXJ0Lm5vdEVxdWFsID0gZnVuY3Rpb24gbm90RXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSkge1xuICBpZiAoYWN0dWFsID09IGV4cGVjdGVkKSB7XG4gICAgZmFpbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlLCAnIT0nLCBhc3NlcnQubm90RXF1YWwpO1xuICB9XG59O1xuXG4vLyA3LiBUaGUgZXF1aXZhbGVuY2UgYXNzZXJ0aW9uIHRlc3RzIGEgZGVlcCBlcXVhbGl0eSByZWxhdGlvbi5cbi8vIGFzc2VydC5kZWVwRXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZV9vcHQpO1xuXG5hc3NlcnQuZGVlcEVxdWFsID0gZnVuY3Rpb24gZGVlcEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpIHtcbiAgaWYgKCFfZGVlcEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIGZhbHNlKSkge1xuICAgIGZhaWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSwgJ2RlZXBFcXVhbCcsIGFzc2VydC5kZWVwRXF1YWwpO1xuICB9XG59O1xuXG5hc3NlcnQuZGVlcFN0cmljdEVxdWFsID0gZnVuY3Rpb24gZGVlcFN0cmljdEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpIHtcbiAgaWYgKCFfZGVlcEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIHRydWUpKSB7XG4gICAgZmFpbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlLCAnZGVlcFN0cmljdEVxdWFsJywgYXNzZXJ0LmRlZXBTdHJpY3RFcXVhbCk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIF9kZWVwRXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgc3RyaWN0LCBtZW1vcykge1xuICAvLyA3LjEuIEFsbCBpZGVudGljYWwgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBhcyBkZXRlcm1pbmVkIGJ5ID09PS5cbiAgaWYgKGFjdHVhbCA9PT0gZXhwZWN0ZWQpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBlbHNlIGlmIChpc0J1ZmZlcihhY3R1YWwpICYmIGlzQnVmZmVyKGV4cGVjdGVkKSkge1xuICAgIHJldHVybiBjb21wYXJlKGFjdHVhbCwgZXhwZWN0ZWQpID09PSAwO1xuXG4gIC8vIDcuMi4gSWYgdGhlIGV4cGVjdGVkIHZhbHVlIGlzIGEgRGF0ZSBvYmplY3QsIHRoZSBhY3R1YWwgdmFsdWUgaXNcbiAgLy8gZXF1aXZhbGVudCBpZiBpdCBpcyBhbHNvIGEgRGF0ZSBvYmplY3QgdGhhdCByZWZlcnMgdG8gdGhlIHNhbWUgdGltZS5cbiAgfSBlbHNlIGlmICh1dGlsLmlzRGF0ZShhY3R1YWwpICYmIHV0aWwuaXNEYXRlKGV4cGVjdGVkKSkge1xuICAgIHJldHVybiBhY3R1YWwuZ2V0VGltZSgpID09PSBleHBlY3RlZC5nZXRUaW1lKCk7XG5cbiAgLy8gNy4zIElmIHRoZSBleHBlY3RlZCB2YWx1ZSBpcyBhIFJlZ0V4cCBvYmplY3QsIHRoZSBhY3R1YWwgdmFsdWUgaXNcbiAgLy8gZXF1aXZhbGVudCBpZiBpdCBpcyBhbHNvIGEgUmVnRXhwIG9iamVjdCB3aXRoIHRoZSBzYW1lIHNvdXJjZSBhbmRcbiAgLy8gcHJvcGVydGllcyAoYGdsb2JhbGAsIGBtdWx0aWxpbmVgLCBgbGFzdEluZGV4YCwgYGlnbm9yZUNhc2VgKS5cbiAgfSBlbHNlIGlmICh1dGlsLmlzUmVnRXhwKGFjdHVhbCkgJiYgdXRpbC5pc1JlZ0V4cChleHBlY3RlZCkpIHtcbiAgICByZXR1cm4gYWN0dWFsLnNvdXJjZSA9PT0gZXhwZWN0ZWQuc291cmNlICYmXG4gICAgICAgICAgIGFjdHVhbC5nbG9iYWwgPT09IGV4cGVjdGVkLmdsb2JhbCAmJlxuICAgICAgICAgICBhY3R1YWwubXVsdGlsaW5lID09PSBleHBlY3RlZC5tdWx0aWxpbmUgJiZcbiAgICAgICAgICAgYWN0dWFsLmxhc3RJbmRleCA9PT0gZXhwZWN0ZWQubGFzdEluZGV4ICYmXG4gICAgICAgICAgIGFjdHVhbC5pZ25vcmVDYXNlID09PSBleHBlY3RlZC5pZ25vcmVDYXNlO1xuXG4gIC8vIDcuNC4gT3RoZXIgcGFpcnMgdGhhdCBkbyBub3QgYm90aCBwYXNzIHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0JyxcbiAgLy8gZXF1aXZhbGVuY2UgaXMgZGV0ZXJtaW5lZCBieSA9PS5cbiAgfSBlbHNlIGlmICgoYWN0dWFsID09PSBudWxsIHx8IHR5cGVvZiBhY3R1YWwgIT09ICdvYmplY3QnKSAmJlxuICAgICAgICAgICAgIChleHBlY3RlZCA9PT0gbnVsbCB8fCB0eXBlb2YgZXhwZWN0ZWQgIT09ICdvYmplY3QnKSkge1xuICAgIHJldHVybiBzdHJpY3QgPyBhY3R1YWwgPT09IGV4cGVjdGVkIDogYWN0dWFsID09IGV4cGVjdGVkO1xuXG4gIC8vIElmIGJvdGggdmFsdWVzIGFyZSBpbnN0YW5jZXMgb2YgdHlwZWQgYXJyYXlzLCB3cmFwIHRoZWlyIHVuZGVybHlpbmdcbiAgLy8gQXJyYXlCdWZmZXJzIGluIGEgQnVmZmVyIGVhY2ggdG8gaW5jcmVhc2UgcGVyZm9ybWFuY2VcbiAgLy8gVGhpcyBvcHRpbWl6YXRpb24gcmVxdWlyZXMgdGhlIGFycmF5cyB0byBoYXZlIHRoZSBzYW1lIHR5cGUgYXMgY2hlY2tlZCBieVxuICAvLyBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nIChha2EgcFRvU3RyaW5nKS4gTmV2ZXIgcGVyZm9ybSBiaW5hcnlcbiAgLy8gY29tcGFyaXNvbnMgZm9yIEZsb2F0KkFycmF5cywgdGhvdWdoLCBzaW5jZSBlLmcuICswID09PSAtMCBidXQgdGhlaXJcbiAgLy8gYml0IHBhdHRlcm5zIGFyZSBub3QgaWRlbnRpY2FsLlxuICB9IGVsc2UgaWYgKGlzVmlldyhhY3R1YWwpICYmIGlzVmlldyhleHBlY3RlZCkgJiZcbiAgICAgICAgICAgICBwVG9TdHJpbmcoYWN0dWFsKSA9PT0gcFRvU3RyaW5nKGV4cGVjdGVkKSAmJlxuICAgICAgICAgICAgICEoYWN0dWFsIGluc3RhbmNlb2YgRmxvYXQzMkFycmF5IHx8XG4gICAgICAgICAgICAgICBhY3R1YWwgaW5zdGFuY2VvZiBGbG9hdDY0QXJyYXkpKSB7XG4gICAgcmV0dXJuIGNvbXBhcmUobmV3IFVpbnQ4QXJyYXkoYWN0dWFsLmJ1ZmZlciksXG4gICAgICAgICAgICAgICAgICAgbmV3IFVpbnQ4QXJyYXkoZXhwZWN0ZWQuYnVmZmVyKSkgPT09IDA7XG5cbiAgLy8gNy41IEZvciBhbGwgb3RoZXIgT2JqZWN0IHBhaXJzLCBpbmNsdWRpbmcgQXJyYXkgb2JqZWN0cywgZXF1aXZhbGVuY2UgaXNcbiAgLy8gZGV0ZXJtaW5lZCBieSBoYXZpbmcgdGhlIHNhbWUgbnVtYmVyIG9mIG93bmVkIHByb3BlcnRpZXMgKGFzIHZlcmlmaWVkXG4gIC8vIHdpdGggT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKSwgdGhlIHNhbWUgc2V0IG9mIGtleXNcbiAgLy8gKGFsdGhvdWdoIG5vdCBuZWNlc3NhcmlseSB0aGUgc2FtZSBvcmRlciksIGVxdWl2YWxlbnQgdmFsdWVzIGZvciBldmVyeVxuICAvLyBjb3JyZXNwb25kaW5nIGtleSwgYW5kIGFuIGlkZW50aWNhbCAncHJvdG90eXBlJyBwcm9wZXJ0eS4gTm90ZTogdGhpc1xuICAvLyBhY2NvdW50cyBmb3IgYm90aCBuYW1lZCBhbmQgaW5kZXhlZCBwcm9wZXJ0aWVzIG9uIEFycmF5cy5cbiAgfSBlbHNlIGlmIChpc0J1ZmZlcihhY3R1YWwpICE9PSBpc0J1ZmZlcihleHBlY3RlZCkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gZWxzZSB7XG4gICAgbWVtb3MgPSBtZW1vcyB8fCB7YWN0dWFsOiBbXSwgZXhwZWN0ZWQ6IFtdfTtcblxuICAgIHZhciBhY3R1YWxJbmRleCA9IG1lbW9zLmFjdHVhbC5pbmRleE9mKGFjdHVhbCk7XG4gICAgaWYgKGFjdHVhbEluZGV4ICE9PSAtMSkge1xuICAgICAgaWYgKGFjdHVhbEluZGV4ID09PSBtZW1vcy5leHBlY3RlZC5pbmRleE9mKGV4cGVjdGVkKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBtZW1vcy5hY3R1YWwucHVzaChhY3R1YWwpO1xuICAgIG1lbW9zLmV4cGVjdGVkLnB1c2goZXhwZWN0ZWQpO1xuXG4gICAgcmV0dXJuIG9iakVxdWl2KGFjdHVhbCwgZXhwZWN0ZWQsIHN0cmljdCwgbWVtb3MpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGlzQXJndW1lbnRzKG9iamVjdCkge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG9iamVjdCkgPT0gJ1tvYmplY3QgQXJndW1lbnRzXSc7XG59XG5cbmZ1bmN0aW9uIG9iakVxdWl2KGEsIGIsIHN0cmljdCwgYWN0dWFsVmlzaXRlZE9iamVjdHMpIHtcbiAgaWYgKGEgPT09IG51bGwgfHwgYSA9PT0gdW5kZWZpbmVkIHx8IGIgPT09IG51bGwgfHwgYiA9PT0gdW5kZWZpbmVkKVxuICAgIHJldHVybiBmYWxzZTtcbiAgLy8gaWYgb25lIGlzIGEgcHJpbWl0aXZlLCB0aGUgb3RoZXIgbXVzdCBiZSBzYW1lXG4gIGlmICh1dGlsLmlzUHJpbWl0aXZlKGEpIHx8IHV0aWwuaXNQcmltaXRpdmUoYikpXG4gICAgcmV0dXJuIGEgPT09IGI7XG4gIGlmIChzdHJpY3QgJiYgT2JqZWN0LmdldFByb3RvdHlwZU9mKGEpICE9PSBPYmplY3QuZ2V0UHJvdG90eXBlT2YoYikpXG4gICAgcmV0dXJuIGZhbHNlO1xuICB2YXIgYUlzQXJncyA9IGlzQXJndW1lbnRzKGEpO1xuICB2YXIgYklzQXJncyA9IGlzQXJndW1lbnRzKGIpO1xuICBpZiAoKGFJc0FyZ3MgJiYgIWJJc0FyZ3MpIHx8ICghYUlzQXJncyAmJiBiSXNBcmdzKSlcbiAgICByZXR1cm4gZmFsc2U7XG4gIGlmIChhSXNBcmdzKSB7XG4gICAgYSA9IHBTbGljZS5jYWxsKGEpO1xuICAgIGIgPSBwU2xpY2UuY2FsbChiKTtcbiAgICByZXR1cm4gX2RlZXBFcXVhbChhLCBiLCBzdHJpY3QpO1xuICB9XG4gIHZhciBrYSA9IG9iamVjdEtleXMoYSk7XG4gIHZhciBrYiA9IG9iamVjdEtleXMoYik7XG4gIHZhciBrZXksIGk7XG4gIC8vIGhhdmluZyB0aGUgc2FtZSBudW1iZXIgb2Ygb3duZWQgcHJvcGVydGllcyAoa2V5cyBpbmNvcnBvcmF0ZXNcbiAgLy8gaGFzT3duUHJvcGVydHkpXG4gIGlmIChrYS5sZW5ndGggIT09IGtiLmxlbmd0aClcbiAgICByZXR1cm4gZmFsc2U7XG4gIC8vdGhlIHNhbWUgc2V0IG9mIGtleXMgKGFsdGhvdWdoIG5vdCBuZWNlc3NhcmlseSB0aGUgc2FtZSBvcmRlciksXG4gIGthLnNvcnQoKTtcbiAga2Iuc29ydCgpO1xuICAvL35+fmNoZWFwIGtleSB0ZXN0XG4gIGZvciAoaSA9IGthLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgaWYgKGthW2ldICE9PSBrYltpXSlcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICAvL2VxdWl2YWxlbnQgdmFsdWVzIGZvciBldmVyeSBjb3JyZXNwb25kaW5nIGtleSwgYW5kXG4gIC8vfn5+cG9zc2libHkgZXhwZW5zaXZlIGRlZXAgdGVzdFxuICBmb3IgKGkgPSBrYS5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgIGtleSA9IGthW2ldO1xuICAgIGlmICghX2RlZXBFcXVhbChhW2tleV0sIGJba2V5XSwgc3RyaWN0LCBhY3R1YWxWaXNpdGVkT2JqZWN0cykpXG4gICAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG5cbi8vIDguIFRoZSBub24tZXF1aXZhbGVuY2UgYXNzZXJ0aW9uIHRlc3RzIGZvciBhbnkgZGVlcCBpbmVxdWFsaXR5LlxuLy8gYXNzZXJ0Lm5vdERlZXBFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlX29wdCk7XG5cbmFzc2VydC5ub3REZWVwRXF1YWwgPSBmdW5jdGlvbiBub3REZWVwRXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSkge1xuICBpZiAoX2RlZXBFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBmYWxzZSkpIHtcbiAgICBmYWlsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UsICdub3REZWVwRXF1YWwnLCBhc3NlcnQubm90RGVlcEVxdWFsKTtcbiAgfVxufTtcblxuYXNzZXJ0Lm5vdERlZXBTdHJpY3RFcXVhbCA9IG5vdERlZXBTdHJpY3RFcXVhbDtcbmZ1bmN0aW9uIG5vdERlZXBTdHJpY3RFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlKSB7XG4gIGlmIChfZGVlcEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIHRydWUpKSB7XG4gICAgZmFpbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlLCAnbm90RGVlcFN0cmljdEVxdWFsJywgbm90RGVlcFN0cmljdEVxdWFsKTtcbiAgfVxufVxuXG5cbi8vIDkuIFRoZSBzdHJpY3QgZXF1YWxpdHkgYXNzZXJ0aW9uIHRlc3RzIHN0cmljdCBlcXVhbGl0eSwgYXMgZGV0ZXJtaW5lZCBieSA9PT0uXG4vLyBhc3NlcnQuc3RyaWN0RXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZV9vcHQpO1xuXG5hc3NlcnQuc3RyaWN0RXF1YWwgPSBmdW5jdGlvbiBzdHJpY3RFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlKSB7XG4gIGlmIChhY3R1YWwgIT09IGV4cGVjdGVkKSB7XG4gICAgZmFpbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlLCAnPT09JywgYXNzZXJ0LnN0cmljdEVxdWFsKTtcbiAgfVxufTtcblxuLy8gMTAuIFRoZSBzdHJpY3Qgbm9uLWVxdWFsaXR5IGFzc2VydGlvbiB0ZXN0cyBmb3Igc3RyaWN0IGluZXF1YWxpdHksIGFzXG4vLyBkZXRlcm1pbmVkIGJ5ICE9PS4gIGFzc2VydC5ub3RTdHJpY3RFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlX29wdCk7XG5cbmFzc2VydC5ub3RTdHJpY3RFcXVhbCA9IGZ1bmN0aW9uIG5vdFN0cmljdEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpIHtcbiAgaWYgKGFjdHVhbCA9PT0gZXhwZWN0ZWQpIHtcbiAgICBmYWlsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UsICchPT0nLCBhc3NlcnQubm90U3RyaWN0RXF1YWwpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBleHBlY3RlZEV4Y2VwdGlvbihhY3R1YWwsIGV4cGVjdGVkKSB7XG4gIGlmICghYWN0dWFsIHx8ICFleHBlY3RlZCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZXhwZWN0ZWQpID09ICdbb2JqZWN0IFJlZ0V4cF0nKSB7XG4gICAgcmV0dXJuIGV4cGVjdGVkLnRlc3QoYWN0dWFsKTtcbiAgfVxuXG4gIHRyeSB7XG4gICAgaWYgKGFjdHVhbCBpbnN0YW5jZW9mIGV4cGVjdGVkKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyBJZ25vcmUuICBUaGUgaW5zdGFuY2VvZiBjaGVjayBkb2Vzbid0IHdvcmsgZm9yIGFycm93IGZ1bmN0aW9ucy5cbiAgfVxuXG4gIGlmIChFcnJvci5pc1Byb3RvdHlwZU9mKGV4cGVjdGVkKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBleHBlY3RlZC5jYWxsKHt9LCBhY3R1YWwpID09PSB0cnVlO1xufVxuXG5mdW5jdGlvbiBfdHJ5QmxvY2soYmxvY2spIHtcbiAgdmFyIGVycm9yO1xuICB0cnkge1xuICAgIGJsb2NrKCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBlcnJvciA9IGU7XG4gIH1cbiAgcmV0dXJuIGVycm9yO1xufVxuXG5mdW5jdGlvbiBfdGhyb3dzKHNob3VsZFRocm93LCBibG9jaywgZXhwZWN0ZWQsIG1lc3NhZ2UpIHtcbiAgdmFyIGFjdHVhbDtcblxuICBpZiAodHlwZW9mIGJsb2NrICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJibG9ja1wiIGFyZ3VtZW50IG11c3QgYmUgYSBmdW5jdGlvbicpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBleHBlY3RlZCA9PT0gJ3N0cmluZycpIHtcbiAgICBtZXNzYWdlID0gZXhwZWN0ZWQ7XG4gICAgZXhwZWN0ZWQgPSBudWxsO1xuICB9XG5cbiAgYWN0dWFsID0gX3RyeUJsb2NrKGJsb2NrKTtcblxuICBtZXNzYWdlID0gKGV4cGVjdGVkICYmIGV4cGVjdGVkLm5hbWUgPyAnICgnICsgZXhwZWN0ZWQubmFtZSArICcpLicgOiAnLicpICtcbiAgICAgICAgICAgIChtZXNzYWdlID8gJyAnICsgbWVzc2FnZSA6ICcuJyk7XG5cbiAgaWYgKHNob3VsZFRocm93ICYmICFhY3R1YWwpIHtcbiAgICBmYWlsKGFjdHVhbCwgZXhwZWN0ZWQsICdNaXNzaW5nIGV4cGVjdGVkIGV4Y2VwdGlvbicgKyBtZXNzYWdlKTtcbiAgfVxuXG4gIHZhciB1c2VyUHJvdmlkZWRNZXNzYWdlID0gdHlwZW9mIG1lc3NhZ2UgPT09ICdzdHJpbmcnO1xuICB2YXIgaXNVbndhbnRlZEV4Y2VwdGlvbiA9ICFzaG91bGRUaHJvdyAmJiB1dGlsLmlzRXJyb3IoYWN0dWFsKTtcbiAgdmFyIGlzVW5leHBlY3RlZEV4Y2VwdGlvbiA9ICFzaG91bGRUaHJvdyAmJiBhY3R1YWwgJiYgIWV4cGVjdGVkO1xuXG4gIGlmICgoaXNVbndhbnRlZEV4Y2VwdGlvbiAmJlxuICAgICAgdXNlclByb3ZpZGVkTWVzc2FnZSAmJlxuICAgICAgZXhwZWN0ZWRFeGNlcHRpb24oYWN0dWFsLCBleHBlY3RlZCkpIHx8XG4gICAgICBpc1VuZXhwZWN0ZWRFeGNlcHRpb24pIHtcbiAgICBmYWlsKGFjdHVhbCwgZXhwZWN0ZWQsICdHb3QgdW53YW50ZWQgZXhjZXB0aW9uJyArIG1lc3NhZ2UpO1xuICB9XG5cbiAgaWYgKChzaG91bGRUaHJvdyAmJiBhY3R1YWwgJiYgZXhwZWN0ZWQgJiZcbiAgICAgICFleHBlY3RlZEV4Y2VwdGlvbihhY3R1YWwsIGV4cGVjdGVkKSkgfHwgKCFzaG91bGRUaHJvdyAmJiBhY3R1YWwpKSB7XG4gICAgdGhyb3cgYWN0dWFsO1xuICB9XG59XG5cbi8vIDExLiBFeHBlY3RlZCB0byB0aHJvdyBhbiBlcnJvcjpcbi8vIGFzc2VydC50aHJvd3MoYmxvY2ssIEVycm9yX29wdCwgbWVzc2FnZV9vcHQpO1xuXG5hc3NlcnQudGhyb3dzID0gZnVuY3Rpb24oYmxvY2ssIC8qb3B0aW9uYWwqL2Vycm9yLCAvKm9wdGlvbmFsKi9tZXNzYWdlKSB7XG4gIF90aHJvd3ModHJ1ZSwgYmxvY2ssIGVycm9yLCBtZXNzYWdlKTtcbn07XG5cbi8vIEVYVEVOU0lPTiEgVGhpcyBpcyBhbm5veWluZyB0byB3cml0ZSBvdXRzaWRlIHRoaXMgbW9kdWxlLlxuYXNzZXJ0LmRvZXNOb3RUaHJvdyA9IGZ1bmN0aW9uKGJsb2NrLCAvKm9wdGlvbmFsKi9lcnJvciwgLypvcHRpb25hbCovbWVzc2FnZSkge1xuICBfdGhyb3dzKGZhbHNlLCBibG9jaywgZXJyb3IsIG1lc3NhZ2UpO1xufTtcblxuYXNzZXJ0LmlmRXJyb3IgPSBmdW5jdGlvbihlcnIpIHsgaWYgKGVycikgdGhyb3cgZXJyOyB9O1xuXG52YXIgb2JqZWN0S2V5cyA9IE9iamVjdC5rZXlzIHx8IGZ1bmN0aW9uIChvYmopIHtcbiAgdmFyIGtleXMgPSBbXTtcbiAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgIGlmIChoYXNPd24uY2FsbChvYmosIGtleSkpIGtleXMucHVzaChrZXkpO1xuICB9XG4gIHJldHVybiBrZXlzO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vICh3ZWJwYWNrKS9+L25vZGUtbGlicy1icm93c2VyL34vYXNzZXJ0L2Fzc2VydC5qc1xuLy8gbW9kdWxlIGlkID0gMTlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbnZhciBmb3JtYXRSZWdFeHAgPSAvJVtzZGolXS9nO1xuZXhwb3J0cy5mb3JtYXQgPSBmdW5jdGlvbihmKSB7XG4gIGlmICghaXNTdHJpbmcoZikpIHtcbiAgICB2YXIgb2JqZWN0cyA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBvYmplY3RzLnB1c2goaW5zcGVjdChhcmd1bWVudHNbaV0pKTtcbiAgICB9XG4gICAgcmV0dXJuIG9iamVjdHMuam9pbignICcpO1xuICB9XG5cbiAgdmFyIGkgPSAxO1xuICB2YXIgYXJncyA9IGFyZ3VtZW50cztcbiAgdmFyIGxlbiA9IGFyZ3MubGVuZ3RoO1xuICB2YXIgc3RyID0gU3RyaW5nKGYpLnJlcGxhY2UoZm9ybWF0UmVnRXhwLCBmdW5jdGlvbih4KSB7XG4gICAgaWYgKHggPT09ICclJScpIHJldHVybiAnJSc7XG4gICAgaWYgKGkgPj0gbGVuKSByZXR1cm4geDtcbiAgICBzd2l0Y2ggKHgpIHtcbiAgICAgIGNhc2UgJyVzJzogcmV0dXJuIFN0cmluZyhhcmdzW2krK10pO1xuICAgICAgY2FzZSAnJWQnOiByZXR1cm4gTnVtYmVyKGFyZ3NbaSsrXSk7XG4gICAgICBjYXNlICclaic6XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGFyZ3NbaSsrXSk7XG4gICAgICAgIH0gY2F0Y2ggKF8pIHtcbiAgICAgICAgICByZXR1cm4gJ1tDaXJjdWxhcl0nO1xuICAgICAgICB9XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4geDtcbiAgICB9XG4gIH0pO1xuICBmb3IgKHZhciB4ID0gYXJnc1tpXTsgaSA8IGxlbjsgeCA9IGFyZ3NbKytpXSkge1xuICAgIGlmIChpc051bGwoeCkgfHwgIWlzT2JqZWN0KHgpKSB7XG4gICAgICBzdHIgKz0gJyAnICsgeDtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RyICs9ICcgJyArIGluc3BlY3QoeCk7XG4gICAgfVxuICB9XG4gIHJldHVybiBzdHI7XG59O1xuXG5cbi8vIE1hcmsgdGhhdCBhIG1ldGhvZCBzaG91bGQgbm90IGJlIHVzZWQuXG4vLyBSZXR1cm5zIGEgbW9kaWZpZWQgZnVuY3Rpb24gd2hpY2ggd2FybnMgb25jZSBieSBkZWZhdWx0LlxuLy8gSWYgLS1uby1kZXByZWNhdGlvbiBpcyBzZXQsIHRoZW4gaXQgaXMgYSBuby1vcC5cbmV4cG9ydHMuZGVwcmVjYXRlID0gZnVuY3Rpb24oZm4sIG1zZykge1xuICAvLyBBbGxvdyBmb3IgZGVwcmVjYXRpbmcgdGhpbmdzIGluIHRoZSBwcm9jZXNzIG9mIHN0YXJ0aW5nIHVwLlxuICBpZiAoaXNVbmRlZmluZWQoZ2xvYmFsLnByb2Nlc3MpKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGV4cG9ydHMuZGVwcmVjYXRlKGZuLCBtc2cpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfTtcbiAgfVxuXG4gIGlmIChwcm9jZXNzLm5vRGVwcmVjYXRpb24gPT09IHRydWUpIHtcbiAgICByZXR1cm4gZm47XG4gIH1cblxuICB2YXIgd2FybmVkID0gZmFsc2U7XG4gIGZ1bmN0aW9uIGRlcHJlY2F0ZWQoKSB7XG4gICAgaWYgKCF3YXJuZWQpIHtcbiAgICAgIGlmIChwcm9jZXNzLnRocm93RGVwcmVjYXRpb24pIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1zZyk7XG4gICAgICB9IGVsc2UgaWYgKHByb2Nlc3MudHJhY2VEZXByZWNhdGlvbikge1xuICAgICAgICBjb25zb2xlLnRyYWNlKG1zZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLmVycm9yKG1zZyk7XG4gICAgICB9XG4gICAgICB3YXJuZWQgPSB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIHJldHVybiBkZXByZWNhdGVkO1xufTtcblxuXG52YXIgZGVidWdzID0ge307XG52YXIgZGVidWdFbnZpcm9uO1xuZXhwb3J0cy5kZWJ1Z2xvZyA9IGZ1bmN0aW9uKHNldCkge1xuICBpZiAoaXNVbmRlZmluZWQoZGVidWdFbnZpcm9uKSlcbiAgICBkZWJ1Z0Vudmlyb24gPSBwcm9jZXNzLmVudi5OT0RFX0RFQlVHIHx8ICcnO1xuICBzZXQgPSBzZXQudG9VcHBlckNhc2UoKTtcbiAgaWYgKCFkZWJ1Z3Nbc2V0XSkge1xuICAgIGlmIChuZXcgUmVnRXhwKCdcXFxcYicgKyBzZXQgKyAnXFxcXGInLCAnaScpLnRlc3QoZGVidWdFbnZpcm9uKSkge1xuICAgICAgdmFyIHBpZCA9IHByb2Nlc3MucGlkO1xuICAgICAgZGVidWdzW3NldF0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIG1zZyA9IGV4cG9ydHMuZm9ybWF0LmFwcGx5KGV4cG9ydHMsIGFyZ3VtZW50cyk7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJyVzICVkOiAlcycsIHNldCwgcGlkLCBtc2cpO1xuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGVidWdzW3NldF0gPSBmdW5jdGlvbigpIHt9O1xuICAgIH1cbiAgfVxuICByZXR1cm4gZGVidWdzW3NldF07XG59O1xuXG5cbi8qKlxuICogRWNob3MgdGhlIHZhbHVlIG9mIGEgdmFsdWUuIFRyeXMgdG8gcHJpbnQgdGhlIHZhbHVlIG91dFxuICogaW4gdGhlIGJlc3Qgd2F5IHBvc3NpYmxlIGdpdmVuIHRoZSBkaWZmZXJlbnQgdHlwZXMuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9iaiBUaGUgb2JqZWN0IHRvIHByaW50IG91dC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIE9wdGlvbmFsIG9wdGlvbnMgb2JqZWN0IHRoYXQgYWx0ZXJzIHRoZSBvdXRwdXQuXG4gKi9cbi8qIGxlZ2FjeTogb2JqLCBzaG93SGlkZGVuLCBkZXB0aCwgY29sb3JzKi9cbmZ1bmN0aW9uIGluc3BlY3Qob2JqLCBvcHRzKSB7XG4gIC8vIGRlZmF1bHQgb3B0aW9uc1xuICB2YXIgY3R4ID0ge1xuICAgIHNlZW46IFtdLFxuICAgIHN0eWxpemU6IHN0eWxpemVOb0NvbG9yXG4gIH07XG4gIC8vIGxlZ2FjeS4uLlxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+PSAzKSBjdHguZGVwdGggPSBhcmd1bWVudHNbMl07XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID49IDQpIGN0eC5jb2xvcnMgPSBhcmd1bWVudHNbM107XG4gIGlmIChpc0Jvb2xlYW4ob3B0cykpIHtcbiAgICAvLyBsZWdhY3kuLi5cbiAgICBjdHguc2hvd0hpZGRlbiA9IG9wdHM7XG4gIH0gZWxzZSBpZiAob3B0cykge1xuICAgIC8vIGdvdCBhbiBcIm9wdGlvbnNcIiBvYmplY3RcbiAgICBleHBvcnRzLl9leHRlbmQoY3R4LCBvcHRzKTtcbiAgfVxuICAvLyBzZXQgZGVmYXVsdCBvcHRpb25zXG4gIGlmIChpc1VuZGVmaW5lZChjdHguc2hvd0hpZGRlbikpIGN0eC5zaG93SGlkZGVuID0gZmFsc2U7XG4gIGlmIChpc1VuZGVmaW5lZChjdHguZGVwdGgpKSBjdHguZGVwdGggPSAyO1xuICBpZiAoaXNVbmRlZmluZWQoY3R4LmNvbG9ycykpIGN0eC5jb2xvcnMgPSBmYWxzZTtcbiAgaWYgKGlzVW5kZWZpbmVkKGN0eC5jdXN0b21JbnNwZWN0KSkgY3R4LmN1c3RvbUluc3BlY3QgPSB0cnVlO1xuICBpZiAoY3R4LmNvbG9ycykgY3R4LnN0eWxpemUgPSBzdHlsaXplV2l0aENvbG9yO1xuICByZXR1cm4gZm9ybWF0VmFsdWUoY3R4LCBvYmosIGN0eC5kZXB0aCk7XG59XG5leHBvcnRzLmluc3BlY3QgPSBpbnNwZWN0O1xuXG5cbi8vIGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQU5TSV9lc2NhcGVfY29kZSNncmFwaGljc1xuaW5zcGVjdC5jb2xvcnMgPSB7XG4gICdib2xkJyA6IFsxLCAyMl0sXG4gICdpdGFsaWMnIDogWzMsIDIzXSxcbiAgJ3VuZGVybGluZScgOiBbNCwgMjRdLFxuICAnaW52ZXJzZScgOiBbNywgMjddLFxuICAnd2hpdGUnIDogWzM3LCAzOV0sXG4gICdncmV5JyA6IFs5MCwgMzldLFxuICAnYmxhY2snIDogWzMwLCAzOV0sXG4gICdibHVlJyA6IFszNCwgMzldLFxuICAnY3lhbicgOiBbMzYsIDM5XSxcbiAgJ2dyZWVuJyA6IFszMiwgMzldLFxuICAnbWFnZW50YScgOiBbMzUsIDM5XSxcbiAgJ3JlZCcgOiBbMzEsIDM5XSxcbiAgJ3llbGxvdycgOiBbMzMsIDM5XVxufTtcblxuLy8gRG9uJ3QgdXNlICdibHVlJyBub3QgdmlzaWJsZSBvbiBjbWQuZXhlXG5pbnNwZWN0LnN0eWxlcyA9IHtcbiAgJ3NwZWNpYWwnOiAnY3lhbicsXG4gICdudW1iZXInOiAneWVsbG93JyxcbiAgJ2Jvb2xlYW4nOiAneWVsbG93JyxcbiAgJ3VuZGVmaW5lZCc6ICdncmV5JyxcbiAgJ251bGwnOiAnYm9sZCcsXG4gICdzdHJpbmcnOiAnZ3JlZW4nLFxuICAnZGF0ZSc6ICdtYWdlbnRhJyxcbiAgLy8gXCJuYW1lXCI6IGludGVudGlvbmFsbHkgbm90IHN0eWxpbmdcbiAgJ3JlZ2V4cCc6ICdyZWQnXG59O1xuXG5cbmZ1bmN0aW9uIHN0eWxpemVXaXRoQ29sb3Ioc3RyLCBzdHlsZVR5cGUpIHtcbiAgdmFyIHN0eWxlID0gaW5zcGVjdC5zdHlsZXNbc3R5bGVUeXBlXTtcblxuICBpZiAoc3R5bGUpIHtcbiAgICByZXR1cm4gJ1xcdTAwMWJbJyArIGluc3BlY3QuY29sb3JzW3N0eWxlXVswXSArICdtJyArIHN0ciArXG4gICAgICAgICAgICdcXHUwMDFiWycgKyBpbnNwZWN0LmNvbG9yc1tzdHlsZV1bMV0gKyAnbSc7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHN0cjtcbiAgfVxufVxuXG5cbmZ1bmN0aW9uIHN0eWxpemVOb0NvbG9yKHN0ciwgc3R5bGVUeXBlKSB7XG4gIHJldHVybiBzdHI7XG59XG5cblxuZnVuY3Rpb24gYXJyYXlUb0hhc2goYXJyYXkpIHtcbiAgdmFyIGhhc2ggPSB7fTtcblxuICBhcnJheS5mb3JFYWNoKGZ1bmN0aW9uKHZhbCwgaWR4KSB7XG4gICAgaGFzaFt2YWxdID0gdHJ1ZTtcbiAgfSk7XG5cbiAgcmV0dXJuIGhhc2g7XG59XG5cblxuZnVuY3Rpb24gZm9ybWF0VmFsdWUoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzKSB7XG4gIC8vIFByb3ZpZGUgYSBob29rIGZvciB1c2VyLXNwZWNpZmllZCBpbnNwZWN0IGZ1bmN0aW9ucy5cbiAgLy8gQ2hlY2sgdGhhdCB2YWx1ZSBpcyBhbiBvYmplY3Qgd2l0aCBhbiBpbnNwZWN0IGZ1bmN0aW9uIG9uIGl0XG4gIGlmIChjdHguY3VzdG9tSW5zcGVjdCAmJlxuICAgICAgdmFsdWUgJiZcbiAgICAgIGlzRnVuY3Rpb24odmFsdWUuaW5zcGVjdCkgJiZcbiAgICAgIC8vIEZpbHRlciBvdXQgdGhlIHV0aWwgbW9kdWxlLCBpdCdzIGluc3BlY3QgZnVuY3Rpb24gaXMgc3BlY2lhbFxuICAgICAgdmFsdWUuaW5zcGVjdCAhPT0gZXhwb3J0cy5pbnNwZWN0ICYmXG4gICAgICAvLyBBbHNvIGZpbHRlciBvdXQgYW55IHByb3RvdHlwZSBvYmplY3RzIHVzaW5nIHRoZSBjaXJjdWxhciBjaGVjay5cbiAgICAgICEodmFsdWUuY29uc3RydWN0b3IgJiYgdmFsdWUuY29uc3RydWN0b3IucHJvdG90eXBlID09PSB2YWx1ZSkpIHtcbiAgICB2YXIgcmV0ID0gdmFsdWUuaW5zcGVjdChyZWN1cnNlVGltZXMsIGN0eCk7XG4gICAgaWYgKCFpc1N0cmluZyhyZXQpKSB7XG4gICAgICByZXQgPSBmb3JtYXRWYWx1ZShjdHgsIHJldCwgcmVjdXJzZVRpbWVzKTtcbiAgICB9XG4gICAgcmV0dXJuIHJldDtcbiAgfVxuXG4gIC8vIFByaW1pdGl2ZSB0eXBlcyBjYW5ub3QgaGF2ZSBwcm9wZXJ0aWVzXG4gIHZhciBwcmltaXRpdmUgPSBmb3JtYXRQcmltaXRpdmUoY3R4LCB2YWx1ZSk7XG4gIGlmIChwcmltaXRpdmUpIHtcbiAgICByZXR1cm4gcHJpbWl0aXZlO1xuICB9XG5cbiAgLy8gTG9vayB1cCB0aGUga2V5cyBvZiB0aGUgb2JqZWN0LlxuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKHZhbHVlKTtcbiAgdmFyIHZpc2libGVLZXlzID0gYXJyYXlUb0hhc2goa2V5cyk7XG5cbiAgaWYgKGN0eC5zaG93SGlkZGVuKSB7XG4gICAga2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHZhbHVlKTtcbiAgfVxuXG4gIC8vIElFIGRvZXNuJ3QgbWFrZSBlcnJvciBmaWVsZHMgbm9uLWVudW1lcmFibGVcbiAgLy8gaHR0cDovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L2llL2R3dzUyc2J0KHY9dnMuOTQpLmFzcHhcbiAgaWYgKGlzRXJyb3IodmFsdWUpXG4gICAgICAmJiAoa2V5cy5pbmRleE9mKCdtZXNzYWdlJykgPj0gMCB8fCBrZXlzLmluZGV4T2YoJ2Rlc2NyaXB0aW9uJykgPj0gMCkpIHtcbiAgICByZXR1cm4gZm9ybWF0RXJyb3IodmFsdWUpO1xuICB9XG5cbiAgLy8gU29tZSB0eXBlIG9mIG9iamVjdCB3aXRob3V0IHByb3BlcnRpZXMgY2FuIGJlIHNob3J0Y3V0dGVkLlxuICBpZiAoa2V5cy5sZW5ndGggPT09IDApIHtcbiAgICBpZiAoaXNGdW5jdGlvbih2YWx1ZSkpIHtcbiAgICAgIHZhciBuYW1lID0gdmFsdWUubmFtZSA/ICc6ICcgKyB2YWx1ZS5uYW1lIDogJyc7XG4gICAgICByZXR1cm4gY3R4LnN0eWxpemUoJ1tGdW5jdGlvbicgKyBuYW1lICsgJ10nLCAnc3BlY2lhbCcpO1xuICAgIH1cbiAgICBpZiAoaXNSZWdFeHAodmFsdWUpKSB7XG4gICAgICByZXR1cm4gY3R4LnN0eWxpemUoUmVnRXhwLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSwgJ3JlZ2V4cCcpO1xuICAgIH1cbiAgICBpZiAoaXNEYXRlKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKERhdGUucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpLCAnZGF0ZScpO1xuICAgIH1cbiAgICBpZiAoaXNFcnJvcih2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBmb3JtYXRFcnJvcih2YWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGJhc2UgPSAnJywgYXJyYXkgPSBmYWxzZSwgYnJhY2VzID0gWyd7JywgJ30nXTtcblxuICAvLyBNYWtlIEFycmF5IHNheSB0aGF0IHRoZXkgYXJlIEFycmF5XG4gIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgIGFycmF5ID0gdHJ1ZTtcbiAgICBicmFjZXMgPSBbJ1snLCAnXSddO1xuICB9XG5cbiAgLy8gTWFrZSBmdW5jdGlvbnMgc2F5IHRoYXQgdGhleSBhcmUgZnVuY3Rpb25zXG4gIGlmIChpc0Z1bmN0aW9uKHZhbHVlKSkge1xuICAgIHZhciBuID0gdmFsdWUubmFtZSA/ICc6ICcgKyB2YWx1ZS5uYW1lIDogJyc7XG4gICAgYmFzZSA9ICcgW0Z1bmN0aW9uJyArIG4gKyAnXSc7XG4gIH1cblxuICAvLyBNYWtlIFJlZ0V4cHMgc2F5IHRoYXQgdGhleSBhcmUgUmVnRXhwc1xuICBpZiAoaXNSZWdFeHAodmFsdWUpKSB7XG4gICAgYmFzZSA9ICcgJyArIFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG4gIH1cblxuICAvLyBNYWtlIGRhdGVzIHdpdGggcHJvcGVydGllcyBmaXJzdCBzYXkgdGhlIGRhdGVcbiAgaWYgKGlzRGF0ZSh2YWx1ZSkpIHtcbiAgICBiYXNlID0gJyAnICsgRGF0ZS5wcm90b3R5cGUudG9VVENTdHJpbmcuY2FsbCh2YWx1ZSk7XG4gIH1cblxuICAvLyBNYWtlIGVycm9yIHdpdGggbWVzc2FnZSBmaXJzdCBzYXkgdGhlIGVycm9yXG4gIGlmIChpc0Vycm9yKHZhbHVlKSkge1xuICAgIGJhc2UgPSAnICcgKyBmb3JtYXRFcnJvcih2YWx1ZSk7XG4gIH1cblxuICBpZiAoa2V5cy5sZW5ndGggPT09IDAgJiYgKCFhcnJheSB8fCB2YWx1ZS5sZW5ndGggPT0gMCkpIHtcbiAgICByZXR1cm4gYnJhY2VzWzBdICsgYmFzZSArIGJyYWNlc1sxXTtcbiAgfVxuXG4gIGlmIChyZWN1cnNlVGltZXMgPCAwKSB7XG4gICAgaWYgKGlzUmVnRXhwKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSksICdyZWdleHAnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKCdbT2JqZWN0XScsICdzcGVjaWFsJyk7XG4gICAgfVxuICB9XG5cbiAgY3R4LnNlZW4ucHVzaCh2YWx1ZSk7XG5cbiAgdmFyIG91dHB1dDtcbiAgaWYgKGFycmF5KSB7XG4gICAgb3V0cHV0ID0gZm9ybWF0QXJyYXkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cywga2V5cyk7XG4gIH0gZWxzZSB7XG4gICAgb3V0cHV0ID0ga2V5cy5tYXAoZnVuY3Rpb24oa2V5KSB7XG4gICAgICByZXR1cm4gZm9ybWF0UHJvcGVydHkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cywga2V5LCBhcnJheSk7XG4gICAgfSk7XG4gIH1cblxuICBjdHguc2Vlbi5wb3AoKTtcblxuICByZXR1cm4gcmVkdWNlVG9TaW5nbGVTdHJpbmcob3V0cHV0LCBiYXNlLCBicmFjZXMpO1xufVxuXG5cbmZ1bmN0aW9uIGZvcm1hdFByaW1pdGl2ZShjdHgsIHZhbHVlKSB7XG4gIGlmIChpc1VuZGVmaW5lZCh2YWx1ZSkpXG4gICAgcmV0dXJuIGN0eC5zdHlsaXplKCd1bmRlZmluZWQnLCAndW5kZWZpbmVkJyk7XG4gIGlmIChpc1N0cmluZyh2YWx1ZSkpIHtcbiAgICB2YXIgc2ltcGxlID0gJ1xcJycgKyBKU09OLnN0cmluZ2lmeSh2YWx1ZSkucmVwbGFjZSgvXlwifFwiJC9nLCAnJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC8nL2csIFwiXFxcXCdcIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXFxcXCIvZywgJ1wiJykgKyAnXFwnJztcbiAgICByZXR1cm4gY3R4LnN0eWxpemUoc2ltcGxlLCAnc3RyaW5nJyk7XG4gIH1cbiAgaWYgKGlzTnVtYmVyKHZhbHVlKSlcbiAgICByZXR1cm4gY3R4LnN0eWxpemUoJycgKyB2YWx1ZSwgJ251bWJlcicpO1xuICBpZiAoaXNCb29sZWFuKHZhbHVlKSlcbiAgICByZXR1cm4gY3R4LnN0eWxpemUoJycgKyB2YWx1ZSwgJ2Jvb2xlYW4nKTtcbiAgLy8gRm9yIHNvbWUgcmVhc29uIHR5cGVvZiBudWxsIGlzIFwib2JqZWN0XCIsIHNvIHNwZWNpYWwgY2FzZSBoZXJlLlxuICBpZiAoaXNOdWxsKHZhbHVlKSlcbiAgICByZXR1cm4gY3R4LnN0eWxpemUoJ251bGwnLCAnbnVsbCcpO1xufVxuXG5cbmZ1bmN0aW9uIGZvcm1hdEVycm9yKHZhbHVlKSB7XG4gIHJldHVybiAnWycgKyBFcnJvci5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSkgKyAnXSc7XG59XG5cblxuZnVuY3Rpb24gZm9ybWF0QXJyYXkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cywga2V5cykge1xuICB2YXIgb3V0cHV0ID0gW107XG4gIGZvciAodmFyIGkgPSAwLCBsID0gdmFsdWUubGVuZ3RoOyBpIDwgbDsgKytpKSB7XG4gICAgaWYgKGhhc093blByb3BlcnR5KHZhbHVlLCBTdHJpbmcoaSkpKSB7XG4gICAgICBvdXRwdXQucHVzaChmb3JtYXRQcm9wZXJ0eShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLFxuICAgICAgICAgIFN0cmluZyhpKSwgdHJ1ZSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvdXRwdXQucHVzaCgnJyk7XG4gICAgfVxuICB9XG4gIGtleXMuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcbiAgICBpZiAoIWtleS5tYXRjaCgvXlxcZCskLykpIHtcbiAgICAgIG91dHB1dC5wdXNoKGZvcm1hdFByb3BlcnR5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsXG4gICAgICAgICAga2V5LCB0cnVlKSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIG91dHB1dDtcbn1cblxuXG5mdW5jdGlvbiBmb3JtYXRQcm9wZXJ0eShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLCBrZXksIGFycmF5KSB7XG4gIHZhciBuYW1lLCBzdHIsIGRlc2M7XG4gIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHZhbHVlLCBrZXkpIHx8IHsgdmFsdWU6IHZhbHVlW2tleV0gfTtcbiAgaWYgKGRlc2MuZ2V0KSB7XG4gICAgaWYgKGRlc2Muc2V0KSB7XG4gICAgICBzdHIgPSBjdHguc3R5bGl6ZSgnW0dldHRlci9TZXR0ZXJdJywgJ3NwZWNpYWwnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RyID0gY3R4LnN0eWxpemUoJ1tHZXR0ZXJdJywgJ3NwZWNpYWwnKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKGRlc2Muc2V0KSB7XG4gICAgICBzdHIgPSBjdHguc3R5bGl6ZSgnW1NldHRlcl0nLCAnc3BlY2lhbCcpO1xuICAgIH1cbiAgfVxuICBpZiAoIWhhc093blByb3BlcnR5KHZpc2libGVLZXlzLCBrZXkpKSB7XG4gICAgbmFtZSA9ICdbJyArIGtleSArICddJztcbiAgfVxuICBpZiAoIXN0cikge1xuICAgIGlmIChjdHguc2Vlbi5pbmRleE9mKGRlc2MudmFsdWUpIDwgMCkge1xuICAgICAgaWYgKGlzTnVsbChyZWN1cnNlVGltZXMpKSB7XG4gICAgICAgIHN0ciA9IGZvcm1hdFZhbHVlKGN0eCwgZGVzYy52YWx1ZSwgbnVsbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdHIgPSBmb3JtYXRWYWx1ZShjdHgsIGRlc2MudmFsdWUsIHJlY3Vyc2VUaW1lcyAtIDEpO1xuICAgICAgfVxuICAgICAgaWYgKHN0ci5pbmRleE9mKCdcXG4nKSA+IC0xKSB7XG4gICAgICAgIGlmIChhcnJheSkge1xuICAgICAgICAgIHN0ciA9IHN0ci5zcGxpdCgnXFxuJykubWFwKGZ1bmN0aW9uKGxpbmUpIHtcbiAgICAgICAgICAgIHJldHVybiAnICAnICsgbGluZTtcbiAgICAgICAgICB9KS5qb2luKCdcXG4nKS5zdWJzdHIoMik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3RyID0gJ1xcbicgKyBzdHIuc3BsaXQoJ1xcbicpLm1hcChmdW5jdGlvbihsaW5lKSB7XG4gICAgICAgICAgICByZXR1cm4gJyAgICcgKyBsaW5lO1xuICAgICAgICAgIH0pLmpvaW4oJ1xcbicpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0ciA9IGN0eC5zdHlsaXplKCdbQ2lyY3VsYXJdJywgJ3NwZWNpYWwnKTtcbiAgICB9XG4gIH1cbiAgaWYgKGlzVW5kZWZpbmVkKG5hbWUpKSB7XG4gICAgaWYgKGFycmF5ICYmIGtleS5tYXRjaCgvXlxcZCskLykpIHtcbiAgICAgIHJldHVybiBzdHI7XG4gICAgfVxuICAgIG5hbWUgPSBKU09OLnN0cmluZ2lmeSgnJyArIGtleSk7XG4gICAgaWYgKG5hbWUubWF0Y2goL15cIihbYS16QS1aX11bYS16QS1aXzAtOV0qKVwiJC8pKSB7XG4gICAgICBuYW1lID0gbmFtZS5zdWJzdHIoMSwgbmFtZS5sZW5ndGggLSAyKTtcbiAgICAgIG5hbWUgPSBjdHguc3R5bGl6ZShuYW1lLCAnbmFtZScpO1xuICAgIH0gZWxzZSB7XG4gICAgICBuYW1lID0gbmFtZS5yZXBsYWNlKC8nL2csIFwiXFxcXCdcIilcbiAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL1xcXFxcIi9nLCAnXCInKVxuICAgICAgICAgICAgICAgICAucmVwbGFjZSgvKF5cInxcIiQpL2csIFwiJ1wiKTtcbiAgICAgIG5hbWUgPSBjdHguc3R5bGl6ZShuYW1lLCAnc3RyaW5nJyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5hbWUgKyAnOiAnICsgc3RyO1xufVxuXG5cbmZ1bmN0aW9uIHJlZHVjZVRvU2luZ2xlU3RyaW5nKG91dHB1dCwgYmFzZSwgYnJhY2VzKSB7XG4gIHZhciBudW1MaW5lc0VzdCA9IDA7XG4gIHZhciBsZW5ndGggPSBvdXRwdXQucmVkdWNlKGZ1bmN0aW9uKHByZXYsIGN1cikge1xuICAgIG51bUxpbmVzRXN0Kys7XG4gICAgaWYgKGN1ci5pbmRleE9mKCdcXG4nKSA+PSAwKSBudW1MaW5lc0VzdCsrO1xuICAgIHJldHVybiBwcmV2ICsgY3VyLnJlcGxhY2UoL1xcdTAwMWJcXFtcXGRcXGQ/bS9nLCAnJykubGVuZ3RoICsgMTtcbiAgfSwgMCk7XG5cbiAgaWYgKGxlbmd0aCA+IDYwKSB7XG4gICAgcmV0dXJuIGJyYWNlc1swXSArXG4gICAgICAgICAgIChiYXNlID09PSAnJyA/ICcnIDogYmFzZSArICdcXG4gJykgK1xuICAgICAgICAgICAnICcgK1xuICAgICAgICAgICBvdXRwdXQuam9pbignLFxcbiAgJykgK1xuICAgICAgICAgICAnICcgK1xuICAgICAgICAgICBicmFjZXNbMV07XG4gIH1cblxuICByZXR1cm4gYnJhY2VzWzBdICsgYmFzZSArICcgJyArIG91dHB1dC5qb2luKCcsICcpICsgJyAnICsgYnJhY2VzWzFdO1xufVxuXG5cbi8vIE5PVEU6IFRoZXNlIHR5cGUgY2hlY2tpbmcgZnVuY3Rpb25zIGludGVudGlvbmFsbHkgZG9uJ3QgdXNlIGBpbnN0YW5jZW9mYFxuLy8gYmVjYXVzZSBpdCBpcyBmcmFnaWxlIGFuZCBjYW4gYmUgZWFzaWx5IGZha2VkIHdpdGggYE9iamVjdC5jcmVhdGUoKWAuXG5mdW5jdGlvbiBpc0FycmF5KGFyKSB7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KGFyKTtcbn1cbmV4cG9ydHMuaXNBcnJheSA9IGlzQXJyYXk7XG5cbmZ1bmN0aW9uIGlzQm9vbGVhbihhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdib29sZWFuJztcbn1cbmV4cG9ydHMuaXNCb29sZWFuID0gaXNCb29sZWFuO1xuXG5mdW5jdGlvbiBpc051bGwoYXJnKSB7XG4gIHJldHVybiBhcmcgPT09IG51bGw7XG59XG5leHBvcnRzLmlzTnVsbCA9IGlzTnVsbDtcblxuZnVuY3Rpb24gaXNOdWxsT3JVbmRlZmluZWQoYXJnKSB7XG4gIHJldHVybiBhcmcgPT0gbnVsbDtcbn1cbmV4cG9ydHMuaXNOdWxsT3JVbmRlZmluZWQgPSBpc051bGxPclVuZGVmaW5lZDtcblxuZnVuY3Rpb24gaXNOdW1iZXIoYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnbnVtYmVyJztcbn1cbmV4cG9ydHMuaXNOdW1iZXIgPSBpc051bWJlcjtcblxuZnVuY3Rpb24gaXNTdHJpbmcoYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnc3RyaW5nJztcbn1cbmV4cG9ydHMuaXNTdHJpbmcgPSBpc1N0cmluZztcblxuZnVuY3Rpb24gaXNTeW1ib2woYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnc3ltYm9sJztcbn1cbmV4cG9ydHMuaXNTeW1ib2wgPSBpc1N5bWJvbDtcblxuZnVuY3Rpb24gaXNVbmRlZmluZWQoYXJnKSB7XG4gIHJldHVybiBhcmcgPT09IHZvaWQgMDtcbn1cbmV4cG9ydHMuaXNVbmRlZmluZWQgPSBpc1VuZGVmaW5lZDtcblxuZnVuY3Rpb24gaXNSZWdFeHAocmUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0KHJlKSAmJiBvYmplY3RUb1N0cmluZyhyZSkgPT09ICdbb2JqZWN0IFJlZ0V4cF0nO1xufVxuZXhwb3J0cy5pc1JlZ0V4cCA9IGlzUmVnRXhwO1xuXG5mdW5jdGlvbiBpc09iamVjdChhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdvYmplY3QnICYmIGFyZyAhPT0gbnVsbDtcbn1cbmV4cG9ydHMuaXNPYmplY3QgPSBpc09iamVjdDtcblxuZnVuY3Rpb24gaXNEYXRlKGQpIHtcbiAgcmV0dXJuIGlzT2JqZWN0KGQpICYmIG9iamVjdFRvU3RyaW5nKGQpID09PSAnW29iamVjdCBEYXRlXSc7XG59XG5leHBvcnRzLmlzRGF0ZSA9IGlzRGF0ZTtcblxuZnVuY3Rpb24gaXNFcnJvcihlKSB7XG4gIHJldHVybiBpc09iamVjdChlKSAmJlxuICAgICAgKG9iamVjdFRvU3RyaW5nKGUpID09PSAnW29iamVjdCBFcnJvcl0nIHx8IGUgaW5zdGFuY2VvZiBFcnJvcik7XG59XG5leHBvcnRzLmlzRXJyb3IgPSBpc0Vycm9yO1xuXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ2Z1bmN0aW9uJztcbn1cbmV4cG9ydHMuaXNGdW5jdGlvbiA9IGlzRnVuY3Rpb247XG5cbmZ1bmN0aW9uIGlzUHJpbWl0aXZlKGFyZykge1xuICByZXR1cm4gYXJnID09PSBudWxsIHx8XG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnYm9vbGVhbicgfHxcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdudW1iZXInIHx8XG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnc3RyaW5nJyB8fFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ3N5bWJvbCcgfHwgIC8vIEVTNiBzeW1ib2xcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICd1bmRlZmluZWQnO1xufVxuZXhwb3J0cy5pc1ByaW1pdGl2ZSA9IGlzUHJpbWl0aXZlO1xuXG5leHBvcnRzLmlzQnVmZmVyID0gcmVxdWlyZSgnLi9zdXBwb3J0L2lzQnVmZmVyJyk7XG5cbmZ1bmN0aW9uIG9iamVjdFRvU3RyaW5nKG8pIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKTtcbn1cblxuXG5mdW5jdGlvbiBwYWQobikge1xuICByZXR1cm4gbiA8IDEwID8gJzAnICsgbi50b1N0cmluZygxMCkgOiBuLnRvU3RyaW5nKDEwKTtcbn1cblxuXG52YXIgbW9udGhzID0gWydKYW4nLCAnRmViJywgJ01hcicsICdBcHInLCAnTWF5JywgJ0p1bicsICdKdWwnLCAnQXVnJywgJ1NlcCcsXG4gICAgICAgICAgICAgICdPY3QnLCAnTm92JywgJ0RlYyddO1xuXG4vLyAyNiBGZWIgMTY6MTk6MzRcbmZ1bmN0aW9uIHRpbWVzdGFtcCgpIHtcbiAgdmFyIGQgPSBuZXcgRGF0ZSgpO1xuICB2YXIgdGltZSA9IFtwYWQoZC5nZXRIb3VycygpKSxcbiAgICAgICAgICAgICAgcGFkKGQuZ2V0TWludXRlcygpKSxcbiAgICAgICAgICAgICAgcGFkKGQuZ2V0U2Vjb25kcygpKV0uam9pbignOicpO1xuICByZXR1cm4gW2QuZ2V0RGF0ZSgpLCBtb250aHNbZC5nZXRNb250aCgpXSwgdGltZV0uam9pbignICcpO1xufVxuXG5cbi8vIGxvZyBpcyBqdXN0IGEgdGhpbiB3cmFwcGVyIHRvIGNvbnNvbGUubG9nIHRoYXQgcHJlcGVuZHMgYSB0aW1lc3RhbXBcbmV4cG9ydHMubG9nID0gZnVuY3Rpb24oKSB7XG4gIGNvbnNvbGUubG9nKCclcyAtICVzJywgdGltZXN0YW1wKCksIGV4cG9ydHMuZm9ybWF0LmFwcGx5KGV4cG9ydHMsIGFyZ3VtZW50cykpO1xufTtcblxuXG4vKipcbiAqIEluaGVyaXQgdGhlIHByb3RvdHlwZSBtZXRob2RzIGZyb20gb25lIGNvbnN0cnVjdG9yIGludG8gYW5vdGhlci5cbiAqXG4gKiBUaGUgRnVuY3Rpb24ucHJvdG90eXBlLmluaGVyaXRzIGZyb20gbGFuZy5qcyByZXdyaXR0ZW4gYXMgYSBzdGFuZGFsb25lXG4gKiBmdW5jdGlvbiAobm90IG9uIEZ1bmN0aW9uLnByb3RvdHlwZSkuIE5PVEU6IElmIHRoaXMgZmlsZSBpcyB0byBiZSBsb2FkZWRcbiAqIGR1cmluZyBib290c3RyYXBwaW5nIHRoaXMgZnVuY3Rpb24gbmVlZHMgdG8gYmUgcmV3cml0dGVuIHVzaW5nIHNvbWUgbmF0aXZlXG4gKiBmdW5jdGlvbnMgYXMgcHJvdG90eXBlIHNldHVwIHVzaW5nIG5vcm1hbCBKYXZhU2NyaXB0IGRvZXMgbm90IHdvcmsgYXNcbiAqIGV4cGVjdGVkIGR1cmluZyBib290c3RyYXBwaW5nIChzZWUgbWlycm9yLmpzIGluIHIxMTQ5MDMpLlxuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGN0b3IgQ29uc3RydWN0b3IgZnVuY3Rpb24gd2hpY2ggbmVlZHMgdG8gaW5oZXJpdCB0aGVcbiAqICAgICBwcm90b3R5cGUuXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBzdXBlckN0b3IgQ29uc3RydWN0b3IgZnVuY3Rpb24gdG8gaW5oZXJpdCBwcm90b3R5cGUgZnJvbS5cbiAqL1xuZXhwb3J0cy5pbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG5cbmV4cG9ydHMuX2V4dGVuZCA9IGZ1bmN0aW9uKG9yaWdpbiwgYWRkKSB7XG4gIC8vIERvbid0IGRvIGFueXRoaW5nIGlmIGFkZCBpc24ndCBhbiBvYmplY3RcbiAgaWYgKCFhZGQgfHwgIWlzT2JqZWN0KGFkZCkpIHJldHVybiBvcmlnaW47XG5cbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhhZGQpO1xuICB2YXIgaSA9IGtleXMubGVuZ3RoO1xuICB3aGlsZSAoaS0tKSB7XG4gICAgb3JpZ2luW2tleXNbaV1dID0gYWRkW2tleXNbaV1dO1xuICB9XG4gIHJldHVybiBvcmlnaW47XG59O1xuXG5mdW5jdGlvbiBoYXNPd25Qcm9wZXJ0eShvYmosIHByb3ApIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApO1xufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gKHdlYnBhY2spL34vbm9kZS1saWJzLWJyb3dzZXIvfi91dGlsL3V0aWwuanNcbi8vIG1vZHVsZSBpZCA9IDIwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNCdWZmZXIoYXJnKSB7XG4gIHJldHVybiBhcmcgJiYgdHlwZW9mIGFyZyA9PT0gJ29iamVjdCdcbiAgICAmJiB0eXBlb2YgYXJnLmNvcHkgPT09ICdmdW5jdGlvbidcbiAgICAmJiB0eXBlb2YgYXJnLmZpbGwgPT09ICdmdW5jdGlvbidcbiAgICAmJiB0eXBlb2YgYXJnLnJlYWRVSW50OCA9PT0gJ2Z1bmN0aW9uJztcbn1cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAod2VicGFjaykvfi9ub2RlLWxpYnMtYnJvd3Nlci9+L3V0aWwvc3VwcG9ydC9pc0J1ZmZlckJyb3dzZXIuanNcbi8vIG1vZHVsZSBpZCA9IDIxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsImlmICh0eXBlb2YgT2JqZWN0LmNyZWF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAvLyBpbXBsZW1lbnRhdGlvbiBmcm9tIHN0YW5kYXJkIG5vZGUuanMgJ3V0aWwnIG1vZHVsZVxuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGluaGVyaXRzKGN0b3IsIHN1cGVyQ3Rvcikge1xuICAgIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yXG4gICAgY3Rvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ3Rvci5wcm90b3R5cGUsIHtcbiAgICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICAgIHZhbHVlOiBjdG9yLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgfVxuICAgIH0pO1xuICB9O1xufSBlbHNlIHtcbiAgLy8gb2xkIHNjaG9vbCBzaGltIGZvciBvbGQgYnJvd3NlcnNcbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpbmhlcml0cyhjdG9yLCBzdXBlckN0b3IpIHtcbiAgICBjdG9yLnN1cGVyXyA9IHN1cGVyQ3RvclxuICAgIHZhciBUZW1wQ3RvciA9IGZ1bmN0aW9uICgpIHt9XG4gICAgVGVtcEN0b3IucHJvdG90eXBlID0gc3VwZXJDdG9yLnByb3RvdHlwZVxuICAgIGN0b3IucHJvdG90eXBlID0gbmV3IFRlbXBDdG9yKClcbiAgICBjdG9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGN0b3JcbiAgfVxufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gKHdlYnBhY2spL34vbm9kZS1saWJzLWJyb3dzZXIvfi91dGlsL34vaW5oZXJpdHMvaW5oZXJpdHNfYnJvd3Nlci5qc1xuLy8gbW9kdWxlIGlkID0gMjJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbm1vZHVsZS5leHBvcnRzID0gU3RyZWFtO1xuXG52YXIgRUUgPSByZXF1aXJlKCdldmVudHMnKS5FdmVudEVtaXR0ZXI7XG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xuXG5pbmhlcml0cyhTdHJlYW0sIEVFKTtcblN0cmVhbS5SZWFkYWJsZSA9IHJlcXVpcmUoJ3JlYWRhYmxlLXN0cmVhbS9yZWFkYWJsZS5qcycpO1xuU3RyZWFtLldyaXRhYmxlID0gcmVxdWlyZSgncmVhZGFibGUtc3RyZWFtL3dyaXRhYmxlLmpzJyk7XG5TdHJlYW0uRHVwbGV4ID0gcmVxdWlyZSgncmVhZGFibGUtc3RyZWFtL2R1cGxleC5qcycpO1xuU3RyZWFtLlRyYW5zZm9ybSA9IHJlcXVpcmUoJ3JlYWRhYmxlLXN0cmVhbS90cmFuc2Zvcm0uanMnKTtcblN0cmVhbS5QYXNzVGhyb3VnaCA9IHJlcXVpcmUoJ3JlYWRhYmxlLXN0cmVhbS9wYXNzdGhyb3VnaC5qcycpO1xuXG4vLyBCYWNrd2FyZHMtY29tcGF0IHdpdGggbm9kZSAwLjQueFxuU3RyZWFtLlN0cmVhbSA9IFN0cmVhbTtcblxuXG5cbi8vIG9sZC1zdHlsZSBzdHJlYW1zLiAgTm90ZSB0aGF0IHRoZSBwaXBlIG1ldGhvZCAodGhlIG9ubHkgcmVsZXZhbnRcbi8vIHBhcnQgb2YgdGhpcyBjbGFzcykgaXMgb3ZlcnJpZGRlbiBpbiB0aGUgUmVhZGFibGUgY2xhc3MuXG5cbmZ1bmN0aW9uIFN0cmVhbSgpIHtcbiAgRUUuY2FsbCh0aGlzKTtcbn1cblxuU3RyZWFtLnByb3RvdHlwZS5waXBlID0gZnVuY3Rpb24oZGVzdCwgb3B0aW9ucykge1xuICB2YXIgc291cmNlID0gdGhpcztcblxuICBmdW5jdGlvbiBvbmRhdGEoY2h1bmspIHtcbiAgICBpZiAoZGVzdC53cml0YWJsZSkge1xuICAgICAgaWYgKGZhbHNlID09PSBkZXN0LndyaXRlKGNodW5rKSAmJiBzb3VyY2UucGF1c2UpIHtcbiAgICAgICAgc291cmNlLnBhdXNlKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgc291cmNlLm9uKCdkYXRhJywgb25kYXRhKTtcblxuICBmdW5jdGlvbiBvbmRyYWluKCkge1xuICAgIGlmIChzb3VyY2UucmVhZGFibGUgJiYgc291cmNlLnJlc3VtZSkge1xuICAgICAgc291cmNlLnJlc3VtZSgpO1xuICAgIH1cbiAgfVxuXG4gIGRlc3Qub24oJ2RyYWluJywgb25kcmFpbik7XG5cbiAgLy8gSWYgdGhlICdlbmQnIG9wdGlvbiBpcyBub3Qgc3VwcGxpZWQsIGRlc3QuZW5kKCkgd2lsbCBiZSBjYWxsZWQgd2hlblxuICAvLyBzb3VyY2UgZ2V0cyB0aGUgJ2VuZCcgb3IgJ2Nsb3NlJyBldmVudHMuICBPbmx5IGRlc3QuZW5kKCkgb25jZS5cbiAgaWYgKCFkZXN0Ll9pc1N0ZGlvICYmICghb3B0aW9ucyB8fCBvcHRpb25zLmVuZCAhPT0gZmFsc2UpKSB7XG4gICAgc291cmNlLm9uKCdlbmQnLCBvbmVuZCk7XG4gICAgc291cmNlLm9uKCdjbG9zZScsIG9uY2xvc2UpO1xuICB9XG5cbiAgdmFyIGRpZE9uRW5kID0gZmFsc2U7XG4gIGZ1bmN0aW9uIG9uZW5kKCkge1xuICAgIGlmIChkaWRPbkVuZCkgcmV0dXJuO1xuICAgIGRpZE9uRW5kID0gdHJ1ZTtcblxuICAgIGRlc3QuZW5kKCk7XG4gIH1cblxuXG4gIGZ1bmN0aW9uIG9uY2xvc2UoKSB7XG4gICAgaWYgKGRpZE9uRW5kKSByZXR1cm47XG4gICAgZGlkT25FbmQgPSB0cnVlO1xuXG4gICAgaWYgKHR5cGVvZiBkZXN0LmRlc3Ryb3kgPT09ICdmdW5jdGlvbicpIGRlc3QuZGVzdHJveSgpO1xuICB9XG5cbiAgLy8gZG9uJ3QgbGVhdmUgZGFuZ2xpbmcgcGlwZXMgd2hlbiB0aGVyZSBhcmUgZXJyb3JzLlxuICBmdW5jdGlvbiBvbmVycm9yKGVyKSB7XG4gICAgY2xlYW51cCgpO1xuICAgIGlmIChFRS5saXN0ZW5lckNvdW50KHRoaXMsICdlcnJvcicpID09PSAwKSB7XG4gICAgICB0aHJvdyBlcjsgLy8gVW5oYW5kbGVkIHN0cmVhbSBlcnJvciBpbiBwaXBlLlxuICAgIH1cbiAgfVxuXG4gIHNvdXJjZS5vbignZXJyb3InLCBvbmVycm9yKTtcbiAgZGVzdC5vbignZXJyb3InLCBvbmVycm9yKTtcblxuICAvLyByZW1vdmUgYWxsIHRoZSBldmVudCBsaXN0ZW5lcnMgdGhhdCB3ZXJlIGFkZGVkLlxuICBmdW5jdGlvbiBjbGVhbnVwKCkge1xuICAgIHNvdXJjZS5yZW1vdmVMaXN0ZW5lcignZGF0YScsIG9uZGF0YSk7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignZHJhaW4nLCBvbmRyYWluKTtcblxuICAgIHNvdXJjZS5yZW1vdmVMaXN0ZW5lcignZW5kJywgb25lbmQpO1xuICAgIHNvdXJjZS5yZW1vdmVMaXN0ZW5lcignY2xvc2UnLCBvbmNsb3NlKTtcblxuICAgIHNvdXJjZS5yZW1vdmVMaXN0ZW5lcignZXJyb3InLCBvbmVycm9yKTtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIG9uZXJyb3IpO1xuXG4gICAgc291cmNlLnJlbW92ZUxpc3RlbmVyKCdlbmQnLCBjbGVhbnVwKTtcbiAgICBzb3VyY2UucmVtb3ZlTGlzdGVuZXIoJ2Nsb3NlJywgY2xlYW51cCk7XG5cbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdjbG9zZScsIGNsZWFudXApO1xuICB9XG5cbiAgc291cmNlLm9uKCdlbmQnLCBjbGVhbnVwKTtcbiAgc291cmNlLm9uKCdjbG9zZScsIGNsZWFudXApO1xuXG4gIGRlc3Qub24oJ2Nsb3NlJywgY2xlYW51cCk7XG5cbiAgZGVzdC5lbWl0KCdwaXBlJywgc291cmNlKTtcblxuICAvLyBBbGxvdyBmb3IgdW5peC1saWtlIHVzYWdlOiBBLnBpcGUoQikucGlwZShDKVxuICByZXR1cm4gZGVzdDtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAod2VicGFjaykvfi9ub2RlLWxpYnMtYnJvd3Nlci9+L3N0cmVhbS1icm93c2VyaWZ5L2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAyM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuZnVuY3Rpb24gRXZlbnRFbWl0dGVyKCkge1xuICB0aGlzLl9ldmVudHMgPSB0aGlzLl9ldmVudHMgfHwge307XG4gIHRoaXMuX21heExpc3RlbmVycyA9IHRoaXMuX21heExpc3RlbmVycyB8fCB1bmRlZmluZWQ7XG59XG5tb2R1bGUuZXhwb3J0cyA9IEV2ZW50RW1pdHRlcjtcblxuLy8gQmFja3dhcmRzLWNvbXBhdCB3aXRoIG5vZGUgMC4xMC54XG5FdmVudEVtaXR0ZXIuRXZlbnRFbWl0dGVyID0gRXZlbnRFbWl0dGVyO1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLl9ldmVudHMgPSB1bmRlZmluZWQ7XG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLl9tYXhMaXN0ZW5lcnMgPSB1bmRlZmluZWQ7XG5cbi8vIEJ5IGRlZmF1bHQgRXZlbnRFbWl0dGVycyB3aWxsIHByaW50IGEgd2FybmluZyBpZiBtb3JlIHRoYW4gMTAgbGlzdGVuZXJzIGFyZVxuLy8gYWRkZWQgdG8gaXQuIFRoaXMgaXMgYSB1c2VmdWwgZGVmYXVsdCB3aGljaCBoZWxwcyBmaW5kaW5nIG1lbW9yeSBsZWFrcy5cbkV2ZW50RW1pdHRlci5kZWZhdWx0TWF4TGlzdGVuZXJzID0gMTA7XG5cbi8vIE9idmlvdXNseSBub3QgYWxsIEVtaXR0ZXJzIHNob3VsZCBiZSBsaW1pdGVkIHRvIDEwLiBUaGlzIGZ1bmN0aW9uIGFsbG93c1xuLy8gdGhhdCB0byBiZSBpbmNyZWFzZWQuIFNldCB0byB6ZXJvIGZvciB1bmxpbWl0ZWQuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnNldE1heExpc3RlbmVycyA9IGZ1bmN0aW9uKG4pIHtcbiAgaWYgKCFpc051bWJlcihuKSB8fCBuIDwgMCB8fCBpc05hTihuKSlcbiAgICB0aHJvdyBUeXBlRXJyb3IoJ24gbXVzdCBiZSBhIHBvc2l0aXZlIG51bWJlcicpO1xuICB0aGlzLl9tYXhMaXN0ZW5lcnMgPSBuO1xuICByZXR1cm4gdGhpcztcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZW1pdCA9IGZ1bmN0aW9uKHR5cGUpIHtcbiAgdmFyIGVyLCBoYW5kbGVyLCBsZW4sIGFyZ3MsIGksIGxpc3RlbmVycztcblxuICBpZiAoIXRoaXMuX2V2ZW50cylcbiAgICB0aGlzLl9ldmVudHMgPSB7fTtcblxuICAvLyBJZiB0aGVyZSBpcyBubyAnZXJyb3InIGV2ZW50IGxpc3RlbmVyIHRoZW4gdGhyb3cuXG4gIGlmICh0eXBlID09PSAnZXJyb3InKSB7XG4gICAgaWYgKCF0aGlzLl9ldmVudHMuZXJyb3IgfHxcbiAgICAgICAgKGlzT2JqZWN0KHRoaXMuX2V2ZW50cy5lcnJvcikgJiYgIXRoaXMuX2V2ZW50cy5lcnJvci5sZW5ndGgpKSB7XG4gICAgICBlciA9IGFyZ3VtZW50c1sxXTtcbiAgICAgIGlmIChlciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgIHRocm93IGVyOyAvLyBVbmhhbmRsZWQgJ2Vycm9yJyBldmVudFxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gQXQgbGVhc3QgZ2l2ZSBzb21lIGtpbmQgb2YgY29udGV4dCB0byB0aGUgdXNlclxuICAgICAgICB2YXIgZXJyID0gbmV3IEVycm9yKCdVbmNhdWdodCwgdW5zcGVjaWZpZWQgXCJlcnJvclwiIGV2ZW50LiAoJyArIGVyICsgJyknKTtcbiAgICAgICAgZXJyLmNvbnRleHQgPSBlcjtcbiAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGhhbmRsZXIgPSB0aGlzLl9ldmVudHNbdHlwZV07XG5cbiAgaWYgKGlzVW5kZWZpbmVkKGhhbmRsZXIpKVxuICAgIHJldHVybiBmYWxzZTtcblxuICBpZiAoaXNGdW5jdGlvbihoYW5kbGVyKSkge1xuICAgIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgLy8gZmFzdCBjYXNlc1xuICAgICAgY2FzZSAxOlxuICAgICAgICBoYW5kbGVyLmNhbGwodGhpcyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAyOlxuICAgICAgICBoYW5kbGVyLmNhbGwodGhpcywgYXJndW1lbnRzWzFdKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDM6XG4gICAgICAgIGhhbmRsZXIuY2FsbCh0aGlzLCBhcmd1bWVudHNbMV0sIGFyZ3VtZW50c1syXSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgLy8gc2xvd2VyXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgICAgICAgaGFuZGxlci5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNPYmplY3QoaGFuZGxlcikpIHtcbiAgICBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgICBsaXN0ZW5lcnMgPSBoYW5kbGVyLnNsaWNlKCk7XG4gICAgbGVuID0gbGlzdGVuZXJzLmxlbmd0aDtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspXG4gICAgICBsaXN0ZW5lcnNbaV0uYXBwbHkodGhpcywgYXJncyk7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuYWRkTGlzdGVuZXIgPSBmdW5jdGlvbih0eXBlLCBsaXN0ZW5lcikge1xuICB2YXIgbTtcblxuICBpZiAoIWlzRnVuY3Rpb24obGlzdGVuZXIpKVxuICAgIHRocm93IFR5cGVFcnJvcignbGlzdGVuZXIgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG5cbiAgaWYgKCF0aGlzLl9ldmVudHMpXG4gICAgdGhpcy5fZXZlbnRzID0ge307XG5cbiAgLy8gVG8gYXZvaWQgcmVjdXJzaW9uIGluIHRoZSBjYXNlIHRoYXQgdHlwZSA9PT0gXCJuZXdMaXN0ZW5lclwiISBCZWZvcmVcbiAgLy8gYWRkaW5nIGl0IHRvIHRoZSBsaXN0ZW5lcnMsIGZpcnN0IGVtaXQgXCJuZXdMaXN0ZW5lclwiLlxuICBpZiAodGhpcy5fZXZlbnRzLm5ld0xpc3RlbmVyKVxuICAgIHRoaXMuZW1pdCgnbmV3TGlzdGVuZXInLCB0eXBlLFxuICAgICAgICAgICAgICBpc0Z1bmN0aW9uKGxpc3RlbmVyLmxpc3RlbmVyKSA/XG4gICAgICAgICAgICAgIGxpc3RlbmVyLmxpc3RlbmVyIDogbGlzdGVuZXIpO1xuXG4gIGlmICghdGhpcy5fZXZlbnRzW3R5cGVdKVxuICAgIC8vIE9wdGltaXplIHRoZSBjYXNlIG9mIG9uZSBsaXN0ZW5lci4gRG9uJ3QgbmVlZCB0aGUgZXh0cmEgYXJyYXkgb2JqZWN0LlxuICAgIHRoaXMuX2V2ZW50c1t0eXBlXSA9IGxpc3RlbmVyO1xuICBlbHNlIGlmIChpc09iamVjdCh0aGlzLl9ldmVudHNbdHlwZV0pKVxuICAgIC8vIElmIHdlJ3ZlIGFscmVhZHkgZ290IGFuIGFycmF5LCBqdXN0IGFwcGVuZC5cbiAgICB0aGlzLl9ldmVudHNbdHlwZV0ucHVzaChsaXN0ZW5lcik7XG4gIGVsc2VcbiAgICAvLyBBZGRpbmcgdGhlIHNlY29uZCBlbGVtZW50LCBuZWVkIHRvIGNoYW5nZSB0byBhcnJheS5cbiAgICB0aGlzLl9ldmVudHNbdHlwZV0gPSBbdGhpcy5fZXZlbnRzW3R5cGVdLCBsaXN0ZW5lcl07XG5cbiAgLy8gQ2hlY2sgZm9yIGxpc3RlbmVyIGxlYWtcbiAgaWYgKGlzT2JqZWN0KHRoaXMuX2V2ZW50c1t0eXBlXSkgJiYgIXRoaXMuX2V2ZW50c1t0eXBlXS53YXJuZWQpIHtcbiAgICBpZiAoIWlzVW5kZWZpbmVkKHRoaXMuX21heExpc3RlbmVycykpIHtcbiAgICAgIG0gPSB0aGlzLl9tYXhMaXN0ZW5lcnM7XG4gICAgfSBlbHNlIHtcbiAgICAgIG0gPSBFdmVudEVtaXR0ZXIuZGVmYXVsdE1heExpc3RlbmVycztcbiAgICB9XG5cbiAgICBpZiAobSAmJiBtID4gMCAmJiB0aGlzLl9ldmVudHNbdHlwZV0ubGVuZ3RoID4gbSkge1xuICAgICAgdGhpcy5fZXZlbnRzW3R5cGVdLndhcm5lZCA9IHRydWU7XG4gICAgICBjb25zb2xlLmVycm9yKCcobm9kZSkgd2FybmluZzogcG9zc2libGUgRXZlbnRFbWl0dGVyIG1lbW9yeSAnICtcbiAgICAgICAgICAgICAgICAgICAgJ2xlYWsgZGV0ZWN0ZWQuICVkIGxpc3RlbmVycyBhZGRlZC4gJyArXG4gICAgICAgICAgICAgICAgICAgICdVc2UgZW1pdHRlci5zZXRNYXhMaXN0ZW5lcnMoKSB0byBpbmNyZWFzZSBsaW1pdC4nLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9ldmVudHNbdHlwZV0ubGVuZ3RoKTtcbiAgICAgIGlmICh0eXBlb2YgY29uc29sZS50cmFjZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAvLyBub3Qgc3VwcG9ydGVkIGluIElFIDEwXG4gICAgICAgIGNvbnNvbGUudHJhY2UoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub24gPSBFdmVudEVtaXR0ZXIucHJvdG90eXBlLmFkZExpc3RlbmVyO1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uY2UgPSBmdW5jdGlvbih0eXBlLCBsaXN0ZW5lcikge1xuICBpZiAoIWlzRnVuY3Rpb24obGlzdGVuZXIpKVxuICAgIHRocm93IFR5cGVFcnJvcignbGlzdGVuZXIgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG5cbiAgdmFyIGZpcmVkID0gZmFsc2U7XG5cbiAgZnVuY3Rpb24gZygpIHtcbiAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKHR5cGUsIGcpO1xuXG4gICAgaWYgKCFmaXJlZCkge1xuICAgICAgZmlyZWQgPSB0cnVlO1xuICAgICAgbGlzdGVuZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9XG4gIH1cblxuICBnLmxpc3RlbmVyID0gbGlzdGVuZXI7XG4gIHRoaXMub24odHlwZSwgZyk7XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vLyBlbWl0cyBhICdyZW1vdmVMaXN0ZW5lcicgZXZlbnQgaWZmIHRoZSBsaXN0ZW5lciB3YXMgcmVtb3ZlZFxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lciA9IGZ1bmN0aW9uKHR5cGUsIGxpc3RlbmVyKSB7XG4gIHZhciBsaXN0LCBwb3NpdGlvbiwgbGVuZ3RoLCBpO1xuXG4gIGlmICghaXNGdW5jdGlvbihsaXN0ZW5lcikpXG4gICAgdGhyb3cgVHlwZUVycm9yKCdsaXN0ZW5lciBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcblxuICBpZiAoIXRoaXMuX2V2ZW50cyB8fCAhdGhpcy5fZXZlbnRzW3R5cGVdKVxuICAgIHJldHVybiB0aGlzO1xuXG4gIGxpc3QgPSB0aGlzLl9ldmVudHNbdHlwZV07XG4gIGxlbmd0aCA9IGxpc3QubGVuZ3RoO1xuICBwb3NpdGlvbiA9IC0xO1xuXG4gIGlmIChsaXN0ID09PSBsaXN0ZW5lciB8fFxuICAgICAgKGlzRnVuY3Rpb24obGlzdC5saXN0ZW5lcikgJiYgbGlzdC5saXN0ZW5lciA9PT0gbGlzdGVuZXIpKSB7XG4gICAgZGVsZXRlIHRoaXMuX2V2ZW50c1t0eXBlXTtcbiAgICBpZiAodGhpcy5fZXZlbnRzLnJlbW92ZUxpc3RlbmVyKVxuICAgICAgdGhpcy5lbWl0KCdyZW1vdmVMaXN0ZW5lcicsIHR5cGUsIGxpc3RlbmVyKTtcblxuICB9IGVsc2UgaWYgKGlzT2JqZWN0KGxpc3QpKSB7XG4gICAgZm9yIChpID0gbGVuZ3RoOyBpLS0gPiAwOykge1xuICAgICAgaWYgKGxpc3RbaV0gPT09IGxpc3RlbmVyIHx8XG4gICAgICAgICAgKGxpc3RbaV0ubGlzdGVuZXIgJiYgbGlzdFtpXS5saXN0ZW5lciA9PT0gbGlzdGVuZXIpKSB7XG4gICAgICAgIHBvc2l0aW9uID0gaTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHBvc2l0aW9uIDwgMClcbiAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgaWYgKGxpc3QubGVuZ3RoID09PSAxKSB7XG4gICAgICBsaXN0Lmxlbmd0aCA9IDA7XG4gICAgICBkZWxldGUgdGhpcy5fZXZlbnRzW3R5cGVdO1xuICAgIH0gZWxzZSB7XG4gICAgICBsaXN0LnNwbGljZShwb3NpdGlvbiwgMSk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2V2ZW50cy5yZW1vdmVMaXN0ZW5lcilcbiAgICAgIHRoaXMuZW1pdCgncmVtb3ZlTGlzdGVuZXInLCB0eXBlLCBsaXN0ZW5lcik7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlQWxsTGlzdGVuZXJzID0gZnVuY3Rpb24odHlwZSkge1xuICB2YXIga2V5LCBsaXN0ZW5lcnM7XG5cbiAgaWYgKCF0aGlzLl9ldmVudHMpXG4gICAgcmV0dXJuIHRoaXM7XG5cbiAgLy8gbm90IGxpc3RlbmluZyBmb3IgcmVtb3ZlTGlzdGVuZXIsIG5vIG5lZWQgdG8gZW1pdFxuICBpZiAoIXRoaXMuX2V2ZW50cy5yZW1vdmVMaXN0ZW5lcikge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKVxuICAgICAgdGhpcy5fZXZlbnRzID0ge307XG4gICAgZWxzZSBpZiAodGhpcy5fZXZlbnRzW3R5cGVdKVxuICAgICAgZGVsZXRlIHRoaXMuX2V2ZW50c1t0eXBlXTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8vIGVtaXQgcmVtb3ZlTGlzdGVuZXIgZm9yIGFsbCBsaXN0ZW5lcnMgb24gYWxsIGV2ZW50c1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgIGZvciAoa2V5IGluIHRoaXMuX2V2ZW50cykge1xuICAgICAgaWYgKGtleSA9PT0gJ3JlbW92ZUxpc3RlbmVyJykgY29udGludWU7XG4gICAgICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycyhrZXkpO1xuICAgIH1cbiAgICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycygncmVtb3ZlTGlzdGVuZXInKTtcbiAgICB0aGlzLl9ldmVudHMgPSB7fTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGxpc3RlbmVycyA9IHRoaXMuX2V2ZW50c1t0eXBlXTtcblxuICBpZiAoaXNGdW5jdGlvbihsaXN0ZW5lcnMpKSB7XG4gICAgdGhpcy5yZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcnMpO1xuICB9IGVsc2UgaWYgKGxpc3RlbmVycykge1xuICAgIC8vIExJRk8gb3JkZXJcbiAgICB3aGlsZSAobGlzdGVuZXJzLmxlbmd0aClcbiAgICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXJzW2xpc3RlbmVycy5sZW5ndGggLSAxXSk7XG4gIH1cbiAgZGVsZXRlIHRoaXMuX2V2ZW50c1t0eXBlXTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJzID0gZnVuY3Rpb24odHlwZSkge1xuICB2YXIgcmV0O1xuICBpZiAoIXRoaXMuX2V2ZW50cyB8fCAhdGhpcy5fZXZlbnRzW3R5cGVdKVxuICAgIHJldCA9IFtdO1xuICBlbHNlIGlmIChpc0Z1bmN0aW9uKHRoaXMuX2V2ZW50c1t0eXBlXSkpXG4gICAgcmV0ID0gW3RoaXMuX2V2ZW50c1t0eXBlXV07XG4gIGVsc2VcbiAgICByZXQgPSB0aGlzLl9ldmVudHNbdHlwZV0uc2xpY2UoKTtcbiAgcmV0dXJuIHJldDtcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJDb3VudCA9IGZ1bmN0aW9uKHR5cGUpIHtcbiAgaWYgKHRoaXMuX2V2ZW50cykge1xuICAgIHZhciBldmxpc3RlbmVyID0gdGhpcy5fZXZlbnRzW3R5cGVdO1xuXG4gICAgaWYgKGlzRnVuY3Rpb24oZXZsaXN0ZW5lcikpXG4gICAgICByZXR1cm4gMTtcbiAgICBlbHNlIGlmIChldmxpc3RlbmVyKVxuICAgICAgcmV0dXJuIGV2bGlzdGVuZXIubGVuZ3RoO1xuICB9XG4gIHJldHVybiAwO1xufTtcblxuRXZlbnRFbWl0dGVyLmxpc3RlbmVyQ291bnQgPSBmdW5jdGlvbihlbWl0dGVyLCB0eXBlKSB7XG4gIHJldHVybiBlbWl0dGVyLmxpc3RlbmVyQ291bnQodHlwZSk7XG59O1xuXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ2Z1bmN0aW9uJztcbn1cblxuZnVuY3Rpb24gaXNOdW1iZXIoYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnbnVtYmVyJztcbn1cblxuZnVuY3Rpb24gaXNPYmplY3QoYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnb2JqZWN0JyAmJiBhcmcgIT09IG51bGw7XG59XG5cbmZ1bmN0aW9uIGlzVW5kZWZpbmVkKGFyZykge1xuICByZXR1cm4gYXJnID09PSB2b2lkIDA7XG59XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAod2VicGFjaykvfi9ub2RlLWxpYnMtYnJvd3Nlci9+L2V2ZW50cy9ldmVudHMuanNcbi8vIG1vZHVsZSBpZCA9IDI0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsImlmICh0eXBlb2YgT2JqZWN0LmNyZWF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAvLyBpbXBsZW1lbnRhdGlvbiBmcm9tIHN0YW5kYXJkIG5vZGUuanMgJ3V0aWwnIG1vZHVsZVxuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGluaGVyaXRzKGN0b3IsIHN1cGVyQ3Rvcikge1xuICAgIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yXG4gICAgY3Rvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ3Rvci5wcm90b3R5cGUsIHtcbiAgICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICAgIHZhbHVlOiBjdG9yLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgfVxuICAgIH0pO1xuICB9O1xufSBlbHNlIHtcbiAgLy8gb2xkIHNjaG9vbCBzaGltIGZvciBvbGQgYnJvd3NlcnNcbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpbmhlcml0cyhjdG9yLCBzdXBlckN0b3IpIHtcbiAgICBjdG9yLnN1cGVyXyA9IHN1cGVyQ3RvclxuICAgIHZhciBUZW1wQ3RvciA9IGZ1bmN0aW9uICgpIHt9XG4gICAgVGVtcEN0b3IucHJvdG90eXBlID0gc3VwZXJDdG9yLnByb3RvdHlwZVxuICAgIGN0b3IucHJvdG90eXBlID0gbmV3IFRlbXBDdG9yKClcbiAgICBjdG9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGN0b3JcbiAgfVxufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gKHdlYnBhY2spL34vbm9kZS1saWJzLWJyb3dzZXIvfi9zdHJlYW0tYnJvd3NlcmlmeS9+L2luaGVyaXRzL2luaGVyaXRzX2Jyb3dzZXIuanNcbi8vIG1vZHVsZSBpZCA9IDI1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbGliL19zdHJlYW1fcmVhZGFibGUuanMnKTtcbmV4cG9ydHMuU3RyZWFtID0gcmVxdWlyZSgnc3RyZWFtJyk7XG5leHBvcnRzLlJlYWRhYmxlID0gZXhwb3J0cztcbmV4cG9ydHMuV3JpdGFibGUgPSByZXF1aXJlKCcuL2xpYi9fc3RyZWFtX3dyaXRhYmxlLmpzJyk7XG5leHBvcnRzLkR1cGxleCA9IHJlcXVpcmUoJy4vbGliL19zdHJlYW1fZHVwbGV4LmpzJyk7XG5leHBvcnRzLlRyYW5zZm9ybSA9IHJlcXVpcmUoJy4vbGliL19zdHJlYW1fdHJhbnNmb3JtLmpzJyk7XG5leHBvcnRzLlBhc3NUaHJvdWdoID0gcmVxdWlyZSgnLi9saWIvX3N0cmVhbV9wYXNzdGhyb3VnaC5qcycpO1xuaWYgKCFwcm9jZXNzLmJyb3dzZXIgJiYgcHJvY2Vzcy5lbnYuUkVBREFCTEVfU1RSRUFNID09PSAnZGlzYWJsZScpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCdzdHJlYW0nKTtcbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vICh3ZWJwYWNrKS9+L25vZGUtbGlicy1icm93c2VyL34vcmVhZGFibGUtc3RyZWFtL3JlYWRhYmxlLmpzXG4vLyBtb2R1bGUgaWQgPSAyNlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxubW9kdWxlLmV4cG9ydHMgPSBSZWFkYWJsZTtcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnaXNhcnJheScpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBCdWZmZXIgPSByZXF1aXJlKCdidWZmZXInKS5CdWZmZXI7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuUmVhZGFibGUuUmVhZGFibGVTdGF0ZSA9IFJlYWRhYmxlU3RhdGU7XG5cbnZhciBFRSA9IHJlcXVpcmUoJ2V2ZW50cycpLkV2ZW50RW1pdHRlcjtcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbmlmICghRUUubGlzdGVuZXJDb3VudCkgRUUubGlzdGVuZXJDb3VudCA9IGZ1bmN0aW9uKGVtaXR0ZXIsIHR5cGUpIHtcbiAgcmV0dXJuIGVtaXR0ZXIubGlzdGVuZXJzKHR5cGUpLmxlbmd0aDtcbn07XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxudmFyIFN0cmVhbSA9IHJlcXVpcmUoJ3N0cmVhbScpO1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIHV0aWwgPSByZXF1aXJlKCdjb3JlLXV0aWwtaXMnKTtcbnV0aWwuaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbnZhciBTdHJpbmdEZWNvZGVyO1xuXG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgZGVidWcgPSByZXF1aXJlKCd1dGlsJyk7XG5pZiAoZGVidWcgJiYgZGVidWcuZGVidWdsb2cpIHtcbiAgZGVidWcgPSBkZWJ1Zy5kZWJ1Z2xvZygnc3RyZWFtJyk7XG59IGVsc2Uge1xuICBkZWJ1ZyA9IGZ1bmN0aW9uICgpIHt9O1xufVxuLyo8L3JlcGxhY2VtZW50PiovXG5cblxudXRpbC5pbmhlcml0cyhSZWFkYWJsZSwgU3RyZWFtKTtcblxuZnVuY3Rpb24gUmVhZGFibGVTdGF0ZShvcHRpb25zLCBzdHJlYW0pIHtcbiAgdmFyIER1cGxleCA9IHJlcXVpcmUoJy4vX3N0cmVhbV9kdXBsZXgnKTtcblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICAvLyB0aGUgcG9pbnQgYXQgd2hpY2ggaXQgc3RvcHMgY2FsbGluZyBfcmVhZCgpIHRvIGZpbGwgdGhlIGJ1ZmZlclxuICAvLyBOb3RlOiAwIGlzIGEgdmFsaWQgdmFsdWUsIG1lYW5zIFwiZG9uJ3QgY2FsbCBfcmVhZCBwcmVlbXB0aXZlbHkgZXZlclwiXG4gIHZhciBod20gPSBvcHRpb25zLmhpZ2hXYXRlck1hcms7XG4gIHZhciBkZWZhdWx0SHdtID0gb3B0aW9ucy5vYmplY3RNb2RlID8gMTYgOiAxNiAqIDEwMjQ7XG4gIHRoaXMuaGlnaFdhdGVyTWFyayA9IChod20gfHwgaHdtID09PSAwKSA/IGh3bSA6IGRlZmF1bHRId207XG5cbiAgLy8gY2FzdCB0byBpbnRzLlxuICB0aGlzLmhpZ2hXYXRlck1hcmsgPSB+fnRoaXMuaGlnaFdhdGVyTWFyaztcblxuICB0aGlzLmJ1ZmZlciA9IFtdO1xuICB0aGlzLmxlbmd0aCA9IDA7XG4gIHRoaXMucGlwZXMgPSBudWxsO1xuICB0aGlzLnBpcGVzQ291bnQgPSAwO1xuICB0aGlzLmZsb3dpbmcgPSBudWxsO1xuICB0aGlzLmVuZGVkID0gZmFsc2U7XG4gIHRoaXMuZW5kRW1pdHRlZCA9IGZhbHNlO1xuICB0aGlzLnJlYWRpbmcgPSBmYWxzZTtcblxuICAvLyBhIGZsYWcgdG8gYmUgYWJsZSB0byB0ZWxsIGlmIHRoZSBvbndyaXRlIGNiIGlzIGNhbGxlZCBpbW1lZGlhdGVseSxcbiAgLy8gb3Igb24gYSBsYXRlciB0aWNrLiAgV2Ugc2V0IHRoaXMgdG8gdHJ1ZSBhdCBmaXJzdCwgYmVjYXVzZSBhbnlcbiAgLy8gYWN0aW9ucyB0aGF0IHNob3VsZG4ndCBoYXBwZW4gdW50aWwgXCJsYXRlclwiIHNob3VsZCBnZW5lcmFsbHkgYWxzb1xuICAvLyBub3QgaGFwcGVuIGJlZm9yZSB0aGUgZmlyc3Qgd3JpdGUgY2FsbC5cbiAgdGhpcy5zeW5jID0gdHJ1ZTtcblxuICAvLyB3aGVuZXZlciB3ZSByZXR1cm4gbnVsbCwgdGhlbiB3ZSBzZXQgYSBmbGFnIHRvIHNheVxuICAvLyB0aGF0IHdlJ3JlIGF3YWl0aW5nIGEgJ3JlYWRhYmxlJyBldmVudCBlbWlzc2lvbi5cbiAgdGhpcy5uZWVkUmVhZGFibGUgPSBmYWxzZTtcbiAgdGhpcy5lbWl0dGVkUmVhZGFibGUgPSBmYWxzZTtcbiAgdGhpcy5yZWFkYWJsZUxpc3RlbmluZyA9IGZhbHNlO1xuXG5cbiAgLy8gb2JqZWN0IHN0cmVhbSBmbGFnLiBVc2VkIHRvIG1ha2UgcmVhZChuKSBpZ25vcmUgbiBhbmQgdG9cbiAgLy8gbWFrZSBhbGwgdGhlIGJ1ZmZlciBtZXJnaW5nIGFuZCBsZW5ndGggY2hlY2tzIGdvIGF3YXlcbiAgdGhpcy5vYmplY3RNb2RlID0gISFvcHRpb25zLm9iamVjdE1vZGU7XG5cbiAgaWYgKHN0cmVhbSBpbnN0YW5jZW9mIER1cGxleClcbiAgICB0aGlzLm9iamVjdE1vZGUgPSB0aGlzLm9iamVjdE1vZGUgfHwgISFvcHRpb25zLnJlYWRhYmxlT2JqZWN0TW9kZTtcblxuICAvLyBDcnlwdG8gaXMga2luZCBvZiBvbGQgYW5kIGNydXN0eS4gIEhpc3RvcmljYWxseSwgaXRzIGRlZmF1bHQgc3RyaW5nXG4gIC8vIGVuY29kaW5nIGlzICdiaW5hcnknIHNvIHdlIGhhdmUgdG8gbWFrZSB0aGlzIGNvbmZpZ3VyYWJsZS5cbiAgLy8gRXZlcnl0aGluZyBlbHNlIGluIHRoZSB1bml2ZXJzZSB1c2VzICd1dGY4JywgdGhvdWdoLlxuICB0aGlzLmRlZmF1bHRFbmNvZGluZyA9IG9wdGlvbnMuZGVmYXVsdEVuY29kaW5nIHx8ICd1dGY4JztcblxuICAvLyB3aGVuIHBpcGluZywgd2Ugb25seSBjYXJlIGFib3V0ICdyZWFkYWJsZScgZXZlbnRzIHRoYXQgaGFwcGVuXG4gIC8vIGFmdGVyIHJlYWQoKWluZyBhbGwgdGhlIGJ5dGVzIGFuZCBub3QgZ2V0dGluZyBhbnkgcHVzaGJhY2suXG4gIHRoaXMucmFuT3V0ID0gZmFsc2U7XG5cbiAgLy8gdGhlIG51bWJlciBvZiB3cml0ZXJzIHRoYXQgYXJlIGF3YWl0aW5nIGEgZHJhaW4gZXZlbnQgaW4gLnBpcGUoKXNcbiAgdGhpcy5hd2FpdERyYWluID0gMDtcblxuICAvLyBpZiB0cnVlLCBhIG1heWJlUmVhZE1vcmUgaGFzIGJlZW4gc2NoZWR1bGVkXG4gIHRoaXMucmVhZGluZ01vcmUgPSBmYWxzZTtcblxuICB0aGlzLmRlY29kZXIgPSBudWxsO1xuICB0aGlzLmVuY29kaW5nID0gbnVsbDtcbiAgaWYgKG9wdGlvbnMuZW5jb2RpbmcpIHtcbiAgICBpZiAoIVN0cmluZ0RlY29kZXIpXG4gICAgICBTdHJpbmdEZWNvZGVyID0gcmVxdWlyZSgnc3RyaW5nX2RlY29kZXIvJykuU3RyaW5nRGVjb2RlcjtcbiAgICB0aGlzLmRlY29kZXIgPSBuZXcgU3RyaW5nRGVjb2RlcihvcHRpb25zLmVuY29kaW5nKTtcbiAgICB0aGlzLmVuY29kaW5nID0gb3B0aW9ucy5lbmNvZGluZztcbiAgfVxufVxuXG5mdW5jdGlvbiBSZWFkYWJsZShvcHRpb25zKSB7XG4gIHZhciBEdXBsZXggPSByZXF1aXJlKCcuL19zdHJlYW1fZHVwbGV4Jyk7XG5cbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFJlYWRhYmxlKSlcbiAgICByZXR1cm4gbmV3IFJlYWRhYmxlKG9wdGlvbnMpO1xuXG4gIHRoaXMuX3JlYWRhYmxlU3RhdGUgPSBuZXcgUmVhZGFibGVTdGF0ZShvcHRpb25zLCB0aGlzKTtcblxuICAvLyBsZWdhY3lcbiAgdGhpcy5yZWFkYWJsZSA9IHRydWU7XG5cbiAgU3RyZWFtLmNhbGwodGhpcyk7XG59XG5cbi8vIE1hbnVhbGx5IHNob3ZlIHNvbWV0aGluZyBpbnRvIHRoZSByZWFkKCkgYnVmZmVyLlxuLy8gVGhpcyByZXR1cm5zIHRydWUgaWYgdGhlIGhpZ2hXYXRlck1hcmsgaGFzIG5vdCBiZWVuIGhpdCB5ZXQsXG4vLyBzaW1pbGFyIHRvIGhvdyBXcml0YWJsZS53cml0ZSgpIHJldHVybnMgdHJ1ZSBpZiB5b3Ugc2hvdWxkXG4vLyB3cml0ZSgpIHNvbWUgbW9yZS5cblJlYWRhYmxlLnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24oY2h1bmssIGVuY29kaW5nKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG5cbiAgaWYgKHV0aWwuaXNTdHJpbmcoY2h1bmspICYmICFzdGF0ZS5vYmplY3RNb2RlKSB7XG4gICAgZW5jb2RpbmcgPSBlbmNvZGluZyB8fCBzdGF0ZS5kZWZhdWx0RW5jb2Rpbmc7XG4gICAgaWYgKGVuY29kaW5nICE9PSBzdGF0ZS5lbmNvZGluZykge1xuICAgICAgY2h1bmsgPSBuZXcgQnVmZmVyKGNodW5rLCBlbmNvZGluZyk7XG4gICAgICBlbmNvZGluZyA9ICcnO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZWFkYWJsZUFkZENodW5rKHRoaXMsIHN0YXRlLCBjaHVuaywgZW5jb2RpbmcsIGZhbHNlKTtcbn07XG5cbi8vIFVuc2hpZnQgc2hvdWxkICphbHdheXMqIGJlIHNvbWV0aGluZyBkaXJlY3RseSBvdXQgb2YgcmVhZCgpXG5SZWFkYWJsZS5wcm90b3R5cGUudW5zaGlmdCA9IGZ1bmN0aW9uKGNodW5rKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG4gIHJldHVybiByZWFkYWJsZUFkZENodW5rKHRoaXMsIHN0YXRlLCBjaHVuaywgJycsIHRydWUpO1xufTtcblxuZnVuY3Rpb24gcmVhZGFibGVBZGRDaHVuayhzdHJlYW0sIHN0YXRlLCBjaHVuaywgZW5jb2RpbmcsIGFkZFRvRnJvbnQpIHtcbiAgdmFyIGVyID0gY2h1bmtJbnZhbGlkKHN0YXRlLCBjaHVuayk7XG4gIGlmIChlcikge1xuICAgIHN0cmVhbS5lbWl0KCdlcnJvcicsIGVyKTtcbiAgfSBlbHNlIGlmICh1dGlsLmlzTnVsbE9yVW5kZWZpbmVkKGNodW5rKSkge1xuICAgIHN0YXRlLnJlYWRpbmcgPSBmYWxzZTtcbiAgICBpZiAoIXN0YXRlLmVuZGVkKVxuICAgICAgb25Fb2ZDaHVuayhzdHJlYW0sIHN0YXRlKTtcbiAgfSBlbHNlIGlmIChzdGF0ZS5vYmplY3RNb2RlIHx8IGNodW5rICYmIGNodW5rLmxlbmd0aCA+IDApIHtcbiAgICBpZiAoc3RhdGUuZW5kZWQgJiYgIWFkZFRvRnJvbnQpIHtcbiAgICAgIHZhciBlID0gbmV3IEVycm9yKCdzdHJlYW0ucHVzaCgpIGFmdGVyIEVPRicpO1xuICAgICAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgZSk7XG4gICAgfSBlbHNlIGlmIChzdGF0ZS5lbmRFbWl0dGVkICYmIGFkZFRvRnJvbnQpIHtcbiAgICAgIHZhciBlID0gbmV3IEVycm9yKCdzdHJlYW0udW5zaGlmdCgpIGFmdGVyIGVuZCBldmVudCcpO1xuICAgICAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChzdGF0ZS5kZWNvZGVyICYmICFhZGRUb0Zyb250ICYmICFlbmNvZGluZylcbiAgICAgICAgY2h1bmsgPSBzdGF0ZS5kZWNvZGVyLndyaXRlKGNodW5rKTtcblxuICAgICAgaWYgKCFhZGRUb0Zyb250KVxuICAgICAgICBzdGF0ZS5yZWFkaW5nID0gZmFsc2U7XG5cbiAgICAgIC8vIGlmIHdlIHdhbnQgdGhlIGRhdGEgbm93LCBqdXN0IGVtaXQgaXQuXG4gICAgICBpZiAoc3RhdGUuZmxvd2luZyAmJiBzdGF0ZS5sZW5ndGggPT09IDAgJiYgIXN0YXRlLnN5bmMpIHtcbiAgICAgICAgc3RyZWFtLmVtaXQoJ2RhdGEnLCBjaHVuayk7XG4gICAgICAgIHN0cmVhbS5yZWFkKDApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gdXBkYXRlIHRoZSBidWZmZXIgaW5mby5cbiAgICAgICAgc3RhdGUubGVuZ3RoICs9IHN0YXRlLm9iamVjdE1vZGUgPyAxIDogY2h1bmsubGVuZ3RoO1xuICAgICAgICBpZiAoYWRkVG9Gcm9udClcbiAgICAgICAgICBzdGF0ZS5idWZmZXIudW5zaGlmdChjaHVuayk7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICBzdGF0ZS5idWZmZXIucHVzaChjaHVuayk7XG5cbiAgICAgICAgaWYgKHN0YXRlLm5lZWRSZWFkYWJsZSlcbiAgICAgICAgICBlbWl0UmVhZGFibGUoc3RyZWFtKTtcbiAgICAgIH1cblxuICAgICAgbWF5YmVSZWFkTW9yZShzdHJlYW0sIHN0YXRlKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoIWFkZFRvRnJvbnQpIHtcbiAgICBzdGF0ZS5yZWFkaW5nID0gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gbmVlZE1vcmVEYXRhKHN0YXRlKTtcbn1cblxuXG5cbi8vIGlmIGl0J3MgcGFzdCB0aGUgaGlnaCB3YXRlciBtYXJrLCB3ZSBjYW4gcHVzaCBpbiBzb21lIG1vcmUuXG4vLyBBbHNvLCBpZiB3ZSBoYXZlIG5vIGRhdGEgeWV0LCB3ZSBjYW4gc3RhbmQgc29tZVxuLy8gbW9yZSBieXRlcy4gIFRoaXMgaXMgdG8gd29yayBhcm91bmQgY2FzZXMgd2hlcmUgaHdtPTAsXG4vLyBzdWNoIGFzIHRoZSByZXBsLiAgQWxzbywgaWYgdGhlIHB1c2goKSB0cmlnZ2VyZWQgYVxuLy8gcmVhZGFibGUgZXZlbnQsIGFuZCB0aGUgdXNlciBjYWxsZWQgcmVhZChsYXJnZU51bWJlcikgc3VjaCB0aGF0XG4vLyBuZWVkUmVhZGFibGUgd2FzIHNldCwgdGhlbiB3ZSBvdWdodCB0byBwdXNoIG1vcmUsIHNvIHRoYXQgYW5vdGhlclxuLy8gJ3JlYWRhYmxlJyBldmVudCB3aWxsIGJlIHRyaWdnZXJlZC5cbmZ1bmN0aW9uIG5lZWRNb3JlRGF0YShzdGF0ZSkge1xuICByZXR1cm4gIXN0YXRlLmVuZGVkICYmXG4gICAgICAgICAoc3RhdGUubmVlZFJlYWRhYmxlIHx8XG4gICAgICAgICAgc3RhdGUubGVuZ3RoIDwgc3RhdGUuaGlnaFdhdGVyTWFyayB8fFxuICAgICAgICAgIHN0YXRlLmxlbmd0aCA9PT0gMCk7XG59XG5cbi8vIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5LlxuUmVhZGFibGUucHJvdG90eXBlLnNldEVuY29kaW5nID0gZnVuY3Rpb24oZW5jKSB7XG4gIGlmICghU3RyaW5nRGVjb2RlcilcbiAgICBTdHJpbmdEZWNvZGVyID0gcmVxdWlyZSgnc3RyaW5nX2RlY29kZXIvJykuU3RyaW5nRGVjb2RlcjtcbiAgdGhpcy5fcmVhZGFibGVTdGF0ZS5kZWNvZGVyID0gbmV3IFN0cmluZ0RlY29kZXIoZW5jKTtcbiAgdGhpcy5fcmVhZGFibGVTdGF0ZS5lbmNvZGluZyA9IGVuYztcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vLyBEb24ndCByYWlzZSB0aGUgaHdtID4gMTI4TUJcbnZhciBNQVhfSFdNID0gMHg4MDAwMDA7XG5mdW5jdGlvbiByb3VuZFVwVG9OZXh0UG93ZXJPZjIobikge1xuICBpZiAobiA+PSBNQVhfSFdNKSB7XG4gICAgbiA9IE1BWF9IV007XG4gIH0gZWxzZSB7XG4gICAgLy8gR2V0IHRoZSBuZXh0IGhpZ2hlc3QgcG93ZXIgb2YgMlxuICAgIG4tLTtcbiAgICBmb3IgKHZhciBwID0gMTsgcCA8IDMyOyBwIDw8PSAxKSBuIHw9IG4gPj4gcDtcbiAgICBuKys7XG4gIH1cbiAgcmV0dXJuIG47XG59XG5cbmZ1bmN0aW9uIGhvd011Y2hUb1JlYWQobiwgc3RhdGUpIHtcbiAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCAmJiBzdGF0ZS5lbmRlZClcbiAgICByZXR1cm4gMDtcblxuICBpZiAoc3RhdGUub2JqZWN0TW9kZSlcbiAgICByZXR1cm4gbiA9PT0gMCA/IDAgOiAxO1xuXG4gIGlmIChpc05hTihuKSB8fCB1dGlsLmlzTnVsbChuKSkge1xuICAgIC8vIG9ubHkgZmxvdyBvbmUgYnVmZmVyIGF0IGEgdGltZVxuICAgIGlmIChzdGF0ZS5mbG93aW5nICYmIHN0YXRlLmJ1ZmZlci5sZW5ndGgpXG4gICAgICByZXR1cm4gc3RhdGUuYnVmZmVyWzBdLmxlbmd0aDtcbiAgICBlbHNlXG4gICAgICByZXR1cm4gc3RhdGUubGVuZ3RoO1xuICB9XG5cbiAgaWYgKG4gPD0gMClcbiAgICByZXR1cm4gMDtcblxuICAvLyBJZiB3ZSdyZSBhc2tpbmcgZm9yIG1vcmUgdGhhbiB0aGUgdGFyZ2V0IGJ1ZmZlciBsZXZlbCxcbiAgLy8gdGhlbiByYWlzZSB0aGUgd2F0ZXIgbWFyay4gIEJ1bXAgdXAgdG8gdGhlIG5leHQgaGlnaGVzdFxuICAvLyBwb3dlciBvZiAyLCB0byBwcmV2ZW50IGluY3JlYXNpbmcgaXQgZXhjZXNzaXZlbHkgaW4gdGlueVxuICAvLyBhbW91bnRzLlxuICBpZiAobiA+IHN0YXRlLmhpZ2hXYXRlck1hcmspXG4gICAgc3RhdGUuaGlnaFdhdGVyTWFyayA9IHJvdW5kVXBUb05leHRQb3dlck9mMihuKTtcblxuICAvLyBkb24ndCBoYXZlIHRoYXQgbXVjaC4gIHJldHVybiBudWxsLCB1bmxlc3Mgd2UndmUgZW5kZWQuXG4gIGlmIChuID4gc3RhdGUubGVuZ3RoKSB7XG4gICAgaWYgKCFzdGF0ZS5lbmRlZCkge1xuICAgICAgc3RhdGUubmVlZFJlYWRhYmxlID0gdHJ1ZTtcbiAgICAgIHJldHVybiAwO1xuICAgIH0gZWxzZVxuICAgICAgcmV0dXJuIHN0YXRlLmxlbmd0aDtcbiAgfVxuXG4gIHJldHVybiBuO1xufVxuXG4vLyB5b3UgY2FuIG92ZXJyaWRlIGVpdGhlciB0aGlzIG1ldGhvZCwgb3IgdGhlIGFzeW5jIF9yZWFkKG4pIGJlbG93LlxuUmVhZGFibGUucHJvdG90eXBlLnJlYWQgPSBmdW5jdGlvbihuKSB7XG4gIGRlYnVnKCdyZWFkJywgbik7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG4gIHZhciBuT3JpZyA9IG47XG5cbiAgaWYgKCF1dGlsLmlzTnVtYmVyKG4pIHx8IG4gPiAwKVxuICAgIHN0YXRlLmVtaXR0ZWRSZWFkYWJsZSA9IGZhbHNlO1xuXG4gIC8vIGlmIHdlJ3JlIGRvaW5nIHJlYWQoMCkgdG8gdHJpZ2dlciBhIHJlYWRhYmxlIGV2ZW50LCBidXQgd2VcbiAgLy8gYWxyZWFkeSBoYXZlIGEgYnVuY2ggb2YgZGF0YSBpbiB0aGUgYnVmZmVyLCB0aGVuIGp1c3QgdHJpZ2dlclxuICAvLyB0aGUgJ3JlYWRhYmxlJyBldmVudCBhbmQgbW92ZSBvbi5cbiAgaWYgKG4gPT09IDAgJiZcbiAgICAgIHN0YXRlLm5lZWRSZWFkYWJsZSAmJlxuICAgICAgKHN0YXRlLmxlbmd0aCA+PSBzdGF0ZS5oaWdoV2F0ZXJNYXJrIHx8IHN0YXRlLmVuZGVkKSkge1xuICAgIGRlYnVnKCdyZWFkOiBlbWl0UmVhZGFibGUnLCBzdGF0ZS5sZW5ndGgsIHN0YXRlLmVuZGVkKTtcbiAgICBpZiAoc3RhdGUubGVuZ3RoID09PSAwICYmIHN0YXRlLmVuZGVkKVxuICAgICAgZW5kUmVhZGFibGUodGhpcyk7XG4gICAgZWxzZVxuICAgICAgZW1pdFJlYWRhYmxlKHRoaXMpO1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgbiA9IGhvd011Y2hUb1JlYWQobiwgc3RhdGUpO1xuXG4gIC8vIGlmIHdlJ3ZlIGVuZGVkLCBhbmQgd2UncmUgbm93IGNsZWFyLCB0aGVuIGZpbmlzaCBpdCB1cC5cbiAgaWYgKG4gPT09IDAgJiYgc3RhdGUuZW5kZWQpIHtcbiAgICBpZiAoc3RhdGUubGVuZ3RoID09PSAwKVxuICAgICAgZW5kUmVhZGFibGUodGhpcyk7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvLyBBbGwgdGhlIGFjdHVhbCBjaHVuayBnZW5lcmF0aW9uIGxvZ2ljIG5lZWRzIHRvIGJlXG4gIC8vICpiZWxvdyogdGhlIGNhbGwgdG8gX3JlYWQuICBUaGUgcmVhc29uIGlzIHRoYXQgaW4gY2VydGFpblxuICAvLyBzeW50aGV0aWMgc3RyZWFtIGNhc2VzLCBzdWNoIGFzIHBhc3N0aHJvdWdoIHN0cmVhbXMsIF9yZWFkXG4gIC8vIG1heSBiZSBhIGNvbXBsZXRlbHkgc3luY2hyb25vdXMgb3BlcmF0aW9uIHdoaWNoIG1heSBjaGFuZ2VcbiAgLy8gdGhlIHN0YXRlIG9mIHRoZSByZWFkIGJ1ZmZlciwgcHJvdmlkaW5nIGVub3VnaCBkYXRhIHdoZW5cbiAgLy8gYmVmb3JlIHRoZXJlIHdhcyAqbm90KiBlbm91Z2guXG4gIC8vXG4gIC8vIFNvLCB0aGUgc3RlcHMgYXJlOlxuICAvLyAxLiBGaWd1cmUgb3V0IHdoYXQgdGhlIHN0YXRlIG9mIHRoaW5ncyB3aWxsIGJlIGFmdGVyIHdlIGRvXG4gIC8vIGEgcmVhZCBmcm9tIHRoZSBidWZmZXIuXG4gIC8vXG4gIC8vIDIuIElmIHRoYXQgcmVzdWx0aW5nIHN0YXRlIHdpbGwgdHJpZ2dlciBhIF9yZWFkLCB0aGVuIGNhbGwgX3JlYWQuXG4gIC8vIE5vdGUgdGhhdCB0aGlzIG1heSBiZSBhc3luY2hyb25vdXMsIG9yIHN5bmNocm9ub3VzLiAgWWVzLCBpdCBpc1xuICAvLyBkZWVwbHkgdWdseSB0byB3cml0ZSBBUElzIHRoaXMgd2F5LCBidXQgdGhhdCBzdGlsbCBkb2Vzbid0IG1lYW5cbiAgLy8gdGhhdCB0aGUgUmVhZGFibGUgY2xhc3Mgc2hvdWxkIGJlaGF2ZSBpbXByb3Blcmx5LCBhcyBzdHJlYW1zIGFyZVxuICAvLyBkZXNpZ25lZCB0byBiZSBzeW5jL2FzeW5jIGFnbm9zdGljLlxuICAvLyBUYWtlIG5vdGUgaWYgdGhlIF9yZWFkIGNhbGwgaXMgc3luYyBvciBhc3luYyAoaWUsIGlmIHRoZSByZWFkIGNhbGxcbiAgLy8gaGFzIHJldHVybmVkIHlldCksIHNvIHRoYXQgd2Uga25vdyB3aGV0aGVyIG9yIG5vdCBpdCdzIHNhZmUgdG8gZW1pdFxuICAvLyAncmVhZGFibGUnIGV0Yy5cbiAgLy9cbiAgLy8gMy4gQWN0dWFsbHkgcHVsbCB0aGUgcmVxdWVzdGVkIGNodW5rcyBvdXQgb2YgdGhlIGJ1ZmZlciBhbmQgcmV0dXJuLlxuXG4gIC8vIGlmIHdlIG5lZWQgYSByZWFkYWJsZSBldmVudCwgdGhlbiB3ZSBuZWVkIHRvIGRvIHNvbWUgcmVhZGluZy5cbiAgdmFyIGRvUmVhZCA9IHN0YXRlLm5lZWRSZWFkYWJsZTtcbiAgZGVidWcoJ25lZWQgcmVhZGFibGUnLCBkb1JlYWQpO1xuXG4gIC8vIGlmIHdlIGN1cnJlbnRseSBoYXZlIGxlc3MgdGhhbiB0aGUgaGlnaFdhdGVyTWFyaywgdGhlbiBhbHNvIHJlYWQgc29tZVxuICBpZiAoc3RhdGUubGVuZ3RoID09PSAwIHx8IHN0YXRlLmxlbmd0aCAtIG4gPCBzdGF0ZS5oaWdoV2F0ZXJNYXJrKSB7XG4gICAgZG9SZWFkID0gdHJ1ZTtcbiAgICBkZWJ1ZygnbGVuZ3RoIGxlc3MgdGhhbiB3YXRlcm1hcmsnLCBkb1JlYWQpO1xuICB9XG5cbiAgLy8gaG93ZXZlciwgaWYgd2UndmUgZW5kZWQsIHRoZW4gdGhlcmUncyBubyBwb2ludCwgYW5kIGlmIHdlJ3JlIGFscmVhZHlcbiAgLy8gcmVhZGluZywgdGhlbiBpdCdzIHVubmVjZXNzYXJ5LlxuICBpZiAoc3RhdGUuZW5kZWQgfHwgc3RhdGUucmVhZGluZykge1xuICAgIGRvUmVhZCA9IGZhbHNlO1xuICAgIGRlYnVnKCdyZWFkaW5nIG9yIGVuZGVkJywgZG9SZWFkKTtcbiAgfVxuXG4gIGlmIChkb1JlYWQpIHtcbiAgICBkZWJ1ZygnZG8gcmVhZCcpO1xuICAgIHN0YXRlLnJlYWRpbmcgPSB0cnVlO1xuICAgIHN0YXRlLnN5bmMgPSB0cnVlO1xuICAgIC8vIGlmIHRoZSBsZW5ndGggaXMgY3VycmVudGx5IHplcm8sIHRoZW4gd2UgKm5lZWQqIGEgcmVhZGFibGUgZXZlbnQuXG4gICAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMClcbiAgICAgIHN0YXRlLm5lZWRSZWFkYWJsZSA9IHRydWU7XG4gICAgLy8gY2FsbCBpbnRlcm5hbCByZWFkIG1ldGhvZFxuICAgIHRoaXMuX3JlYWQoc3RhdGUuaGlnaFdhdGVyTWFyayk7XG4gICAgc3RhdGUuc3luYyA9IGZhbHNlO1xuICB9XG5cbiAgLy8gSWYgX3JlYWQgcHVzaGVkIGRhdGEgc3luY2hyb25vdXNseSwgdGhlbiBgcmVhZGluZ2Agd2lsbCBiZSBmYWxzZSxcbiAgLy8gYW5kIHdlIG5lZWQgdG8gcmUtZXZhbHVhdGUgaG93IG11Y2ggZGF0YSB3ZSBjYW4gcmV0dXJuIHRvIHRoZSB1c2VyLlxuICBpZiAoZG9SZWFkICYmICFzdGF0ZS5yZWFkaW5nKVxuICAgIG4gPSBob3dNdWNoVG9SZWFkKG5PcmlnLCBzdGF0ZSk7XG5cbiAgdmFyIHJldDtcbiAgaWYgKG4gPiAwKVxuICAgIHJldCA9IGZyb21MaXN0KG4sIHN0YXRlKTtcbiAgZWxzZVxuICAgIHJldCA9IG51bGw7XG5cbiAgaWYgKHV0aWwuaXNOdWxsKHJldCkpIHtcbiAgICBzdGF0ZS5uZWVkUmVhZGFibGUgPSB0cnVlO1xuICAgIG4gPSAwO1xuICB9XG5cbiAgc3RhdGUubGVuZ3RoIC09IG47XG5cbiAgLy8gSWYgd2UgaGF2ZSBub3RoaW5nIGluIHRoZSBidWZmZXIsIHRoZW4gd2Ugd2FudCB0byBrbm93XG4gIC8vIGFzIHNvb24gYXMgd2UgKmRvKiBnZXQgc29tZXRoaW5nIGludG8gdGhlIGJ1ZmZlci5cbiAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCAmJiAhc3RhdGUuZW5kZWQpXG4gICAgc3RhdGUubmVlZFJlYWRhYmxlID0gdHJ1ZTtcblxuICAvLyBJZiB3ZSB0cmllZCB0byByZWFkKCkgcGFzdCB0aGUgRU9GLCB0aGVuIGVtaXQgZW5kIG9uIHRoZSBuZXh0IHRpY2suXG4gIGlmIChuT3JpZyAhPT0gbiAmJiBzdGF0ZS5lbmRlZCAmJiBzdGF0ZS5sZW5ndGggPT09IDApXG4gICAgZW5kUmVhZGFibGUodGhpcyk7XG5cbiAgaWYgKCF1dGlsLmlzTnVsbChyZXQpKVxuICAgIHRoaXMuZW1pdCgnZGF0YScsIHJldCk7XG5cbiAgcmV0dXJuIHJldDtcbn07XG5cbmZ1bmN0aW9uIGNodW5rSW52YWxpZChzdGF0ZSwgY2h1bmspIHtcbiAgdmFyIGVyID0gbnVsbDtcbiAgaWYgKCF1dGlsLmlzQnVmZmVyKGNodW5rKSAmJlxuICAgICAgIXV0aWwuaXNTdHJpbmcoY2h1bmspICYmXG4gICAgICAhdXRpbC5pc051bGxPclVuZGVmaW5lZChjaHVuaykgJiZcbiAgICAgICFzdGF0ZS5vYmplY3RNb2RlKSB7XG4gICAgZXIgPSBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIG5vbi1zdHJpbmcvYnVmZmVyIGNodW5rJyk7XG4gIH1cbiAgcmV0dXJuIGVyO1xufVxuXG5cbmZ1bmN0aW9uIG9uRW9mQ2h1bmsoc3RyZWFtLCBzdGF0ZSkge1xuICBpZiAoc3RhdGUuZGVjb2RlciAmJiAhc3RhdGUuZW5kZWQpIHtcbiAgICB2YXIgY2h1bmsgPSBzdGF0ZS5kZWNvZGVyLmVuZCgpO1xuICAgIGlmIChjaHVuayAmJiBjaHVuay5sZW5ndGgpIHtcbiAgICAgIHN0YXRlLmJ1ZmZlci5wdXNoKGNodW5rKTtcbiAgICAgIHN0YXRlLmxlbmd0aCArPSBzdGF0ZS5vYmplY3RNb2RlID8gMSA6IGNodW5rLmxlbmd0aDtcbiAgICB9XG4gIH1cbiAgc3RhdGUuZW5kZWQgPSB0cnVlO1xuXG4gIC8vIGVtaXQgJ3JlYWRhYmxlJyBub3cgdG8gbWFrZSBzdXJlIGl0IGdldHMgcGlja2VkIHVwLlxuICBlbWl0UmVhZGFibGUoc3RyZWFtKTtcbn1cblxuLy8gRG9uJ3QgZW1pdCByZWFkYWJsZSByaWdodCBhd2F5IGluIHN5bmMgbW9kZSwgYmVjYXVzZSB0aGlzIGNhbiB0cmlnZ2VyXG4vLyBhbm90aGVyIHJlYWQoKSBjYWxsID0+IHN0YWNrIG92ZXJmbG93LiAgVGhpcyB3YXksIGl0IG1pZ2h0IHRyaWdnZXJcbi8vIGEgbmV4dFRpY2sgcmVjdXJzaW9uIHdhcm5pbmcsIGJ1dCB0aGF0J3Mgbm90IHNvIGJhZC5cbmZ1bmN0aW9uIGVtaXRSZWFkYWJsZShzdHJlYW0pIHtcbiAgdmFyIHN0YXRlID0gc3RyZWFtLl9yZWFkYWJsZVN0YXRlO1xuICBzdGF0ZS5uZWVkUmVhZGFibGUgPSBmYWxzZTtcbiAgaWYgKCFzdGF0ZS5lbWl0dGVkUmVhZGFibGUpIHtcbiAgICBkZWJ1ZygnZW1pdFJlYWRhYmxlJywgc3RhdGUuZmxvd2luZyk7XG4gICAgc3RhdGUuZW1pdHRlZFJlYWRhYmxlID0gdHJ1ZTtcbiAgICBpZiAoc3RhdGUuc3luYylcbiAgICAgIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24oKSB7XG4gICAgICAgIGVtaXRSZWFkYWJsZV8oc3RyZWFtKTtcbiAgICAgIH0pO1xuICAgIGVsc2VcbiAgICAgIGVtaXRSZWFkYWJsZV8oc3RyZWFtKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBlbWl0UmVhZGFibGVfKHN0cmVhbSkge1xuICBkZWJ1ZygnZW1pdCByZWFkYWJsZScpO1xuICBzdHJlYW0uZW1pdCgncmVhZGFibGUnKTtcbiAgZmxvdyhzdHJlYW0pO1xufVxuXG5cbi8vIGF0IHRoaXMgcG9pbnQsIHRoZSB1c2VyIGhhcyBwcmVzdW1hYmx5IHNlZW4gdGhlICdyZWFkYWJsZScgZXZlbnQsXG4vLyBhbmQgY2FsbGVkIHJlYWQoKSB0byBjb25zdW1lIHNvbWUgZGF0YS4gIHRoYXQgbWF5IGhhdmUgdHJpZ2dlcmVkXG4vLyBpbiB0dXJuIGFub3RoZXIgX3JlYWQobikgY2FsbCwgaW4gd2hpY2ggY2FzZSByZWFkaW5nID0gdHJ1ZSBpZlxuLy8gaXQncyBpbiBwcm9ncmVzcy5cbi8vIEhvd2V2ZXIsIGlmIHdlJ3JlIG5vdCBlbmRlZCwgb3IgcmVhZGluZywgYW5kIHRoZSBsZW5ndGggPCBod20sXG4vLyB0aGVuIGdvIGFoZWFkIGFuZCB0cnkgdG8gcmVhZCBzb21lIG1vcmUgcHJlZW1wdGl2ZWx5LlxuZnVuY3Rpb24gbWF5YmVSZWFkTW9yZShzdHJlYW0sIHN0YXRlKSB7XG4gIGlmICghc3RhdGUucmVhZGluZ01vcmUpIHtcbiAgICBzdGF0ZS5yZWFkaW5nTW9yZSA9IHRydWU7XG4gICAgcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbigpIHtcbiAgICAgIG1heWJlUmVhZE1vcmVfKHN0cmVhbSwgc3RhdGUpO1xuICAgIH0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1heWJlUmVhZE1vcmVfKHN0cmVhbSwgc3RhdGUpIHtcbiAgdmFyIGxlbiA9IHN0YXRlLmxlbmd0aDtcbiAgd2hpbGUgKCFzdGF0ZS5yZWFkaW5nICYmICFzdGF0ZS5mbG93aW5nICYmICFzdGF0ZS5lbmRlZCAmJlxuICAgICAgICAgc3RhdGUubGVuZ3RoIDwgc3RhdGUuaGlnaFdhdGVyTWFyaykge1xuICAgIGRlYnVnKCdtYXliZVJlYWRNb3JlIHJlYWQgMCcpO1xuICAgIHN0cmVhbS5yZWFkKDApO1xuICAgIGlmIChsZW4gPT09IHN0YXRlLmxlbmd0aClcbiAgICAgIC8vIGRpZG4ndCBnZXQgYW55IGRhdGEsIHN0b3Agc3Bpbm5pbmcuXG4gICAgICBicmVhaztcbiAgICBlbHNlXG4gICAgICBsZW4gPSBzdGF0ZS5sZW5ndGg7XG4gIH1cbiAgc3RhdGUucmVhZGluZ01vcmUgPSBmYWxzZTtcbn1cblxuLy8gYWJzdHJhY3QgbWV0aG9kLiAgdG8gYmUgb3ZlcnJpZGRlbiBpbiBzcGVjaWZpYyBpbXBsZW1lbnRhdGlvbiBjbGFzc2VzLlxuLy8gY2FsbCBjYihlciwgZGF0YSkgd2hlcmUgZGF0YSBpcyA8PSBuIGluIGxlbmd0aC5cbi8vIGZvciB2aXJ0dWFsIChub24tc3RyaW5nLCBub24tYnVmZmVyKSBzdHJlYW1zLCBcImxlbmd0aFwiIGlzIHNvbWV3aGF0XG4vLyBhcmJpdHJhcnksIGFuZCBwZXJoYXBzIG5vdCB2ZXJ5IG1lYW5pbmdmdWwuXG5SZWFkYWJsZS5wcm90b3R5cGUuX3JlYWQgPSBmdW5jdGlvbihuKSB7XG4gIHRoaXMuZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IoJ25vdCBpbXBsZW1lbnRlZCcpKTtcbn07XG5cblJlYWRhYmxlLnByb3RvdHlwZS5waXBlID0gZnVuY3Rpb24oZGVzdCwgcGlwZU9wdHMpIHtcbiAgdmFyIHNyYyA9IHRoaXM7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG5cbiAgc3dpdGNoIChzdGF0ZS5waXBlc0NvdW50KSB7XG4gICAgY2FzZSAwOlxuICAgICAgc3RhdGUucGlwZXMgPSBkZXN0O1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxOlxuICAgICAgc3RhdGUucGlwZXMgPSBbc3RhdGUucGlwZXMsIGRlc3RdO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHN0YXRlLnBpcGVzLnB1c2goZGVzdCk7XG4gICAgICBicmVhaztcbiAgfVxuICBzdGF0ZS5waXBlc0NvdW50ICs9IDE7XG4gIGRlYnVnKCdwaXBlIGNvdW50PSVkIG9wdHM9JWonLCBzdGF0ZS5waXBlc0NvdW50LCBwaXBlT3B0cyk7XG5cbiAgdmFyIGRvRW5kID0gKCFwaXBlT3B0cyB8fCBwaXBlT3B0cy5lbmQgIT09IGZhbHNlKSAmJlxuICAgICAgICAgICAgICBkZXN0ICE9PSBwcm9jZXNzLnN0ZG91dCAmJlxuICAgICAgICAgICAgICBkZXN0ICE9PSBwcm9jZXNzLnN0ZGVycjtcblxuICB2YXIgZW5kRm4gPSBkb0VuZCA/IG9uZW5kIDogY2xlYW51cDtcbiAgaWYgKHN0YXRlLmVuZEVtaXR0ZWQpXG4gICAgcHJvY2Vzcy5uZXh0VGljayhlbmRGbik7XG4gIGVsc2VcbiAgICBzcmMub25jZSgnZW5kJywgZW5kRm4pO1xuXG4gIGRlc3Qub24oJ3VucGlwZScsIG9udW5waXBlKTtcbiAgZnVuY3Rpb24gb251bnBpcGUocmVhZGFibGUpIHtcbiAgICBkZWJ1Zygnb251bnBpcGUnKTtcbiAgICBpZiAocmVhZGFibGUgPT09IHNyYykge1xuICAgICAgY2xlYW51cCgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG9uZW5kKCkge1xuICAgIGRlYnVnKCdvbmVuZCcpO1xuICAgIGRlc3QuZW5kKCk7XG4gIH1cblxuICAvLyB3aGVuIHRoZSBkZXN0IGRyYWlucywgaXQgcmVkdWNlcyB0aGUgYXdhaXREcmFpbiBjb3VudGVyXG4gIC8vIG9uIHRoZSBzb3VyY2UuICBUaGlzIHdvdWxkIGJlIG1vcmUgZWxlZ2FudCB3aXRoIGEgLm9uY2UoKVxuICAvLyBoYW5kbGVyIGluIGZsb3coKSwgYnV0IGFkZGluZyBhbmQgcmVtb3ZpbmcgcmVwZWF0ZWRseSBpc1xuICAvLyB0b28gc2xvdy5cbiAgdmFyIG9uZHJhaW4gPSBwaXBlT25EcmFpbihzcmMpO1xuICBkZXN0Lm9uKCdkcmFpbicsIG9uZHJhaW4pO1xuXG4gIGZ1bmN0aW9uIGNsZWFudXAoKSB7XG4gICAgZGVidWcoJ2NsZWFudXAnKTtcbiAgICAvLyBjbGVhbnVwIGV2ZW50IGhhbmRsZXJzIG9uY2UgdGhlIHBpcGUgaXMgYnJva2VuXG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignY2xvc2UnLCBvbmNsb3NlKTtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdmaW5pc2gnLCBvbmZpbmlzaCk7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignZHJhaW4nLCBvbmRyYWluKTtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIG9uZXJyb3IpO1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ3VucGlwZScsIG9udW5waXBlKTtcbiAgICBzcmMucmVtb3ZlTGlzdGVuZXIoJ2VuZCcsIG9uZW5kKTtcbiAgICBzcmMucmVtb3ZlTGlzdGVuZXIoJ2VuZCcsIGNsZWFudXApO1xuICAgIHNyYy5yZW1vdmVMaXN0ZW5lcignZGF0YScsIG9uZGF0YSk7XG5cbiAgICAvLyBpZiB0aGUgcmVhZGVyIGlzIHdhaXRpbmcgZm9yIGEgZHJhaW4gZXZlbnQgZnJvbSB0aGlzXG4gICAgLy8gc3BlY2lmaWMgd3JpdGVyLCB0aGVuIGl0IHdvdWxkIGNhdXNlIGl0IHRvIG5ldmVyIHN0YXJ0XG4gICAgLy8gZmxvd2luZyBhZ2Fpbi5cbiAgICAvLyBTbywgaWYgdGhpcyBpcyBhd2FpdGluZyBhIGRyYWluLCB0aGVuIHdlIGp1c3QgY2FsbCBpdCBub3cuXG4gICAgLy8gSWYgd2UgZG9uJ3Qga25vdywgdGhlbiBhc3N1bWUgdGhhdCB3ZSBhcmUgd2FpdGluZyBmb3Igb25lLlxuICAgIGlmIChzdGF0ZS5hd2FpdERyYWluICYmXG4gICAgICAgICghZGVzdC5fd3JpdGFibGVTdGF0ZSB8fCBkZXN0Ll93cml0YWJsZVN0YXRlLm5lZWREcmFpbikpXG4gICAgICBvbmRyYWluKCk7XG4gIH1cblxuICBzcmMub24oJ2RhdGEnLCBvbmRhdGEpO1xuICBmdW5jdGlvbiBvbmRhdGEoY2h1bmspIHtcbiAgICBkZWJ1Zygnb25kYXRhJyk7XG4gICAgdmFyIHJldCA9IGRlc3Qud3JpdGUoY2h1bmspO1xuICAgIGlmIChmYWxzZSA9PT0gcmV0KSB7XG4gICAgICBkZWJ1ZygnZmFsc2Ugd3JpdGUgcmVzcG9uc2UsIHBhdXNlJyxcbiAgICAgICAgICAgIHNyYy5fcmVhZGFibGVTdGF0ZS5hd2FpdERyYWluKTtcbiAgICAgIHNyYy5fcmVhZGFibGVTdGF0ZS5hd2FpdERyYWluKys7XG4gICAgICBzcmMucGF1c2UoKTtcbiAgICB9XG4gIH1cblxuICAvLyBpZiB0aGUgZGVzdCBoYXMgYW4gZXJyb3IsIHRoZW4gc3RvcCBwaXBpbmcgaW50byBpdC5cbiAgLy8gaG93ZXZlciwgZG9uJ3Qgc3VwcHJlc3MgdGhlIHRocm93aW5nIGJlaGF2aW9yIGZvciB0aGlzLlxuICBmdW5jdGlvbiBvbmVycm9yKGVyKSB7XG4gICAgZGVidWcoJ29uZXJyb3InLCBlcik7XG4gICAgdW5waXBlKCk7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignZXJyb3InLCBvbmVycm9yKTtcbiAgICBpZiAoRUUubGlzdGVuZXJDb3VudChkZXN0LCAnZXJyb3InKSA9PT0gMClcbiAgICAgIGRlc3QuZW1pdCgnZXJyb3InLCBlcik7XG4gIH1cbiAgLy8gVGhpcyBpcyBhIGJydXRhbGx5IHVnbHkgaGFjayB0byBtYWtlIHN1cmUgdGhhdCBvdXIgZXJyb3IgaGFuZGxlclxuICAvLyBpcyBhdHRhY2hlZCBiZWZvcmUgYW55IHVzZXJsYW5kIG9uZXMuICBORVZFUiBETyBUSElTLlxuICBpZiAoIWRlc3QuX2V2ZW50cyB8fCAhZGVzdC5fZXZlbnRzLmVycm9yKVxuICAgIGRlc3Qub24oJ2Vycm9yJywgb25lcnJvcik7XG4gIGVsc2UgaWYgKGlzQXJyYXkoZGVzdC5fZXZlbnRzLmVycm9yKSlcbiAgICBkZXN0Ll9ldmVudHMuZXJyb3IudW5zaGlmdChvbmVycm9yKTtcbiAgZWxzZVxuICAgIGRlc3QuX2V2ZW50cy5lcnJvciA9IFtvbmVycm9yLCBkZXN0Ll9ldmVudHMuZXJyb3JdO1xuXG5cblxuICAvLyBCb3RoIGNsb3NlIGFuZCBmaW5pc2ggc2hvdWxkIHRyaWdnZXIgdW5waXBlLCBidXQgb25seSBvbmNlLlxuICBmdW5jdGlvbiBvbmNsb3NlKCkge1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2ZpbmlzaCcsIG9uZmluaXNoKTtcbiAgICB1bnBpcGUoKTtcbiAgfVxuICBkZXN0Lm9uY2UoJ2Nsb3NlJywgb25jbG9zZSk7XG4gIGZ1bmN0aW9uIG9uZmluaXNoKCkge1xuICAgIGRlYnVnKCdvbmZpbmlzaCcpO1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2Nsb3NlJywgb25jbG9zZSk7XG4gICAgdW5waXBlKCk7XG4gIH1cbiAgZGVzdC5vbmNlKCdmaW5pc2gnLCBvbmZpbmlzaCk7XG5cbiAgZnVuY3Rpb24gdW5waXBlKCkge1xuICAgIGRlYnVnKCd1bnBpcGUnKTtcbiAgICBzcmMudW5waXBlKGRlc3QpO1xuICB9XG5cbiAgLy8gdGVsbCB0aGUgZGVzdCB0aGF0IGl0J3MgYmVpbmcgcGlwZWQgdG9cbiAgZGVzdC5lbWl0KCdwaXBlJywgc3JjKTtcblxuICAvLyBzdGFydCB0aGUgZmxvdyBpZiBpdCBoYXNuJ3QgYmVlbiBzdGFydGVkIGFscmVhZHkuXG4gIGlmICghc3RhdGUuZmxvd2luZykge1xuICAgIGRlYnVnKCdwaXBlIHJlc3VtZScpO1xuICAgIHNyYy5yZXN1bWUoKTtcbiAgfVxuXG4gIHJldHVybiBkZXN0O1xufTtcblxuZnVuY3Rpb24gcGlwZU9uRHJhaW4oc3JjKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc3RhdGUgPSBzcmMuX3JlYWRhYmxlU3RhdGU7XG4gICAgZGVidWcoJ3BpcGVPbkRyYWluJywgc3RhdGUuYXdhaXREcmFpbik7XG4gICAgaWYgKHN0YXRlLmF3YWl0RHJhaW4pXG4gICAgICBzdGF0ZS5hd2FpdERyYWluLS07XG4gICAgaWYgKHN0YXRlLmF3YWl0RHJhaW4gPT09IDAgJiYgRUUubGlzdGVuZXJDb3VudChzcmMsICdkYXRhJykpIHtcbiAgICAgIHN0YXRlLmZsb3dpbmcgPSB0cnVlO1xuICAgICAgZmxvdyhzcmMpO1xuICAgIH1cbiAgfTtcbn1cblxuXG5SZWFkYWJsZS5wcm90b3R5cGUudW5waXBlID0gZnVuY3Rpb24oZGVzdCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuXG4gIC8vIGlmIHdlJ3JlIG5vdCBwaXBpbmcgYW55d2hlcmUsIHRoZW4gZG8gbm90aGluZy5cbiAgaWYgKHN0YXRlLnBpcGVzQ291bnQgPT09IDApXG4gICAgcmV0dXJuIHRoaXM7XG5cbiAgLy8ganVzdCBvbmUgZGVzdGluYXRpb24uICBtb3N0IGNvbW1vbiBjYXNlLlxuICBpZiAoc3RhdGUucGlwZXNDb3VudCA9PT0gMSkge1xuICAgIC8vIHBhc3NlZCBpbiBvbmUsIGJ1dCBpdCdzIG5vdCB0aGUgcmlnaHQgb25lLlxuICAgIGlmIChkZXN0ICYmIGRlc3QgIT09IHN0YXRlLnBpcGVzKVxuICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICBpZiAoIWRlc3QpXG4gICAgICBkZXN0ID0gc3RhdGUucGlwZXM7XG5cbiAgICAvLyBnb3QgYSBtYXRjaC5cbiAgICBzdGF0ZS5waXBlcyA9IG51bGw7XG4gICAgc3RhdGUucGlwZXNDb3VudCA9IDA7XG4gICAgc3RhdGUuZmxvd2luZyA9IGZhbHNlO1xuICAgIGlmIChkZXN0KVxuICAgICAgZGVzdC5lbWl0KCd1bnBpcGUnLCB0aGlzKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8vIHNsb3cgY2FzZS4gbXVsdGlwbGUgcGlwZSBkZXN0aW5hdGlvbnMuXG5cbiAgaWYgKCFkZXN0KSB7XG4gICAgLy8gcmVtb3ZlIGFsbC5cbiAgICB2YXIgZGVzdHMgPSBzdGF0ZS5waXBlcztcbiAgICB2YXIgbGVuID0gc3RhdGUucGlwZXNDb3VudDtcbiAgICBzdGF0ZS5waXBlcyA9IG51bGw7XG4gICAgc3RhdGUucGlwZXNDb3VudCA9IDA7XG4gICAgc3RhdGUuZmxvd2luZyA9IGZhbHNlO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKylcbiAgICAgIGRlc3RzW2ldLmVtaXQoJ3VucGlwZScsIHRoaXMpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLy8gdHJ5IHRvIGZpbmQgdGhlIHJpZ2h0IG9uZS5cbiAgdmFyIGkgPSBpbmRleE9mKHN0YXRlLnBpcGVzLCBkZXN0KTtcbiAgaWYgKGkgPT09IC0xKVxuICAgIHJldHVybiB0aGlzO1xuXG4gIHN0YXRlLnBpcGVzLnNwbGljZShpLCAxKTtcbiAgc3RhdGUucGlwZXNDb3VudCAtPSAxO1xuICBpZiAoc3RhdGUucGlwZXNDb3VudCA9PT0gMSlcbiAgICBzdGF0ZS5waXBlcyA9IHN0YXRlLnBpcGVzWzBdO1xuXG4gIGRlc3QuZW1pdCgndW5waXBlJywgdGhpcyk7XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vLyBzZXQgdXAgZGF0YSBldmVudHMgaWYgdGhleSBhcmUgYXNrZWQgZm9yXG4vLyBFbnN1cmUgcmVhZGFibGUgbGlzdGVuZXJzIGV2ZW50dWFsbHkgZ2V0IHNvbWV0aGluZ1xuUmVhZGFibGUucHJvdG90eXBlLm9uID0gZnVuY3Rpb24oZXYsIGZuKSB7XG4gIHZhciByZXMgPSBTdHJlYW0ucHJvdG90eXBlLm9uLmNhbGwodGhpcywgZXYsIGZuKTtcblxuICAvLyBJZiBsaXN0ZW5pbmcgdG8gZGF0YSwgYW5kIGl0IGhhcyBub3QgZXhwbGljaXRseSBiZWVuIHBhdXNlZCxcbiAgLy8gdGhlbiBjYWxsIHJlc3VtZSB0byBzdGFydCB0aGUgZmxvdyBvZiBkYXRhIG9uIHRoZSBuZXh0IHRpY2suXG4gIGlmIChldiA9PT0gJ2RhdGEnICYmIGZhbHNlICE9PSB0aGlzLl9yZWFkYWJsZVN0YXRlLmZsb3dpbmcpIHtcbiAgICB0aGlzLnJlc3VtZSgpO1xuICB9XG5cbiAgaWYgKGV2ID09PSAncmVhZGFibGUnICYmIHRoaXMucmVhZGFibGUpIHtcbiAgICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuICAgIGlmICghc3RhdGUucmVhZGFibGVMaXN0ZW5pbmcpIHtcbiAgICAgIHN0YXRlLnJlYWRhYmxlTGlzdGVuaW5nID0gdHJ1ZTtcbiAgICAgIHN0YXRlLmVtaXR0ZWRSZWFkYWJsZSA9IGZhbHNlO1xuICAgICAgc3RhdGUubmVlZFJlYWRhYmxlID0gdHJ1ZTtcbiAgICAgIGlmICghc3RhdGUucmVhZGluZykge1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24oKSB7XG4gICAgICAgICAgZGVidWcoJ3JlYWRhYmxlIG5leHR0aWNrIHJlYWQgMCcpO1xuICAgICAgICAgIHNlbGYucmVhZCgwKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2UgaWYgKHN0YXRlLmxlbmd0aCkge1xuICAgICAgICBlbWl0UmVhZGFibGUodGhpcywgc3RhdGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXM7XG59O1xuUmVhZGFibGUucHJvdG90eXBlLmFkZExpc3RlbmVyID0gUmVhZGFibGUucHJvdG90eXBlLm9uO1xuXG4vLyBwYXVzZSgpIGFuZCByZXN1bWUoKSBhcmUgcmVtbmFudHMgb2YgdGhlIGxlZ2FjeSByZWFkYWJsZSBzdHJlYW0gQVBJXG4vLyBJZiB0aGUgdXNlciB1c2VzIHRoZW0sIHRoZW4gc3dpdGNoIGludG8gb2xkIG1vZGUuXG5SZWFkYWJsZS5wcm90b3R5cGUucmVzdW1lID0gZnVuY3Rpb24oKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG4gIGlmICghc3RhdGUuZmxvd2luZykge1xuICAgIGRlYnVnKCdyZXN1bWUnKTtcbiAgICBzdGF0ZS5mbG93aW5nID0gdHJ1ZTtcbiAgICBpZiAoIXN0YXRlLnJlYWRpbmcpIHtcbiAgICAgIGRlYnVnKCdyZXN1bWUgcmVhZCAwJyk7XG4gICAgICB0aGlzLnJlYWQoMCk7XG4gICAgfVxuICAgIHJlc3VtZSh0aGlzLCBzdGF0ZSk7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5mdW5jdGlvbiByZXN1bWUoc3RyZWFtLCBzdGF0ZSkge1xuICBpZiAoIXN0YXRlLnJlc3VtZVNjaGVkdWxlZCkge1xuICAgIHN0YXRlLnJlc3VtZVNjaGVkdWxlZCA9IHRydWU7XG4gICAgcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbigpIHtcbiAgICAgIHJlc3VtZV8oc3RyZWFtLCBzdGF0ZSk7XG4gICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVzdW1lXyhzdHJlYW0sIHN0YXRlKSB7XG4gIHN0YXRlLnJlc3VtZVNjaGVkdWxlZCA9IGZhbHNlO1xuICBzdHJlYW0uZW1pdCgncmVzdW1lJyk7XG4gIGZsb3coc3RyZWFtKTtcbiAgaWYgKHN0YXRlLmZsb3dpbmcgJiYgIXN0YXRlLnJlYWRpbmcpXG4gICAgc3RyZWFtLnJlYWQoMCk7XG59XG5cblJlYWRhYmxlLnByb3RvdHlwZS5wYXVzZSA9IGZ1bmN0aW9uKCkge1xuICBkZWJ1ZygnY2FsbCBwYXVzZSBmbG93aW5nPSVqJywgdGhpcy5fcmVhZGFibGVTdGF0ZS5mbG93aW5nKTtcbiAgaWYgKGZhbHNlICE9PSB0aGlzLl9yZWFkYWJsZVN0YXRlLmZsb3dpbmcpIHtcbiAgICBkZWJ1ZygncGF1c2UnKTtcbiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLmZsb3dpbmcgPSBmYWxzZTtcbiAgICB0aGlzLmVtaXQoJ3BhdXNlJyk7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5mdW5jdGlvbiBmbG93KHN0cmVhbSkge1xuICB2YXIgc3RhdGUgPSBzdHJlYW0uX3JlYWRhYmxlU3RhdGU7XG4gIGRlYnVnKCdmbG93Jywgc3RhdGUuZmxvd2luZyk7XG4gIGlmIChzdGF0ZS5mbG93aW5nKSB7XG4gICAgZG8ge1xuICAgICAgdmFyIGNodW5rID0gc3RyZWFtLnJlYWQoKTtcbiAgICB9IHdoaWxlIChudWxsICE9PSBjaHVuayAmJiBzdGF0ZS5mbG93aW5nKTtcbiAgfVxufVxuXG4vLyB3cmFwIGFuIG9sZC1zdHlsZSBzdHJlYW0gYXMgdGhlIGFzeW5jIGRhdGEgc291cmNlLlxuLy8gVGhpcyBpcyAqbm90KiBwYXJ0IG9mIHRoZSByZWFkYWJsZSBzdHJlYW0gaW50ZXJmYWNlLlxuLy8gSXQgaXMgYW4gdWdseSB1bmZvcnR1bmF0ZSBtZXNzIG9mIGhpc3RvcnkuXG5SZWFkYWJsZS5wcm90b3R5cGUud3JhcCA9IGZ1bmN0aW9uKHN0cmVhbSkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuICB2YXIgcGF1c2VkID0gZmFsc2U7XG5cbiAgdmFyIHNlbGYgPSB0aGlzO1xuICBzdHJlYW0ub24oJ2VuZCcsIGZ1bmN0aW9uKCkge1xuICAgIGRlYnVnKCd3cmFwcGVkIGVuZCcpO1xuICAgIGlmIChzdGF0ZS5kZWNvZGVyICYmICFzdGF0ZS5lbmRlZCkge1xuICAgICAgdmFyIGNodW5rID0gc3RhdGUuZGVjb2Rlci5lbmQoKTtcbiAgICAgIGlmIChjaHVuayAmJiBjaHVuay5sZW5ndGgpXG4gICAgICAgIHNlbGYucHVzaChjaHVuayk7XG4gICAgfVxuXG4gICAgc2VsZi5wdXNoKG51bGwpO1xuICB9KTtcblxuICBzdHJlYW0ub24oJ2RhdGEnLCBmdW5jdGlvbihjaHVuaykge1xuICAgIGRlYnVnKCd3cmFwcGVkIGRhdGEnKTtcbiAgICBpZiAoc3RhdGUuZGVjb2RlcilcbiAgICAgIGNodW5rID0gc3RhdGUuZGVjb2Rlci53cml0ZShjaHVuayk7XG4gICAgaWYgKCFjaHVuayB8fCAhc3RhdGUub2JqZWN0TW9kZSAmJiAhY2h1bmsubGVuZ3RoKVxuICAgICAgcmV0dXJuO1xuXG4gICAgdmFyIHJldCA9IHNlbGYucHVzaChjaHVuayk7XG4gICAgaWYgKCFyZXQpIHtcbiAgICAgIHBhdXNlZCA9IHRydWU7XG4gICAgICBzdHJlYW0ucGF1c2UoKTtcbiAgICB9XG4gIH0pO1xuXG4gIC8vIHByb3h5IGFsbCB0aGUgb3RoZXIgbWV0aG9kcy5cbiAgLy8gaW1wb3J0YW50IHdoZW4gd3JhcHBpbmcgZmlsdGVycyBhbmQgZHVwbGV4ZXMuXG4gIGZvciAodmFyIGkgaW4gc3RyZWFtKSB7XG4gICAgaWYgKHV0aWwuaXNGdW5jdGlvbihzdHJlYW1baV0pICYmIHV0aWwuaXNVbmRlZmluZWQodGhpc1tpXSkpIHtcbiAgICAgIHRoaXNbaV0gPSBmdW5jdGlvbihtZXRob2QpIHsgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gc3RyZWFtW21ldGhvZF0uYXBwbHkoc3RyZWFtLCBhcmd1bWVudHMpO1xuICAgICAgfX0oaSk7XG4gICAgfVxuICB9XG5cbiAgLy8gcHJveHkgY2VydGFpbiBpbXBvcnRhbnQgZXZlbnRzLlxuICB2YXIgZXZlbnRzID0gWydlcnJvcicsICdjbG9zZScsICdkZXN0cm95JywgJ3BhdXNlJywgJ3Jlc3VtZSddO1xuICBmb3JFYWNoKGV2ZW50cywgZnVuY3Rpb24oZXYpIHtcbiAgICBzdHJlYW0ub24oZXYsIHNlbGYuZW1pdC5iaW5kKHNlbGYsIGV2KSk7XG4gIH0pO1xuXG4gIC8vIHdoZW4gd2UgdHJ5IHRvIGNvbnN1bWUgc29tZSBtb3JlIGJ5dGVzLCBzaW1wbHkgdW5wYXVzZSB0aGVcbiAgLy8gdW5kZXJseWluZyBzdHJlYW0uXG4gIHNlbGYuX3JlYWQgPSBmdW5jdGlvbihuKSB7XG4gICAgZGVidWcoJ3dyYXBwZWQgX3JlYWQnLCBuKTtcbiAgICBpZiAocGF1c2VkKSB7XG4gICAgICBwYXVzZWQgPSBmYWxzZTtcbiAgICAgIHN0cmVhbS5yZXN1bWUoKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIHNlbGY7XG59O1xuXG5cblxuLy8gZXhwb3NlZCBmb3IgdGVzdGluZyBwdXJwb3NlcyBvbmx5LlxuUmVhZGFibGUuX2Zyb21MaXN0ID0gZnJvbUxpc3Q7XG5cbi8vIFBsdWNrIG9mZiBuIGJ5dGVzIGZyb20gYW4gYXJyYXkgb2YgYnVmZmVycy5cbi8vIExlbmd0aCBpcyB0aGUgY29tYmluZWQgbGVuZ3RocyBvZiBhbGwgdGhlIGJ1ZmZlcnMgaW4gdGhlIGxpc3QuXG5mdW5jdGlvbiBmcm9tTGlzdChuLCBzdGF0ZSkge1xuICB2YXIgbGlzdCA9IHN0YXRlLmJ1ZmZlcjtcbiAgdmFyIGxlbmd0aCA9IHN0YXRlLmxlbmd0aDtcbiAgdmFyIHN0cmluZ01vZGUgPSAhIXN0YXRlLmRlY29kZXI7XG4gIHZhciBvYmplY3RNb2RlID0gISFzdGF0ZS5vYmplY3RNb2RlO1xuICB2YXIgcmV0O1xuXG4gIC8vIG5vdGhpbmcgaW4gdGhlIGxpc3QsIGRlZmluaXRlbHkgZW1wdHkuXG4gIGlmIChsaXN0Lmxlbmd0aCA9PT0gMClcbiAgICByZXR1cm4gbnVsbDtcblxuICBpZiAobGVuZ3RoID09PSAwKVxuICAgIHJldCA9IG51bGw7XG4gIGVsc2UgaWYgKG9iamVjdE1vZGUpXG4gICAgcmV0ID0gbGlzdC5zaGlmdCgpO1xuICBlbHNlIGlmICghbiB8fCBuID49IGxlbmd0aCkge1xuICAgIC8vIHJlYWQgaXQgYWxsLCB0cnVuY2F0ZSB0aGUgYXJyYXkuXG4gICAgaWYgKHN0cmluZ01vZGUpXG4gICAgICByZXQgPSBsaXN0LmpvaW4oJycpO1xuICAgIGVsc2VcbiAgICAgIHJldCA9IEJ1ZmZlci5jb25jYXQobGlzdCwgbGVuZ3RoKTtcbiAgICBsaXN0Lmxlbmd0aCA9IDA7XG4gIH0gZWxzZSB7XG4gICAgLy8gcmVhZCBqdXN0IHNvbWUgb2YgaXQuXG4gICAgaWYgKG4gPCBsaXN0WzBdLmxlbmd0aCkge1xuICAgICAgLy8ganVzdCB0YWtlIGEgcGFydCBvZiB0aGUgZmlyc3QgbGlzdCBpdGVtLlxuICAgICAgLy8gc2xpY2UgaXMgdGhlIHNhbWUgZm9yIGJ1ZmZlcnMgYW5kIHN0cmluZ3MuXG4gICAgICB2YXIgYnVmID0gbGlzdFswXTtcbiAgICAgIHJldCA9IGJ1Zi5zbGljZSgwLCBuKTtcbiAgICAgIGxpc3RbMF0gPSBidWYuc2xpY2Uobik7XG4gICAgfSBlbHNlIGlmIChuID09PSBsaXN0WzBdLmxlbmd0aCkge1xuICAgICAgLy8gZmlyc3QgbGlzdCBpcyBhIHBlcmZlY3QgbWF0Y2hcbiAgICAgIHJldCA9IGxpc3Quc2hpZnQoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gY29tcGxleCBjYXNlLlxuICAgICAgLy8gd2UgaGF2ZSBlbm91Z2ggdG8gY292ZXIgaXQsIGJ1dCBpdCBzcGFucyBwYXN0IHRoZSBmaXJzdCBidWZmZXIuXG4gICAgICBpZiAoc3RyaW5nTW9kZSlcbiAgICAgICAgcmV0ID0gJyc7XG4gICAgICBlbHNlXG4gICAgICAgIHJldCA9IG5ldyBCdWZmZXIobik7XG5cbiAgICAgIHZhciBjID0gMDtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gbGlzdC5sZW5ndGg7IGkgPCBsICYmIGMgPCBuOyBpKyspIHtcbiAgICAgICAgdmFyIGJ1ZiA9IGxpc3RbMF07XG4gICAgICAgIHZhciBjcHkgPSBNYXRoLm1pbihuIC0gYywgYnVmLmxlbmd0aCk7XG5cbiAgICAgICAgaWYgKHN0cmluZ01vZGUpXG4gICAgICAgICAgcmV0ICs9IGJ1Zi5zbGljZSgwLCBjcHkpO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgYnVmLmNvcHkocmV0LCBjLCAwLCBjcHkpO1xuXG4gICAgICAgIGlmIChjcHkgPCBidWYubGVuZ3RoKVxuICAgICAgICAgIGxpc3RbMF0gPSBidWYuc2xpY2UoY3B5KTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgIGxpc3Quc2hpZnQoKTtcblxuICAgICAgICBjICs9IGNweTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmV0O1xufVxuXG5mdW5jdGlvbiBlbmRSZWFkYWJsZShzdHJlYW0pIHtcbiAgdmFyIHN0YXRlID0gc3RyZWFtLl9yZWFkYWJsZVN0YXRlO1xuXG4gIC8vIElmIHdlIGdldCBoZXJlIGJlZm9yZSBjb25zdW1pbmcgYWxsIHRoZSBieXRlcywgdGhlbiB0aGF0IGlzIGFcbiAgLy8gYnVnIGluIG5vZGUuICBTaG91bGQgbmV2ZXIgaGFwcGVuLlxuICBpZiAoc3RhdGUubGVuZ3RoID4gMClcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2VuZFJlYWRhYmxlIGNhbGxlZCBvbiBub24tZW1wdHkgc3RyZWFtJyk7XG5cbiAgaWYgKCFzdGF0ZS5lbmRFbWl0dGVkKSB7XG4gICAgc3RhdGUuZW5kZWQgPSB0cnVlO1xuICAgIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24oKSB7XG4gICAgICAvLyBDaGVjayB0aGF0IHdlIGRpZG4ndCBnZXQgb25lIGxhc3QgdW5zaGlmdC5cbiAgICAgIGlmICghc3RhdGUuZW5kRW1pdHRlZCAmJiBzdGF0ZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgc3RhdGUuZW5kRW1pdHRlZCA9IHRydWU7XG4gICAgICAgIHN0cmVhbS5yZWFkYWJsZSA9IGZhbHNlO1xuICAgICAgICBzdHJlYW0uZW1pdCgnZW5kJyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZm9yRWFjaCAoeHMsIGYpIHtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSB4cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBmKHhzW2ldLCBpKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbmRleE9mICh4cywgeCkge1xuICBmb3IgKHZhciBpID0gMCwgbCA9IHhzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGlmICh4c1tpXSA9PT0geCkgcmV0dXJuIGk7XG4gIH1cbiAgcmV0dXJuIC0xO1xufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gKHdlYnBhY2spL34vbm9kZS1saWJzLWJyb3dzZXIvfi9yZWFkYWJsZS1zdHJlYW0vbGliL19zdHJlYW1fcmVhZGFibGUuanNcbi8vIG1vZHVsZSBpZCA9IDI3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoYXJyKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYXJyKSA9PSAnW29iamVjdCBBcnJheV0nO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vICh3ZWJwYWNrKS9+L25vZGUtbGlicy1icm93c2VyL34vcmVhZGFibGUtc3RyZWFtL34vaXNhcnJheS9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gMjhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbi8vIE5PVEU6IFRoZXNlIHR5cGUgY2hlY2tpbmcgZnVuY3Rpb25zIGludGVudGlvbmFsbHkgZG9uJ3QgdXNlIGBpbnN0YW5jZW9mYFxuLy8gYmVjYXVzZSBpdCBpcyBmcmFnaWxlIGFuZCBjYW4gYmUgZWFzaWx5IGZha2VkIHdpdGggYE9iamVjdC5jcmVhdGUoKWAuXG5cbmZ1bmN0aW9uIGlzQXJyYXkoYXJnKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KSB7XG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkoYXJnKTtcbiAgfVxuICByZXR1cm4gb2JqZWN0VG9TdHJpbmcoYXJnKSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbn1cbmV4cG9ydHMuaXNBcnJheSA9IGlzQXJyYXk7XG5cbmZ1bmN0aW9uIGlzQm9vbGVhbihhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdib29sZWFuJztcbn1cbmV4cG9ydHMuaXNCb29sZWFuID0gaXNCb29sZWFuO1xuXG5mdW5jdGlvbiBpc051bGwoYXJnKSB7XG4gIHJldHVybiBhcmcgPT09IG51bGw7XG59XG5leHBvcnRzLmlzTnVsbCA9IGlzTnVsbDtcblxuZnVuY3Rpb24gaXNOdWxsT3JVbmRlZmluZWQoYXJnKSB7XG4gIHJldHVybiBhcmcgPT0gbnVsbDtcbn1cbmV4cG9ydHMuaXNOdWxsT3JVbmRlZmluZWQgPSBpc051bGxPclVuZGVmaW5lZDtcblxuZnVuY3Rpb24gaXNOdW1iZXIoYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnbnVtYmVyJztcbn1cbmV4cG9ydHMuaXNOdW1iZXIgPSBpc051bWJlcjtcblxuZnVuY3Rpb24gaXNTdHJpbmcoYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnc3RyaW5nJztcbn1cbmV4cG9ydHMuaXNTdHJpbmcgPSBpc1N0cmluZztcblxuZnVuY3Rpb24gaXNTeW1ib2woYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnc3ltYm9sJztcbn1cbmV4cG9ydHMuaXNTeW1ib2wgPSBpc1N5bWJvbDtcblxuZnVuY3Rpb24gaXNVbmRlZmluZWQoYXJnKSB7XG4gIHJldHVybiBhcmcgPT09IHZvaWQgMDtcbn1cbmV4cG9ydHMuaXNVbmRlZmluZWQgPSBpc1VuZGVmaW5lZDtcblxuZnVuY3Rpb24gaXNSZWdFeHAocmUpIHtcbiAgcmV0dXJuIG9iamVjdFRvU3RyaW5nKHJlKSA9PT0gJ1tvYmplY3QgUmVnRXhwXSc7XG59XG5leHBvcnRzLmlzUmVnRXhwID0gaXNSZWdFeHA7XG5cbmZ1bmN0aW9uIGlzT2JqZWN0KGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ29iamVjdCcgJiYgYXJnICE9PSBudWxsO1xufVxuZXhwb3J0cy5pc09iamVjdCA9IGlzT2JqZWN0O1xuXG5mdW5jdGlvbiBpc0RhdGUoZCkge1xuICByZXR1cm4gb2JqZWN0VG9TdHJpbmcoZCkgPT09ICdbb2JqZWN0IERhdGVdJztcbn1cbmV4cG9ydHMuaXNEYXRlID0gaXNEYXRlO1xuXG5mdW5jdGlvbiBpc0Vycm9yKGUpIHtcbiAgcmV0dXJuIChvYmplY3RUb1N0cmluZyhlKSA9PT0gJ1tvYmplY3QgRXJyb3JdJyB8fCBlIGluc3RhbmNlb2YgRXJyb3IpO1xufVxuZXhwb3J0cy5pc0Vycm9yID0gaXNFcnJvcjtcblxuZnVuY3Rpb24gaXNGdW5jdGlvbihhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdmdW5jdGlvbic7XG59XG5leHBvcnRzLmlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uO1xuXG5mdW5jdGlvbiBpc1ByaW1pdGl2ZShhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PT0gbnVsbCB8fFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ2Jvb2xlYW4nIHx8XG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnbnVtYmVyJyB8fFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ3N0cmluZycgfHxcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdzeW1ib2wnIHx8ICAvLyBFUzYgc3ltYm9sXG4gICAgICAgICB0eXBlb2YgYXJnID09PSAndW5kZWZpbmVkJztcbn1cbmV4cG9ydHMuaXNQcmltaXRpdmUgPSBpc1ByaW1pdGl2ZTtcblxuZXhwb3J0cy5pc0J1ZmZlciA9IEJ1ZmZlci5pc0J1ZmZlcjtcblxuZnVuY3Rpb24gb2JqZWN0VG9TdHJpbmcobykge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pO1xufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gKHdlYnBhY2spL34vbm9kZS1saWJzLWJyb3dzZXIvfi9yZWFkYWJsZS1zdHJlYW0vfi9jb3JlLXV0aWwtaXMvbGliL3V0aWwuanNcbi8vIG1vZHVsZSBpZCA9IDI5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsImlmICh0eXBlb2YgT2JqZWN0LmNyZWF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAvLyBpbXBsZW1lbnRhdGlvbiBmcm9tIHN0YW5kYXJkIG5vZGUuanMgJ3V0aWwnIG1vZHVsZVxuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGluaGVyaXRzKGN0b3IsIHN1cGVyQ3Rvcikge1xuICAgIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yXG4gICAgY3Rvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ3Rvci5wcm90b3R5cGUsIHtcbiAgICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICAgIHZhbHVlOiBjdG9yLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgfVxuICAgIH0pO1xuICB9O1xufSBlbHNlIHtcbiAgLy8gb2xkIHNjaG9vbCBzaGltIGZvciBvbGQgYnJvd3NlcnNcbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpbmhlcml0cyhjdG9yLCBzdXBlckN0b3IpIHtcbiAgICBjdG9yLnN1cGVyXyA9IHN1cGVyQ3RvclxuICAgIHZhciBUZW1wQ3RvciA9IGZ1bmN0aW9uICgpIHt9XG4gICAgVGVtcEN0b3IucHJvdG90eXBlID0gc3VwZXJDdG9yLnByb3RvdHlwZVxuICAgIGN0b3IucHJvdG90eXBlID0gbmV3IFRlbXBDdG9yKClcbiAgICBjdG9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGN0b3JcbiAgfVxufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gKHdlYnBhY2spL34vbm9kZS1saWJzLWJyb3dzZXIvfi9yZWFkYWJsZS1zdHJlYW0vfi9pbmhlcml0cy9pbmhlcml0c19icm93c2VyLmpzXG4vLyBtb2R1bGUgaWQgPSAzMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuLy8gYSBkdXBsZXggc3RyZWFtIGlzIGp1c3QgYSBzdHJlYW0gdGhhdCBpcyBib3RoIHJlYWRhYmxlIGFuZCB3cml0YWJsZS5cbi8vIFNpbmNlIEpTIGRvZXNuJ3QgaGF2ZSBtdWx0aXBsZSBwcm90b3R5cGFsIGluaGVyaXRhbmNlLCB0aGlzIGNsYXNzXG4vLyBwcm90b3R5cGFsbHkgaW5oZXJpdHMgZnJvbSBSZWFkYWJsZSwgYW5kIHRoZW4gcGFyYXNpdGljYWxseSBmcm9tXG4vLyBXcml0YWJsZS5cblxubW9kdWxlLmV4cG9ydHMgPSBEdXBsZXg7XG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgb2JqZWN0S2V5cyA9IE9iamVjdC5rZXlzIHx8IGZ1bmN0aW9uIChvYmopIHtcbiAgdmFyIGtleXMgPSBbXTtcbiAgZm9yICh2YXIga2V5IGluIG9iaikga2V5cy5wdXNoKGtleSk7XG4gIHJldHVybiBrZXlzO1xufVxuLyo8L3JlcGxhY2VtZW50PiovXG5cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciB1dGlsID0gcmVxdWlyZSgnY29yZS11dGlsLWlzJyk7XG51dGlsLmluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG52YXIgUmVhZGFibGUgPSByZXF1aXJlKCcuL19zdHJlYW1fcmVhZGFibGUnKTtcbnZhciBXcml0YWJsZSA9IHJlcXVpcmUoJy4vX3N0cmVhbV93cml0YWJsZScpO1xuXG51dGlsLmluaGVyaXRzKER1cGxleCwgUmVhZGFibGUpO1xuXG5mb3JFYWNoKG9iamVjdEtleXMoV3JpdGFibGUucHJvdG90eXBlKSwgZnVuY3Rpb24obWV0aG9kKSB7XG4gIGlmICghRHVwbGV4LnByb3RvdHlwZVttZXRob2RdKVxuICAgIER1cGxleC5wcm90b3R5cGVbbWV0aG9kXSA9IFdyaXRhYmxlLnByb3RvdHlwZVttZXRob2RdO1xufSk7XG5cbmZ1bmN0aW9uIER1cGxleChvcHRpb25zKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBEdXBsZXgpKVxuICAgIHJldHVybiBuZXcgRHVwbGV4KG9wdGlvbnMpO1xuXG4gIFJlYWRhYmxlLmNhbGwodGhpcywgb3B0aW9ucyk7XG4gIFdyaXRhYmxlLmNhbGwodGhpcywgb3B0aW9ucyk7XG5cbiAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5yZWFkYWJsZSA9PT0gZmFsc2UpXG4gICAgdGhpcy5yZWFkYWJsZSA9IGZhbHNlO1xuXG4gIGlmIChvcHRpb25zICYmIG9wdGlvbnMud3JpdGFibGUgPT09IGZhbHNlKVxuICAgIHRoaXMud3JpdGFibGUgPSBmYWxzZTtcblxuICB0aGlzLmFsbG93SGFsZk9wZW4gPSB0cnVlO1xuICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLmFsbG93SGFsZk9wZW4gPT09IGZhbHNlKVxuICAgIHRoaXMuYWxsb3dIYWxmT3BlbiA9IGZhbHNlO1xuXG4gIHRoaXMub25jZSgnZW5kJywgb25lbmQpO1xufVxuXG4vLyB0aGUgbm8taGFsZi1vcGVuIGVuZm9yY2VyXG5mdW5jdGlvbiBvbmVuZCgpIHtcbiAgLy8gaWYgd2UgYWxsb3cgaGFsZi1vcGVuIHN0YXRlLCBvciBpZiB0aGUgd3JpdGFibGUgc2lkZSBlbmRlZCxcbiAgLy8gdGhlbiB3ZSdyZSBvay5cbiAgaWYgKHRoaXMuYWxsb3dIYWxmT3BlbiB8fCB0aGlzLl93cml0YWJsZVN0YXRlLmVuZGVkKVxuICAgIHJldHVybjtcblxuICAvLyBubyBtb3JlIGRhdGEgY2FuIGJlIHdyaXR0ZW4uXG4gIC8vIEJ1dCBhbGxvdyBtb3JlIHdyaXRlcyB0byBoYXBwZW4gaW4gdGhpcyB0aWNrLlxuICBwcm9jZXNzLm5leHRUaWNrKHRoaXMuZW5kLmJpbmQodGhpcykpO1xufVxuXG5mdW5jdGlvbiBmb3JFYWNoICh4cywgZikge1xuICBmb3IgKHZhciBpID0gMCwgbCA9IHhzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGYoeHNbaV0sIGkpO1xuICB9XG59XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAod2VicGFjaykvfi9ub2RlLWxpYnMtYnJvd3Nlci9+L3JlYWRhYmxlLXN0cmVhbS9saWIvX3N0cmVhbV9kdXBsZXguanNcbi8vIG1vZHVsZSBpZCA9IDMyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4vLyBBIGJpdCBzaW1wbGVyIHRoYW4gcmVhZGFibGUgc3RyZWFtcy5cbi8vIEltcGxlbWVudCBhbiBhc3luYyAuX3dyaXRlKGNodW5rLCBjYiksIGFuZCBpdCdsbCBoYW5kbGUgYWxsXG4vLyB0aGUgZHJhaW4gZXZlbnQgZW1pc3Npb24gYW5kIGJ1ZmZlcmluZy5cblxubW9kdWxlLmV4cG9ydHMgPSBXcml0YWJsZTtcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBCdWZmZXIgPSByZXF1aXJlKCdidWZmZXInKS5CdWZmZXI7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuV3JpdGFibGUuV3JpdGFibGVTdGF0ZSA9IFdyaXRhYmxlU3RhdGU7XG5cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciB1dGlsID0gcmVxdWlyZSgnY29yZS11dGlsLWlzJyk7XG51dGlsLmluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG52YXIgU3RyZWFtID0gcmVxdWlyZSgnc3RyZWFtJyk7XG5cbnV0aWwuaW5oZXJpdHMoV3JpdGFibGUsIFN0cmVhbSk7XG5cbmZ1bmN0aW9uIFdyaXRlUmVxKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgdGhpcy5jaHVuayA9IGNodW5rO1xuICB0aGlzLmVuY29kaW5nID0gZW5jb2Rpbmc7XG4gIHRoaXMuY2FsbGJhY2sgPSBjYjtcbn1cblxuZnVuY3Rpb24gV3JpdGFibGVTdGF0ZShvcHRpb25zLCBzdHJlYW0pIHtcbiAgdmFyIER1cGxleCA9IHJlcXVpcmUoJy4vX3N0cmVhbV9kdXBsZXgnKTtcblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICAvLyB0aGUgcG9pbnQgYXQgd2hpY2ggd3JpdGUoKSBzdGFydHMgcmV0dXJuaW5nIGZhbHNlXG4gIC8vIE5vdGU6IDAgaXMgYSB2YWxpZCB2YWx1ZSwgbWVhbnMgdGhhdCB3ZSBhbHdheXMgcmV0dXJuIGZhbHNlIGlmXG4gIC8vIHRoZSBlbnRpcmUgYnVmZmVyIGlzIG5vdCBmbHVzaGVkIGltbWVkaWF0ZWx5IG9uIHdyaXRlKClcbiAgdmFyIGh3bSA9IG9wdGlvbnMuaGlnaFdhdGVyTWFyaztcbiAgdmFyIGRlZmF1bHRId20gPSBvcHRpb25zLm9iamVjdE1vZGUgPyAxNiA6IDE2ICogMTAyNDtcbiAgdGhpcy5oaWdoV2F0ZXJNYXJrID0gKGh3bSB8fCBod20gPT09IDApID8gaHdtIDogZGVmYXVsdEh3bTtcblxuICAvLyBvYmplY3Qgc3RyZWFtIGZsYWcgdG8gaW5kaWNhdGUgd2hldGhlciBvciBub3QgdGhpcyBzdHJlYW1cbiAgLy8gY29udGFpbnMgYnVmZmVycyBvciBvYmplY3RzLlxuICB0aGlzLm9iamVjdE1vZGUgPSAhIW9wdGlvbnMub2JqZWN0TW9kZTtcblxuICBpZiAoc3RyZWFtIGluc3RhbmNlb2YgRHVwbGV4KVxuICAgIHRoaXMub2JqZWN0TW9kZSA9IHRoaXMub2JqZWN0TW9kZSB8fCAhIW9wdGlvbnMud3JpdGFibGVPYmplY3RNb2RlO1xuXG4gIC8vIGNhc3QgdG8gaW50cy5cbiAgdGhpcy5oaWdoV2F0ZXJNYXJrID0gfn50aGlzLmhpZ2hXYXRlck1hcms7XG5cbiAgdGhpcy5uZWVkRHJhaW4gPSBmYWxzZTtcbiAgLy8gYXQgdGhlIHN0YXJ0IG9mIGNhbGxpbmcgZW5kKClcbiAgdGhpcy5lbmRpbmcgPSBmYWxzZTtcbiAgLy8gd2hlbiBlbmQoKSBoYXMgYmVlbiBjYWxsZWQsIGFuZCByZXR1cm5lZFxuICB0aGlzLmVuZGVkID0gZmFsc2U7XG4gIC8vIHdoZW4gJ2ZpbmlzaCcgaXMgZW1pdHRlZFxuICB0aGlzLmZpbmlzaGVkID0gZmFsc2U7XG5cbiAgLy8gc2hvdWxkIHdlIGRlY29kZSBzdHJpbmdzIGludG8gYnVmZmVycyBiZWZvcmUgcGFzc2luZyB0byBfd3JpdGU/XG4gIC8vIHRoaXMgaXMgaGVyZSBzbyB0aGF0IHNvbWUgbm9kZS1jb3JlIHN0cmVhbXMgY2FuIG9wdGltaXplIHN0cmluZ1xuICAvLyBoYW5kbGluZyBhdCBhIGxvd2VyIGxldmVsLlxuICB2YXIgbm9EZWNvZGUgPSBvcHRpb25zLmRlY29kZVN0cmluZ3MgPT09IGZhbHNlO1xuICB0aGlzLmRlY29kZVN0cmluZ3MgPSAhbm9EZWNvZGU7XG5cbiAgLy8gQ3J5cHRvIGlzIGtpbmQgb2Ygb2xkIGFuZCBjcnVzdHkuICBIaXN0b3JpY2FsbHksIGl0cyBkZWZhdWx0IHN0cmluZ1xuICAvLyBlbmNvZGluZyBpcyAnYmluYXJ5JyBzbyB3ZSBoYXZlIHRvIG1ha2UgdGhpcyBjb25maWd1cmFibGUuXG4gIC8vIEV2ZXJ5dGhpbmcgZWxzZSBpbiB0aGUgdW5pdmVyc2UgdXNlcyAndXRmOCcsIHRob3VnaC5cbiAgdGhpcy5kZWZhdWx0RW5jb2RpbmcgPSBvcHRpb25zLmRlZmF1bHRFbmNvZGluZyB8fCAndXRmOCc7XG5cbiAgLy8gbm90IGFuIGFjdHVhbCBidWZmZXIgd2Uga2VlcCB0cmFjayBvZiwgYnV0IGEgbWVhc3VyZW1lbnRcbiAgLy8gb2YgaG93IG11Y2ggd2UncmUgd2FpdGluZyB0byBnZXQgcHVzaGVkIHRvIHNvbWUgdW5kZXJseWluZ1xuICAvLyBzb2NrZXQgb3IgZmlsZS5cbiAgdGhpcy5sZW5ndGggPSAwO1xuXG4gIC8vIGEgZmxhZyB0byBzZWUgd2hlbiB3ZSdyZSBpbiB0aGUgbWlkZGxlIG9mIGEgd3JpdGUuXG4gIHRoaXMud3JpdGluZyA9IGZhbHNlO1xuXG4gIC8vIHdoZW4gdHJ1ZSBhbGwgd3JpdGVzIHdpbGwgYmUgYnVmZmVyZWQgdW50aWwgLnVuY29yaygpIGNhbGxcbiAgdGhpcy5jb3JrZWQgPSAwO1xuXG4gIC8vIGEgZmxhZyB0byBiZSBhYmxlIHRvIHRlbGwgaWYgdGhlIG9ud3JpdGUgY2IgaXMgY2FsbGVkIGltbWVkaWF0ZWx5LFxuICAvLyBvciBvbiBhIGxhdGVyIHRpY2suICBXZSBzZXQgdGhpcyB0byB0cnVlIGF0IGZpcnN0LCBiZWNhdXNlIGFueVxuICAvLyBhY3Rpb25zIHRoYXQgc2hvdWxkbid0IGhhcHBlbiB1bnRpbCBcImxhdGVyXCIgc2hvdWxkIGdlbmVyYWxseSBhbHNvXG4gIC8vIG5vdCBoYXBwZW4gYmVmb3JlIHRoZSBmaXJzdCB3cml0ZSBjYWxsLlxuICB0aGlzLnN5bmMgPSB0cnVlO1xuXG4gIC8vIGEgZmxhZyB0byBrbm93IGlmIHdlJ3JlIHByb2Nlc3NpbmcgcHJldmlvdXNseSBidWZmZXJlZCBpdGVtcywgd2hpY2hcbiAgLy8gbWF5IGNhbGwgdGhlIF93cml0ZSgpIGNhbGxiYWNrIGluIHRoZSBzYW1lIHRpY2ssIHNvIHRoYXQgd2UgZG9uJ3RcbiAgLy8gZW5kIHVwIGluIGFuIG92ZXJsYXBwZWQgb253cml0ZSBzaXR1YXRpb24uXG4gIHRoaXMuYnVmZmVyUHJvY2Vzc2luZyA9IGZhbHNlO1xuXG4gIC8vIHRoZSBjYWxsYmFjayB0aGF0J3MgcGFzc2VkIHRvIF93cml0ZShjaHVuayxjYilcbiAgdGhpcy5vbndyaXRlID0gZnVuY3Rpb24oZXIpIHtcbiAgICBvbndyaXRlKHN0cmVhbSwgZXIpO1xuICB9O1xuXG4gIC8vIHRoZSBjYWxsYmFjayB0aGF0IHRoZSB1c2VyIHN1cHBsaWVzIHRvIHdyaXRlKGNodW5rLGVuY29kaW5nLGNiKVxuICB0aGlzLndyaXRlY2IgPSBudWxsO1xuXG4gIC8vIHRoZSBhbW91bnQgdGhhdCBpcyBiZWluZyB3cml0dGVuIHdoZW4gX3dyaXRlIGlzIGNhbGxlZC5cbiAgdGhpcy53cml0ZWxlbiA9IDA7XG5cbiAgdGhpcy5idWZmZXIgPSBbXTtcblxuICAvLyBudW1iZXIgb2YgcGVuZGluZyB1c2VyLXN1cHBsaWVkIHdyaXRlIGNhbGxiYWNrc1xuICAvLyB0aGlzIG11c3QgYmUgMCBiZWZvcmUgJ2ZpbmlzaCcgY2FuIGJlIGVtaXR0ZWRcbiAgdGhpcy5wZW5kaW5nY2IgPSAwO1xuXG4gIC8vIGVtaXQgcHJlZmluaXNoIGlmIHRoZSBvbmx5IHRoaW5nIHdlJ3JlIHdhaXRpbmcgZm9yIGlzIF93cml0ZSBjYnNcbiAgLy8gVGhpcyBpcyByZWxldmFudCBmb3Igc3luY2hyb25vdXMgVHJhbnNmb3JtIHN0cmVhbXNcbiAgdGhpcy5wcmVmaW5pc2hlZCA9IGZhbHNlO1xuXG4gIC8vIFRydWUgaWYgdGhlIGVycm9yIHdhcyBhbHJlYWR5IGVtaXR0ZWQgYW5kIHNob3VsZCBub3QgYmUgdGhyb3duIGFnYWluXG4gIHRoaXMuZXJyb3JFbWl0dGVkID0gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIFdyaXRhYmxlKG9wdGlvbnMpIHtcbiAgdmFyIER1cGxleCA9IHJlcXVpcmUoJy4vX3N0cmVhbV9kdXBsZXgnKTtcblxuICAvLyBXcml0YWJsZSBjdG9yIGlzIGFwcGxpZWQgdG8gRHVwbGV4ZXMsIHRob3VnaCB0aGV5J3JlIG5vdFxuICAvLyBpbnN0YW5jZW9mIFdyaXRhYmxlLCB0aGV5J3JlIGluc3RhbmNlb2YgUmVhZGFibGUuXG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBXcml0YWJsZSkgJiYgISh0aGlzIGluc3RhbmNlb2YgRHVwbGV4KSlcbiAgICByZXR1cm4gbmV3IFdyaXRhYmxlKG9wdGlvbnMpO1xuXG4gIHRoaXMuX3dyaXRhYmxlU3RhdGUgPSBuZXcgV3JpdGFibGVTdGF0ZShvcHRpb25zLCB0aGlzKTtcblxuICAvLyBsZWdhY3kuXG4gIHRoaXMud3JpdGFibGUgPSB0cnVlO1xuXG4gIFN0cmVhbS5jYWxsKHRoaXMpO1xufVxuXG4vLyBPdGhlcndpc2UgcGVvcGxlIGNhbiBwaXBlIFdyaXRhYmxlIHN0cmVhbXMsIHdoaWNoIGlzIGp1c3Qgd3JvbmcuXG5Xcml0YWJsZS5wcm90b3R5cGUucGlwZSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmVtaXQoJ2Vycm9yJywgbmV3IEVycm9yKCdDYW5ub3QgcGlwZS4gTm90IHJlYWRhYmxlLicpKTtcbn07XG5cblxuZnVuY3Rpb24gd3JpdGVBZnRlckVuZChzdHJlYW0sIHN0YXRlLCBjYikge1xuICB2YXIgZXIgPSBuZXcgRXJyb3IoJ3dyaXRlIGFmdGVyIGVuZCcpO1xuICAvLyBUT0RPOiBkZWZlciBlcnJvciBldmVudHMgY29uc2lzdGVudGx5IGV2ZXJ5d2hlcmUsIG5vdCBqdXN0IHRoZSBjYlxuICBzdHJlYW0uZW1pdCgnZXJyb3InLCBlcik7XG4gIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24oKSB7XG4gICAgY2IoZXIpO1xuICB9KTtcbn1cblxuLy8gSWYgd2UgZ2V0IHNvbWV0aGluZyB0aGF0IGlzIG5vdCBhIGJ1ZmZlciwgc3RyaW5nLCBudWxsLCBvciB1bmRlZmluZWQsXG4vLyBhbmQgd2UncmUgbm90IGluIG9iamVjdE1vZGUsIHRoZW4gdGhhdCdzIGFuIGVycm9yLlxuLy8gT3RoZXJ3aXNlIHN0cmVhbSBjaHVua3MgYXJlIGFsbCBjb25zaWRlcmVkIHRvIGJlIG9mIGxlbmd0aD0xLCBhbmQgdGhlXG4vLyB3YXRlcm1hcmtzIGRldGVybWluZSBob3cgbWFueSBvYmplY3RzIHRvIGtlZXAgaW4gdGhlIGJ1ZmZlciwgcmF0aGVyIHRoYW5cbi8vIGhvdyBtYW55IGJ5dGVzIG9yIGNoYXJhY3RlcnMuXG5mdW5jdGlvbiB2YWxpZENodW5rKHN0cmVhbSwgc3RhdGUsIGNodW5rLCBjYikge1xuICB2YXIgdmFsaWQgPSB0cnVlO1xuICBpZiAoIXV0aWwuaXNCdWZmZXIoY2h1bmspICYmXG4gICAgICAhdXRpbC5pc1N0cmluZyhjaHVuaykgJiZcbiAgICAgICF1dGlsLmlzTnVsbE9yVW5kZWZpbmVkKGNodW5rKSAmJlxuICAgICAgIXN0YXRlLm9iamVjdE1vZGUpIHtcbiAgICB2YXIgZXIgPSBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIG5vbi1zdHJpbmcvYnVmZmVyIGNodW5rJyk7XG4gICAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXIpO1xuICAgIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24oKSB7XG4gICAgICBjYihlcik7XG4gICAgfSk7XG4gICAgdmFsaWQgPSBmYWxzZTtcbiAgfVxuICByZXR1cm4gdmFsaWQ7XG59XG5cbldyaXRhYmxlLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fd3JpdGFibGVTdGF0ZTtcbiAgdmFyIHJldCA9IGZhbHNlO1xuXG4gIGlmICh1dGlsLmlzRnVuY3Rpb24oZW5jb2RpbmcpKSB7XG4gICAgY2IgPSBlbmNvZGluZztcbiAgICBlbmNvZGluZyA9IG51bGw7XG4gIH1cblxuICBpZiAodXRpbC5pc0J1ZmZlcihjaHVuaykpXG4gICAgZW5jb2RpbmcgPSAnYnVmZmVyJztcbiAgZWxzZSBpZiAoIWVuY29kaW5nKVxuICAgIGVuY29kaW5nID0gc3RhdGUuZGVmYXVsdEVuY29kaW5nO1xuXG4gIGlmICghdXRpbC5pc0Z1bmN0aW9uKGNiKSlcbiAgICBjYiA9IGZ1bmN0aW9uKCkge307XG5cbiAgaWYgKHN0YXRlLmVuZGVkKVxuICAgIHdyaXRlQWZ0ZXJFbmQodGhpcywgc3RhdGUsIGNiKTtcbiAgZWxzZSBpZiAodmFsaWRDaHVuayh0aGlzLCBzdGF0ZSwgY2h1bmssIGNiKSkge1xuICAgIHN0YXRlLnBlbmRpbmdjYisrO1xuICAgIHJldCA9IHdyaXRlT3JCdWZmZXIodGhpcywgc3RhdGUsIGNodW5rLCBlbmNvZGluZywgY2IpO1xuICB9XG5cbiAgcmV0dXJuIHJldDtcbn07XG5cbldyaXRhYmxlLnByb3RvdHlwZS5jb3JrID0gZnVuY3Rpb24oKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3dyaXRhYmxlU3RhdGU7XG5cbiAgc3RhdGUuY29ya2VkKys7XG59O1xuXG5Xcml0YWJsZS5wcm90b3R5cGUudW5jb3JrID0gZnVuY3Rpb24oKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3dyaXRhYmxlU3RhdGU7XG5cbiAgaWYgKHN0YXRlLmNvcmtlZCkge1xuICAgIHN0YXRlLmNvcmtlZC0tO1xuXG4gICAgaWYgKCFzdGF0ZS53cml0aW5nICYmXG4gICAgICAgICFzdGF0ZS5jb3JrZWQgJiZcbiAgICAgICAgIXN0YXRlLmZpbmlzaGVkICYmXG4gICAgICAgICFzdGF0ZS5idWZmZXJQcm9jZXNzaW5nICYmXG4gICAgICAgIHN0YXRlLmJ1ZmZlci5sZW5ndGgpXG4gICAgICBjbGVhckJ1ZmZlcih0aGlzLCBzdGF0ZSk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGRlY29kZUNodW5rKHN0YXRlLCBjaHVuaywgZW5jb2RpbmcpIHtcbiAgaWYgKCFzdGF0ZS5vYmplY3RNb2RlICYmXG4gICAgICBzdGF0ZS5kZWNvZGVTdHJpbmdzICE9PSBmYWxzZSAmJlxuICAgICAgdXRpbC5pc1N0cmluZyhjaHVuaykpIHtcbiAgICBjaHVuayA9IG5ldyBCdWZmZXIoY2h1bmssIGVuY29kaW5nKTtcbiAgfVxuICByZXR1cm4gY2h1bms7XG59XG5cbi8vIGlmIHdlJ3JlIGFscmVhZHkgd3JpdGluZyBzb21ldGhpbmcsIHRoZW4ganVzdCBwdXQgdGhpc1xuLy8gaW4gdGhlIHF1ZXVlLCBhbmQgd2FpdCBvdXIgdHVybi4gIE90aGVyd2lzZSwgY2FsbCBfd3JpdGVcbi8vIElmIHdlIHJldHVybiBmYWxzZSwgdGhlbiB3ZSBuZWVkIGEgZHJhaW4gZXZlbnQsIHNvIHNldCB0aGF0IGZsYWcuXG5mdW5jdGlvbiB3cml0ZU9yQnVmZmVyKHN0cmVhbSwgc3RhdGUsIGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgY2h1bmsgPSBkZWNvZGVDaHVuayhzdGF0ZSwgY2h1bmssIGVuY29kaW5nKTtcbiAgaWYgKHV0aWwuaXNCdWZmZXIoY2h1bmspKVxuICAgIGVuY29kaW5nID0gJ2J1ZmZlcic7XG4gIHZhciBsZW4gPSBzdGF0ZS5vYmplY3RNb2RlID8gMSA6IGNodW5rLmxlbmd0aDtcblxuICBzdGF0ZS5sZW5ndGggKz0gbGVuO1xuXG4gIHZhciByZXQgPSBzdGF0ZS5sZW5ndGggPCBzdGF0ZS5oaWdoV2F0ZXJNYXJrO1xuICAvLyB3ZSBtdXN0IGVuc3VyZSB0aGF0IHByZXZpb3VzIG5lZWREcmFpbiB3aWxsIG5vdCBiZSByZXNldCB0byBmYWxzZS5cbiAgaWYgKCFyZXQpXG4gICAgc3RhdGUubmVlZERyYWluID0gdHJ1ZTtcblxuICBpZiAoc3RhdGUud3JpdGluZyB8fCBzdGF0ZS5jb3JrZWQpXG4gICAgc3RhdGUuYnVmZmVyLnB1c2gobmV3IFdyaXRlUmVxKGNodW5rLCBlbmNvZGluZywgY2IpKTtcbiAgZWxzZVxuICAgIGRvV3JpdGUoc3RyZWFtLCBzdGF0ZSwgZmFsc2UsIGxlbiwgY2h1bmssIGVuY29kaW5nLCBjYik7XG5cbiAgcmV0dXJuIHJldDtcbn1cblxuZnVuY3Rpb24gZG9Xcml0ZShzdHJlYW0sIHN0YXRlLCB3cml0ZXYsIGxlbiwgY2h1bmssIGVuY29kaW5nLCBjYikge1xuICBzdGF0ZS53cml0ZWxlbiA9IGxlbjtcbiAgc3RhdGUud3JpdGVjYiA9IGNiO1xuICBzdGF0ZS53cml0aW5nID0gdHJ1ZTtcbiAgc3RhdGUuc3luYyA9IHRydWU7XG4gIGlmICh3cml0ZXYpXG4gICAgc3RyZWFtLl93cml0ZXYoY2h1bmssIHN0YXRlLm9ud3JpdGUpO1xuICBlbHNlXG4gICAgc3RyZWFtLl93cml0ZShjaHVuaywgZW5jb2RpbmcsIHN0YXRlLm9ud3JpdGUpO1xuICBzdGF0ZS5zeW5jID0gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIG9ud3JpdGVFcnJvcihzdHJlYW0sIHN0YXRlLCBzeW5jLCBlciwgY2IpIHtcbiAgaWYgKHN5bmMpXG4gICAgcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbigpIHtcbiAgICAgIHN0YXRlLnBlbmRpbmdjYi0tO1xuICAgICAgY2IoZXIpO1xuICAgIH0pO1xuICBlbHNlIHtcbiAgICBzdGF0ZS5wZW5kaW5nY2ItLTtcbiAgICBjYihlcik7XG4gIH1cblxuICBzdHJlYW0uX3dyaXRhYmxlU3RhdGUuZXJyb3JFbWl0dGVkID0gdHJ1ZTtcbiAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXIpO1xufVxuXG5mdW5jdGlvbiBvbndyaXRlU3RhdGVVcGRhdGUoc3RhdGUpIHtcbiAgc3RhdGUud3JpdGluZyA9IGZhbHNlO1xuICBzdGF0ZS53cml0ZWNiID0gbnVsbDtcbiAgc3RhdGUubGVuZ3RoIC09IHN0YXRlLndyaXRlbGVuO1xuICBzdGF0ZS53cml0ZWxlbiA9IDA7XG59XG5cbmZ1bmN0aW9uIG9ud3JpdGUoc3RyZWFtLCBlcikge1xuICB2YXIgc3RhdGUgPSBzdHJlYW0uX3dyaXRhYmxlU3RhdGU7XG4gIHZhciBzeW5jID0gc3RhdGUuc3luYztcbiAgdmFyIGNiID0gc3RhdGUud3JpdGVjYjtcblxuICBvbndyaXRlU3RhdGVVcGRhdGUoc3RhdGUpO1xuXG4gIGlmIChlcilcbiAgICBvbndyaXRlRXJyb3Ioc3RyZWFtLCBzdGF0ZSwgc3luYywgZXIsIGNiKTtcbiAgZWxzZSB7XG4gICAgLy8gQ2hlY2sgaWYgd2UncmUgYWN0dWFsbHkgcmVhZHkgdG8gZmluaXNoLCBidXQgZG9uJ3QgZW1pdCB5ZXRcbiAgICB2YXIgZmluaXNoZWQgPSBuZWVkRmluaXNoKHN0cmVhbSwgc3RhdGUpO1xuXG4gICAgaWYgKCFmaW5pc2hlZCAmJlxuICAgICAgICAhc3RhdGUuY29ya2VkICYmXG4gICAgICAgICFzdGF0ZS5idWZmZXJQcm9jZXNzaW5nICYmXG4gICAgICAgIHN0YXRlLmJ1ZmZlci5sZW5ndGgpIHtcbiAgICAgIGNsZWFyQnVmZmVyKHN0cmVhbSwgc3RhdGUpO1xuICAgIH1cblxuICAgIGlmIChzeW5jKSB7XG4gICAgICBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uKCkge1xuICAgICAgICBhZnRlcldyaXRlKHN0cmVhbSwgc3RhdGUsIGZpbmlzaGVkLCBjYik7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgYWZ0ZXJXcml0ZShzdHJlYW0sIHN0YXRlLCBmaW5pc2hlZCwgY2IpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBhZnRlcldyaXRlKHN0cmVhbSwgc3RhdGUsIGZpbmlzaGVkLCBjYikge1xuICBpZiAoIWZpbmlzaGVkKVxuICAgIG9ud3JpdGVEcmFpbihzdHJlYW0sIHN0YXRlKTtcbiAgc3RhdGUucGVuZGluZ2NiLS07XG4gIGNiKCk7XG4gIGZpbmlzaE1heWJlKHN0cmVhbSwgc3RhdGUpO1xufVxuXG4vLyBNdXN0IGZvcmNlIGNhbGxiYWNrIHRvIGJlIGNhbGxlZCBvbiBuZXh0VGljaywgc28gdGhhdCB3ZSBkb24ndFxuLy8gZW1pdCAnZHJhaW4nIGJlZm9yZSB0aGUgd3JpdGUoKSBjb25zdW1lciBnZXRzIHRoZSAnZmFsc2UnIHJldHVyblxuLy8gdmFsdWUsIGFuZCBoYXMgYSBjaGFuY2UgdG8gYXR0YWNoIGEgJ2RyYWluJyBsaXN0ZW5lci5cbmZ1bmN0aW9uIG9ud3JpdGVEcmFpbihzdHJlYW0sIHN0YXRlKSB7XG4gIGlmIChzdGF0ZS5sZW5ndGggPT09IDAgJiYgc3RhdGUubmVlZERyYWluKSB7XG4gICAgc3RhdGUubmVlZERyYWluID0gZmFsc2U7XG4gICAgc3RyZWFtLmVtaXQoJ2RyYWluJyk7XG4gIH1cbn1cblxuXG4vLyBpZiB0aGVyZSdzIHNvbWV0aGluZyBpbiB0aGUgYnVmZmVyIHdhaXRpbmcsIHRoZW4gcHJvY2VzcyBpdFxuZnVuY3Rpb24gY2xlYXJCdWZmZXIoc3RyZWFtLCBzdGF0ZSkge1xuICBzdGF0ZS5idWZmZXJQcm9jZXNzaW5nID0gdHJ1ZTtcblxuICBpZiAoc3RyZWFtLl93cml0ZXYgJiYgc3RhdGUuYnVmZmVyLmxlbmd0aCA+IDEpIHtcbiAgICAvLyBGYXN0IGNhc2UsIHdyaXRlIGV2ZXJ5dGhpbmcgdXNpbmcgX3dyaXRldigpXG4gICAgdmFyIGNicyA9IFtdO1xuICAgIGZvciAodmFyIGMgPSAwOyBjIDwgc3RhdGUuYnVmZmVyLmxlbmd0aDsgYysrKVxuICAgICAgY2JzLnB1c2goc3RhdGUuYnVmZmVyW2NdLmNhbGxiYWNrKTtcblxuICAgIC8vIGNvdW50IHRoZSBvbmUgd2UgYXJlIGFkZGluZywgYXMgd2VsbC5cbiAgICAvLyBUT0RPKGlzYWFjcykgY2xlYW4gdGhpcyB1cFxuICAgIHN0YXRlLnBlbmRpbmdjYisrO1xuICAgIGRvV3JpdGUoc3RyZWFtLCBzdGF0ZSwgdHJ1ZSwgc3RhdGUubGVuZ3RoLCBzdGF0ZS5idWZmZXIsICcnLCBmdW5jdGlvbihlcnIpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2JzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHN0YXRlLnBlbmRpbmdjYi0tO1xuICAgICAgICBjYnNbaV0oZXJyKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIENsZWFyIGJ1ZmZlclxuICAgIHN0YXRlLmJ1ZmZlciA9IFtdO1xuICB9IGVsc2Uge1xuICAgIC8vIFNsb3cgY2FzZSwgd3JpdGUgY2h1bmtzIG9uZS1ieS1vbmVcbiAgICBmb3IgKHZhciBjID0gMDsgYyA8IHN0YXRlLmJ1ZmZlci5sZW5ndGg7IGMrKykge1xuICAgICAgdmFyIGVudHJ5ID0gc3RhdGUuYnVmZmVyW2NdO1xuICAgICAgdmFyIGNodW5rID0gZW50cnkuY2h1bms7XG4gICAgICB2YXIgZW5jb2RpbmcgPSBlbnRyeS5lbmNvZGluZztcbiAgICAgIHZhciBjYiA9IGVudHJ5LmNhbGxiYWNrO1xuICAgICAgdmFyIGxlbiA9IHN0YXRlLm9iamVjdE1vZGUgPyAxIDogY2h1bmsubGVuZ3RoO1xuXG4gICAgICBkb1dyaXRlKHN0cmVhbSwgc3RhdGUsIGZhbHNlLCBsZW4sIGNodW5rLCBlbmNvZGluZywgY2IpO1xuXG4gICAgICAvLyBpZiB3ZSBkaWRuJ3QgY2FsbCB0aGUgb253cml0ZSBpbW1lZGlhdGVseSwgdGhlblxuICAgICAgLy8gaXQgbWVhbnMgdGhhdCB3ZSBuZWVkIHRvIHdhaXQgdW50aWwgaXQgZG9lcy5cbiAgICAgIC8vIGFsc28sIHRoYXQgbWVhbnMgdGhhdCB0aGUgY2h1bmsgYW5kIGNiIGFyZSBjdXJyZW50bHlcbiAgICAgIC8vIGJlaW5nIHByb2Nlc3NlZCwgc28gbW92ZSB0aGUgYnVmZmVyIGNvdW50ZXIgcGFzdCB0aGVtLlxuICAgICAgaWYgKHN0YXRlLndyaXRpbmcpIHtcbiAgICAgICAgYysrO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoYyA8IHN0YXRlLmJ1ZmZlci5sZW5ndGgpXG4gICAgICBzdGF0ZS5idWZmZXIgPSBzdGF0ZS5idWZmZXIuc2xpY2UoYyk7XG4gICAgZWxzZVxuICAgICAgc3RhdGUuYnVmZmVyLmxlbmd0aCA9IDA7XG4gIH1cblxuICBzdGF0ZS5idWZmZXJQcm9jZXNzaW5nID0gZmFsc2U7XG59XG5cbldyaXRhYmxlLnByb3RvdHlwZS5fd3JpdGUgPSBmdW5jdGlvbihjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIGNiKG5ldyBFcnJvcignbm90IGltcGxlbWVudGVkJykpO1xuXG59O1xuXG5Xcml0YWJsZS5wcm90b3R5cGUuX3dyaXRldiA9IG51bGw7XG5cbldyaXRhYmxlLnByb3RvdHlwZS5lbmQgPSBmdW5jdGlvbihjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3dyaXRhYmxlU3RhdGU7XG5cbiAgaWYgKHV0aWwuaXNGdW5jdGlvbihjaHVuaykpIHtcbiAgICBjYiA9IGNodW5rO1xuICAgIGNodW5rID0gbnVsbDtcbiAgICBlbmNvZGluZyA9IG51bGw7XG4gIH0gZWxzZSBpZiAodXRpbC5pc0Z1bmN0aW9uKGVuY29kaW5nKSkge1xuICAgIGNiID0gZW5jb2Rpbmc7XG4gICAgZW5jb2RpbmcgPSBudWxsO1xuICB9XG5cbiAgaWYgKCF1dGlsLmlzTnVsbE9yVW5kZWZpbmVkKGNodW5rKSlcbiAgICB0aGlzLndyaXRlKGNodW5rLCBlbmNvZGluZyk7XG5cbiAgLy8gLmVuZCgpIGZ1bGx5IHVuY29ya3NcbiAgaWYgKHN0YXRlLmNvcmtlZCkge1xuICAgIHN0YXRlLmNvcmtlZCA9IDE7XG4gICAgdGhpcy51bmNvcmsoKTtcbiAgfVxuXG4gIC8vIGlnbm9yZSB1bm5lY2Vzc2FyeSBlbmQoKSBjYWxscy5cbiAgaWYgKCFzdGF0ZS5lbmRpbmcgJiYgIXN0YXRlLmZpbmlzaGVkKVxuICAgIGVuZFdyaXRhYmxlKHRoaXMsIHN0YXRlLCBjYik7XG59O1xuXG5cbmZ1bmN0aW9uIG5lZWRGaW5pc2goc3RyZWFtLCBzdGF0ZSkge1xuICByZXR1cm4gKHN0YXRlLmVuZGluZyAmJlxuICAgICAgICAgIHN0YXRlLmxlbmd0aCA9PT0gMCAmJlxuICAgICAgICAgICFzdGF0ZS5maW5pc2hlZCAmJlxuICAgICAgICAgICFzdGF0ZS53cml0aW5nKTtcbn1cblxuZnVuY3Rpb24gcHJlZmluaXNoKHN0cmVhbSwgc3RhdGUpIHtcbiAgaWYgKCFzdGF0ZS5wcmVmaW5pc2hlZCkge1xuICAgIHN0YXRlLnByZWZpbmlzaGVkID0gdHJ1ZTtcbiAgICBzdHJlYW0uZW1pdCgncHJlZmluaXNoJyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZmluaXNoTWF5YmUoc3RyZWFtLCBzdGF0ZSkge1xuICB2YXIgbmVlZCA9IG5lZWRGaW5pc2goc3RyZWFtLCBzdGF0ZSk7XG4gIGlmIChuZWVkKSB7XG4gICAgaWYgKHN0YXRlLnBlbmRpbmdjYiA9PT0gMCkge1xuICAgICAgcHJlZmluaXNoKHN0cmVhbSwgc3RhdGUpO1xuICAgICAgc3RhdGUuZmluaXNoZWQgPSB0cnVlO1xuICAgICAgc3RyZWFtLmVtaXQoJ2ZpbmlzaCcpO1xuICAgIH0gZWxzZVxuICAgICAgcHJlZmluaXNoKHN0cmVhbSwgc3RhdGUpO1xuICB9XG4gIHJldHVybiBuZWVkO1xufVxuXG5mdW5jdGlvbiBlbmRXcml0YWJsZShzdHJlYW0sIHN0YXRlLCBjYikge1xuICBzdGF0ZS5lbmRpbmcgPSB0cnVlO1xuICBmaW5pc2hNYXliZShzdHJlYW0sIHN0YXRlKTtcbiAgaWYgKGNiKSB7XG4gICAgaWYgKHN0YXRlLmZpbmlzaGVkKVxuICAgICAgcHJvY2Vzcy5uZXh0VGljayhjYik7XG4gICAgZWxzZVxuICAgICAgc3RyZWFtLm9uY2UoJ2ZpbmlzaCcsIGNiKTtcbiAgfVxuICBzdGF0ZS5lbmRlZCA9IHRydWU7XG59XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAod2VicGFjaykvfi9ub2RlLWxpYnMtYnJvd3Nlci9+L3JlYWRhYmxlLXN0cmVhbS9saWIvX3N0cmVhbV93cml0YWJsZS5qc1xuLy8gbW9kdWxlIGlkID0gMzNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbnZhciBCdWZmZXIgPSByZXF1aXJlKCdidWZmZXInKS5CdWZmZXI7XG5cbnZhciBpc0J1ZmZlckVuY29kaW5nID0gQnVmZmVyLmlzRW5jb2RpbmdcbiAgfHwgZnVuY3Rpb24oZW5jb2RpbmcpIHtcbiAgICAgICBzd2l0Y2ggKGVuY29kaW5nICYmIGVuY29kaW5nLnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgICAgIGNhc2UgJ2hleCc6IGNhc2UgJ3V0ZjgnOiBjYXNlICd1dGYtOCc6IGNhc2UgJ2FzY2lpJzogY2FzZSAnYmluYXJ5JzogY2FzZSAnYmFzZTY0JzogY2FzZSAndWNzMic6IGNhc2UgJ3Vjcy0yJzogY2FzZSAndXRmMTZsZSc6IGNhc2UgJ3V0Zi0xNmxlJzogY2FzZSAncmF3JzogcmV0dXJuIHRydWU7XG4gICAgICAgICBkZWZhdWx0OiByZXR1cm4gZmFsc2U7XG4gICAgICAgfVxuICAgICB9XG5cblxuZnVuY3Rpb24gYXNzZXJ0RW5jb2RpbmcoZW5jb2RpbmcpIHtcbiAgaWYgKGVuY29kaW5nICYmICFpc0J1ZmZlckVuY29kaW5nKGVuY29kaW5nKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKTtcbiAgfVxufVxuXG4vLyBTdHJpbmdEZWNvZGVyIHByb3ZpZGVzIGFuIGludGVyZmFjZSBmb3IgZWZmaWNpZW50bHkgc3BsaXR0aW5nIGEgc2VyaWVzIG9mXG4vLyBidWZmZXJzIGludG8gYSBzZXJpZXMgb2YgSlMgc3RyaW5ncyB3aXRob3V0IGJyZWFraW5nIGFwYXJ0IG11bHRpLWJ5dGVcbi8vIGNoYXJhY3RlcnMuIENFU1UtOCBpcyBoYW5kbGVkIGFzIHBhcnQgb2YgdGhlIFVURi04IGVuY29kaW5nLlxuLy9cbi8vIEBUT0RPIEhhbmRsaW5nIGFsbCBlbmNvZGluZ3MgaW5zaWRlIGEgc2luZ2xlIG9iamVjdCBtYWtlcyBpdCB2ZXJ5IGRpZmZpY3VsdFxuLy8gdG8gcmVhc29uIGFib3V0IHRoaXMgY29kZSwgc28gaXQgc2hvdWxkIGJlIHNwbGl0IHVwIGluIHRoZSBmdXR1cmUuXG4vLyBAVE9ETyBUaGVyZSBzaG91bGQgYmUgYSB1dGY4LXN0cmljdCBlbmNvZGluZyB0aGF0IHJlamVjdHMgaW52YWxpZCBVVEYtOCBjb2RlXG4vLyBwb2ludHMgYXMgdXNlZCBieSBDRVNVLTguXG52YXIgU3RyaW5nRGVjb2RlciA9IGV4cG9ydHMuU3RyaW5nRGVjb2RlciA9IGZ1bmN0aW9uKGVuY29kaW5nKSB7XG4gIHRoaXMuZW5jb2RpbmcgPSAoZW5jb2RpbmcgfHwgJ3V0ZjgnKS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoL1stX10vLCAnJyk7XG4gIGFzc2VydEVuY29kaW5nKGVuY29kaW5nKTtcbiAgc3dpdGNoICh0aGlzLmVuY29kaW5nKSB7XG4gICAgY2FzZSAndXRmOCc6XG4gICAgICAvLyBDRVNVLTggcmVwcmVzZW50cyBlYWNoIG9mIFN1cnJvZ2F0ZSBQYWlyIGJ5IDMtYnl0ZXNcbiAgICAgIHRoaXMuc3Vycm9nYXRlU2l6ZSA9IDM7XG4gICAgICBicmVhaztcbiAgICBjYXNlICd1Y3MyJzpcbiAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIC8vIFVURi0xNiByZXByZXNlbnRzIGVhY2ggb2YgU3Vycm9nYXRlIFBhaXIgYnkgMi1ieXRlc1xuICAgICAgdGhpcy5zdXJyb2dhdGVTaXplID0gMjtcbiAgICAgIHRoaXMuZGV0ZWN0SW5jb21wbGV0ZUNoYXIgPSB1dGYxNkRldGVjdEluY29tcGxldGVDaGFyO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgIC8vIEJhc2UtNjQgc3RvcmVzIDMgYnl0ZXMgaW4gNCBjaGFycywgYW5kIHBhZHMgdGhlIHJlbWFpbmRlci5cbiAgICAgIHRoaXMuc3Vycm9nYXRlU2l6ZSA9IDM7XG4gICAgICB0aGlzLmRldGVjdEluY29tcGxldGVDaGFyID0gYmFzZTY0RGV0ZWN0SW5jb21wbGV0ZUNoYXI7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgdGhpcy53cml0ZSA9IHBhc3NUaHJvdWdoV3JpdGU7XG4gICAgICByZXR1cm47XG4gIH1cblxuICAvLyBFbm91Z2ggc3BhY2UgdG8gc3RvcmUgYWxsIGJ5dGVzIG9mIGEgc2luZ2xlIGNoYXJhY3Rlci4gVVRGLTggbmVlZHMgNFxuICAvLyBieXRlcywgYnV0IENFU1UtOCBtYXkgcmVxdWlyZSB1cCB0byA2ICgzIGJ5dGVzIHBlciBzdXJyb2dhdGUpLlxuICB0aGlzLmNoYXJCdWZmZXIgPSBuZXcgQnVmZmVyKDYpO1xuICAvLyBOdW1iZXIgb2YgYnl0ZXMgcmVjZWl2ZWQgZm9yIHRoZSBjdXJyZW50IGluY29tcGxldGUgbXVsdGktYnl0ZSBjaGFyYWN0ZXIuXG4gIHRoaXMuY2hhclJlY2VpdmVkID0gMDtcbiAgLy8gTnVtYmVyIG9mIGJ5dGVzIGV4cGVjdGVkIGZvciB0aGUgY3VycmVudCBpbmNvbXBsZXRlIG11bHRpLWJ5dGUgY2hhcmFjdGVyLlxuICB0aGlzLmNoYXJMZW5ndGggPSAwO1xufTtcblxuXG4vLyB3cml0ZSBkZWNvZGVzIHRoZSBnaXZlbiBidWZmZXIgYW5kIHJldHVybnMgaXQgYXMgSlMgc3RyaW5nIHRoYXQgaXNcbi8vIGd1YXJhbnRlZWQgdG8gbm90IGNvbnRhaW4gYW55IHBhcnRpYWwgbXVsdGktYnl0ZSBjaGFyYWN0ZXJzLiBBbnkgcGFydGlhbFxuLy8gY2hhcmFjdGVyIGZvdW5kIGF0IHRoZSBlbmQgb2YgdGhlIGJ1ZmZlciBpcyBidWZmZXJlZCB1cCwgYW5kIHdpbGwgYmVcbi8vIHJldHVybmVkIHdoZW4gY2FsbGluZyB3cml0ZSBhZ2FpbiB3aXRoIHRoZSByZW1haW5pbmcgYnl0ZXMuXG4vL1xuLy8gTm90ZTogQ29udmVydGluZyBhIEJ1ZmZlciBjb250YWluaW5nIGFuIG9ycGhhbiBzdXJyb2dhdGUgdG8gYSBTdHJpbmdcbi8vIGN1cnJlbnRseSB3b3JrcywgYnV0IGNvbnZlcnRpbmcgYSBTdHJpbmcgdG8gYSBCdWZmZXIgKHZpYSBgbmV3IEJ1ZmZlcmAsIG9yXG4vLyBCdWZmZXIjd3JpdGUpIHdpbGwgcmVwbGFjZSBpbmNvbXBsZXRlIHN1cnJvZ2F0ZXMgd2l0aCB0aGUgdW5pY29kZVxuLy8gcmVwbGFjZW1lbnQgY2hhcmFjdGVyLiBTZWUgaHR0cHM6Ly9jb2RlcmV2aWV3LmNocm9taXVtLm9yZy8xMjExNzMwMDkvIC5cblN0cmluZ0RlY29kZXIucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24oYnVmZmVyKSB7XG4gIHZhciBjaGFyU3RyID0gJyc7XG4gIC8vIGlmIG91ciBsYXN0IHdyaXRlIGVuZGVkIHdpdGggYW4gaW5jb21wbGV0ZSBtdWx0aWJ5dGUgY2hhcmFjdGVyXG4gIHdoaWxlICh0aGlzLmNoYXJMZW5ndGgpIHtcbiAgICAvLyBkZXRlcm1pbmUgaG93IG1hbnkgcmVtYWluaW5nIGJ5dGVzIHRoaXMgYnVmZmVyIGhhcyB0byBvZmZlciBmb3IgdGhpcyBjaGFyXG4gICAgdmFyIGF2YWlsYWJsZSA9IChidWZmZXIubGVuZ3RoID49IHRoaXMuY2hhckxlbmd0aCAtIHRoaXMuY2hhclJlY2VpdmVkKSA/XG4gICAgICAgIHRoaXMuY2hhckxlbmd0aCAtIHRoaXMuY2hhclJlY2VpdmVkIDpcbiAgICAgICAgYnVmZmVyLmxlbmd0aDtcblxuICAgIC8vIGFkZCB0aGUgbmV3IGJ5dGVzIHRvIHRoZSBjaGFyIGJ1ZmZlclxuICAgIGJ1ZmZlci5jb3B5KHRoaXMuY2hhckJ1ZmZlciwgdGhpcy5jaGFyUmVjZWl2ZWQsIDAsIGF2YWlsYWJsZSk7XG4gICAgdGhpcy5jaGFyUmVjZWl2ZWQgKz0gYXZhaWxhYmxlO1xuXG4gICAgaWYgKHRoaXMuY2hhclJlY2VpdmVkIDwgdGhpcy5jaGFyTGVuZ3RoKSB7XG4gICAgICAvLyBzdGlsbCBub3QgZW5vdWdoIGNoYXJzIGluIHRoaXMgYnVmZmVyPyB3YWl0IGZvciBtb3JlIC4uLlxuICAgICAgcmV0dXJuICcnO1xuICAgIH1cblxuICAgIC8vIHJlbW92ZSBieXRlcyBiZWxvbmdpbmcgdG8gdGhlIGN1cnJlbnQgY2hhcmFjdGVyIGZyb20gdGhlIGJ1ZmZlclxuICAgIGJ1ZmZlciA9IGJ1ZmZlci5zbGljZShhdmFpbGFibGUsIGJ1ZmZlci5sZW5ndGgpO1xuXG4gICAgLy8gZ2V0IHRoZSBjaGFyYWN0ZXIgdGhhdCB3YXMgc3BsaXRcbiAgICBjaGFyU3RyID0gdGhpcy5jaGFyQnVmZmVyLnNsaWNlKDAsIHRoaXMuY2hhckxlbmd0aCkudG9TdHJpbmcodGhpcy5lbmNvZGluZyk7XG5cbiAgICAvLyBDRVNVLTg6IGxlYWQgc3Vycm9nYXRlIChEODAwLURCRkYpIGlzIGFsc28gdGhlIGluY29tcGxldGUgY2hhcmFjdGVyXG4gICAgdmFyIGNoYXJDb2RlID0gY2hhclN0ci5jaGFyQ29kZUF0KGNoYXJTdHIubGVuZ3RoIC0gMSk7XG4gICAgaWYgKGNoYXJDb2RlID49IDB4RDgwMCAmJiBjaGFyQ29kZSA8PSAweERCRkYpIHtcbiAgICAgIHRoaXMuY2hhckxlbmd0aCArPSB0aGlzLnN1cnJvZ2F0ZVNpemU7XG4gICAgICBjaGFyU3RyID0gJyc7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgdGhpcy5jaGFyUmVjZWl2ZWQgPSB0aGlzLmNoYXJMZW5ndGggPSAwO1xuXG4gICAgLy8gaWYgdGhlcmUgYXJlIG5vIG1vcmUgYnl0ZXMgaW4gdGhpcyBidWZmZXIsIGp1c3QgZW1pdCBvdXIgY2hhclxuICAgIGlmIChidWZmZXIubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gY2hhclN0cjtcbiAgICB9XG4gICAgYnJlYWs7XG4gIH1cblxuICAvLyBkZXRlcm1pbmUgYW5kIHNldCBjaGFyTGVuZ3RoIC8gY2hhclJlY2VpdmVkXG4gIHRoaXMuZGV0ZWN0SW5jb21wbGV0ZUNoYXIoYnVmZmVyKTtcblxuICB2YXIgZW5kID0gYnVmZmVyLmxlbmd0aDtcbiAgaWYgKHRoaXMuY2hhckxlbmd0aCkge1xuICAgIC8vIGJ1ZmZlciB0aGUgaW5jb21wbGV0ZSBjaGFyYWN0ZXIgYnl0ZXMgd2UgZ290XG4gICAgYnVmZmVyLmNvcHkodGhpcy5jaGFyQnVmZmVyLCAwLCBidWZmZXIubGVuZ3RoIC0gdGhpcy5jaGFyUmVjZWl2ZWQsIGVuZCk7XG4gICAgZW5kIC09IHRoaXMuY2hhclJlY2VpdmVkO1xuICB9XG5cbiAgY2hhclN0ciArPSBidWZmZXIudG9TdHJpbmcodGhpcy5lbmNvZGluZywgMCwgZW5kKTtcblxuICB2YXIgZW5kID0gY2hhclN0ci5sZW5ndGggLSAxO1xuICB2YXIgY2hhckNvZGUgPSBjaGFyU3RyLmNoYXJDb2RlQXQoZW5kKTtcbiAgLy8gQ0VTVS04OiBsZWFkIHN1cnJvZ2F0ZSAoRDgwMC1EQkZGKSBpcyBhbHNvIHRoZSBpbmNvbXBsZXRlIGNoYXJhY3RlclxuICBpZiAoY2hhckNvZGUgPj0gMHhEODAwICYmIGNoYXJDb2RlIDw9IDB4REJGRikge1xuICAgIHZhciBzaXplID0gdGhpcy5zdXJyb2dhdGVTaXplO1xuICAgIHRoaXMuY2hhckxlbmd0aCArPSBzaXplO1xuICAgIHRoaXMuY2hhclJlY2VpdmVkICs9IHNpemU7XG4gICAgdGhpcy5jaGFyQnVmZmVyLmNvcHkodGhpcy5jaGFyQnVmZmVyLCBzaXplLCAwLCBzaXplKTtcbiAgICBidWZmZXIuY29weSh0aGlzLmNoYXJCdWZmZXIsIDAsIDAsIHNpemUpO1xuICAgIHJldHVybiBjaGFyU3RyLnN1YnN0cmluZygwLCBlbmQpO1xuICB9XG5cbiAgLy8gb3IganVzdCBlbWl0IHRoZSBjaGFyU3RyXG4gIHJldHVybiBjaGFyU3RyO1xufTtcblxuLy8gZGV0ZWN0SW5jb21wbGV0ZUNoYXIgZGV0ZXJtaW5lcyBpZiB0aGVyZSBpcyBhbiBpbmNvbXBsZXRlIFVURi04IGNoYXJhY3RlciBhdFxuLy8gdGhlIGVuZCBvZiB0aGUgZ2l2ZW4gYnVmZmVyLiBJZiBzbywgaXQgc2V0cyB0aGlzLmNoYXJMZW5ndGggdG8gdGhlIGJ5dGVcbi8vIGxlbmd0aCB0aGF0IGNoYXJhY3RlciwgYW5kIHNldHMgdGhpcy5jaGFyUmVjZWl2ZWQgdG8gdGhlIG51bWJlciBvZiBieXRlc1xuLy8gdGhhdCBhcmUgYXZhaWxhYmxlIGZvciB0aGlzIGNoYXJhY3Rlci5cblN0cmluZ0RlY29kZXIucHJvdG90eXBlLmRldGVjdEluY29tcGxldGVDaGFyID0gZnVuY3Rpb24oYnVmZmVyKSB7XG4gIC8vIGRldGVybWluZSBob3cgbWFueSBieXRlcyB3ZSBoYXZlIHRvIGNoZWNrIGF0IHRoZSBlbmQgb2YgdGhpcyBidWZmZXJcbiAgdmFyIGkgPSAoYnVmZmVyLmxlbmd0aCA+PSAzKSA/IDMgOiBidWZmZXIubGVuZ3RoO1xuXG4gIC8vIEZpZ3VyZSBvdXQgaWYgb25lIG9mIHRoZSBsYXN0IGkgYnl0ZXMgb2Ygb3VyIGJ1ZmZlciBhbm5vdW5jZXMgYW5cbiAgLy8gaW5jb21wbGV0ZSBjaGFyLlxuICBmb3IgKDsgaSA+IDA7IGktLSkge1xuICAgIHZhciBjID0gYnVmZmVyW2J1ZmZlci5sZW5ndGggLSBpXTtcblxuICAgIC8vIFNlZSBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1VURi04I0Rlc2NyaXB0aW9uXG5cbiAgICAvLyAxMTBYWFhYWFxuICAgIGlmIChpID09IDEgJiYgYyA+PiA1ID09IDB4MDYpIHtcbiAgICAgIHRoaXMuY2hhckxlbmd0aCA9IDI7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICAvLyAxMTEwWFhYWFxuICAgIGlmIChpIDw9IDIgJiYgYyA+PiA0ID09IDB4MEUpIHtcbiAgICAgIHRoaXMuY2hhckxlbmd0aCA9IDM7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICAvLyAxMTExMFhYWFxuICAgIGlmIChpIDw9IDMgJiYgYyA+PiAzID09IDB4MUUpIHtcbiAgICAgIHRoaXMuY2hhckxlbmd0aCA9IDQ7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgdGhpcy5jaGFyUmVjZWl2ZWQgPSBpO1xufTtcblxuU3RyaW5nRGVjb2Rlci5wcm90b3R5cGUuZW5kID0gZnVuY3Rpb24oYnVmZmVyKSB7XG4gIHZhciByZXMgPSAnJztcbiAgaWYgKGJ1ZmZlciAmJiBidWZmZXIubGVuZ3RoKVxuICAgIHJlcyA9IHRoaXMud3JpdGUoYnVmZmVyKTtcblxuICBpZiAodGhpcy5jaGFyUmVjZWl2ZWQpIHtcbiAgICB2YXIgY3IgPSB0aGlzLmNoYXJSZWNlaXZlZDtcbiAgICB2YXIgYnVmID0gdGhpcy5jaGFyQnVmZmVyO1xuICAgIHZhciBlbmMgPSB0aGlzLmVuY29kaW5nO1xuICAgIHJlcyArPSBidWYuc2xpY2UoMCwgY3IpLnRvU3RyaW5nKGVuYyk7XG4gIH1cblxuICByZXR1cm4gcmVzO1xufTtcblxuZnVuY3Rpb24gcGFzc1Rocm91Z2hXcml0ZShidWZmZXIpIHtcbiAgcmV0dXJuIGJ1ZmZlci50b1N0cmluZyh0aGlzLmVuY29kaW5nKTtcbn1cblxuZnVuY3Rpb24gdXRmMTZEZXRlY3RJbmNvbXBsZXRlQ2hhcihidWZmZXIpIHtcbiAgdGhpcy5jaGFyUmVjZWl2ZWQgPSBidWZmZXIubGVuZ3RoICUgMjtcbiAgdGhpcy5jaGFyTGVuZ3RoID0gdGhpcy5jaGFyUmVjZWl2ZWQgPyAyIDogMDtcbn1cblxuZnVuY3Rpb24gYmFzZTY0RGV0ZWN0SW5jb21wbGV0ZUNoYXIoYnVmZmVyKSB7XG4gIHRoaXMuY2hhclJlY2VpdmVkID0gYnVmZmVyLmxlbmd0aCAlIDM7XG4gIHRoaXMuY2hhckxlbmd0aCA9IHRoaXMuY2hhclJlY2VpdmVkID8gMyA6IDA7XG59XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAod2VicGFjaykvfi9ub2RlLWxpYnMtYnJvd3Nlci9+L3N0cmluZ19kZWNvZGVyL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAzNFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuXG4vLyBhIHRyYW5zZm9ybSBzdHJlYW0gaXMgYSByZWFkYWJsZS93cml0YWJsZSBzdHJlYW0gd2hlcmUgeW91IGRvXG4vLyBzb21ldGhpbmcgd2l0aCB0aGUgZGF0YS4gIFNvbWV0aW1lcyBpdCdzIGNhbGxlZCBhIFwiZmlsdGVyXCIsXG4vLyBidXQgdGhhdCdzIG5vdCBhIGdyZWF0IG5hbWUgZm9yIGl0LCBzaW5jZSB0aGF0IGltcGxpZXMgYSB0aGluZyB3aGVyZVxuLy8gc29tZSBiaXRzIHBhc3MgdGhyb3VnaCwgYW5kIG90aGVycyBhcmUgc2ltcGx5IGlnbm9yZWQuICAoVGhhdCB3b3VsZFxuLy8gYmUgYSB2YWxpZCBleGFtcGxlIG9mIGEgdHJhbnNmb3JtLCBvZiBjb3Vyc2UuKVxuLy9cbi8vIFdoaWxlIHRoZSBvdXRwdXQgaXMgY2F1c2FsbHkgcmVsYXRlZCB0byB0aGUgaW5wdXQsIGl0J3Mgbm90IGFcbi8vIG5lY2Vzc2FyaWx5IHN5bW1ldHJpYyBvciBzeW5jaHJvbm91cyB0cmFuc2Zvcm1hdGlvbi4gIEZvciBleGFtcGxlLFxuLy8gYSB6bGliIHN0cmVhbSBtaWdodCB0YWtlIG11bHRpcGxlIHBsYWluLXRleHQgd3JpdGVzKCksIGFuZCB0aGVuXG4vLyBlbWl0IGEgc2luZ2xlIGNvbXByZXNzZWQgY2h1bmsgc29tZSB0aW1lIGluIHRoZSBmdXR1cmUuXG4vL1xuLy8gSGVyZSdzIGhvdyB0aGlzIHdvcmtzOlxuLy9cbi8vIFRoZSBUcmFuc2Zvcm0gc3RyZWFtIGhhcyBhbGwgdGhlIGFzcGVjdHMgb2YgdGhlIHJlYWRhYmxlIGFuZCB3cml0YWJsZVxuLy8gc3RyZWFtIGNsYXNzZXMuICBXaGVuIHlvdSB3cml0ZShjaHVuayksIHRoYXQgY2FsbHMgX3dyaXRlKGNodW5rLGNiKVxuLy8gaW50ZXJuYWxseSwgYW5kIHJldHVybnMgZmFsc2UgaWYgdGhlcmUncyBhIGxvdCBvZiBwZW5kaW5nIHdyaXRlc1xuLy8gYnVmZmVyZWQgdXAuICBXaGVuIHlvdSBjYWxsIHJlYWQoKSwgdGhhdCBjYWxscyBfcmVhZChuKSB1bnRpbFxuLy8gdGhlcmUncyBlbm91Z2ggcGVuZGluZyByZWFkYWJsZSBkYXRhIGJ1ZmZlcmVkIHVwLlxuLy9cbi8vIEluIGEgdHJhbnNmb3JtIHN0cmVhbSwgdGhlIHdyaXR0ZW4gZGF0YSBpcyBwbGFjZWQgaW4gYSBidWZmZXIuICBXaGVuXG4vLyBfcmVhZChuKSBpcyBjYWxsZWQsIGl0IHRyYW5zZm9ybXMgdGhlIHF1ZXVlZCB1cCBkYXRhLCBjYWxsaW5nIHRoZVxuLy8gYnVmZmVyZWQgX3dyaXRlIGNiJ3MgYXMgaXQgY29uc3VtZXMgY2h1bmtzLiAgSWYgY29uc3VtaW5nIGEgc2luZ2xlXG4vLyB3cml0dGVuIGNodW5rIHdvdWxkIHJlc3VsdCBpbiBtdWx0aXBsZSBvdXRwdXQgY2h1bmtzLCB0aGVuIHRoZSBmaXJzdFxuLy8gb3V0cHV0dGVkIGJpdCBjYWxscyB0aGUgcmVhZGNiLCBhbmQgc3Vic2VxdWVudCBjaHVua3MganVzdCBnbyBpbnRvXG4vLyB0aGUgcmVhZCBidWZmZXIsIGFuZCB3aWxsIGNhdXNlIGl0IHRvIGVtaXQgJ3JlYWRhYmxlJyBpZiBuZWNlc3NhcnkuXG4vL1xuLy8gVGhpcyB3YXksIGJhY2stcHJlc3N1cmUgaXMgYWN0dWFsbHkgZGV0ZXJtaW5lZCBieSB0aGUgcmVhZGluZyBzaWRlLFxuLy8gc2luY2UgX3JlYWQgaGFzIHRvIGJlIGNhbGxlZCB0byBzdGFydCBwcm9jZXNzaW5nIGEgbmV3IGNodW5rLiAgSG93ZXZlcixcbi8vIGEgcGF0aG9sb2dpY2FsIGluZmxhdGUgdHlwZSBvZiB0cmFuc2Zvcm0gY2FuIGNhdXNlIGV4Y2Vzc2l2ZSBidWZmZXJpbmdcbi8vIGhlcmUuICBGb3IgZXhhbXBsZSwgaW1hZ2luZSBhIHN0cmVhbSB3aGVyZSBldmVyeSBieXRlIG9mIGlucHV0IGlzXG4vLyBpbnRlcnByZXRlZCBhcyBhbiBpbnRlZ2VyIGZyb20gMC0yNTUsIGFuZCB0aGVuIHJlc3VsdHMgaW4gdGhhdCBtYW55XG4vLyBieXRlcyBvZiBvdXRwdXQuICBXcml0aW5nIHRoZSA0IGJ5dGVzIHtmZixmZixmZixmZn0gd291bGQgcmVzdWx0IGluXG4vLyAxa2Igb2YgZGF0YSBiZWluZyBvdXRwdXQuICBJbiB0aGlzIGNhc2UsIHlvdSBjb3VsZCB3cml0ZSBhIHZlcnkgc21hbGxcbi8vIGFtb3VudCBvZiBpbnB1dCwgYW5kIGVuZCB1cCB3aXRoIGEgdmVyeSBsYXJnZSBhbW91bnQgb2Ygb3V0cHV0LiAgSW5cbi8vIHN1Y2ggYSBwYXRob2xvZ2ljYWwgaW5mbGF0aW5nIG1lY2hhbmlzbSwgdGhlcmUnZCBiZSBubyB3YXkgdG8gdGVsbFxuLy8gdGhlIHN5c3RlbSB0byBzdG9wIGRvaW5nIHRoZSB0cmFuc2Zvcm0uICBBIHNpbmdsZSA0TUIgd3JpdGUgY291bGRcbi8vIGNhdXNlIHRoZSBzeXN0ZW0gdG8gcnVuIG91dCBvZiBtZW1vcnkuXG4vL1xuLy8gSG93ZXZlciwgZXZlbiBpbiBzdWNoIGEgcGF0aG9sb2dpY2FsIGNhc2UsIG9ubHkgYSBzaW5nbGUgd3JpdHRlbiBjaHVua1xuLy8gd291bGQgYmUgY29uc3VtZWQsIGFuZCB0aGVuIHRoZSByZXN0IHdvdWxkIHdhaXQgKHVuLXRyYW5zZm9ybWVkKSB1bnRpbFxuLy8gdGhlIHJlc3VsdHMgb2YgdGhlIHByZXZpb3VzIHRyYW5zZm9ybWVkIGNodW5rIHdlcmUgY29uc3VtZWQuXG5cbm1vZHVsZS5leHBvcnRzID0gVHJhbnNmb3JtO1xuXG52YXIgRHVwbGV4ID0gcmVxdWlyZSgnLi9fc3RyZWFtX2R1cGxleCcpO1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIHV0aWwgPSByZXF1aXJlKCdjb3JlLXV0aWwtaXMnKTtcbnV0aWwuaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbnV0aWwuaW5oZXJpdHMoVHJhbnNmb3JtLCBEdXBsZXgpO1xuXG5cbmZ1bmN0aW9uIFRyYW5zZm9ybVN0YXRlKG9wdGlvbnMsIHN0cmVhbSkge1xuICB0aGlzLmFmdGVyVHJhbnNmb3JtID0gZnVuY3Rpb24oZXIsIGRhdGEpIHtcbiAgICByZXR1cm4gYWZ0ZXJUcmFuc2Zvcm0oc3RyZWFtLCBlciwgZGF0YSk7XG4gIH07XG5cbiAgdGhpcy5uZWVkVHJhbnNmb3JtID0gZmFsc2U7XG4gIHRoaXMudHJhbnNmb3JtaW5nID0gZmFsc2U7XG4gIHRoaXMud3JpdGVjYiA9IG51bGw7XG4gIHRoaXMud3JpdGVjaHVuayA9IG51bGw7XG59XG5cbmZ1bmN0aW9uIGFmdGVyVHJhbnNmb3JtKHN0cmVhbSwgZXIsIGRhdGEpIHtcbiAgdmFyIHRzID0gc3RyZWFtLl90cmFuc2Zvcm1TdGF0ZTtcbiAgdHMudHJhbnNmb3JtaW5nID0gZmFsc2U7XG5cbiAgdmFyIGNiID0gdHMud3JpdGVjYjtcblxuICBpZiAoIWNiKVxuICAgIHJldHVybiBzdHJlYW0uZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IoJ25vIHdyaXRlY2IgaW4gVHJhbnNmb3JtIGNsYXNzJykpO1xuXG4gIHRzLndyaXRlY2h1bmsgPSBudWxsO1xuICB0cy53cml0ZWNiID0gbnVsbDtcblxuICBpZiAoIXV0aWwuaXNOdWxsT3JVbmRlZmluZWQoZGF0YSkpXG4gICAgc3RyZWFtLnB1c2goZGF0YSk7XG5cbiAgaWYgKGNiKVxuICAgIGNiKGVyKTtcblxuICB2YXIgcnMgPSBzdHJlYW0uX3JlYWRhYmxlU3RhdGU7XG4gIHJzLnJlYWRpbmcgPSBmYWxzZTtcbiAgaWYgKHJzLm5lZWRSZWFkYWJsZSB8fCBycy5sZW5ndGggPCBycy5oaWdoV2F0ZXJNYXJrKSB7XG4gICAgc3RyZWFtLl9yZWFkKHJzLmhpZ2hXYXRlck1hcmspO1xuICB9XG59XG5cblxuZnVuY3Rpb24gVHJhbnNmb3JtKG9wdGlvbnMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFRyYW5zZm9ybSkpXG4gICAgcmV0dXJuIG5ldyBUcmFuc2Zvcm0ob3B0aW9ucyk7XG5cbiAgRHVwbGV4LmNhbGwodGhpcywgb3B0aW9ucyk7XG5cbiAgdGhpcy5fdHJhbnNmb3JtU3RhdGUgPSBuZXcgVHJhbnNmb3JtU3RhdGUob3B0aW9ucywgdGhpcyk7XG5cbiAgLy8gd2hlbiB0aGUgd3JpdGFibGUgc2lkZSBmaW5pc2hlcywgdGhlbiBmbHVzaCBvdXQgYW55dGhpbmcgcmVtYWluaW5nLlxuICB2YXIgc3RyZWFtID0gdGhpcztcblxuICAvLyBzdGFydCBvdXQgYXNraW5nIGZvciBhIHJlYWRhYmxlIGV2ZW50IG9uY2UgZGF0YSBpcyB0cmFuc2Zvcm1lZC5cbiAgdGhpcy5fcmVhZGFibGVTdGF0ZS5uZWVkUmVhZGFibGUgPSB0cnVlO1xuXG4gIC8vIHdlIGhhdmUgaW1wbGVtZW50ZWQgdGhlIF9yZWFkIG1ldGhvZCwgYW5kIGRvbmUgdGhlIG90aGVyIHRoaW5nc1xuICAvLyB0aGF0IFJlYWRhYmxlIHdhbnRzIGJlZm9yZSB0aGUgZmlyc3QgX3JlYWQgY2FsbCwgc28gdW5zZXQgdGhlXG4gIC8vIHN5bmMgZ3VhcmQgZmxhZy5cbiAgdGhpcy5fcmVhZGFibGVTdGF0ZS5zeW5jID0gZmFsc2U7XG5cbiAgdGhpcy5vbmNlKCdwcmVmaW5pc2gnLCBmdW5jdGlvbigpIHtcbiAgICBpZiAodXRpbC5pc0Z1bmN0aW9uKHRoaXMuX2ZsdXNoKSlcbiAgICAgIHRoaXMuX2ZsdXNoKGZ1bmN0aW9uKGVyKSB7XG4gICAgICAgIGRvbmUoc3RyZWFtLCBlcik7XG4gICAgICB9KTtcbiAgICBlbHNlXG4gICAgICBkb25lKHN0cmVhbSk7XG4gIH0pO1xufVxuXG5UcmFuc2Zvcm0ucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbihjaHVuaywgZW5jb2RpbmcpIHtcbiAgdGhpcy5fdHJhbnNmb3JtU3RhdGUubmVlZFRyYW5zZm9ybSA9IGZhbHNlO1xuICByZXR1cm4gRHVwbGV4LnByb3RvdHlwZS5wdXNoLmNhbGwodGhpcywgY2h1bmssIGVuY29kaW5nKTtcbn07XG5cbi8vIFRoaXMgaXMgdGhlIHBhcnQgd2hlcmUgeW91IGRvIHN0dWZmIVxuLy8gb3ZlcnJpZGUgdGhpcyBmdW5jdGlvbiBpbiBpbXBsZW1lbnRhdGlvbiBjbGFzc2VzLlxuLy8gJ2NodW5rJyBpcyBhbiBpbnB1dCBjaHVuay5cbi8vXG4vLyBDYWxsIGBwdXNoKG5ld0NodW5rKWAgdG8gcGFzcyBhbG9uZyB0cmFuc2Zvcm1lZCBvdXRwdXRcbi8vIHRvIHRoZSByZWFkYWJsZSBzaWRlLiAgWW91IG1heSBjYWxsICdwdXNoJyB6ZXJvIG9yIG1vcmUgdGltZXMuXG4vL1xuLy8gQ2FsbCBgY2IoZXJyKWAgd2hlbiB5b3UgYXJlIGRvbmUgd2l0aCB0aGlzIGNodW5rLiAgSWYgeW91IHBhc3Ncbi8vIGFuIGVycm9yLCB0aGVuIHRoYXQnbGwgcHV0IHRoZSBodXJ0IG9uIHRoZSB3aG9sZSBvcGVyYXRpb24uICBJZiB5b3Vcbi8vIG5ldmVyIGNhbGwgY2IoKSwgdGhlbiB5b3UnbGwgbmV2ZXIgZ2V0IGFub3RoZXIgY2h1bmsuXG5UcmFuc2Zvcm0ucHJvdG90eXBlLl90cmFuc2Zvcm0gPSBmdW5jdGlvbihjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIHRocm93IG5ldyBFcnJvcignbm90IGltcGxlbWVudGVkJyk7XG59O1xuXG5UcmFuc2Zvcm0ucHJvdG90eXBlLl93cml0ZSA9IGZ1bmN0aW9uKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgdmFyIHRzID0gdGhpcy5fdHJhbnNmb3JtU3RhdGU7XG4gIHRzLndyaXRlY2IgPSBjYjtcbiAgdHMud3JpdGVjaHVuayA9IGNodW5rO1xuICB0cy53cml0ZWVuY29kaW5nID0gZW5jb2Rpbmc7XG4gIGlmICghdHMudHJhbnNmb3JtaW5nKSB7XG4gICAgdmFyIHJzID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcbiAgICBpZiAodHMubmVlZFRyYW5zZm9ybSB8fFxuICAgICAgICBycy5uZWVkUmVhZGFibGUgfHxcbiAgICAgICAgcnMubGVuZ3RoIDwgcnMuaGlnaFdhdGVyTWFyaylcbiAgICAgIHRoaXMuX3JlYWQocnMuaGlnaFdhdGVyTWFyayk7XG4gIH1cbn07XG5cbi8vIERvZXNuJ3QgbWF0dGVyIHdoYXQgdGhlIGFyZ3MgYXJlIGhlcmUuXG4vLyBfdHJhbnNmb3JtIGRvZXMgYWxsIHRoZSB3b3JrLlxuLy8gVGhhdCB3ZSBnb3QgaGVyZSBtZWFucyB0aGF0IHRoZSByZWFkYWJsZSBzaWRlIHdhbnRzIG1vcmUgZGF0YS5cblRyYW5zZm9ybS5wcm90b3R5cGUuX3JlYWQgPSBmdW5jdGlvbihuKSB7XG4gIHZhciB0cyA9IHRoaXMuX3RyYW5zZm9ybVN0YXRlO1xuXG4gIGlmICghdXRpbC5pc051bGwodHMud3JpdGVjaHVuaykgJiYgdHMud3JpdGVjYiAmJiAhdHMudHJhbnNmb3JtaW5nKSB7XG4gICAgdHMudHJhbnNmb3JtaW5nID0gdHJ1ZTtcbiAgICB0aGlzLl90cmFuc2Zvcm0odHMud3JpdGVjaHVuaywgdHMud3JpdGVlbmNvZGluZywgdHMuYWZ0ZXJUcmFuc2Zvcm0pO1xuICB9IGVsc2Uge1xuICAgIC8vIG1hcmsgdGhhdCB3ZSBuZWVkIGEgdHJhbnNmb3JtLCBzbyB0aGF0IGFueSBkYXRhIHRoYXQgY29tZXMgaW5cbiAgICAvLyB3aWxsIGdldCBwcm9jZXNzZWQsIG5vdyB0aGF0IHdlJ3ZlIGFza2VkIGZvciBpdC5cbiAgICB0cy5uZWVkVHJhbnNmb3JtID0gdHJ1ZTtcbiAgfVxufTtcblxuXG5mdW5jdGlvbiBkb25lKHN0cmVhbSwgZXIpIHtcbiAgaWYgKGVyKVxuICAgIHJldHVybiBzdHJlYW0uZW1pdCgnZXJyb3InLCBlcik7XG5cbiAgLy8gaWYgdGhlcmUncyBub3RoaW5nIGluIHRoZSB3cml0ZSBidWZmZXIsIHRoZW4gdGhhdCBtZWFuc1xuICAvLyB0aGF0IG5vdGhpbmcgbW9yZSB3aWxsIGV2ZXIgYmUgcHJvdmlkZWRcbiAgdmFyIHdzID0gc3RyZWFtLl93cml0YWJsZVN0YXRlO1xuICB2YXIgdHMgPSBzdHJlYW0uX3RyYW5zZm9ybVN0YXRlO1xuXG4gIGlmICh3cy5sZW5ndGgpXG4gICAgdGhyb3cgbmV3IEVycm9yKCdjYWxsaW5nIHRyYW5zZm9ybSBkb25lIHdoZW4gd3MubGVuZ3RoICE9IDAnKTtcblxuICBpZiAodHMudHJhbnNmb3JtaW5nKVxuICAgIHRocm93IG5ldyBFcnJvcignY2FsbGluZyB0cmFuc2Zvcm0gZG9uZSB3aGVuIHN0aWxsIHRyYW5zZm9ybWluZycpO1xuXG4gIHJldHVybiBzdHJlYW0ucHVzaChudWxsKTtcbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vICh3ZWJwYWNrKS9+L25vZGUtbGlicy1icm93c2VyL34vcmVhZGFibGUtc3RyZWFtL2xpYi9fc3RyZWFtX3RyYW5zZm9ybS5qc1xuLy8gbW9kdWxlIGlkID0gMzVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbi8vIGEgcGFzc3Rocm91Z2ggc3RyZWFtLlxuLy8gYmFzaWNhbGx5IGp1c3QgdGhlIG1vc3QgbWluaW1hbCBzb3J0IG9mIFRyYW5zZm9ybSBzdHJlYW0uXG4vLyBFdmVyeSB3cml0dGVuIGNodW5rIGdldHMgb3V0cHV0IGFzLWlzLlxuXG5tb2R1bGUuZXhwb3J0cyA9IFBhc3NUaHJvdWdoO1xuXG52YXIgVHJhbnNmb3JtID0gcmVxdWlyZSgnLi9fc3RyZWFtX3RyYW5zZm9ybScpO1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIHV0aWwgPSByZXF1aXJlKCdjb3JlLXV0aWwtaXMnKTtcbnV0aWwuaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbnV0aWwuaW5oZXJpdHMoUGFzc1Rocm91Z2gsIFRyYW5zZm9ybSk7XG5cbmZ1bmN0aW9uIFBhc3NUaHJvdWdoKG9wdGlvbnMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFBhc3NUaHJvdWdoKSlcbiAgICByZXR1cm4gbmV3IFBhc3NUaHJvdWdoKG9wdGlvbnMpO1xuXG4gIFRyYW5zZm9ybS5jYWxsKHRoaXMsIG9wdGlvbnMpO1xufVxuXG5QYXNzVGhyb3VnaC5wcm90b3R5cGUuX3RyYW5zZm9ybSA9IGZ1bmN0aW9uKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgY2IobnVsbCwgY2h1bmspO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vICh3ZWJwYWNrKS9+L25vZGUtbGlicy1icm93c2VyL34vcmVhZGFibGUtc3RyZWFtL2xpYi9fc3RyZWFtX3Bhc3N0aHJvdWdoLmpzXG4vLyBtb2R1bGUgaWQgPSAzNlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuL2xpYi9fc3RyZWFtX3dyaXRhYmxlLmpzXCIpXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAod2VicGFjaykvfi9ub2RlLWxpYnMtYnJvd3Nlci9+L3JlYWRhYmxlLXN0cmVhbS93cml0YWJsZS5qc1xuLy8gbW9kdWxlIGlkID0gMzdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi9saWIvX3N0cmVhbV9kdXBsZXguanNcIilcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vICh3ZWJwYWNrKS9+L25vZGUtbGlicy1icm93c2VyL34vcmVhZGFibGUtc3RyZWFtL2R1cGxleC5qc1xuLy8gbW9kdWxlIGlkID0gMzhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi9saWIvX3N0cmVhbV90cmFuc2Zvcm0uanNcIilcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vICh3ZWJwYWNrKS9+L25vZGUtbGlicy1icm93c2VyL34vcmVhZGFibGUtc3RyZWFtL3RyYW5zZm9ybS5qc1xuLy8gbW9kdWxlIGlkID0gMzlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi9saWIvX3N0cmVhbV9wYXNzdGhyb3VnaC5qc1wiKVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gKHdlYnBhY2spL34vbm9kZS1saWJzLWJyb3dzZXIvfi9yZWFkYWJsZS1zdHJlYW0vcGFzc3Rocm91Z2guanNcbi8vIG1vZHVsZSBpZCA9IDQwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qXG4gKiBleHRzcHJpbnRmLmpzOiBleHRlbmRlZCBQT1NJWC1zdHlsZSBzcHJpbnRmXG4gKi9cblxudmFyIG1vZF9hc3NlcnQgPSByZXF1aXJlKCdhc3NlcnQnKTtcbnZhciBtb2RfdXRpbCA9IHJlcXVpcmUoJ3V0aWwnKTtcblxuLypcbiAqIFB1YmxpYyBpbnRlcmZhY2VcbiAqL1xuZXhwb3J0cy5zcHJpbnRmID0ganNTcHJpbnRmO1xuZXhwb3J0cy5wcmludGYgPSBqc1ByaW50ZjtcbmV4cG9ydHMuZnByaW50ZiA9IGpzRnByaW50ZjtcblxuLypcbiAqIFN0cmlwcGVkIGRvd24gdmVyc2lvbiBvZiBzW25dcHJpbnRmKDNjKS4gIFdlIG1ha2UgYSBiZXN0IGVmZm9ydCB0byB0aHJvdyBhblxuICogZXhjZXB0aW9uIHdoZW4gZ2l2ZW4gYSBmb3JtYXQgc3RyaW5nIHdlIGRvbid0IHVuZGVyc3RhbmQsIHJhdGhlciB0aGFuXG4gKiBpZ25vcmluZyBpdCwgc28gdGhhdCB3ZSB3b24ndCBicmVhayBleGlzdGluZyBwcm9ncmFtcyBpZi93aGVuIHdlIGdvIGltcGxlbWVudFxuICogdGhlIHJlc3Qgb2YgdGhpcy5cbiAqXG4gKiBUaGlzIGltcGxlbWVudGF0aW9uIGN1cnJlbnRseSBzdXBwb3J0cyBzcGVjaWZ5aW5nXG4gKlx0LSBmaWVsZCBhbGlnbm1lbnQgKCctJyBmbGFnKSxcbiAqIFx0LSB6ZXJvLXBhZCAoJzAnIGZsYWcpXG4gKlx0LSBhbHdheXMgc2hvdyBudW1lcmljIHNpZ24gKCcrJyBmbGFnKSxcbiAqXHQtIGZpZWxkIHdpZHRoXG4gKlx0LSBjb252ZXJzaW9ucyBmb3Igc3RyaW5ncywgZGVjaW1hbCBpbnRlZ2VycywgYW5kIGZsb2F0cyAobnVtYmVycykuXG4gKlx0LSBhcmd1bWVudCBzaXplIHNwZWNpZmllcnMuICBUaGVzZSBhcmUgYWxsIGFjY2VwdGVkIGJ1dCBpZ25vcmVkLCBzaW5jZVxuICpcdCAgSmF2YXNjcmlwdCBoYXMgbm8gbm90aW9uIG9mIHRoZSBwaHlzaWNhbCBzaXplIG9mIGFuIGFyZ3VtZW50LlxuICpcbiAqIEV2ZXJ5dGhpbmcgZWxzZSBpcyBjdXJyZW50bHkgdW5zdXBwb3J0ZWQsIG1vc3Qgbm90YWJseSBwcmVjaXNpb24sIHVuc2lnbmVkXG4gKiBudW1iZXJzLCBub24tZGVjaW1hbCBudW1iZXJzLCBhbmQgY2hhcmFjdGVycy5cbiAqL1xuZnVuY3Rpb24ganNTcHJpbnRmKGZtdClcbntcblx0dmFyIHJlZ2V4ID0gW1xuXHQgICAgJyhbXiVdKiknLFx0XHRcdFx0Lyogbm9ybWFsIHRleHQgKi9cblx0ICAgICclJyxcdFx0XHRcdC8qIHN0YXJ0IG9mIGZvcm1hdCAqL1xuXHQgICAgJyhbXFwnXFxcXC0rICMwXSo/KScsXHRcdFx0LyogZmxhZ3MgKG9wdGlvbmFsKSAqL1xuXHQgICAgJyhbMS05XVxcXFxkKik/JyxcdFx0XHQvKiB3aWR0aCAob3B0aW9uYWwpICovXG5cdCAgICAnKFxcXFwuKFsxLTldXFxcXGQqKSk/JyxcdFx0LyogcHJlY2lzaW9uIChvcHRpb25hbCkgKi9cblx0ICAgICdbbGhqenRMXSo/JyxcdFx0XHQvKiBsZW5ndGggbW9kcyAoaWdub3JlZCkgKi9cblx0ICAgICcoW2Rpb3V4WGZGZUVnR2FBY0NzU3AlanJdKSdcdC8qIGNvbnZlcnNpb24gKi9cblx0XS5qb2luKCcnKTtcblxuXHR2YXIgcmUgPSBuZXcgUmVnRXhwKHJlZ2V4KTtcblx0dmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuXHR2YXIgZmxhZ3MsIHdpZHRoLCBwcmVjaXNpb24sIGNvbnZlcnNpb247XG5cdHZhciBsZWZ0LCBwYWQsIHNpZ24sIGFyZywgbWF0Y2g7XG5cdHZhciByZXQgPSAnJztcblx0dmFyIGFyZ24gPSAxO1xuXG5cdG1vZF9hc3NlcnQuZXF1YWwoJ3N0cmluZycsIHR5cGVvZiAoZm10KSk7XG5cblx0d2hpbGUgKChtYXRjaCA9IHJlLmV4ZWMoZm10KSkgIT09IG51bGwpIHtcblx0XHRyZXQgKz0gbWF0Y2hbMV07XG5cdFx0Zm10ID0gZm10LnN1YnN0cmluZyhtYXRjaFswXS5sZW5ndGgpO1xuXG5cdFx0ZmxhZ3MgPSBtYXRjaFsyXSB8fCAnJztcblx0XHR3aWR0aCA9IG1hdGNoWzNdIHx8IDA7XG5cdFx0cHJlY2lzaW9uID0gbWF0Y2hbNF0gfHwgJyc7XG5cdFx0Y29udmVyc2lvbiA9IG1hdGNoWzZdO1xuXHRcdGxlZnQgPSBmYWxzZTtcblx0XHRzaWduID0gZmFsc2U7XG5cdFx0cGFkID0gJyAnO1xuXG5cdFx0aWYgKGNvbnZlcnNpb24gPT0gJyUnKSB7XG5cdFx0XHRyZXQgKz0gJyUnO1xuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXG5cdFx0aWYgKGFyZ3MubGVuZ3RoID09PSAwKVxuXHRcdFx0dGhyb3cgKG5ldyBFcnJvcigndG9vIGZldyBhcmdzIHRvIHNwcmludGYnKSk7XG5cblx0XHRhcmcgPSBhcmdzLnNoaWZ0KCk7XG5cdFx0YXJnbisrO1xuXG5cdFx0aWYgKGZsYWdzLm1hdGNoKC9bXFwnICNdLykpXG5cdFx0XHR0aHJvdyAobmV3IEVycm9yKFxuXHRcdFx0ICAgICd1bnN1cHBvcnRlZCBmbGFnczogJyArIGZsYWdzKSk7XG5cblx0XHRpZiAocHJlY2lzaW9uLmxlbmd0aCA+IDApXG5cdFx0XHR0aHJvdyAobmV3IEVycm9yKFxuXHRcdFx0ICAgICdub24temVybyBwcmVjaXNpb24gbm90IHN1cHBvcnRlZCcpKTtcblxuXHRcdGlmIChmbGFncy5tYXRjaCgvLS8pKVxuXHRcdFx0bGVmdCA9IHRydWU7XG5cblx0XHRpZiAoZmxhZ3MubWF0Y2goLzAvKSlcblx0XHRcdHBhZCA9ICcwJztcblxuXHRcdGlmIChmbGFncy5tYXRjaCgvXFwrLykpXG5cdFx0XHRzaWduID0gdHJ1ZTtcblxuXHRcdHN3aXRjaCAoY29udmVyc2lvbikge1xuXHRcdGNhc2UgJ3MnOlxuXHRcdFx0aWYgKGFyZyA9PT0gdW5kZWZpbmVkIHx8IGFyZyA9PT0gbnVsbClcblx0XHRcdFx0dGhyb3cgKG5ldyBFcnJvcignYXJndW1lbnQgJyArIGFyZ24gK1xuXHRcdFx0XHQgICAgJzogYXR0ZW1wdGVkIHRvIHByaW50IHVuZGVmaW5lZCBvciBudWxsICcgK1xuXHRcdFx0XHQgICAgJ2FzIGEgc3RyaW5nJykpO1xuXHRcdFx0cmV0ICs9IGRvUGFkKHBhZCwgd2lkdGgsIGxlZnQsIGFyZy50b1N0cmluZygpKTtcblx0XHRcdGJyZWFrO1xuXG5cdFx0Y2FzZSAnZCc6XG5cdFx0XHRhcmcgPSBNYXRoLmZsb29yKGFyZyk7XG5cdFx0XHQvKmpzbDpmYWxsdGhydSovXG5cdFx0Y2FzZSAnZic6XG5cdFx0XHRzaWduID0gc2lnbiAmJiBhcmcgPiAwID8gJysnIDogJyc7XG5cdFx0XHRyZXQgKz0gc2lnbiArIGRvUGFkKHBhZCwgd2lkdGgsIGxlZnQsXG5cdFx0XHQgICAgYXJnLnRvU3RyaW5nKCkpO1xuXHRcdFx0YnJlYWs7XG5cblx0XHRjYXNlICd4Jzpcblx0XHRcdHJldCArPSBkb1BhZChwYWQsIHdpZHRoLCBsZWZ0LCBhcmcudG9TdHJpbmcoMTYpKTtcblx0XHRcdGJyZWFrO1xuXG5cdFx0Y2FzZSAnaic6IC8qIG5vbi1zdGFuZGFyZCAqL1xuXHRcdFx0aWYgKHdpZHRoID09PSAwKVxuXHRcdFx0XHR3aWR0aCA9IDEwO1xuXHRcdFx0cmV0ICs9IG1vZF91dGlsLmluc3BlY3QoYXJnLCBmYWxzZSwgd2lkdGgpO1xuXHRcdFx0YnJlYWs7XG5cblx0XHRjYXNlICdyJzogLyogbm9uLXN0YW5kYXJkICovXG5cdFx0XHRyZXQgKz0gZHVtcEV4Y2VwdGlvbihhcmcpO1xuXHRcdFx0YnJlYWs7XG5cblx0XHRkZWZhdWx0OlxuXHRcdFx0dGhyb3cgKG5ldyBFcnJvcigndW5zdXBwb3J0ZWQgY29udmVyc2lvbjogJyArXG5cdFx0XHQgICAgY29udmVyc2lvbikpO1xuXHRcdH1cblx0fVxuXG5cdHJldCArPSBmbXQ7XG5cdHJldHVybiAocmV0KTtcbn1cblxuZnVuY3Rpb24ganNQcmludGYoKSB7XG5cdHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTtcblx0YXJncy51bnNoaWZ0KHByb2Nlc3Muc3Rkb3V0KTtcblx0anNGcHJpbnRmLmFwcGx5KG51bGwsIGFyZ3MpO1xufVxuXG5mdW5jdGlvbiBqc0ZwcmludGYoc3RyZWFtKSB7XG5cdHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcblx0cmV0dXJuIChzdHJlYW0ud3JpdGUoanNTcHJpbnRmLmFwcGx5KHRoaXMsIGFyZ3MpKSk7XG59XG5cbmZ1bmN0aW9uIGRvUGFkKGNociwgd2lkdGgsIGxlZnQsIHN0cilcbntcblx0dmFyIHJldCA9IHN0cjtcblxuXHR3aGlsZSAocmV0Lmxlbmd0aCA8IHdpZHRoKSB7XG5cdFx0aWYgKGxlZnQpXG5cdFx0XHRyZXQgKz0gY2hyO1xuXHRcdGVsc2Vcblx0XHRcdHJldCA9IGNociArIHJldDtcblx0fVxuXG5cdHJldHVybiAocmV0KTtcbn1cblxuLypcbiAqIFRoaXMgZnVuY3Rpb24gZHVtcHMgbG9uZyBzdGFjayB0cmFjZXMgZm9yIGV4Y2VwdGlvbnMgaGF2aW5nIGEgY2F1c2UoKSBtZXRob2QuXG4gKiBTZWUgbm9kZS12ZXJyb3IgZm9yIGFuIGV4YW1wbGUuXG4gKi9cbmZ1bmN0aW9uIGR1bXBFeGNlcHRpb24oZXgpXG57XG5cdHZhciByZXQ7XG5cblx0aWYgKCEoZXggaW5zdGFuY2VvZiBFcnJvcikpXG5cdFx0dGhyb3cgKG5ldyBFcnJvcihqc1NwcmludGYoJ2ludmFsaWQgdHlwZSBmb3IgJSVyOiAlaicsIGV4KSkpO1xuXG5cdC8qIE5vdGUgdGhhdCBWOCBwcmVwZW5kcyBcImV4LnN0YWNrXCIgd2l0aCBleC50b1N0cmluZygpLiAqL1xuXHRyZXQgPSAnRVhDRVBUSU9OOiAnICsgZXguY29uc3RydWN0b3IubmFtZSArICc6ICcgKyBleC5zdGFjaztcblxuXHRpZiAoZXguY2F1c2UgJiYgdHlwZW9mIChleC5jYXVzZSkgPT09ICdmdW5jdGlvbicpIHtcblx0XHR2YXIgY2V4ID0gZXguY2F1c2UoKTtcblx0XHRpZiAoY2V4KSB7XG5cdFx0XHRyZXQgKz0gJ1xcbkNhdXNlZCBieTogJyArIGR1bXBFeGNlcHRpb24oY2V4KTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gKHJldCk7XG59XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vdmVycm9yL34vZXh0c3ByaW50Zi9saWIvZXh0c3ByaW50Zi5qc1xuLy8gbW9kdWxlIGlkID0gNDFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbi8vIE5PVEU6IFRoZXNlIHR5cGUgY2hlY2tpbmcgZnVuY3Rpb25zIGludGVudGlvbmFsbHkgZG9uJ3QgdXNlIGBpbnN0YW5jZW9mYFxuLy8gYmVjYXVzZSBpdCBpcyBmcmFnaWxlIGFuZCBjYW4gYmUgZWFzaWx5IGZha2VkIHdpdGggYE9iamVjdC5jcmVhdGUoKWAuXG5cbmZ1bmN0aW9uIGlzQXJyYXkoYXJnKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KSB7XG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkoYXJnKTtcbiAgfVxuICByZXR1cm4gb2JqZWN0VG9TdHJpbmcoYXJnKSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbn1cbmV4cG9ydHMuaXNBcnJheSA9IGlzQXJyYXk7XG5cbmZ1bmN0aW9uIGlzQm9vbGVhbihhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdib29sZWFuJztcbn1cbmV4cG9ydHMuaXNCb29sZWFuID0gaXNCb29sZWFuO1xuXG5mdW5jdGlvbiBpc051bGwoYXJnKSB7XG4gIHJldHVybiBhcmcgPT09IG51bGw7XG59XG5leHBvcnRzLmlzTnVsbCA9IGlzTnVsbDtcblxuZnVuY3Rpb24gaXNOdWxsT3JVbmRlZmluZWQoYXJnKSB7XG4gIHJldHVybiBhcmcgPT0gbnVsbDtcbn1cbmV4cG9ydHMuaXNOdWxsT3JVbmRlZmluZWQgPSBpc051bGxPclVuZGVmaW5lZDtcblxuZnVuY3Rpb24gaXNOdW1iZXIoYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnbnVtYmVyJztcbn1cbmV4cG9ydHMuaXNOdW1iZXIgPSBpc051bWJlcjtcblxuZnVuY3Rpb24gaXNTdHJpbmcoYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnc3RyaW5nJztcbn1cbmV4cG9ydHMuaXNTdHJpbmcgPSBpc1N0cmluZztcblxuZnVuY3Rpb24gaXNTeW1ib2woYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnc3ltYm9sJztcbn1cbmV4cG9ydHMuaXNTeW1ib2wgPSBpc1N5bWJvbDtcblxuZnVuY3Rpb24gaXNVbmRlZmluZWQoYXJnKSB7XG4gIHJldHVybiBhcmcgPT09IHZvaWQgMDtcbn1cbmV4cG9ydHMuaXNVbmRlZmluZWQgPSBpc1VuZGVmaW5lZDtcblxuZnVuY3Rpb24gaXNSZWdFeHAocmUpIHtcbiAgcmV0dXJuIG9iamVjdFRvU3RyaW5nKHJlKSA9PT0gJ1tvYmplY3QgUmVnRXhwXSc7XG59XG5leHBvcnRzLmlzUmVnRXhwID0gaXNSZWdFeHA7XG5cbmZ1bmN0aW9uIGlzT2JqZWN0KGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ29iamVjdCcgJiYgYXJnICE9PSBudWxsO1xufVxuZXhwb3J0cy5pc09iamVjdCA9IGlzT2JqZWN0O1xuXG5mdW5jdGlvbiBpc0RhdGUoZCkge1xuICByZXR1cm4gb2JqZWN0VG9TdHJpbmcoZCkgPT09ICdbb2JqZWN0IERhdGVdJztcbn1cbmV4cG9ydHMuaXNEYXRlID0gaXNEYXRlO1xuXG5mdW5jdGlvbiBpc0Vycm9yKGUpIHtcbiAgcmV0dXJuIChvYmplY3RUb1N0cmluZyhlKSA9PT0gJ1tvYmplY3QgRXJyb3JdJyB8fCBlIGluc3RhbmNlb2YgRXJyb3IpO1xufVxuZXhwb3J0cy5pc0Vycm9yID0gaXNFcnJvcjtcblxuZnVuY3Rpb24gaXNGdW5jdGlvbihhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdmdW5jdGlvbic7XG59XG5leHBvcnRzLmlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uO1xuXG5mdW5jdGlvbiBpc1ByaW1pdGl2ZShhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PT0gbnVsbCB8fFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ2Jvb2xlYW4nIHx8XG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnbnVtYmVyJyB8fFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ3N0cmluZycgfHxcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdzeW1ib2wnIHx8ICAvLyBFUzYgc3ltYm9sXG4gICAgICAgICB0eXBlb2YgYXJnID09PSAndW5kZWZpbmVkJztcbn1cbmV4cG9ydHMuaXNQcmltaXRpdmUgPSBpc1ByaW1pdGl2ZTtcblxuZXhwb3J0cy5pc0J1ZmZlciA9IEJ1ZmZlci5pc0J1ZmZlcjtcblxuZnVuY3Rpb24gb2JqZWN0VG9TdHJpbmcobykge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pO1xufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3ZlcnJvci9+L2NvcmUtdXRpbC1pcy9saWIvdXRpbC5qc1xuLy8gbW9kdWxlIGlkID0gNDJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiaW1wb3J0IERpc2xFcnJvciBmcm9tICcuL2Rpc2wtZXJyb3InXG5cbi8qKlxuICogQGF1dGhvciBCZW5qYW1pbiBNaWNoYWxza2kgPGJlbmphbWluLm1pY2hhbHNraUBnbWFpbC5jb20+XG4gKlxuICogQHB1YmxpY1xuICovXG5jbGFzcyBDaXJjdWxhckRlcGVuZGVuY3lFcnJvciBleHRlbmRzIERpc2xFcnJvciB7XG4gIFxuICAvKipcbiAgICogQHBhcmFtIHtBcnJheTxzdHJpbmc+fSBzZXJ2aWNlc1xuICAgKlxuICAgKiBAcmV0dXJucyB7Q2lyY3VsYXJEZXBlbmRlbmN5RXJyb3J9XG4gICAqL1xuICBzdGF0aWMgY3JlYXRlRXJyb3Ioc2VydmljZXM6IEFycmF5PHN0cmluZz4pOiBDaXJjdWxhckRlcGVuZGVuY3lFcnJvciB7XG4gICAgY29uc3QgcGF0aCA9IFtdLmNvbmNhdChzZXJ2aWNlcylcbiAgICAgIC5yZXZlcnNlKClcbiAgICAgIC5qb2luKCcgPC0gJylcblxuICAgIHJldHVybiBuZXcgQ2lyY3VsYXJEZXBlbmRlbmN5RXJyb3IoXG4gICAgICB7XG4gICAgICAgIHNlcnZpY2VzXG4gICAgICB9LFxuICAgICAgJ0NpcmN1bGFyIGRlcGVuZGVuY3kgZm91bmQ6ICVzJyxcbiAgICAgIHBhdGhcbiAgICApXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ2lyY3VsYXJEZXBlbmRlbmN5RXJyb3JcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvZXJyb3JzL2NpcmN1bGFyLWRlcGVuZGVuY3ktZXJyb3IuanMiLCJpbXBvcnQgRGlzbEVycm9yIGZyb20gJy4vZGlzbC1lcnJvcidcblxuLyoqXG4gKiBAYXV0aG9yIEJlbmphbWluIE1pY2hhbHNraSA8YmVuamFtaW4ubWljaGFsc2tpQGdtYWlsLmNvbT5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmNsYXNzIEZhY3RvcnlNZXRob2RSZXR1cm5zTm90aGluZ0Vycm9yIGV4dGVuZHMgRGlzbEVycm9yIHtcblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IGlkZW50aWZpZXJcbiAgICpcbiAgICogQHJldHVybnMge0ZhY3RvcnlNZXRob2RSZXR1cm5zTm90aGluZ0Vycm9yfVxuICAgKi9cbiAgc3RhdGljIGNyZWF0ZUVycm9yKGlkZW50aWZpZXI6IHN0cmluZyk6IEZhY3RvcnlNZXRob2RSZXR1cm5zTm90aGluZ0Vycm9yIHtcbiAgICByZXR1cm4gbmV3IEZhY3RvcnlNZXRob2RSZXR1cm5zTm90aGluZ0Vycm9yKFxuICAgICAge1xuICAgICAgICBpZGVudGlmaWVyXG4gICAgICB9LFxuICAgICAgJ0ZhY3RvcnkgbWV0aG9kIGZvciBpZGVudGlmaWVyIFwiJXNcIiByZXR1cm5zIG5vdGhpbmcnLFxuICAgICAgaWRlbnRpZmllclxuICAgIClcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBGYWN0b3J5TWV0aG9kUmV0dXJuc05vdGhpbmdFcnJvclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2Vycm9ycy9mYWN0b3J5LW1ldGhvZC1yZXR1cm5zLW5vdGhpbmctZXJyb3IuanMiLCJpbXBvcnQgRGlzbEVycm9yIGZyb20gJy4vZGlzbC1lcnJvcidcblxuLyoqXG4gKiBAYXV0aG9yIEJlbmphbWluIE1pY2hhbHNraSA8YmVuamFtaW4ubWljaGFsc2tpQGdtYWlsLmNvbT5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmNsYXNzIE1ldGhvZERvZXNOb3RFeGlzdEVycm9yIGV4dGVuZHMgRGlzbEVycm9yIHtcblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IG1ldGhvZE5hbWVcbiAgICpcbiAgICogQHJldHVybnMge01ldGhvZERvZXNOb3RFeGlzdEVycm9yfVxuICAgKi9cbiAgc3RhdGljIGNyZWF0ZUVycm9yKG1ldGhvZE5hbWU6IHN0cmluZyk6IE1ldGhvZERvZXNOb3RFeGlzdEVycm9yIHtcbiAgICByZXR1cm4gbmV3IE1ldGhvZERvZXNOb3RFeGlzdEVycm9yKFxuICAgICAge1xuICAgICAgICBtZXRob2ROYW1lXG4gICAgICB9LFxuICAgICAgJ01ldGhvZCBcIiVzXCIgZG9lcyBub3QgZXhpc3QnLFxuICAgICAgbWV0aG9kTmFtZVxuICAgIClcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBNZXRob2REb2VzTm90RXhpc3RFcnJvclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2Vycm9ycy9tZXRob2QtZG9lcy1ub3QtZXhpc3QtZXJyb3IuanMiLCJpbXBvcnQgRGlzbEVycm9yIGZyb20gJy4vZGlzbC1lcnJvcidcblxuLyoqXG4gKiBAYXV0aG9yIEJlbmphbWluIE1pY2hhbHNraSA8YmVuamFtaW4ubWljaGFsc2tpQGdtYWlsLmNvbT5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmNsYXNzIFNlcnZpY2VEZWZpbml0aW9uQWxyZWFkeVVzZWRFcnJvciBleHRlbmRzIERpc2xFcnJvciB7XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpZGVudGlmaWVyXG4gICAqXG4gICAqIEByZXR1cm5zIHtTZXJ2aWNlRGVmaW5pdGlvbkFscmVhZHlVc2VkRXJyb3J9XG4gICAqL1xuICBzdGF0aWMgY3JlYXRlRXJyb3IoaWRlbnRpZmllcjogc3RyaW5nKTogU2VydmljZURlZmluaXRpb25BbHJlYWR5VXNlZEVycm9yIHtcbiAgICByZXR1cm4gbmV3IFNlcnZpY2VEZWZpbml0aW9uQWxyZWFkeVVzZWRFcnJvcihcbiAgICAgIHtcbiAgICAgICAgaWRlbnRpZmllclxuICAgICAgfSxcbiAgICAgICdTZXJ2aWNlIGRlZmluaXRpb24gZm9yIFwiJXNcIiBoYXMgYWxyZWFkeSBiZWVuIHVzZWQgdG8gaW5zdGFudGlhdGUgYSBzZXJ2aWNlLCByZWZ1c2luZyB0byBtb2RpZnkgaXQnLFxuICAgICAgaWRlbnRpZmllclxuICAgIClcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBTZXJ2aWNlRGVmaW5pdGlvbkFscmVhZHlVc2VkRXJyb3JcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9lcnJvcnMvc2VydmljZS1kZWZpbml0aW9uLWFscmVhZHktdXNlZC1lcnJvci5qcyIsImltcG9ydCBEaXNsRXJyb3IgZnJvbSAnLi9kaXNsLWVycm9yJ1xuXG4vKipcbiAqIEBhdXRob3IgQmVuamFtaW4gTWljaGFsc2tpIDxiZW5qYW1pbi5taWNoYWxza2lAZ21haWwuY29tPlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuY2xhc3MgVW5kZWZpbmVkUGFyYW1ldGVyRXJyb3IgZXh0ZW5kcyBEaXNsRXJyb3Ige1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gaWRlbnRpZmllclxuICAgKlxuICAgKiBAcmV0dXJucyB7VW5kZWZpbmVkUGFyYW1ldGVyRXJyb3J9XG4gICAqL1xuICBzdGF0aWMgY3JlYXRlRXJyb3IoaWRlbnRpZmllcjogc3RyaW5nKTogVW5kZWZpbmVkUGFyYW1ldGVyRXJyb3Ige1xuICAgIHJldHVybiBuZXcgVW5kZWZpbmVkUGFyYW1ldGVyRXJyb3IoXG4gICAgICB7XG4gICAgICAgIGlkZW50aWZpZXJcbiAgICAgIH0sXG4gICAgICAnVW5kZWZpbmVkIHBhcmFtZXRlciBmb3IgaWRlbnRpZmllciBcIiVzXCInLFxuICAgICAgaWRlbnRpZmllclxuICAgIClcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBVbmRlZmluZWRQYXJhbWV0ZXJFcnJvclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2Vycm9ycy91bmRlZmluZWQtcGFyYW1ldGVyLWVycm9yLmpzIiwiaW1wb3J0IERpc2xFcnJvciBmcm9tICcuL2Rpc2wtZXJyb3InXG5cbi8qKlxuICogQGF1dGhvciBCZW5qYW1pbiBNaWNoYWxza2kgPGJlbmphbWluLm1pY2hhbHNraUBnbWFpbC5jb20+XG4gKlxuICogQHB1YmxpY1xuICovXG5jbGFzcyBVbmRlZmluZWRTZXJ2aWNlRGVmaW5pdGlvbkFuZEluc3RhbmNlRXJyb3IgZXh0ZW5kcyBEaXNsRXJyb3Ige1xuICBcbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpZGVudGlmaWVyXG4gICAqXG4gICAqIEByZXR1cm5zIHtVbmRlZmluZWRTZXJ2aWNlRGVmaW5pdGlvbkFuZEluc3RhbmNlRXJyb3J9XG4gICAqL1xuICBzdGF0aWMgY3JlYXRlRXJyb3IoaWRlbnRpZmllcjogc3RyaW5nKTogVW5kZWZpbmVkU2VydmljZURlZmluaXRpb25BbmRJbnN0YW5jZUVycm9yIHtcbiAgICByZXR1cm4gbmV3IFVuZGVmaW5lZFNlcnZpY2VEZWZpbml0aW9uQW5kSW5zdGFuY2VFcnJvcihcbiAgICAgIHtcbiAgICAgICAgaWRlbnRpZmllclxuICAgICAgfSxcbiAgICAgICdVbmRlZmluZWQgc2VydmljZSBkZWZpbml0aW9uIGFuZCBpbnN0YW5jZSBmb3IgaWRlbnRpZmllciBcIiVzXCInLFxuICAgICAgaWRlbnRpZmllclxuICAgIClcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBVbmRlZmluZWRTZXJ2aWNlRGVmaW5pdGlvbkFuZEluc3RhbmNlRXJyb3JcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvZXJyb3JzL3VuZGVmaW5lZC1zZXJ2aWNlLWRlZmluaXRpb24tYW5kLWluc3RhbmNlLWVycm9yLmpzIiwiaW1wb3J0IERpc2xFcnJvciBmcm9tICcuL2Rpc2wtZXJyb3InXG5cbi8qKlxuICogQGF1dGhvciBCZW5qYW1pbiBNaWNoYWxza2kgPGJlbmphbWluLm1pY2hhbHNraUBnbWFpbC5jb20+XG4gKlxuICogQHB1YmxpY1xuICovXG5jbGFzcyBVbmRlZmluZWRTZXJ2aWNlRGVmaW5pdGlvbkVycm9yIGV4dGVuZHMgRGlzbEVycm9yIHtcblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IGlkZW50aWZpZXJcbiAgICpcbiAgICogQHJldHVybnMge1VuZGVmaW5lZFNlcnZpY2VEZWZpbml0aW9uRXJyb3J9XG4gICAqL1xuICBzdGF0aWMgY3JlYXRlRXJyb3IoaWRlbnRpZmllcjogc3RyaW5nKTogVW5kZWZpbmVkU2VydmljZURlZmluaXRpb25FcnJvciB7XG4gICAgcmV0dXJuIG5ldyBVbmRlZmluZWRTZXJ2aWNlRGVmaW5pdGlvbkVycm9yKFxuICAgICAge1xuICAgICAgICBpZGVudGlmaWVyXG4gICAgICB9LFxuICAgICAgJ1VuZGVmaW5lZCBzZXJ2aWNlIGRlZmluaXRpb24gZm9yIGlkZW50aWZpZXIgXCIlc1wiJyxcbiAgICAgIGlkZW50aWZpZXJcbiAgICApXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgVW5kZWZpbmVkU2VydmljZURlZmluaXRpb25FcnJvclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2Vycm9ycy91bmRlZmluZWQtc2VydmljZS1kZWZpbml0aW9uLWVycm9yLmpzIiwiaW1wb3J0IERpc2xFcnJvciBmcm9tICcuL2Rpc2wtZXJyb3InXG5cbi8qKlxuICogQGF1dGhvciBCZW5qYW1pbiBNaWNoYWxza2kgPGJlbmphbWluLm1pY2hhbHNraUBnbWFpbC5jb20+XG4gKlxuICogQHB1YmxpY1xuICovXG5jbGFzcyBVbnN1cHBvcnRlZEFyZ3VtZW50VHlwZUVycm9yIGV4dGVuZHMgRGlzbEVycm9yIHtcblxuICAvKipcbiAgICogQHBhcmFtIHthbnl9IGFyZ1xuICAgKlxuICAgKiBAcmV0dXJucyB7VW5zdXBwb3J0ZWRBcmd1bWVudFR5cGVFcnJvcn1cbiAgICovXG4gIHN0YXRpYyBjcmVhdGVFcnJvcihhcmc6IGFueSk6IFVuc3VwcG9ydGVkQXJndW1lbnRUeXBlRXJyb3Ige1xuICAgIHJldHVybiBuZXcgVW5zdXBwb3J0ZWRBcmd1bWVudFR5cGVFcnJvcihcbiAgICAgIHtcbiAgICAgICAgYXJnXG4gICAgICB9LFxuICAgICAgJ1Vuc3VwcG9ydGVkIGFyZyBvZiB0eXBlIFwiJXNcIicsXG4gICAgICB0eXBlb2YgYXJnXG4gICAgKVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFVuc3VwcG9ydGVkQXJndW1lbnRUeXBlRXJyb3JcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9lcnJvcnMvdW5zdXBwb3J0ZWQtYXJndW1lbnQtdHlwZS1lcnJvci5qcyIsImltcG9ydCBEaXNsRXJyb3IgZnJvbSAnLi9kaXNsLWVycm9yJ1xuXG4vKipcbiAqIEBhdXRob3IgQmVuamFtaW4gTWljaGFsc2tpIDxiZW5qYW1pbi5taWNoYWxza2lAZ21haWwuY29tPlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuY2xhc3MgR2V0U2VydmljZUVycm9yIGV4dGVuZHMgRGlzbEVycm9yIHtcblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IGlkZW50aWZpZXJcbiAgICogQHBhcmFtIHtFcnJvcn0gY2F1c2VcbiAgICpcbiAgICogQHJldHVybnMge01ldGhvZERvZXNOb3RFeGlzdEVycm9yfVxuICAgKi9cbiAgc3RhdGljIGNyZWF0ZUVycm9yKGlkZW50aWZpZXI6IHN0cmluZywgY2F1c2U6IEVycm9yKTogR2V0U2VydmljZUVycm9yIHtcbiAgICByZXR1cm4gbmV3IEdldFNlcnZpY2VFcnJvcihcbiAgICAgIHtcbiAgICAgICAgY2F1c2UsXG4gICAgICAgIGluZm86IHtcbiAgICAgICAgICBpZGVudGlmaWVyXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAnRXJyb3IgZ2V0dGluZyBzZXJ2aWNlIFwiJXNcIicsXG4gICAgICBpZGVudGlmaWVyXG4gICAgKVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEdldFNlcnZpY2VFcnJvclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2Vycm9ycy9nZXQtc2VydmljZS1lcnJvci5qcyIsImV4cG9ydCB0eXBlIFNlcnZpY2UgPSBPYmplY3R8RnVuY3Rpb25cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy90eXBlcy9zZXJ2aWNlLmpzIiwiZXhwb3J0IHR5cGUgUGFyYW1ldGVyVmFsdWUgPSAoc3RyaW5nfG51bWJlcnxib29sZWFufG51bGwpXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvdHlwZXMvcGFyYW1ldGVyLXZhbHVlLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==