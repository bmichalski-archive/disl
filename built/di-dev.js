!function(n,t){if("object"==typeof exports&&"object"==typeof module)module.exports=t();else if("function"==typeof define&&define.amd)define([],t);else{var e=t();for(var r in e)("object"==typeof exports?exports:n)[r]=e[r]}}(this,function(){return function(n){function t(r){if(e[r])return e[r].exports;var o=e[r]={exports:{},id:r,loaded:!1};return n[r].call(o.exports,o,o.exports,t),o.loaded=!0,o.exports}var e={};return t.m=n,t.c=e,t.p="",t(0)}([function(n,t,e){"use strict";function r(n){return n&&n.__esModule?n:{default:n}}var o=e(1),i=r(o),u=e(7),c=r(u),a=e(8),f=r(a),s=e(5),l=r(s),y=e(6),p=r(y),d=e(3),v=r(d);n.exports={Container:i.default,ClassConstructorDefinition:c.default,FactoryDefinition:f.default,Reference:l.default,Parameter:p.default,MethodCall:v.default}},function(n,t,e){"use strict";function r(n){return n&&n.__esModule?n:{default:n}}function o(n,t){if(!(n instanceof t))throw new TypeError("Cannot call a class as a function")}function i(n,t){var e=4,r=15;if(void 0===t&&(t=0),t+=1,null===n)return"null";if(void 0===n)return"void";if("string"==typeof n||"number"==typeof n||"boolean"==typeof n)return"undefined"==typeof n?"undefined":u(n);if(!Array.isArray(n)){var o=Object.keys(n);if(!o.length)return n.constructor&&n.constructor.name&&"Object"!==n.constructor.name?n.constructor.name:"Object";if(t>e)return"{...}";var c="  ".repeat(t-1),a=o.slice(0,r).map(function(e){return(/^([A-Z_$][A-Z0-9_$]*)$/i.test(e)?e:JSON.stringify(e))+": "+i(n[e],t)+";"}).join("\n  "+c);return o.length>=r&&(a+="\n  "+c+"..."),n.constructor&&n.constructor.name&&"Object"!==n.constructor.name?n.constructor.name+" {\n  "+c+a+"\n"+c+"}":"{\n  "+c+a+"\n"+c+"}"}if(!(n.length>0))return"Array";var f=function(){if(t>e)return{v:"[...]"};var o=i(n[0],t);return n.every(function(n){return i(n,t)===o})?{v:o.trim()+"[]"}:{v:"["+n.slice(0,r).map(function(n){return i(n,t)}).join(", ")+(n.length>=r?", ...":"")+"]"}}();return"object"===("undefined"==typeof f?"undefined":u(f))?f.v:void 0}Object.defineProperty(t,"__esModule",{value:!0});var u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},c=function(){function n(n,t){for(var e=0;e<t.length;e++){var r=t[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}return function(t,e,r){return e&&n(t.prototype,e),r&&n(t,r),t}}(),a=e(2),f=r(a),s=e(7),l=r(s),y=e(8),p=r(y),d=e(5),v=r(d),h=e(6),m=r(h),b=e(3),g=r(b),w=e(4),E=w.InjectableArguments,j=function(){function n(n){return"string"==typeof n||"number"==typeof n||"boolean"==typeof n||null==n}return Object.defineProperty(n,Symbol.hasInstance,{value:function(t){return n(t)}}),n}(),_=function(){function n(n){return null!=n&&n.obj instanceof Object&&Array.isArray(n.arr)&&n.arr.every(function(n){return"string"==typeof n})}return Object.defineProperty(n,Symbol.hasInstance,{value:function(t){return n(t)}}),n}(),O=function(){function n(n){return"function"==typeof n}return Object.defineProperty(n,Symbol.hasInstance,{value:function(t){return n(t)}}),n}(),x=function(){function n(){o(this,n),this._servicesByIdentifier={},this._serviceDefinitionsByIdentifier={},this._parametersByIdentifier={},this._serviceDefinitionsAlreadyUsedToInstantiateByIdentifier={},this._classConstructorLocators=[],this._instanceLocators=[]}return c(n,[{key:"get",value:function(n){function t(n){if(!(n instanceof Promise))throw new TypeError("Function return value violates contract.\n\nExpected:\nPromise<Object | Function>\n\nGot:\n"+i(n));return n}if("string"!=typeof n)throw new TypeError('Value of argument "identifier" violates contract.\n\nExpected:\nstring\n\nGot:\n'+i(n));return t(this._doGetService(n,{obj:{},arr:[]}))}},{key:"set",value:function(t,e){function r(t){if(!(t instanceof n))throw new TypeError("Function return value violates contract.\n\nExpected:\nContainer\n\nGot:\n"+i(t));return t}if("string"!=typeof t)throw new TypeError('Value of argument "identifier" violates contract.\n\nExpected:\nstring\n\nGot:\n'+i(t));if(!(e instanceof Object||"function"==typeof e))throw new TypeError('Value of argument "instance" violates contract.\n\nExpected:\nObject | Function\n\nGot:\n'+i(e));return this._servicesByIdentifier[t]=e,r(this)}},{key:"has",value:function(n){function t(n){if("boolean"!=typeof n)throw new TypeError("Function return value violates contract.\n\nExpected:\nboolean\n\nGot:\n"+i(n));return n}if("string"!=typeof n)throw new TypeError('Value of argument "identifier" violates contract.\n\nExpected:\nstring\n\nGot:\n'+i(n));return t(this.hasDefinition(n)||this.hasInstance(n))}},{key:"hasDefinition",value:function(n){function t(n){if("boolean"!=typeof n)throw new TypeError("Function return value violates contract.\n\nExpected:\nboolean\n\nGot:\n"+i(n));return n}if("string"!=typeof n)throw new TypeError('Value of argument "identifier" violates contract.\n\nExpected:\nstring\n\nGot:\n'+i(n));return t(void 0!==this._serviceDefinitionsByIdentifier[n])}},{key:"hasInstance",value:function(n){function t(n){if("boolean"!=typeof n)throw new TypeError("Function return value violates contract.\n\nExpected:\nboolean\n\nGot:\n"+i(n));return n}if("string"!=typeof n)throw new TypeError('Value of argument "identifier" violates contract.\n\nExpected:\nstring\n\nGot:\n'+i(n));return t(void 0!==this._servicesByIdentifier[n])}},{key:"getDefinition",value:function(n){function t(n){if(!(n instanceof f.default))throw new TypeError("Function return value violates contract.\n\nExpected:\nDefinition\n\nGot:\n"+i(n));return n}if("string"!=typeof n)throw new TypeError('Value of argument "identifier" violates contract.\n\nExpected:\nstring\n\nGot:\n'+i(n));var e=this._serviceDefinitionsByIdentifier[n];if(void 0===e)throw new Error('Missing service definition for identifier "'+n+'"');return t(e)}},{key:"setDefinition",value:function(t,e){function r(t){if(!(t instanceof n))throw new TypeError("Function return value violates contract.\n\nExpected:\nContainer\n\nGot:\n"+i(t));return t}if("string"!=typeof t)throw new TypeError('Value of argument "identifier" violates contract.\n\nExpected:\nstring\n\nGot:\n'+i(t));if(!(e instanceof f.default))throw new TypeError('Value of argument "definition" violates contract.\n\nExpected:\nDefinition\n\nGot:\n'+i(e));if(this._serviceDefinitionsAlreadyUsedToInstantiateByIdentifier[t])throw new Error('Service definition for "'+t+'" has already been used to instantiate a service, refusing to modify it');return this._serviceDefinitionsAlreadyUsedToInstantiateByIdentifier[t]=!1,this._serviceDefinitionsByIdentifier[t]=e,r(this)}},{key:"getParameter",value:function(n){function t(n){if(!j(n))throw new TypeError("Function return value violates contract.\n\nExpected:\nscalar\n\nGot:\n"+i(n));return n}if("string"!=typeof n)throw new TypeError('Value of argument "identifier" violates contract.\n\nExpected:\nstring\n\nGot:\n'+i(n));if(void 0===this._parametersByIdentifier[n])throw new Error('Undefined parameter "'+n+'"');return t(this._parametersByIdentifier[n])}},{key:"setParameter",value:function(t,e){function r(t){if(!(t instanceof n))throw new TypeError("Function return value violates contract.\n\nExpected:\nContainer\n\nGot:\n"+i(t));return t}if("string"!=typeof t)throw new TypeError('Value of argument "identifier" violates contract.\n\nExpected:\nstring\n\nGot:\n'+i(t));if(!j(e))throw new TypeError('Value of argument "value" violates contract.\n\nExpected:\nscalar\n\nGot:\n'+i(e));return this._parametersByIdentifier[t]=e,r(this)}},{key:"hasParameter",value:function(n){function t(n){if("boolean"!=typeof n)throw new TypeError("Function return value violates contract.\n\nExpected:\nboolean\n\nGot:\n"+i(n));return n}if("string"!=typeof n)throw new TypeError('Value of argument "identifier" violates contract.\n\nExpected:\nstring\n\nGot:\n'+i(n));return t(void 0!==this._parametersByIdentifier[n])}},{key:"registerClassConstructorLocator",value:function(t){function e(t){if(!(t instanceof n))throw new TypeError("Function return value violates contract.\n\nExpected:\nContainer\n\nGot:\n"+i(t));return t}if(!O(t))throw new TypeError('Value of argument "locator" violates contract.\n\nExpected:\nLocatorCallback\n\nGot:\n'+i(t));return this._classConstructorLocators.push(t),e(this)}},{key:"registerInstanceLocator",value:function(t){function e(t){if(!(t instanceof n))throw new TypeError("Function return value violates contract.\n\nExpected:\nContainer\n\nGot:\n"+i(t));return t}if(!O(t))throw new TypeError('Value of argument "locator" violates contract.\n\nExpected:\nLocatorCallback\n\nGot:\n'+i(t));return this._instanceLocators.push(t),e(this)}},{key:"_instantiate",value:function(n,t){function e(n){if(!(n instanceof Promise))throw new TypeError("Function return value violates contract.\n\nExpected:\nPromise<Object>\n\nGot:\n"+i(n));return n}var r=this;if(!(n instanceof f.default))throw new TypeError('Value of argument "definition" violates contract.\n\nExpected:\nDefinition\n\nGot:\n'+i(n));if(!_(t))throw new TypeError('Value of argument "loading" violates contract.\n\nExpected:\nLoadingObject\n\nGot:\n'+i(t));return e(this._resolveArgs(n.args,t).then(function(e){function o(n){if(!(n instanceof Promise))throw new TypeError("Function return value violates contract.\n\nExpected:\nPromise\n\nGot:\n"+i(n));return n}if(!Array.isArray(e))throw new TypeError('Value of argument "args" violates contract.\n\nExpected:\nArray\n\nGot:\n'+i(e));var u=void 0;if(n instanceof l.default){var c=r._locateServiceClassConstructor(n.classConstructorIdentifier);u=new(Function.prototype.bind.apply(c,[void 0].concat(e)))}else{if(!(n instanceof p.default))throw new Error("Unsupported");if(u=n.factory.apply(void 0,e),void 0===u)throw new Error("Expecting factory method to return a service")}var a=[];return n.methodCalls.forEach(function(n){if(!(n instanceof g.default))throw new TypeError('Value of argument "methodCall" violates contract.\n\nExpected:\nMethodCall\n\nGot:\n'+i(n));var e=n.name,o=u[e];if(void 0===o)throw new Error('Method "'+e+'" does not exist');a.push(r._resolveArgs(n.args,t).then(function(n){function t(n){if(!(null==n||n instanceof Promise))throw new TypeError("Function return value violates contract.\n\nExpected:\n?Promise | mixed\n\nGot:\n"+i(n));return n}if(!Array.isArray(n))throw new TypeError('Value of argument "args" violates contract.\n\nExpected:\nArray\n\nGot:\n'+i(n));return t(o.apply(u,n))}))}),o(Promise.all(a).then(function(){function n(n){if(!(n instanceof Object))throw new TypeError("Function return value violates contract.\n\nExpected:\nObject\n\nGot:\n"+i(n));return n}return n(u)}))}))}},{key:"_locateServiceClassConstructor",value:function(n){function t(n){if("function"!=typeof n)throw new TypeError("Function return value violates contract.\n\nExpected:\nFunction\n\nGot:\n"+i(n));return n}if("string"!=typeof n)throw new TypeError('Value of argument "identifier" violates contract.\n\nExpected:\nstring\n\nGot:\n'+i(n));var e=void 0,r=void 0;for(e in this._classConstructorLocators)if(this._classConstructorLocators.hasOwnProperty(e)&&(r=this._classConstructorLocators[e](n),void 0!==r))break;if(void 0===r)throw new Error('Could not locate service class constructor for identifier "'+n+'"');return t(r)}},{key:"_locateInstance",value:function(n){function t(n){if(!(n instanceof Object||null==n))throw new TypeError("Function return value violates contract.\n\nExpected:\nObject | void\n\nGot:\n"+i(n));return n}if("string"!=typeof n)throw new TypeError('Value of argument "identifier" violates contract.\n\nExpected:\nstring\n\nGot:\n'+i(n));var e=void 0,r=void 0;for(e in this._instanceLocators)if(this._instanceLocators.hasOwnProperty(e)&&(r=this._instanceLocators[e](n),void 0!==r))break;return t(r)}},{key:"_resolveArgs",value:function(t,e){function r(n){if(!(n instanceof Promise))throw new TypeError("Function return value violates contract.\n\nExpected:\nPromise\n\nGot:\n"+i(n));return n}var o=this;if(!E(t))throw new TypeError('Value of argument "args" violates contract.\n\nExpected:\nInjectableArguments\n\nGot:\n'+i(t));if(!_(e))throw new TypeError('Value of argument "loading" violates contract.\n\nExpected:\nLoadingObject\n\nGot:\n'+i(e));var c=[];return t.forEach(function(t){if(t instanceof v.default){var r=t.id;c.push(o._doGetService(r,n._deepCopyLoading(e)))}else{if(!(t instanceof m.default))throw new Error('Unsupported arg of type "'+("undefined"==typeof t?"undefined":u(t))+'"');c.push(o.getParameter(t.id))}}),r(Promise.all(c))}},{key:"_createMissingServiceDefinitionAndInstanceForIdentifierError",value:function(n){if("string"!=typeof n)throw new TypeError('Value of argument "identifier" violates contract.\n\nExpected:\nstring\n\nGot:\n'+i(n));return new Error('Missing service definition and instance for identifier "'+n+'"')}},{key:"_doGetService",value:function(n,t){function e(n){if(!(n instanceof Promise))throw new TypeError("Function return value violates contract.\n\nExpected:\nPromise\n\nGot:\n"+i(n));return n}var r=this;if("string"!=typeof n)throw new TypeError('Value of argument "identifier" violates contract.\n\nExpected:\nstring\n\nGot:\n'+i(n));if(!_(t))throw new TypeError('Value of argument "loading" violates contract.\n\nExpected:\nLoadingObject\n\nGot:\n'+i(t));if(void 0!==t.obj[n]){var o=t.arr.concat([n]).join(" => ");return e(Promise.reject(new Error("Circular dependency detected "+o)))}if(!this.hasInstance(n)){if(!this.hasDefinition(n)){var u=this._locateInstance(n);return e(void 0!==u?Promise.resolve(u).then(function(t){return new Promise(function(e,o){void 0===t?o(r._createMissingServiceDefinitionAndInstanceForIdentifierError(n)):e(t)})}):Promise.reject(this._createMissingServiceDefinitionAndInstanceForIdentifierError(n)))}t.obj[n]=!0,t.arr.push(n);var c=this._instantiate(this.getDefinition(n),t);this._serviceDefinitionsAlreadyUsedToInstantiateByIdentifier[n]=!0,this._servicesByIdentifier[n]=c}return e(Promise.resolve(this._servicesByIdentifier[n]))}}],[{key:"_deepCopyLoading",value:function(n){if(!(n instanceof Object))throw new TypeError('Value of argument "loading" violates contract.\n\nExpected:\nObject\n\nGot:\n'+i(n));var t={obj:{},arr:[].concat(n.arr)};for(var e in n.obj)n.obj.hasOwnProperty(e)&&(t.obj[e]=n.obj[e]);return t}}]),n}();t.default=x},function(n,t,e){"use strict";function r(n){return n&&n.__esModule?n:{default:n}}function o(n,t){if(!(n instanceof t))throw new TypeError("Cannot call a class as a function")}function i(n,t){var e=4,r=15;if(void 0===t&&(t=0),t+=1,null===n)return"null";if(void 0===n)return"void";if("string"==typeof n||"number"==typeof n||"boolean"==typeof n)return"undefined"==typeof n?"undefined":u(n);if(!Array.isArray(n)){var o=Object.keys(n);if(!o.length)return n.constructor&&n.constructor.name&&"Object"!==n.constructor.name?n.constructor.name:"Object";if(t>e)return"{...}";var c="  ".repeat(t-1),a=o.slice(0,r).map(function(e){return(/^([A-Z_$][A-Z0-9_$]*)$/i.test(e)?e:JSON.stringify(e))+": "+i(n[e],t)+";"}).join("\n  "+c);return o.length>=r&&(a+="\n  "+c+"..."),n.constructor&&n.constructor.name&&"Object"!==n.constructor.name?n.constructor.name+" {\n  "+c+a+"\n"+c+"}":"{\n  "+c+a+"\n"+c+"}"}if(!(n.length>0))return"Array";var f=function(){if(t>e)return{v:"[...]"};var o=i(n[0],t);return n.every(function(n){return i(n,t)===o})?{v:o.trim()+"[]"}:{v:"["+n.slice(0,r).map(function(n){return i(n,t)}).join(", ")+(n.length>=r?", ...":"")+"]"}}();return"object"===("undefined"==typeof f?"undefined":u(f))?f.v:void 0}Object.defineProperty(t,"__esModule",{value:!0});var u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},c=function(){function n(n,t){for(var e=0;e<t.length;e++){var r=t[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}return function(t,e,r){return e&&n(t.prototype,e),r&&n(t,r),t}}(),a=e(3),f=r(a),s=e(4),l=s.InjectableArguments,y=function(){function n(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];if(o(this,n),null!=t&&!l(t))throw new TypeError('Value of argument "args" violates contract.\n\nExpected:\n?InjectableArguments\n\nGot:\n'+i(t));this._methodCalls=[],this._args=t}return c(n,[{key:"methodCalls",set:function(n){if(!Array.isArray(n)||!n.every(function(n){return n instanceof f.default}))throw new TypeError('Value of argument "methodCalls" violates contract.\n\nExpected:\nArray<MethodCall>\n\nGot:\n'+i(n));this._methodCalls=n},get:function(){function n(n){if(!Array.isArray(n)||!n.every(function(n){return n instanceof f.default}))throw new TypeError("Function return value violates contract.\n\nExpected:\nArray<MethodCall>\n\nGot:\n"+i(n));return n}return n(this._methodCalls)}},{key:"args",get:function(){function n(n){if(!l(n))throw new TypeError("Function return value violates contract.\n\nExpected:\nInjectableArguments\n\nGot:\n"+i(n));return n}return n(this._args)}}]),n}();t.default=y},function(n,t,e){"use strict";function r(n,t){if(!(n instanceof t))throw new TypeError("Cannot call a class as a function")}function o(n,t){var e=4,r=15;if(void 0===t&&(t=0),t+=1,null===n)return"null";if(void 0===n)return"void";if("string"==typeof n||"number"==typeof n||"boolean"==typeof n)return"undefined"==typeof n?"undefined":i(n);if(!Array.isArray(n)){var u=Object.keys(n);if(!u.length)return n.constructor&&n.constructor.name&&"Object"!==n.constructor.name?n.constructor.name:"Object";if(t>e)return"{...}";var c="  ".repeat(t-1),a=u.slice(0,r).map(function(e){return(/^([A-Z_$][A-Z0-9_$]*)$/i.test(e)?e:JSON.stringify(e))+": "+o(n[e],t)+";"}).join("\n  "+c);return u.length>=r&&(a+="\n  "+c+"..."),n.constructor&&n.constructor.name&&"Object"!==n.constructor.name?n.constructor.name+" {\n  "+c+a+"\n"+c+"}":"{\n  "+c+a+"\n"+c+"}"}if(!(n.length>0))return"Array";var f=function(){if(t>e)return{v:"[...]"};var i=o(n[0],t);return n.every(function(n){return o(n,t)===i})?{v:i.trim()+"[]"}:{v:"["+n.slice(0,r).map(function(n){return o(n,t)}).join(", ")+(n.length>=r?", ...":"")+"]"}}();return"object"===("undefined"==typeof f?"undefined":i(f))?f.v:void 0}Object.defineProperty(t,"__esModule",{value:!0});var i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},u=function(){function n(n,t){for(var e=0;e<t.length;e++){var r=t[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}return function(t,e,r){return e&&n(t.prototype,e),r&&n(t,r),t}}(),c=e(4),a=c.InjectableArguments,f=function(){function n(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];if(r(this,n),"string"!=typeof t)throw new TypeError('Value of argument "name" violates contract.\n\nExpected:\nstring\n\nGot:\n'+o(t));if(null!=e&&!a(e))throw new TypeError('Value of argument "args" violates contract.\n\nExpected:\n?InjectableArguments\n\nGot:\n'+o(e));this._name=t,this._args=e}return u(n,[{key:"name",get:function(){function n(n){if("string"!=typeof n)throw new TypeError("Function return value violates contract.\n\nExpected:\nstring\n\nGot:\n"+o(n));return n}return n(this._name)}},{key:"args",get:function(){function n(n){if(!a(n))throw new TypeError("Function return value violates contract.\n\nExpected:\nInjectableArguments\n\nGot:\n"+o(n));return n}return n(this._args)}}]),n}();t.default=f},function(n,t,e){"use strict";function r(n){return n&&n.__esModule?n:{default:n}}Object.defineProperty(t,"__esModule",{value:!0}),t.InjectableArguments=void 0;var o=e(5),i=r(o),u=e(6),c=r(u);t.InjectableArguments=function(){function n(n){return Array.isArray(n)&&n.every(function(n){return n instanceof i.default||n instanceof c.default})}return Object.defineProperty(n,Symbol.hasInstance,{value:function(t){return n(t)}}),n}()},function(n,t){"use strict";function e(n,t){if(!(n instanceof t))throw new TypeError("Cannot call a class as a function")}function r(n,t){var e=4,i=15;if(void 0===t&&(t=0),t+=1,null===n)return"null";if(void 0===n)return"void";if("string"==typeof n||"number"==typeof n||"boolean"==typeof n)return"undefined"==typeof n?"undefined":o(n);if(!Array.isArray(n)){var u=Object.keys(n);if(!u.length)return n.constructor&&n.constructor.name&&"Object"!==n.constructor.name?n.constructor.name:"Object";if(t>e)return"{...}";var c="  ".repeat(t-1),a=u.slice(0,i).map(function(e){return(/^([A-Z_$][A-Z0-9_$]*)$/i.test(e)?e:JSON.stringify(e))+": "+r(n[e],t)+";"}).join("\n  "+c);return u.length>=i&&(a+="\n  "+c+"..."),n.constructor&&n.constructor.name&&"Object"!==n.constructor.name?n.constructor.name+" {\n  "+c+a+"\n"+c+"}":"{\n  "+c+a+"\n"+c+"}"}if(!(n.length>0))return"Array";var f=function(){if(t>e)return{v:"[...]"};var o=r(n[0],t);return n.every(function(n){return r(n,t)===o})?{v:o.trim()+"[]"}:{v:"["+n.slice(0,i).map(function(n){return r(n,t)}).join(", ")+(n.length>=i?", ...":"")+"]"}}();return"object"===("undefined"==typeof f?"undefined":o(f))?f.v:void 0}Object.defineProperty(t,"__esModule",{value:!0});var o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},i=function(){function n(n,t){for(var e=0;e<t.length;e++){var r=t[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}return function(t,e,r){return e&&n(t.prototype,e),r&&n(t,r),t}}(),u=function(){function n(t){if(e(this,n),"string"!=typeof t)throw new TypeError('Value of argument "id" violates contract.\n\nExpected:\nstring\n\nGot:\n'+r(t));this._id=t}return i(n,[{key:"id",get:function(){function n(n){if("string"!=typeof n)throw new TypeError("Function return value violates contract.\n\nExpected:\nstring\n\nGot:\n"+r(n));return n}return n(this._id)}}]),n}();t.default=u},function(n,t){"use strict";function e(n,t){if(!(n instanceof t))throw new TypeError("Cannot call a class as a function")}function r(n,t){var e=4,i=15;if(void 0===t&&(t=0),t+=1,null===n)return"null";if(void 0===n)return"void";if("string"==typeof n||"number"==typeof n||"boolean"==typeof n)return"undefined"==typeof n?"undefined":o(n);if(!Array.isArray(n)){var u=Object.keys(n);if(!u.length)return n.constructor&&n.constructor.name&&"Object"!==n.constructor.name?n.constructor.name:"Object";if(t>e)return"{...}";var c="  ".repeat(t-1),a=u.slice(0,i).map(function(e){return(/^([A-Z_$][A-Z0-9_$]*)$/i.test(e)?e:JSON.stringify(e))+": "+r(n[e],t)+";"}).join("\n  "+c);return u.length>=i&&(a+="\n  "+c+"..."),n.constructor&&n.constructor.name&&"Object"!==n.constructor.name?n.constructor.name+" {\n  "+c+a+"\n"+c+"}":"{\n  "+c+a+"\n"+c+"}"}if(!(n.length>0))return"Array";var f=function(){if(t>e)return{v:"[...]"};var o=r(n[0],t);return n.every(function(n){return r(n,t)===o})?{v:o.trim()+"[]"}:{v:"["+n.slice(0,i).map(function(n){return r(n,t)}).join(", ")+(n.length>=i?", ...":"")+"]"}}();return"object"===("undefined"==typeof f?"undefined":o(f))?f.v:void 0}Object.defineProperty(t,"__esModule",{value:!0});var o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},i=function(){function n(n,t){for(var e=0;e<t.length;e++){var r=t[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}return function(t,e,r){return e&&n(t.prototype,e),r&&n(t,r),t}}(),u=function(){function n(t){if(e(this,n),"string"!=typeof t)throw new TypeError('Value of argument "id" violates contract.\n\nExpected:\nstring\n\nGot:\n'+r(t));this._id=t}return i(n,[{key:"id",get:function(){function n(n){if("string"!=typeof n)throw new TypeError("Function return value violates contract.\n\nExpected:\nstring\n\nGot:\n"+r(n));return n}return n(this._id)}}]),n}();t.default=u},function(n,t,e){"use strict";function r(n){return n&&n.__esModule?n:{default:n}}function o(n,t){if(!(n instanceof t))throw new TypeError("Cannot call a class as a function")}function i(n,t){if(!n)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?n:t}function u(n,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);n.prototype=Object.create(t&&t.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(n,t):n.__proto__=t)}function c(n,t){var e=4,r=15;if(void 0===t&&(t=0),t+=1,null===n)return"null";if(void 0===n)return"void";if("string"==typeof n||"number"==typeof n||"boolean"==typeof n)return"undefined"==typeof n?"undefined":a(n);if(!Array.isArray(n)){var o=Object.keys(n);if(!o.length)return n.constructor&&n.constructor.name&&"Object"!==n.constructor.name?n.constructor.name:"Object";if(t>e)return"{...}";var i="  ".repeat(t-1),u=o.slice(0,r).map(function(e){return(/^([A-Z_$][A-Z0-9_$]*)$/i.test(e)?e:JSON.stringify(e))+": "+c(n[e],t)+";"}).join("\n  "+i);return o.length>=r&&(u+="\n  "+i+"..."),n.constructor&&n.constructor.name&&"Object"!==n.constructor.name?n.constructor.name+" {\n  "+i+u+"\n"+i+"}":"{\n  "+i+u+"\n"+i+"}"}if(!(n.length>0))return"Array";var f=function(){if(t>e)return{v:"[...]"};var o=c(n[0],t);return n.every(function(n){return c(n,t)===o})?{v:o.trim()+"[]"}:{v:"["+n.slice(0,r).map(function(n){return c(n,t)}).join(", ")+(n.length>=r?", ...":"")+"]"}}();return"object"===("undefined"==typeof f?"undefined":a(f))?f.v:void 0}Object.defineProperty(t,"__esModule",{value:!0});var a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},f=function(){function n(n,t){for(var e=0;e<t.length;e++){var r=t[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}return function(t,e,r){return e&&n(t.prototype,e),r&&n(t,r),t}}(),s=e(2),l=r(s),y=e(4),p=y.InjectableArguments,d=function(n){function t(n){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];if(o(this,t),"string"!=typeof n)throw new TypeError('Value of argument "classConstructorIdentifier" violates contract.\n\nExpected:\nstring\n\nGot:\n'+c(n));if(null!=e&&!p(e))throw new TypeError('Value of argument "args" violates contract.\n\nExpected:\n?InjectableArguments\n\nGot:\n'+c(e));var r=i(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return r._classConstructorIdentifier=n,r}return u(t,n),f(t,[{key:"classConstructorIdentifier",get:function(){function n(n){if("string"!=typeof n)throw new TypeError("Function return value violates contract.\n\nExpected:\nstring\n\nGot:\n"+c(n));return n}return n(this._classConstructorIdentifier)}}]),t}(l.default);t.default=d},function(n,t,e){"use strict";function r(n){return n&&n.__esModule?n:{default:n}}function o(n,t){if(!(n instanceof t))throw new TypeError("Cannot call a class as a function")}function i(n,t){if(!n)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?n:t}function u(n,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);n.prototype=Object.create(t&&t.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(n,t):n.__proto__=t)}function c(n,t){var e=4,r=15;if(void 0===t&&(t=0),t+=1,null===n)return"null";if(void 0===n)return"void";if("string"==typeof n||"number"==typeof n||"boolean"==typeof n)return"undefined"==typeof n?"undefined":a(n);if(!Array.isArray(n)){var o=Object.keys(n);if(!o.length)return n.constructor&&n.constructor.name&&"Object"!==n.constructor.name?n.constructor.name:"Object";if(t>e)return"{...}";var i="  ".repeat(t-1),u=o.slice(0,r).map(function(e){return(/^([A-Z_$][A-Z0-9_$]*)$/i.test(e)?e:JSON.stringify(e))+": "+c(n[e],t)+";"}).join("\n  "+i);return o.length>=r&&(u+="\n  "+i+"..."),n.constructor&&n.constructor.name&&"Object"!==n.constructor.name?n.constructor.name+" {\n  "+i+u+"\n"+i+"}":"{\n  "+i+u+"\n"+i+"}"}if(!(n.length>0))return"Array";var f=function(){if(t>e)return{v:"[...]"};var o=c(n[0],t);return n.every(function(n){return c(n,t)===o})?{v:o.trim()+"[]"}:{v:"["+n.slice(0,r).map(function(n){return c(n,t)}).join(", ")+(n.length>=r?", ...":"")+"]"}}();return"object"===("undefined"==typeof f?"undefined":a(f))?f.v:void 0}Object.defineProperty(t,"__esModule",{value:!0});var a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},f=function(){function n(n,t){for(var e=0;e<t.length;e++){var r=t[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}return function(t,e,r){return e&&n(t.prototype,e),r&&n(t,r),t}}(),s=e(2),l=r(s),y=e(4),p=y.InjectableArguments,d=function(n){function t(n){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];if(o(this,t),"function"!=typeof n)throw new TypeError('Value of argument "factory" violates contract.\n\nExpected:\nFunction\n\nGot:\n'+c(n));if(null!=e&&!p(e))throw new TypeError('Value of argument "args" violates contract.\n\nExpected:\n?InjectableArguments\n\nGot:\n'+c(e));var r=i(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return r._factory=n,r}return u(t,n),f(t,[{key:"factory",get:function(){function n(n){if("function"!=typeof n)throw new TypeError("Function return value violates contract.\n\nExpected:\nFunction\n\nGot:\n"+c(n));return n}return n(this._factory)}}]),t}(l.default);t.default=d}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,