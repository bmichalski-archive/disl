!function(t,e){if("object"==typeof exports&&"object"==typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var n=e();for(var r in n)("object"==typeof exports?exports:t)[r]=n[r]}}(this,function(){return function(t){function e(r){if(n[r])return n[r].exports;var o=n[r]={exports:{},id:r,loaded:!1};return t[r].call(o.exports,o,o.exports,e),o.loaded=!0,o.exports}var n={};return e.m=t,e.c=n,e.p="",e(0)}([function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}var o=n(1),i=r(o),u=n(7),a=r(u),c=n(8),f=r(c),s=n(5),l=r(s),p=n(6),h=r(p),y=n(3),d=r(y),v=n(9),g=r(v),b={Container:i.default,ClassConstructorDefinition:a.default,FactoryDefinition:f.default,Reference:l.default,Parameter:h.default,MethodCall:d.default};for(var m in g.default)g.default.hasOwnProperty(m)&&(b[m]=g.default[m]);t.exports=b},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function o(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function i(t,e){var n=4,r=15;if(void 0===e&&(e=0),e+=1,null===t)return"null";if(void 0===t)return"void";if("string"==typeof t||"number"==typeof t||"boolean"==typeof t)return"undefined"==typeof t?"undefined":u(t);if(!Array.isArray(t)){var o=Object.keys(t);if(!o.length)return t.constructor&&t.constructor.name&&"Object"!==t.constructor.name?t.constructor.name:"Object";if(e>n)return"{...}";var a="  ".repeat(e-1),c=o.slice(0,r).map(function(n){return(/^([A-Z_$][A-Z0-9_$]*)$/i.test(n)?n:JSON.stringify(n))+": "+i(t[n],e)+";"}).join("\n  "+a);return o.length>=r&&(c+="\n  "+a+"..."),t.constructor&&t.constructor.name&&"Object"!==t.constructor.name?t.constructor.name+" {\n  "+a+c+"\n"+a+"}":"{\n  "+a+c+"\n"+a+"}"}if(!(t.length>0))return"Array";var f=function(){if(e>n)return{v:"[...]"};var o=i(t[0],e);return t.every(function(t){return i(t,e)===o})?{v:o.trim()+"[]"}:{v:"["+t.slice(0,r).map(function(t){return i(t,e)}).join(", ")+(t.length>=r?", ...":"")+"]"}}();return"object"===("undefined"==typeof f?"undefined":u(f))?f.v:void 0}Object.defineProperty(e,"__esModule",{value:!0});var u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},a=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),c=n(2),f=r(c),s=n(7),l=r(s),p=n(8),h=r(p),y=n(5),d=r(y),v=n(6),g=r(v),b=n(3),m=r(b),w=n(9),_=n(4),E=_.InjectableArguments,j=function(){function t(t){return"string"==typeof t||"number"==typeof t||"boolean"==typeof t||null==t}return Object.defineProperty(t,Symbol.hasInstance,{value:function(e){return t(e)}}),t}(),O=function(){function t(t){return null!=t&&t.obj instanceof Object&&Array.isArray(t.arr)&&t.arr.every(function(t){return"string"==typeof t})}return Object.defineProperty(t,Symbol.hasInstance,{value:function(e){return t(e)}}),t}(),S=function(){function t(t){return"function"==typeof t}return Object.defineProperty(t,Symbol.hasInstance,{value:function(e){return t(e)}}),t}(),A=function(){function t(){o(this,t),this._servicesByIdentifier={},this._serviceDefinitionsByIdentifier={},this._parametersByIdentifier={},this._serviceDefinitionsAlreadyUsedToInstantiateByIdentifier={},this._classConstructorLocators=[],this._instanceLocators=[]}return a(t,[{key:"get",value:function(){function t(t){if(!(t instanceof Promise))throw new TypeError("Function return value violates contract.\n\nExpected:\nPromise<Array<Object | Function>>\n\nGot:\n"+i(t));return t}for(var e=this,n=arguments.length,r=Array(n),o=0;o<n;o++)r[o]=arguments[o];if(!Array.isArray(r)||!r.every(function(t){return"string"==typeof t}))throw new TypeError('Value of argument "identifiers" violates contract.\n\nExpected:\nArray<string>\n\nGot:\n'+i(r));var u=[];return r.forEach(function(t){u.push(e._doGetService(t,{obj:{},arr:[]}).catch(function(e){throw w.GetServiceError.createError(t,e)}))}),t(Promise.all(u))}},{key:"set",value:function(e,n){function r(e){if(!(e instanceof t))throw new TypeError("Function return value violates contract.\n\nExpected:\nContainer\n\nGot:\n"+i(e));return e}if("string"!=typeof e)throw new TypeError('Value of argument "identifier" violates contract.\n\nExpected:\nstring\n\nGot:\n'+i(e));if(!(n instanceof Object||"function"==typeof n))throw new TypeError('Value of argument "instance" violates contract.\n\nExpected:\nObject | Function\n\nGot:\n'+i(n));return this._servicesByIdentifier[e]=n,r(this)}},{key:"has",value:function(t){function e(t){if("boolean"!=typeof t)throw new TypeError("Function return value violates contract.\n\nExpected:\nboolean\n\nGot:\n"+i(t));return t}if("string"!=typeof t)throw new TypeError('Value of argument "identifier" violates contract.\n\nExpected:\nstring\n\nGot:\n'+i(t));return e(this.hasDefinition(t)||this.hasInstance(t))}},{key:"hasDefinition",value:function(t){function e(t){if("boolean"!=typeof t)throw new TypeError("Function return value violates contract.\n\nExpected:\nboolean\n\nGot:\n"+i(t));return t}if("string"!=typeof t)throw new TypeError('Value of argument "identifier" violates contract.\n\nExpected:\nstring\n\nGot:\n'+i(t));return e(void 0!==this._serviceDefinitionsByIdentifier[t])}},{key:"hasInstance",value:function(t){function e(t){if("boolean"!=typeof t)throw new TypeError("Function return value violates contract.\n\nExpected:\nboolean\n\nGot:\n"+i(t));return t}if("string"!=typeof t)throw new TypeError('Value of argument "identifier" violates contract.\n\nExpected:\nstring\n\nGot:\n'+i(t));return e(void 0!==this._servicesByIdentifier[t])}},{key:"getDefinition",value:function(t){function e(t){if(!(t instanceof f.default))throw new TypeError("Function return value violates contract.\n\nExpected:\nDefinition\n\nGot:\n"+i(t));return t}if("string"!=typeof t)throw new TypeError('Value of argument "identifier" violates contract.\n\nExpected:\nstring\n\nGot:\n'+i(t));var n=this._serviceDefinitionsByIdentifier[t];if(void 0===n)throw w.UndefinedServiceDefinitionError.createError(t);return e(n)}},{key:"setDefinition",value:function(e,n){function r(e){if(!(e instanceof t))throw new TypeError("Function return value violates contract.\n\nExpected:\nContainer\n\nGot:\n"+i(e));return e}if("string"!=typeof e)throw new TypeError('Value of argument "identifier" violates contract.\n\nExpected:\nstring\n\nGot:\n'+i(e));if(!(n instanceof f.default))throw new TypeError('Value of argument "definition" violates contract.\n\nExpected:\nDefinition\n\nGot:\n'+i(n));if(this._serviceDefinitionsAlreadyUsedToInstantiateByIdentifier[e])throw w.ServiceDefinitionAlreadyUsedError.createError(e);return this._serviceDefinitionsAlreadyUsedToInstantiateByIdentifier[e]=!1,this._serviceDefinitionsByIdentifier[e]=n,r(this)}},{key:"getParameter",value:function(t){function e(t){if(!j(t))throw new TypeError("Function return value violates contract.\n\nExpected:\nscalar\n\nGot:\n"+i(t));return t}if("string"!=typeof t)throw new TypeError('Value of argument "identifier" violates contract.\n\nExpected:\nstring\n\nGot:\n'+i(t));if(void 0===this._parametersByIdentifier[t])throw w.UndefinedParameterError.createError(t);return e(this._parametersByIdentifier[t])}},{key:"setParameter",value:function(e,n){function r(e){if(!(e instanceof t))throw new TypeError("Function return value violates contract.\n\nExpected:\nContainer\n\nGot:\n"+i(e));return e}if("string"!=typeof e)throw new TypeError('Value of argument "identifier" violates contract.\n\nExpected:\nstring\n\nGot:\n'+i(e));if(!j(n))throw new TypeError('Value of argument "value" violates contract.\n\nExpected:\nscalar\n\nGot:\n'+i(n));return this._parametersByIdentifier[e]=n,r(this)}},{key:"hasParameter",value:function(t){function e(t){if("boolean"!=typeof t)throw new TypeError("Function return value violates contract.\n\nExpected:\nboolean\n\nGot:\n"+i(t));return t}if("string"!=typeof t)throw new TypeError('Value of argument "identifier" violates contract.\n\nExpected:\nstring\n\nGot:\n'+i(t));return e(void 0!==this._parametersByIdentifier[t])}},{key:"registerClassConstructorLocator",value:function(e){function n(e){if(!(e instanceof t))throw new TypeError("Function return value violates contract.\n\nExpected:\nContainer\n\nGot:\n"+i(e));return e}if(!S(e))throw new TypeError('Value of argument "locator" violates contract.\n\nExpected:\nLocatorCallback\n\nGot:\n'+i(e));return this._classConstructorLocators.push(e),n(this)}},{key:"registerInstanceLocator",value:function(e){function n(e){if(!(e instanceof t))throw new TypeError("Function return value violates contract.\n\nExpected:\nContainer\n\nGot:\n"+i(e));return e}if(!S(e))throw new TypeError('Value of argument "locator" violates contract.\n\nExpected:\nLocatorCallback\n\nGot:\n'+i(e));return this._instanceLocators.push(e),n(this)}},{key:"_instantiate",value:function(t,e,n){function r(t){if(!(t instanceof Promise))throw new TypeError("Function return value violates contract.\n\nExpected:\nPromise<Object>\n\nGot:\n"+i(t));return t}var o=this;if("string"!=typeof t)throw new TypeError('Value of argument "identifier" violates contract.\n\nExpected:\nstring\n\nGot:\n'+i(t));if(!(e instanceof f.default))throw new TypeError('Value of argument "definition" violates contract.\n\nExpected:\nDefinition\n\nGot:\n'+i(e));if(!O(n))throw new TypeError('Value of argument "loading" violates contract.\n\nExpected:\nLoadingObject\n\nGot:\n'+i(n));return r(this._resolveArgs(e.args,n).then(function(r){function u(t){if(!(t instanceof Promise))throw new TypeError("Function return value violates contract.\n\nExpected:\nPromise\n\nGot:\n"+i(t));return t}if(!Array.isArray(r))throw new TypeError('Value of argument "args" violates contract.\n\nExpected:\nArray\n\nGot:\n'+i(r));var a=void 0;if(e instanceof l.default){var c=o._locateServiceClassConstructor(e.classConstructorIdentifier);a=new(Function.prototype.bind.apply(c,[void 0].concat(r)))}else if(e instanceof h.default&&(a=e.factory.apply(void 0,r),void 0===a))return u(Promise.reject(w.FactoryMethodReturnsNothingError.createError(t)));return new Promise(function(t,r){function u(t){function n(t){if(!(t instanceof m.default))throw new TypeError('Function "getMethodCall" return value violates contract.\n\nExpected:\nMethodCall\n\nGot:\n'+i(t));return t}return n(e.methodCalls[t])}var c=[],f=void 0,s=void 0,l=function(t){if("function"!=typeof t)throw new TypeError('Value of argument "methodToCall" violates contract.\n\nExpected:\nFunction\n\nGot:\n'+i(t));c.push(o._resolveArgs(s.args,n).then(function(e){function n(t){if(!(null==t||t instanceof Promise))throw new TypeError("Function return value violates contract.\n\nExpected:\n?Promise | mixed\n\nGot:\n"+i(t));return t}if(!Array.isArray(e))throw new TypeError('Value of argument "args" violates contract.\n\nExpected:\nArray\n\nGot:\n'+i(e));return n(t.apply(a,e))}))};for(f in e.methodCalls)if(e.methodCalls.hasOwnProperty(f)){s=u(f);var p=s.name,h=a[p];if(void 0===h)return r(w.MethodDoesNotExistError.createError(p));l(h)}return t(Promise.all(c).then(function(){function t(t){if(!(t instanceof Object))throw new TypeError("Function return value violates contract.\n\nExpected:\nObject\n\nGot:\n"+i(t));return t}return t(a)}))})}))}},{key:"_locateServiceClassConstructor",value:function(t){function e(t){if("function"!=typeof t)throw new TypeError("Function return value violates contract.\n\nExpected:\nFunction\n\nGot:\n"+i(t));return t}if("string"!=typeof t)throw new TypeError('Value of argument "identifier" violates contract.\n\nExpected:\nstring\n\nGot:\n'+i(t));var n=void 0,r=void 0;for(n in this._classConstructorLocators)if(this._classConstructorLocators.hasOwnProperty(n)&&(r=this._classConstructorLocators[n](t),void 0!==r))return e(r);throw w.CannotLocateServiceClassConstructorError.createError(t)}},{key:"_locateInstance",value:function(t){function e(t){if(!(t instanceof Object||null==t))throw new TypeError("Function return value violates contract.\n\nExpected:\nObject | void\n\nGot:\n"+i(t));return t}if("string"!=typeof t)throw new TypeError('Value of argument "identifier" violates contract.\n\nExpected:\nstring\n\nGot:\n'+i(t));var n=void 0,r=void 0;for(n in this._instanceLocators)if(this._instanceLocators.hasOwnProperty(n)&&(r=this._instanceLocators[n](t),void 0!==r))return e(r)}},{key:"_resolveArgs",value:function(e,n){var r=this;if(!E(e))throw new TypeError('Value of argument "args" violates contract.\n\nExpected:\nInjectableArguments\n\nGot:\n'+i(e));if(!O(n))throw new TypeError('Value of argument "loading" violates contract.\n\nExpected:\nLoadingObject\n\nGot:\n'+i(n));var o=[];return new Promise(function(i,u){var a=void 0,c=void 0;for(a in e)if(e.hasOwnProperty(a))if(c=e[a],c instanceof d.default){var f=c.id;o.push(r._doGetService(f,t._deepCopyLoading(n)))}else{if(!(c instanceof g.default))return u(w.UnsupportedArgumentTypeError.createError(c));o.push(r.getParameter(c.id))}return i(Promise.all(o))})}},{key:"_doGetService",value:function(t,e){function n(t){if(!(t instanceof Promise))throw new TypeError("Function return value violates contract.\n\nExpected:\nPromise\n\nGot:\n"+i(t));return t}if("string"!=typeof t)throw new TypeError('Value of argument "identifier" violates contract.\n\nExpected:\nstring\n\nGot:\n'+i(t));if(!O(e))throw new TypeError('Value of argument "loading" violates contract.\n\nExpected:\nLoadingObject\n\nGot:\n'+i(e));if(void 0!==e.obj[t]){var r=[].concat(e.arr).concat([t]);return n(Promise.reject(w.CircularDependencyError.createError(r)))}if(!this.hasInstance(t)){if(!this.hasDefinition(t)){var o=this._locateInstance(t);return n(void 0!==o?Promise.resolve(o).then(function(e){return void 0===e?Promise.reject(w.UndefinedServiceDefinitionAndInstanceError.createError(t)):Promise.resolve(e)}):Promise.reject(w.UndefinedServiceDefinitionAndInstanceError.createError(t)))}e.obj[t]=!0,e.arr.push(t);try{var u=this._instantiate(t,this.getDefinition(t),e);this._serviceDefinitionsAlreadyUsedToInstantiateByIdentifier[t]=!0,this._servicesByIdentifier[t]=u}catch(t){return n(Promise.reject(t))}}return n(Promise.resolve(this._servicesByIdentifier[t]))}}],[{key:"_deepCopyLoading",value:function(t){if(!(t instanceof Object))throw new TypeError('Value of argument "loading" violates contract.\n\nExpected:\nObject\n\nGot:\n'+i(t));var e={obj:{},arr:[].concat(t.arr)};for(var n in t.obj)t.obj.hasOwnProperty(n)&&(e.obj[n]=t.obj[n]);return e}}]),t}();e.default=A},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function o(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function i(t,e){var n=4,r=15;if(void 0===e&&(e=0),e+=1,null===t)return"null";if(void 0===t)return"void";if("string"==typeof t||"number"==typeof t||"boolean"==typeof t)return"undefined"==typeof t?"undefined":u(t);if(!Array.isArray(t)){var o=Object.keys(t);if(!o.length)return t.constructor&&t.constructor.name&&"Object"!==t.constructor.name?t.constructor.name:"Object";if(e>n)return"{...}";var a="  ".repeat(e-1),c=o.slice(0,r).map(function(n){return(/^([A-Z_$][A-Z0-9_$]*)$/i.test(n)?n:JSON.stringify(n))+": "+i(t[n],e)+";"}).join("\n  "+a);return o.length>=r&&(c+="\n  "+a+"..."),t.constructor&&t.constructor.name&&"Object"!==t.constructor.name?t.constructor.name+" {\n  "+a+c+"\n"+a+"}":"{\n  "+a+c+"\n"+a+"}"}if(!(t.length>0))return"Array";var f=function(){if(e>n)return{v:"[...]"};var o=i(t[0],e);return t.every(function(t){return i(t,e)===o})?{v:o.trim()+"[]"}:{v:"["+t.slice(0,r).map(function(t){return i(t,e)}).join(", ")+(t.length>=r?", ...":"")+"]"}}();return"object"===("undefined"==typeof f?"undefined":u(f))?f.v:void 0}Object.defineProperty(e,"__esModule",{value:!0});var u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},a=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),c=n(3),f=r(c),s=n(4),l=s.InjectableArguments,p=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];if(o(this,t),null!=e&&!l(e))throw new TypeError('Value of argument "args" violates contract.\n\nExpected:\n?InjectableArguments\n\nGot:\n'+i(e));this._methodCalls=[],this._args=e}return a(t,[{key:"methodCalls",set:function(t){if(!Array.isArray(t)||!t.every(function(t){return t instanceof f.default}))throw new TypeError('Value of argument "methodCalls" violates contract.\n\nExpected:\nArray<MethodCall>\n\nGot:\n'+i(t));this._methodCalls=t},get:function(){function t(t){if(!Array.isArray(t)||!t.every(function(t){return t instanceof f.default}))throw new TypeError("Function return value violates contract.\n\nExpected:\nArray<MethodCall>\n\nGot:\n"+i(t));return t}return t(this._methodCalls)}},{key:"args",get:function(){function t(t){if(!l(t))throw new TypeError("Function return value violates contract.\n\nExpected:\nInjectableArguments\n\nGot:\n"+i(t));return t}return t(this._args)}}]),t}();e.default=p},function(t,e,n){"use strict";function r(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function o(t,e){var n=4,r=15;if(void 0===e&&(e=0),e+=1,null===t)return"null";if(void 0===t)return"void";if("string"==typeof t||"number"==typeof t||"boolean"==typeof t)return"undefined"==typeof t?"undefined":i(t);if(!Array.isArray(t)){var u=Object.keys(t);if(!u.length)return t.constructor&&t.constructor.name&&"Object"!==t.constructor.name?t.constructor.name:"Object";if(e>n)return"{...}";var a="  ".repeat(e-1),c=u.slice(0,r).map(function(n){return(/^([A-Z_$][A-Z0-9_$]*)$/i.test(n)?n:JSON.stringify(n))+": "+o(t[n],e)+";"}).join("\n  "+a);return u.length>=r&&(c+="\n  "+a+"..."),t.constructor&&t.constructor.name&&"Object"!==t.constructor.name?t.constructor.name+" {\n  "+a+c+"\n"+a+"}":"{\n  "+a+c+"\n"+a+"}"}if(!(t.length>0))return"Array";var f=function(){if(e>n)return{v:"[...]"};var i=o(t[0],e);return t.every(function(t){return o(t,e)===i})?{v:i.trim()+"[]"}:{v:"["+t.slice(0,r).map(function(t){return o(t,e)}).join(", ")+(t.length>=r?", ...":"")+"]"}}();return"object"===("undefined"==typeof f?"undefined":i(f))?f.v:void 0}Object.defineProperty(e,"__esModule",{value:!0});var i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},u=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),a=n(4),c=a.InjectableArguments,f=function(){function t(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];if(r(this,t),"string"!=typeof e)throw new TypeError('Value of argument "name" violates contract.\n\nExpected:\nstring\n\nGot:\n'+o(e));if(null!=n&&!c(n))throw new TypeError('Value of argument "args" violates contract.\n\nExpected:\n?InjectableArguments\n\nGot:\n'+o(n));this._name=e,this._args=n}return u(t,[{key:"name",get:function(){function t(t){if("string"!=typeof t)throw new TypeError("Function return value violates contract.\n\nExpected:\nstring\n\nGot:\n"+o(t));return t}return t(this._name)}},{key:"args",get:function(){function t(t){if(!c(t))throw new TypeError("Function return value violates contract.\n\nExpected:\nInjectableArguments\n\nGot:\n"+o(t));return t}return t(this._args)}}]),t}();e.default=f},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}Object.defineProperty(e,"__esModule",{value:!0}),e.InjectableArguments=void 0;var o=n(5),i=r(o),u=n(6),a=r(u);e.InjectableArguments=function(){function t(t){return Array.isArray(t)&&t.every(function(t){return t instanceof i.default||t instanceof a.default})}return Object.defineProperty(t,Symbol.hasInstance,{value:function(e){return t(e)}}),t}()},function(t,e){"use strict";function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function r(t,e){var n=4,i=15;if(void 0===e&&(e=0),e+=1,null===t)return"null";if(void 0===t)return"void";if("string"==typeof t||"number"==typeof t||"boolean"==typeof t)return"undefined"==typeof t?"undefined":o(t);if(!Array.isArray(t)){var u=Object.keys(t);if(!u.length)return t.constructor&&t.constructor.name&&"Object"!==t.constructor.name?t.constructor.name:"Object";if(e>n)return"{...}";var a="  ".repeat(e-1),c=u.slice(0,i).map(function(n){return(/^([A-Z_$][A-Z0-9_$]*)$/i.test(n)?n:JSON.stringify(n))+": "+r(t[n],e)+";"}).join("\n  "+a);return u.length>=i&&(c+="\n  "+a+"..."),t.constructor&&t.constructor.name&&"Object"!==t.constructor.name?t.constructor.name+" {\n  "+a+c+"\n"+a+"}":"{\n  "+a+c+"\n"+a+"}"}if(!(t.length>0))return"Array";var f=function(){if(e>n)return{v:"[...]"};var o=r(t[0],e);return t.every(function(t){return r(t,e)===o})?{v:o.trim()+"[]"}:{v:"["+t.slice(0,i).map(function(t){return r(t,e)}).join(", ")+(t.length>=i?", ...":"")+"]"}}();return"object"===("undefined"==typeof f?"undefined":o(f))?f.v:void 0}Object.defineProperty(e,"__esModule",{value:!0});var o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},i=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),u=function(){function t(e){if(n(this,t),"string"!=typeof e)throw new TypeError('Value of argument "id" violates contract.\n\nExpected:\nstring\n\nGot:\n'+r(e));this._id=e}return i(t,[{key:"id",get:function(){function t(t){if("string"!=typeof t)throw new TypeError("Function return value violates contract.\n\nExpected:\nstring\n\nGot:\n"+r(t));return t}return t(this._id)}}]),t}();e.default=u},function(t,e){"use strict";function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function r(t,e){var n=4,i=15;if(void 0===e&&(e=0),e+=1,null===t)return"null";if(void 0===t)return"void";if("string"==typeof t||"number"==typeof t||"boolean"==typeof t)return"undefined"==typeof t?"undefined":o(t);if(!Array.isArray(t)){var u=Object.keys(t);if(!u.length)return t.constructor&&t.constructor.name&&"Object"!==t.constructor.name?t.constructor.name:"Object";if(e>n)return"{...}";var a="  ".repeat(e-1),c=u.slice(0,i).map(function(n){return(/^([A-Z_$][A-Z0-9_$]*)$/i.test(n)?n:JSON.stringify(n))+": "+r(t[n],e)+";"}).join("\n  "+a);return u.length>=i&&(c+="\n  "+a+"..."),t.constructor&&t.constructor.name&&"Object"!==t.constructor.name?t.constructor.name+" {\n  "+a+c+"\n"+a+"}":"{\n  "+a+c+"\n"+a+"}"}if(!(t.length>0))return"Array";var f=function(){if(e>n)return{v:"[...]"};var o=r(t[0],e);return t.every(function(t){return r(t,e)===o})?{v:o.trim()+"[]"}:{v:"["+t.slice(0,i).map(function(t){return r(t,e)}).join(", ")+(t.length>=i?", ...":"")+"]"}}();return"object"===("undefined"==typeof f?"undefined":o(f))?f.v:void 0}Object.defineProperty(e,"__esModule",{value:!0});var o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},i=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),u=function(){function t(e){if(n(this,t),"string"!=typeof e)throw new TypeError('Value of argument "id" violates contract.\n\nExpected:\nstring\n\nGot:\n'+r(e));this._id=e}return i(t,[{key:"id",get:function(){function t(t){if("string"!=typeof t)throw new TypeError("Function return value violates contract.\n\nExpected:\nstring\n\nGot:\n"+r(t));return t}return t(this._id)}}]),t}();e.default=u},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function o(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function i(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function u(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}function a(t,e){var n=4,r=15;if(void 0===e&&(e=0),e+=1,null===t)return"null";if(void 0===t)return"void";if("string"==typeof t||"number"==typeof t||"boolean"==typeof t)return"undefined"==typeof t?"undefined":c(t);if(!Array.isArray(t)){var o=Object.keys(t);if(!o.length)return t.constructor&&t.constructor.name&&"Object"!==t.constructor.name?t.constructor.name:"Object";if(e>n)return"{...}";var i="  ".repeat(e-1),u=o.slice(0,r).map(function(n){return(/^([A-Z_$][A-Z0-9_$]*)$/i.test(n)?n:JSON.stringify(n))+": "+a(t[n],e)+";"}).join("\n  "+i);return o.length>=r&&(u+="\n  "+i+"..."),t.constructor&&t.constructor.name&&"Object"!==t.constructor.name?t.constructor.name+" {\n  "+i+u+"\n"+i+"}":"{\n  "+i+u+"\n"+i+"}"}if(!(t.length>0))return"Array";var f=function(){if(e>n)return{v:"[...]"};var o=a(t[0],e);return t.every(function(t){return a(t,e)===o})?{v:o.trim()+"[]"}:{v:"["+t.slice(0,r).map(function(t){return a(t,e)}).join(", ")+(t.length>=r?", ...":"")+"]"}}();return"object"===("undefined"==typeof f?"undefined":c(f))?f.v:void 0}Object.defineProperty(e,"__esModule",{value:!0});var c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},f=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),s=n(2),l=r(s),p=n(4),h=p.InjectableArguments,y=function(t){function e(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];if(o(this,e),"string"!=typeof t)throw new TypeError('Value of argument "classConstructorIdentifier" violates contract.\n\nExpected:\nstring\n\nGot:\n'+a(t));if(null!=n&&!h(n))throw new TypeError('Value of argument "args" violates contract.\n\nExpected:\n?InjectableArguments\n\nGot:\n'+a(n));var r=i(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,n));return r._classConstructorIdentifier=t,r}return u(e,t),f(e,[{key:"classConstructorIdentifier",get:function(){function t(t){if("string"!=typeof t)throw new TypeError("Function return value violates contract.\n\nExpected:\nstring\n\nGot:\n"+a(t));return t}return t(this._classConstructorIdentifier)}}]),e}(l.default);e.default=y},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function o(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function i(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function u(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}function a(t,e){var n=4,r=15;if(void 0===e&&(e=0),e+=1,null===t)return"null";if(void 0===t)return"void";if("string"==typeof t||"number"==typeof t||"boolean"==typeof t)return"undefined"==typeof t?"undefined":c(t);if(!Array.isArray(t)){var o=Object.keys(t);if(!o.length)return t.constructor&&t.constructor.name&&"Object"!==t.constructor.name?t.constructor.name:"Object";if(e>n)return"{...}";var i="  ".repeat(e-1),u=o.slice(0,r).map(function(n){return(/^([A-Z_$][A-Z0-9_$]*)$/i.test(n)?n:JSON.stringify(n))+": "+a(t[n],e)+";"}).join("\n  "+i);return o.length>=r&&(u+="\n  "+i+"..."),t.constructor&&t.constructor.name&&"Object"!==t.constructor.name?t.constructor.name+" {\n  "+i+u+"\n"+i+"}":"{\n  "+i+u+"\n"+i+"}"}if(!(t.length>0))return"Array";var f=function(){if(e>n)return{v:"[...]"};var o=a(t[0],e);return t.every(function(t){return a(t,e)===o})?{v:o.trim()+"[]"}:{v:"["+t.slice(0,r).map(function(t){return a(t,e)}).join(", ")+(t.length>=r?", ...":"")+"]"}}();return"object"===("undefined"==typeof f?"undefined":c(f))?f.v:void 0}Object.defineProperty(e,"__esModule",{value:!0});var c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},f=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),s=n(2),l=r(s),p=n(4),h=p.InjectableArguments,y=function(t){function e(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];if(o(this,e),"function"!=typeof t)throw new TypeError('Value of argument "factory" violates contract.\n\nExpected:\nFunction\n\nGot:\n'+a(t));if(null!=n&&!h(n))throw new TypeError('Value of argument "args" violates contract.\n\nExpected:\n?InjectableArguments\n\nGot:\n'+a(n));var r=i(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,n));return r._factory=t,r}return u(e,t),f(e,[{key:"factory",get:function(){function t(t){if("function"!=typeof t)throw new TypeError("Function return value violates contract.\n\nExpected:\nFunction\n\nGot:\n"+a(t));return t}return t(this._factory)}}]),e}(l.default);e.default=y},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}var o=n(10),i=r(o),u=n(43),a=r(u),c=n(11),f=r(c),s=n(44),l=r(s),p=n(45),h=r(p),y=n(46),d=r(y),v=n(47),g=r(v),b=n(48),m=r(b),w=n(49),_=r(w),E=n(50),j=r(E),O=n(51),S=r(O);t.exports={CannotLocateServiceClassConstructorError:i.default,CircularDependencyError:a.default,DislError:f.default,FactoryMethodReturnsNothingError:l.default,MethodDoesNotExistError:h.default,ServiceDefinitionAlreadyUsedError:d.default,UndefinedParameterError:g.default,UndefinedServiceDefinitionAndInstanceError:m.default,UndefinedServiceDefinitionError:_.default,UnsupportedArgumentTypeError:j.default,GetServiceError:S.default}},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function o(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function i(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function u(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}function a(t,e){var n=4,r=15;if(void 0===e&&(e=0),e+=1,null===t)return"null";if(void 0===t)return"void";if("string"==typeof t||"number"==typeof t||"boolean"==typeof t)return"undefined"==typeof t?"undefined":c(t);if(!Array.isArray(t)){var o=Object.keys(t);if(!o.length)return t.constructor&&t.constructor.name&&"Object"!==t.constructor.name?t.constructor.name:"Object";
if(e>n)return"{...}";var i="  ".repeat(e-1),u=o.slice(0,r).map(function(n){return(/^([A-Z_$][A-Z0-9_$]*)$/i.test(n)?n:JSON.stringify(n))+": "+a(t[n],e)+";"}).join("\n  "+i);return o.length>=r&&(u+="\n  "+i+"..."),t.constructor&&t.constructor.name&&"Object"!==t.constructor.name?t.constructor.name+" {\n  "+i+u+"\n"+i+"}":"{\n  "+i+u+"\n"+i+"}"}if(!(t.length>0))return"Array";var f=function(){if(e>n)return{v:"[...]"};var o=a(t[0],e);return t.every(function(t){return a(t,e)===o})?{v:o.trim()+"[]"}:{v:"["+t.slice(0,r).map(function(t){return a(t,e)}).join(", ")+(t.length>=r?", ...":"")+"]"}}();return"object"===("undefined"==typeof f?"undefined":c(f))?f.v:void 0}Object.defineProperty(e,"__esModule",{value:!0});var c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},f=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),s=n(11),l=r(s),p=function(t){function e(){return o(this,e),i(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return u(e,t),f(e,null,[{key:"createError",value:function(t){if("string"!=typeof t)throw new TypeError('Value of argument "className" violates contract.\n\nExpected:\nstring\n\nGot:\n'+a(t));return new e({className:t},'Cannot locate service class constructor for class "%s"',t)}}]),e}(l.default);e.default=p},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function o(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function i(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function u(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}Object.defineProperty(e,"__esModule",{value:!0});var a=n(12),c=r(a),f=function(t){function e(){return o(this,e),i(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return u(e,t),e}(c.default);e.default=f},function(t,e,n){function r(t){var e,n,r,o,i;if(c.object(t,"args"),c.bool(t.strict,"args.strict"),c.array(t.argv,"args.argv"),e=t.argv,0===e.length)n={},r=[];else if(l(e[0]))n={cause:e[0]},r=e.slice(1);else if("object"==typeof e[0]){n={};for(i in e[0])n[i]=e[0][i];r=e.slice(1)}else c.string(e[0],"first argument to VError, SError, or WError constructor must be a string, object, or Error"),n={},r=e;return c.object(n),n.strict||t.strict||(r=r.map(function(t){return null===t?"null":void 0===t?"undefined":t})),o=0===r.length?"":p.apply(null,r),{options:n,shortmessage:o}}function o(){var t,e,n,i,u,a,f;if(t=Array.prototype.slice.call(arguments,0),!(this instanceof o))return e=Object.create(o.prototype),o.apply(e,arguments),e;if(n=r({argv:t,strict:!1}),n.options.name&&(c.string(n.options.name,'error\'s "name" must be a string'),this.name=n.options.name),this.jse_shortmsg=n.shortmessage,a=n.shortmessage,i=n.options.cause,i&&(c.ok(l(i),"cause is not an Error"),this.jse_cause=i,n.options.skipCauseMessage||(a+=": "+i.message)),this.jse_info={},n.options.info)for(f in n.options.info)this.jse_info[f]=n.options.info[f];return this.message=a,Error.call(this,a),Error.captureStackTrace&&(u=n.options.constructorOpt||this.constructor,Error.captureStackTrace(this,u)),this}function i(){var t,e,n,u;return t=Array.prototype.slice.call(arguments,0),this instanceof i?(n=r({argv:t,strict:!0}),u=n.options,o.call(this,u,"%s",n.shortmessage),this):(e=Object.create(i.prototype),i.apply(e,arguments),e)}function u(t){c.array(t,"list of errors"),c.ok(t.length>0,"must be at least one error"),this.ase_errors=t,o.call(this,{cause:t[0]},"first of %d error%s",t.length,1==t.length?"":"s")}function a(){var t,e,n,i;return t=Array.prototype.slice.call(arguments,0),this instanceof a?(n=r({argv:t,strict:!1}),i=n.options,i.skipCauseMessage=!0,o.call(this,i,"%s",n.shortmessage),this):(e=Object.create(a.prototype),a.apply(e,t),e)}var c=n(13),f=n(20),s=n(41),l=n(42).isError,p=s.sprintf;t.exports=o,o.VError=o,o.SError=i,o.WError=a,o.MultiError=u,f.inherits(o,Error),o.prototype.name="VError",o.prototype.toString=function(){var t=this.hasOwnProperty("name")&&this.name||this.constructor.name||this.constructor.prototype.name;return this.message&&(t+=": "+this.message),t},o.prototype.cause=function(){var t=o.cause(this);return null===t?void 0:t},o.cause=function(t){return c.ok(l(t),"err must be an Error"),l(t.jse_cause)?t.jse_cause:null},o.info=function(t){var e,n,r;if(c.ok(l(t),"err must be an Error"),n=o.cause(t),e=null!==n?o.info(n):{},"object"==typeof t.jse_info&&null!==t.jse_info)for(r in t.jse_info)e[r]=t.jse_info[r];return e},o.findCauseByName=function(t,e){var n;for(c.ok(l(t),"err must be an Error"),c.string(e),c.ok(e.length>0,"name cannot be empty"),n=t;null!==n;n=o.cause(n))if(c.ok(l(n)),n.name==e)return n;return null},o.fullStack=function(t){c.ok(l(t),"err must be an Error");var e=o.cause(t);return e?t.stack+"\ncaused by: "+o.fullStack(e):t.stack},f.inherits(i,o),f.inherits(u,o),u.prototype.name="MultiError",u.prototype.errors=function(){return this.ase_errors.slice(0)},f.inherits(a,o),a.prototype.name="WError",a.prototype.toString=function(){var t=this.hasOwnProperty("name")&&this.name||this.constructor.name||this.constructor.prototype.name;return this.message&&(t+=": "+this.message),this.jse_cause&&this.jse_cause.message&&(t+="; caused by "+this.jse_cause.toString()),t},a.prototype.cause=function(t){return l(t)&&(this.jse_cause=t),this.jse_cause}},function(t,e,n){(function(e,r){function o(t){return t.charAt(0).toUpperCase()+t.slice(1)}function i(t,e,n,r,o){throw new f.AssertionError({message:l.format("%s (%s) is required",t,e),actual:void 0===o?typeof r:o(r),expected:e,operator:n||"===",stackStartFunction:i.caller})}function u(t){return Object.prototype.toString.call(t).slice(8,-1)}function a(){}function c(t){var e,n=Object.keys(h);return e=r.env.NODE_NDEBUG?a:function(t,e){t||i(e,"true",t)},n.forEach(function(n){if(t)return void(e[n]=a);var r=h[n];e[n]=function(t,e){r.check(t)||i(e,n,r.operator,t,r.actual)}}),n.forEach(function(n){var r="optional"+o(n);if(t)return void(e[r]=a);var u=h[n];e[r]=function(t,e){void 0!==t&&null!==t&&(u.check(t)||i(e,n,u.operator,t,u.actual))}}),n.forEach(function(n){var r="arrayOf"+o(n);if(t)return void(e[r]=a);var u=h[n],c="["+n+"]";e[r]=function(t,e){Array.isArray(t)||i(e,c,u.operator,t,u.actual);var n;for(n=0;n<t.length;n++)u.check(t[n])||i(e,c,u.operator,t,u.actual)}}),n.forEach(function(n){var r="optionalArrayOf"+o(n);if(t)return void(e[r]=a);var u=h[n],c="["+n+"]";e[r]=function(t,e){if(void 0!==t&&null!==t){Array.isArray(t)||i(e,c,u.operator,t,u.actual);var n;for(n=0;n<t.length;n++)u.check(t[n])||i(e,c,u.operator,t,u.actual)}}}),Object.keys(f).forEach(function(n){return"AssertionError"===n?void(e[n]=f[n]):t?void(e[n]=a):void(e[n]=f[n])}),e._setExports=c,e}var f=n(19),s=n(23).Stream,l=n(20),p=/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/,h={bool:{check:function(t){return"boolean"==typeof t}},func:{check:function(t){return"function"==typeof t}},string:{check:function(t){return"string"==typeof t}},object:{check:function(t){return"object"==typeof t&&null!==t}},number:{check:function(t){return"number"==typeof t&&!isNaN(t)}},finite:{check:function(t){return"number"==typeof t&&!isNaN(t)&&isFinite(t)}},buffer:{check:function(t){return e.isBuffer(t)},operator:"Buffer.isBuffer"},array:{check:function(t){return Array.isArray(t)},operator:"Array.isArray"},stream:{check:function(t){return t instanceof s},operator:"instanceof",actual:u},date:{check:function(t){return t instanceof Date},operator:"instanceof",actual:u},regexp:{check:function(t){return t instanceof RegExp},operator:"instanceof",actual:u},uuid:{check:function(t){return"string"==typeof t&&p.test(t)},operator:"isUUID"}};t.exports=c(r.env.NODE_NDEBUG)}).call(e,n(14).Buffer,n(18))},function(t,e,n){(function(t,r){/*!
	 * The buffer module from node.js, for the browser.
	 *
	 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
	 * @license  MIT
	 */
"use strict";function o(){try{var t=new Uint8Array(1);return t.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===t.foo()&&"function"==typeof t.subarray&&0===t.subarray(1,1).byteLength}catch(t){return!1}}function i(){return t.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function u(e,n){if(i()<n)throw new RangeError("Invalid typed array length");return t.TYPED_ARRAY_SUPPORT?(e=new Uint8Array(n),e.__proto__=t.prototype):(null===e&&(e=new t(n)),e.length=n),e}function t(e,n,r){if(!(t.TYPED_ARRAY_SUPPORT||this instanceof t))return new t(e,n,r);if("number"==typeof e){if("string"==typeof n)throw new Error("If encoding is specified then the first argument must be a string");return s(this,e)}return a(this,e,n,r)}function a(t,e,n,r){if("number"==typeof e)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&e instanceof ArrayBuffer?h(t,e,n,r):"string"==typeof e?l(t,e,n):y(t,e)}function c(t){if("number"!=typeof t)throw new TypeError('"size" argument must be a number');if(t<0)throw new RangeError('"size" argument must not be negative')}function f(t,e,n,r){return c(e),e<=0?u(t,e):void 0!==n?"string"==typeof r?u(t,e).fill(n,r):u(t,e).fill(n):u(t,e)}function s(e,n){if(c(n),e=u(e,n<0?0:0|d(n)),!t.TYPED_ARRAY_SUPPORT)for(var r=0;r<n;++r)e[r]=0;return e}function l(e,n,r){if("string"==typeof r&&""!==r||(r="utf8"),!t.isEncoding(r))throw new TypeError('"encoding" must be a valid string encoding');var o=0|g(n,r);e=u(e,o);var i=e.write(n,r);return i!==o&&(e=e.slice(0,i)),e}function p(t,e){var n=e.length<0?0:0|d(e.length);t=u(t,n);for(var r=0;r<n;r+=1)t[r]=255&e[r];return t}function h(e,n,r,o){if(n.byteLength,r<0||n.byteLength<r)throw new RangeError("'offset' is out of bounds");if(n.byteLength<r+(o||0))throw new RangeError("'length' is out of bounds");return n=void 0===r&&void 0===o?new Uint8Array(n):void 0===o?new Uint8Array(n,r):new Uint8Array(n,r,o),t.TYPED_ARRAY_SUPPORT?(e=n,e.__proto__=t.prototype):e=p(e,n),e}function y(e,n){if(t.isBuffer(n)){var r=0|d(n.length);return e=u(e,r),0===e.length?e:(n.copy(e,0,0,r),e)}if(n){if("undefined"!=typeof ArrayBuffer&&n.buffer instanceof ArrayBuffer||"length"in n)return"number"!=typeof n.length||H(n.length)?u(e,0):p(e,n);if("Buffer"===n.type&&Q(n.data))return p(e,n.data)}throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}function d(t){if(t>=i())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+i().toString(16)+" bytes");return 0|t}function v(e){return+e!=e&&(e=0),t.alloc(+e)}function g(e,n){if(t.isBuffer(e))return e.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(e)||e instanceof ArrayBuffer))return e.byteLength;"string"!=typeof e&&(e=""+e);var r=e.length;if(0===r)return 0;for(var o=!1;;)switch(n){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":case void 0:return z(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return J(e).length;default:if(o)return z(e).length;n=(""+n).toLowerCase(),o=!0}}function b(t,e,n){var r=!1;if((void 0===e||e<0)&&(e=0),e>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if(n>>>=0,e>>>=0,n<=e)return"";for(t||(t="utf8");;)switch(t){case"hex":return C(this,e,n);case"utf8":case"utf-8":return k(this,e,n);case"ascii":return R(this,e,n);case"latin1":case"binary":return M(this,e,n);case"base64":return x(this,e,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return B(this,e,n);default:if(r)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),r=!0}}function m(t,e,n){var r=t[e];t[e]=t[n],t[n]=r}function w(e,n,r,o,i){if(0===e.length)return-1;if("string"==typeof r?(o=r,r=0):r>2147483647?r=2147483647:r<-2147483648&&(r=-2147483648),r=+r,isNaN(r)&&(r=i?0:e.length-1),r<0&&(r=e.length+r),r>=e.length){if(i)return-1;r=e.length-1}else if(r<0){if(!i)return-1;r=0}if("string"==typeof n&&(n=t.from(n,o)),t.isBuffer(n))return 0===n.length?-1:_(e,n,r,o,i);if("number"==typeof n)return n&=255,t.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?i?Uint8Array.prototype.indexOf.call(e,n,r):Uint8Array.prototype.lastIndexOf.call(e,n,r):_(e,[n],r,o,i);throw new TypeError("val must be string, number or Buffer")}function _(t,e,n,r,o){function i(t,e){return 1===u?t[e]:t.readUInt16BE(e*u)}var u=1,a=t.length,c=e.length;if(void 0!==r&&(r=String(r).toLowerCase(),"ucs2"===r||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(t.length<2||e.length<2)return-1;u=2,a/=2,c/=2,n/=2}var f;if(o){var s=-1;for(f=n;f<a;f++)if(i(t,f)===i(e,s===-1?0:f-s)){if(s===-1&&(s=f),f-s+1===c)return s*u}else s!==-1&&(f-=f-s),s=-1}else for(n+c>a&&(n=a-c),f=n;f>=0;f--){for(var l=!0,p=0;p<c;p++)if(i(t,f+p)!==i(e,p)){l=!1;break}if(l)return f}return-1}function E(t,e,n,r){n=Number(n)||0;var o=t.length-n;r?(r=Number(r),r>o&&(r=o)):r=o;var i=e.length;if(i%2!==0)throw new TypeError("Invalid hex string");r>i/2&&(r=i/2);for(var u=0;u<r;++u){var a=parseInt(e.substr(2*u,2),16);if(isNaN(a))return u;t[n+u]=a}return u}function j(t,e,n,r){return q(z(e,t.length-n),t,n,r)}function O(t,e,n,r){return q(Z(e),t,n,r)}function S(t,e,n,r){return O(t,e,n,r)}function A(t,e,n,r){return q(J(e),t,n,r)}function T(t,e,n,r){return q(W(e,t.length-n),t,n,r)}function x(t,e,n){return 0===e&&n===t.length?X.fromByteArray(t):X.fromByteArray(t.slice(e,n))}function k(t,e,n){n=Math.min(t.length,n);for(var r=[],o=e;o<n;){var i=t[o],u=null,a=i>239?4:i>223?3:i>191?2:1;if(o+a<=n){var c,f,s,l;switch(a){case 1:i<128&&(u=i);break;case 2:c=t[o+1],128===(192&c)&&(l=(31&i)<<6|63&c,l>127&&(u=l));break;case 3:c=t[o+1],f=t[o+2],128===(192&c)&&128===(192&f)&&(l=(15&i)<<12|(63&c)<<6|63&f,l>2047&&(l<55296||l>57343)&&(u=l));break;case 4:c=t[o+1],f=t[o+2],s=t[o+3],128===(192&c)&&128===(192&f)&&128===(192&s)&&(l=(15&i)<<18|(63&c)<<12|(63&f)<<6|63&s,l>65535&&l<1114112&&(u=l))}}null===u?(u=65533,a=1):u>65535&&(u-=65536,r.push(u>>>10&1023|55296),u=56320|1023&u),r.push(u),o+=a}return P(r)}function P(t){var e=t.length;if(e<=tt)return String.fromCharCode.apply(String,t);for(var n="",r=0;r<e;)n+=String.fromCharCode.apply(String,t.slice(r,r+=tt));return n}function R(t,e,n){var r="";n=Math.min(t.length,n);for(var o=e;o<n;++o)r+=String.fromCharCode(127&t[o]);return r}function M(t,e,n){var r="";n=Math.min(t.length,n);for(var o=e;o<n;++o)r+=String.fromCharCode(t[o]);return r}function C(t,e,n){var r=t.length;(!e||e<0)&&(e=0),(!n||n<0||n>r)&&(n=r);for(var o="",i=e;i<n;++i)o+=Y(t[i]);return o}function B(t,e,n){for(var r=t.slice(e,n),o="",i=0;i<r.length;i+=2)o+=String.fromCharCode(r[i]+256*r[i+1]);return o}function L(t,e,n){if(t%1!==0||t<0)throw new RangeError("offset is not uint");if(t+e>n)throw new RangeError("Trying to access beyond buffer length")}function I(e,n,r,o,i,u){if(!t.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(n>i||n<u)throw new RangeError('"value" argument is out of bounds');if(r+o>e.length)throw new RangeError("Index out of range")}function D(t,e,n,r){e<0&&(e=65535+e+1);for(var o=0,i=Math.min(t.length-n,2);o<i;++o)t[n+o]=(e&255<<8*(r?o:1-o))>>>8*(r?o:1-o)}function U(t,e,n,r){e<0&&(e=4294967295+e+1);for(var o=0,i=Math.min(t.length-n,4);o<i;++o)t[n+o]=e>>>8*(r?o:3-o)&255}function G(t,e,n,r,o,i){if(n+r>t.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function N(t,e,n,r,o){return o||G(t,e,n,4,3.4028234663852886e38,-3.4028234663852886e38),K.write(t,e,n,r,23,4),n+4}function F(t,e,n,r,o){return o||G(t,e,n,8,1.7976931348623157e308,-1.7976931348623157e308),K.write(t,e,n,r,52,8),n+8}function V(t){if(t=$(t).replace(et,""),t.length<2)return"";for(;t.length%4!==0;)t+="=";return t}function $(t){return t.trim?t.trim():t.replace(/^\s+|\s+$/g,"")}function Y(t){return t<16?"0"+t.toString(16):t.toString(16)}function z(t,e){e=e||1/0;for(var n,r=t.length,o=null,i=[],u=0;u<r;++u){if(n=t.charCodeAt(u),n>55295&&n<57344){if(!o){if(n>56319){(e-=3)>-1&&i.push(239,191,189);continue}if(u+1===r){(e-=3)>-1&&i.push(239,191,189);continue}o=n;continue}if(n<56320){(e-=3)>-1&&i.push(239,191,189),o=n;continue}n=(o-55296<<10|n-56320)+65536}else o&&(e-=3)>-1&&i.push(239,191,189);if(o=null,n<128){if((e-=1)<0)break;i.push(n)}else if(n<2048){if((e-=2)<0)break;i.push(n>>6|192,63&n|128)}else if(n<65536){if((e-=3)<0)break;i.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((e-=4)<0)break;i.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return i}function Z(t){for(var e=[],n=0;n<t.length;++n)e.push(255&t.charCodeAt(n));return e}function W(t,e){for(var n,r,o,i=[],u=0;u<t.length&&!((e-=2)<0);++u)n=t.charCodeAt(u),r=n>>8,o=n%256,i.push(o),i.push(r);return i}function J(t){return X.toByteArray(V(t))}function q(t,e,n,r){for(var o=0;o<r&&!(o+n>=e.length||o>=t.length);++o)e[o+n]=t[o];return o}function H(t){return t!==t}var X=n(15),K=n(16),Q=n(17);e.Buffer=t,e.SlowBuffer=v,e.INSPECT_MAX_BYTES=50,t.TYPED_ARRAY_SUPPORT=void 0!==r.TYPED_ARRAY_SUPPORT?r.TYPED_ARRAY_SUPPORT:o(),e.kMaxLength=i(),t.poolSize=8192,t._augment=function(e){return e.__proto__=t.prototype,e},t.from=function(t,e,n){return a(null,t,e,n)},t.TYPED_ARRAY_SUPPORT&&(t.prototype.__proto__=Uint8Array.prototype,t.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&t[Symbol.species]===t&&Object.defineProperty(t,Symbol.species,{value:null,configurable:!0})),t.alloc=function(t,e,n){return f(null,t,e,n)},t.allocUnsafe=function(t){return s(null,t)},t.allocUnsafeSlow=function(t){return s(null,t)},t.isBuffer=function(t){return!(null==t||!t._isBuffer)},t.compare=function(e,n){if(!t.isBuffer(e)||!t.isBuffer(n))throw new TypeError("Arguments must be Buffers");if(e===n)return 0;for(var r=e.length,o=n.length,i=0,u=Math.min(r,o);i<u;++i)if(e[i]!==n[i]){r=e[i],o=n[i];break}return r<o?-1:o<r?1:0},t.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},t.concat=function(e,n){if(!Q(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return t.alloc(0);var r;if(void 0===n)for(n=0,r=0;r<e.length;++r)n+=e[r].length;var o=t.allocUnsafe(n),i=0;for(r=0;r<e.length;++r){var u=e[r];if(!t.isBuffer(u))throw new TypeError('"list" argument must be an Array of Buffers');u.copy(o,i),i+=u.length}return o},t.byteLength=g,t.prototype._isBuffer=!0,t.prototype.swap16=function(){var t=this.length;if(t%2!==0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var e=0;e<t;e+=2)m(this,e,e+1);return this},t.prototype.swap32=function(){var t=this.length;if(t%4!==0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var e=0;e<t;e+=4)m(this,e,e+3),m(this,e+1,e+2);return this},t.prototype.swap64=function(){var t=this.length;if(t%8!==0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var e=0;e<t;e+=8)m(this,e,e+7),m(this,e+1,e+6),m(this,e+2,e+5),m(this,e+3,e+4);return this},t.prototype.toString=function(){var t=0|this.length;return 0===t?"":0===arguments.length?k(this,0,t):b.apply(this,arguments)},t.prototype.equals=function(e){if(!t.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===t.compare(this,e)},t.prototype.inspect=function(){var t="",n=e.INSPECT_MAX_BYTES;return this.length>0&&(t=this.toString("hex",0,n).match(/.{2}/g).join(" "),this.length>n&&(t+=" ... ")),"<Buffer "+t+">"},t.prototype.compare=function(e,n,r,o,i){if(!t.isBuffer(e))throw new TypeError("Argument must be a Buffer");if(void 0===n&&(n=0),void 0===r&&(r=e?e.length:0),void 0===o&&(o=0),void 0===i&&(i=this.length),n<0||r>e.length||o<0||i>this.length)throw new RangeError("out of range index");if(o>=i&&n>=r)return 0;if(o>=i)return-1;if(n>=r)return 1;if(n>>>=0,r>>>=0,o>>>=0,i>>>=0,this===e)return 0;for(var u=i-o,a=r-n,c=Math.min(u,a),f=this.slice(o,i),s=e.slice(n,r),l=0;l<c;++l)if(f[l]!==s[l]){u=f[l],a=s[l];break}return u<a?-1:a<u?1:0},t.prototype.includes=function(t,e,n){return this.indexOf(t,e,n)!==-1},t.prototype.indexOf=function(t,e,n){return w(this,t,e,n,!0)},t.prototype.lastIndexOf=function(t,e,n){return w(this,t,e,n,!1)},t.prototype.write=function(t,e,n,r){if(void 0===e)r="utf8",n=this.length,e=0;else if(void 0===n&&"string"==typeof e)r=e,n=this.length,e=0;else{if(!isFinite(e))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");e|=0,isFinite(n)?(n|=0,void 0===r&&(r="utf8")):(r=n,n=void 0)}var o=this.length-e;if((void 0===n||n>o)&&(n=o),t.length>0&&(n<0||e<0)||e>this.length)throw new RangeError("Attempt to write outside buffer bounds");r||(r="utf8");for(var i=!1;;)switch(r){case"hex":return E(this,t,e,n);case"utf8":case"utf-8":return j(this,t,e,n);case"ascii":return O(this,t,e,n);case"latin1":case"binary":return S(this,t,e,n);case"base64":return A(this,t,e,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return T(this,t,e,n);default:if(i)throw new TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),i=!0}},t.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var tt=4096;t.prototype.slice=function(e,n){var r=this.length;e=~~e,n=void 0===n?r:~~n,e<0?(e+=r,e<0&&(e=0)):e>r&&(e=r),n<0?(n+=r,n<0&&(n=0)):n>r&&(n=r),n<e&&(n=e);var o;if(t.TYPED_ARRAY_SUPPORT)o=this.subarray(e,n),o.__proto__=t.prototype;else{var i=n-e;o=new t(i,void 0);for(var u=0;u<i;++u)o[u]=this[u+e]}return o},t.prototype.readUIntLE=function(t,e,n){t|=0,e|=0,n||L(t,e,this.length);for(var r=this[t],o=1,i=0;++i<e&&(o*=256);)r+=this[t+i]*o;return r},t.prototype.readUIntBE=function(t,e,n){t|=0,e|=0,n||L(t,e,this.length);for(var r=this[t+--e],o=1;e>0&&(o*=256);)r+=this[t+--e]*o;return r},t.prototype.readUInt8=function(t,e){return e||L(t,1,this.length),this[t]},t.prototype.readUInt16LE=function(t,e){return e||L(t,2,this.length),this[t]|this[t+1]<<8},t.prototype.readUInt16BE=function(t,e){return e||L(t,2,this.length),this[t]<<8|this[t+1]},t.prototype.readUInt32LE=function(t,e){return e||L(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},t.prototype.readUInt32BE=function(t,e){return e||L(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},t.prototype.readIntLE=function(t,e,n){t|=0,e|=0,n||L(t,e,this.length);for(var r=this[t],o=1,i=0;++i<e&&(o*=256);)r+=this[t+i]*o;return o*=128,r>=o&&(r-=Math.pow(2,8*e)),r},t.prototype.readIntBE=function(t,e,n){t|=0,e|=0,n||L(t,e,this.length);for(var r=e,o=1,i=this[t+--r];r>0&&(o*=256);)i+=this[t+--r]*o;return o*=128,i>=o&&(i-=Math.pow(2,8*e)),i},t.prototype.readInt8=function(t,e){return e||L(t,1,this.length),128&this[t]?(255-this[t]+1)*-1:this[t]},t.prototype.readInt16LE=function(t,e){e||L(t,2,this.length);var n=this[t]|this[t+1]<<8;return 32768&n?4294901760|n:n},t.prototype.readInt16BE=function(t,e){e||L(t,2,this.length);var n=this[t+1]|this[t]<<8;return 32768&n?4294901760|n:n},t.prototype.readInt32LE=function(t,e){return e||L(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},t.prototype.readInt32BE=function(t,e){return e||L(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},t.prototype.readFloatLE=function(t,e){return e||L(t,4,this.length),K.read(this,t,!0,23,4)},t.prototype.readFloatBE=function(t,e){return e||L(t,4,this.length),K.read(this,t,!1,23,4)},t.prototype.readDoubleLE=function(t,e){return e||L(t,8,this.length),K.read(this,t,!0,52,8)},t.prototype.readDoubleBE=function(t,e){return e||L(t,8,this.length),K.read(this,t,!1,52,8)},t.prototype.writeUIntLE=function(t,e,n,r){if(t=+t,e|=0,n|=0,!r){var o=Math.pow(2,8*n)-1;I(this,t,e,n,o,0)}var i=1,u=0;for(this[e]=255&t;++u<n&&(i*=256);)this[e+u]=t/i&255;return e+n},t.prototype.writeUIntBE=function(t,e,n,r){if(t=+t,e|=0,n|=0,!r){var o=Math.pow(2,8*n)-1;I(this,t,e,n,o,0)}var i=n-1,u=1;for(this[e+i]=255&t;--i>=0&&(u*=256);)this[e+i]=t/u&255;return e+n},t.prototype.writeUInt8=function(e,n,r){return e=+e,n|=0,r||I(this,e,n,1,255,0),t.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),this[n]=255&e,n+1},t.prototype.writeUInt16LE=function(e,n,r){return e=+e,n|=0,r||I(this,e,n,2,65535,0),t.TYPED_ARRAY_SUPPORT?(this[n]=255&e,this[n+1]=e>>>8):D(this,e,n,!0),n+2},t.prototype.writeUInt16BE=function(e,n,r){return e=+e,n|=0,r||I(this,e,n,2,65535,0),t.TYPED_ARRAY_SUPPORT?(this[n]=e>>>8,this[n+1]=255&e):D(this,e,n,!1),n+2},t.prototype.writeUInt32LE=function(e,n,r){return e=+e,n|=0,r||I(this,e,n,4,4294967295,0),t.TYPED_ARRAY_SUPPORT?(this[n+3]=e>>>24,this[n+2]=e>>>16,this[n+1]=e>>>8,this[n]=255&e):U(this,e,n,!0),n+4},t.prototype.writeUInt32BE=function(e,n,r){return e=+e,n|=0,r||I(this,e,n,4,4294967295,0),t.TYPED_ARRAY_SUPPORT?(this[n]=e>>>24,this[n+1]=e>>>16,this[n+2]=e>>>8,this[n+3]=255&e):U(this,e,n,!1),n+4},t.prototype.writeIntLE=function(t,e,n,r){if(t=+t,e|=0,!r){var o=Math.pow(2,8*n-1);I(this,t,e,n,o-1,-o)}var i=0,u=1,a=0;for(this[e]=255&t;++i<n&&(u*=256);)t<0&&0===a&&0!==this[e+i-1]&&(a=1),this[e+i]=(t/u>>0)-a&255;return e+n},t.prototype.writeIntBE=function(t,e,n,r){if(t=+t,e|=0,!r){var o=Math.pow(2,8*n-1);I(this,t,e,n,o-1,-o)}var i=n-1,u=1,a=0;for(this[e+i]=255&t;--i>=0&&(u*=256);)t<0&&0===a&&0!==this[e+i+1]&&(a=1),this[e+i]=(t/u>>0)-a&255;return e+n},t.prototype.writeInt8=function(e,n,r){return e=+e,n|=0,r||I(this,e,n,1,127,-128),t.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),e<0&&(e=255+e+1),this[n]=255&e,n+1},t.prototype.writeInt16LE=function(e,n,r){return e=+e,n|=0,r||I(this,e,n,2,32767,-32768),t.TYPED_ARRAY_SUPPORT?(this[n]=255&e,this[n+1]=e>>>8):D(this,e,n,!0),n+2},t.prototype.writeInt16BE=function(e,n,r){return e=+e,n|=0,r||I(this,e,n,2,32767,-32768),t.TYPED_ARRAY_SUPPORT?(this[n]=e>>>8,this[n+1]=255&e):D(this,e,n,!1),n+2},t.prototype.writeInt32LE=function(e,n,r){return e=+e,n|=0,r||I(this,e,n,4,2147483647,-2147483648),t.TYPED_ARRAY_SUPPORT?(this[n]=255&e,this[n+1]=e>>>8,this[n+2]=e>>>16,this[n+3]=e>>>24):U(this,e,n,!0),n+4},t.prototype.writeInt32BE=function(e,n,r){return e=+e,n|=0,r||I(this,e,n,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),t.TYPED_ARRAY_SUPPORT?(this[n]=e>>>24,this[n+1]=e>>>16,this[n+2]=e>>>8,this[n+3]=255&e):U(this,e,n,!1),n+4},t.prototype.writeFloatLE=function(t,e,n){return N(this,t,e,!0,n)},t.prototype.writeFloatBE=function(t,e,n){return N(this,t,e,!1,n)},t.prototype.writeDoubleLE=function(t,e,n){return F(this,t,e,!0,n)},t.prototype.writeDoubleBE=function(t,e,n){return F(this,t,e,!1,n)},t.prototype.copy=function(e,n,r,o){if(r||(r=0),o||0===o||(o=this.length),n>=e.length&&(n=e.length),n||(n=0),o>0&&o<r&&(o=r),o===r)return 0;if(0===e.length||0===this.length)return 0;if(n<0)throw new RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw new RangeError("sourceStart out of bounds");if(o<0)throw new RangeError("sourceEnd out of bounds");o>this.length&&(o=this.length),e.length-n<o-r&&(o=e.length-n+r);var i,u=o-r;if(this===e&&r<n&&n<o)for(i=u-1;i>=0;--i)e[i+n]=this[i+r];else if(u<1e3||!t.TYPED_ARRAY_SUPPORT)for(i=0;i<u;++i)e[i+n]=this[i+r];else Uint8Array.prototype.set.call(e,this.subarray(r,r+u),n);return u},t.prototype.fill=function(e,n,r,o){if("string"==typeof e){if("string"==typeof n?(o=n,n=0,r=this.length):"string"==typeof r&&(o=r,r=this.length),1===e.length){var i=e.charCodeAt(0);i<256&&(e=i)}if(void 0!==o&&"string"!=typeof o)throw new TypeError("encoding must be a string");if("string"==typeof o&&!t.isEncoding(o))throw new TypeError("Unknown encoding: "+o)}else"number"==typeof e&&(e&=255);if(n<0||this.length<n||this.length<r)throw new RangeError("Out of range index");if(r<=n)return this;n>>>=0,r=void 0===r?this.length:r>>>0,e||(e=0);var u;if("number"==typeof e)for(u=n;u<r;++u)this[u]=e;else{var a=t.isBuffer(e)?e:z(new t(e,o).toString()),c=a.length;for(u=0;u<r-n;++u)this[u+n]=a[u%c]}return this};var et=/[^+\/0-9A-Za-z-_]/g}).call(e,n(14).Buffer,function(){return this}())},function(t,e){"use strict";function n(t){var e=t.length;if(e%4>0)throw new Error("Invalid string. Length must be a multiple of 4");return"="===t[e-2]?2:"="===t[e-1]?1:0}function r(t){return 3*t.length/4-n(t)}function o(t){var e,r,o,i,u,a,c=t.length;u=n(t),a=new s(3*c/4-u),o=u>0?c-4:c;var l=0;for(e=0,r=0;e<o;e+=4,r+=3)i=f[t.charCodeAt(e)]<<18|f[t.charCodeAt(e+1)]<<12|f[t.charCodeAt(e+2)]<<6|f[t.charCodeAt(e+3)],a[l++]=i>>16&255,a[l++]=i>>8&255,a[l++]=255&i;return 2===u?(i=f[t.charCodeAt(e)]<<2|f[t.charCodeAt(e+1)]>>4,a[l++]=255&i):1===u&&(i=f[t.charCodeAt(e)]<<10|f[t.charCodeAt(e+1)]<<4|f[t.charCodeAt(e+2)]>>2,a[l++]=i>>8&255,a[l++]=255&i),a}function i(t){return c[t>>18&63]+c[t>>12&63]+c[t>>6&63]+c[63&t]}function u(t,e,n){for(var r,o=[],u=e;u<n;u+=3)r=(t[u]<<16)+(t[u+1]<<8)+t[u+2],o.push(i(r));return o.join("")}function a(t){for(var e,n=t.length,r=n%3,o="",i=[],a=16383,f=0,s=n-r;f<s;f+=a)i.push(u(t,f,f+a>s?s:f+a));return 1===r?(e=t[n-1],o+=c[e>>2],o+=c[e<<4&63],o+="=="):2===r&&(e=(t[n-2]<<8)+t[n-1],o+=c[e>>10],o+=c[e>>4&63],o+=c[e<<2&63],o+="="),i.push(o),i.join("")}e.byteLength=r,e.toByteArray=o,e.fromByteArray=a;for(var c=[],f=[],s="undefined"!=typeof Uint8Array?Uint8Array:Array,l="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",p=0,h=l.length;p<h;++p)c[p]=l[p],f[l.charCodeAt(p)]=p;f["-".charCodeAt(0)]=62,f["_".charCodeAt(0)]=63},function(t,e){e.read=function(t,e,n,r,o){var i,u,a=8*o-r-1,c=(1<<a)-1,f=c>>1,s=-7,l=n?o-1:0,p=n?-1:1,h=t[e+l];for(l+=p,i=h&(1<<-s)-1,h>>=-s,s+=a;s>0;i=256*i+t[e+l],l+=p,s-=8);for(u=i&(1<<-s)-1,i>>=-s,s+=r;s>0;u=256*u+t[e+l],l+=p,s-=8);if(0===i)i=1-f;else{if(i===c)return u?NaN:(h?-1:1)*(1/0);u+=Math.pow(2,r),i-=f}return(h?-1:1)*u*Math.pow(2,i-r)},e.write=function(t,e,n,r,o,i){var u,a,c,f=8*i-o-1,s=(1<<f)-1,l=s>>1,p=23===o?Math.pow(2,-24)-Math.pow(2,-77):0,h=r?0:i-1,y=r?1:-1,d=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(a=isNaN(e)?1:0,u=s):(u=Math.floor(Math.log(e)/Math.LN2),e*(c=Math.pow(2,-u))<1&&(u--,c*=2),e+=u+l>=1?p/c:p*Math.pow(2,1-l),e*c>=2&&(u++,c/=2),u+l>=s?(a=0,u=s):u+l>=1?(a=(e*c-1)*Math.pow(2,o),u+=l):(a=e*Math.pow(2,l-1)*Math.pow(2,o),u=0));o>=8;t[n+h]=255&a,h+=y,a/=256,o-=8);for(u=u<<o|a,f+=o;f>0;t[n+h]=255&u,h+=y,u/=256,f-=8);t[n+h-y]|=128*d}},function(t,e){var n={}.toString;t.exports=Array.isArray||function(t){return"[object Array]"==n.call(t)}},function(t,e){function n(){throw new Error("setTimeout has not been defined")}function r(){throw new Error("clearTimeout has not been defined")}function o(t){if(s===setTimeout)return setTimeout(t,0);if((s===n||!s)&&setTimeout)return s=setTimeout,setTimeout(t,0);try{return s(t,0)}catch(e){try{return s.call(null,t,0)}catch(e){return s.call(this,t,0)}}}function i(t){if(l===clearTimeout)return clearTimeout(t);if((l===r||!l)&&clearTimeout)return l=clearTimeout,clearTimeout(t);try{return l(t)}catch(e){try{return l.call(null,t)}catch(e){return l.call(this,t)}}}function u(){d&&h&&(d=!1,h.length?y=h.concat(y):v=-1,y.length&&a())}function a(){if(!d){var t=o(u);d=!0;for(var e=y.length;e;){for(h=y,y=[];++v<e;)h&&h[v].run();v=-1,e=y.length}h=null,d=!1,i(t)}}function c(t,e){this.fun=t,this.array=e}function f(){}var s,l,p=t.exports={};!function(){try{s="function"==typeof setTimeout?setTimeout:n}catch(t){s=n}try{l="function"==typeof clearTimeout?clearTimeout:r}catch(t){l=r}}();var h,y=[],d=!1,v=-1;p.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];y.push(new c(t,e)),1!==y.length||d||o(a)},c.prototype.run=function(){this.fun.apply(null,this.array)},p.title="browser",p.browser=!0,p.env={},p.argv=[],p.version="",p.versions={},p.on=f,p.addListener=f,p.once=f,p.off=f,p.removeListener=f,p.removeAllListeners=f,p.emit=f,p.binding=function(t){throw new Error("process.binding is not supported")},p.cwd=function(){return"/"},p.chdir=function(t){throw new Error("process.chdir is not supported")},p.umask=function(){return 0}},function(t,e,n){(function(e){"use strict";/*!
	 * The buffer module from node.js, for the browser.
	 *
	 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
	 * @license  MIT
	 */
function r(t,e){if(t===e)return 0;for(var n=t.length,r=e.length,o=0,i=Math.min(n,r);o<i;++o)if(t[o]!==e[o]){n=t[o],r=e[o];break}return n<r?-1:r<n?1:0}function o(t){return e.Buffer&&"function"==typeof e.Buffer.isBuffer?e.Buffer.isBuffer(t):!(null==t||!t._isBuffer)}function i(t){return Object.prototype.toString.call(t)}function u(t){return!o(t)&&("function"==typeof e.ArrayBuffer&&("function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(t):!!t&&(t instanceof DataView||!!(t.buffer&&t.buffer instanceof ArrayBuffer))))}function a(t){if(w.isFunction(t)){if(j)return t.name;var e=t.toString(),n=e.match(S);return n&&n[1]}}function c(t,e){return"string"==typeof t?t.length<e?t:t.slice(0,e):t}function f(t){if(j||!w.isFunction(t))return w.inspect(t);var e=a(t),n=e?": "+e:"";return"[Function"+n+"]"}function s(t){return c(f(t.actual),128)+" "+t.operator+" "+c(f(t.expected),128)}function l(t,e,n,r,o){throw new O.AssertionError({message:n,actual:t,expected:e,operator:r,stackStartFunction:o})}function p(t,e){t||l(t,!0,e,"==",O.ok)}function h(t,e,n,a){if(t===e)return!0;if(o(t)&&o(e))return 0===r(t,e);if(w.isDate(t)&&w.isDate(e))return t.getTime()===e.getTime();if(w.isRegExp(t)&&w.isRegExp(e))return t.source===e.source&&t.global===e.global&&t.multiline===e.multiline&&t.lastIndex===e.lastIndex&&t.ignoreCase===e.ignoreCase;if(null!==t&&"object"==typeof t||null!==e&&"object"==typeof e){if(u(t)&&u(e)&&i(t)===i(e)&&!(t instanceof Float32Array||t instanceof Float64Array))return 0===r(new Uint8Array(t.buffer),new Uint8Array(e.buffer));if(o(t)!==o(e))return!1;a=a||{actual:[],expected:[]};var c=a.actual.indexOf(t);return c!==-1&&c===a.expected.indexOf(e)||(a.actual.push(t),a.expected.push(e),d(t,e,n,a))}return n?t===e:t==e}function y(t){return"[object Arguments]"==Object.prototype.toString.call(t)}function d(t,e,n,r){if(null===t||void 0===t||null===e||void 0===e)return!1;if(w.isPrimitive(t)||w.isPrimitive(e))return t===e;if(n&&Object.getPrototypeOf(t)!==Object.getPrototypeOf(e))return!1;var o=y(t),i=y(e);if(o&&!i||!o&&i)return!1;if(o)return t=E.call(t),e=E.call(e),h(t,e,n);var u,a,c=A(t),f=A(e);if(c.length!==f.length)return!1;for(c.sort(),f.sort(),a=c.length-1;a>=0;a--)if(c[a]!==f[a])return!1;for(a=c.length-1;a>=0;a--)if(u=c[a],!h(t[u],e[u],n,r))return!1;return!0}function v(t,e,n){h(t,e,!0)&&l(t,e,n,"notDeepStrictEqual",v)}function g(t,e){if(!t||!e)return!1;if("[object RegExp]"==Object.prototype.toString.call(e))return e.test(t);try{if(t instanceof e)return!0}catch(t){}return!Error.isPrototypeOf(e)&&e.call({},t)===!0}function b(t){var e;try{t()}catch(t){e=t}return e}function m(t,e,n,r){var o;if("function"!=typeof e)throw new TypeError('"block" argument must be a function');"string"==typeof n&&(r=n,n=null),o=b(e),r=(n&&n.name?" ("+n.name+").":".")+(r?" "+r:"."),t&&!o&&l(o,n,"Missing expected exception"+r);var i="string"==typeof r,u=!t&&w.isError(o),a=!t&&o&&!n;if((u&&i&&g(o,n)||a)&&l(o,n,"Got unwanted exception"+r),t&&o&&n&&!g(o,n)||!t&&o)throw o}var w=n(20),_=Object.prototype.hasOwnProperty,E=Array.prototype.slice,j=function(){return"foo"===function(){}.name}(),O=t.exports=p,S=/\s*function\s+([^\(\s]*)\s*/;O.AssertionError=function(t){this.name="AssertionError",this.actual=t.actual,this.expected=t.expected,this.operator=t.operator,t.message?(this.message=t.message,this.generatedMessage=!1):(this.message=s(this),this.generatedMessage=!0);var e=t.stackStartFunction||l;if(Error.captureStackTrace)Error.captureStackTrace(this,e);else{var n=new Error;if(n.stack){var r=n.stack,o=a(e),i=r.indexOf("\n"+o);if(i>=0){var u=r.indexOf("\n",i+1);r=r.substring(u+1)}this.stack=r}}},w.inherits(O.AssertionError,Error),O.fail=l,O.ok=p,O.equal=function(t,e,n){t!=e&&l(t,e,n,"==",O.equal)},O.notEqual=function(t,e,n){t==e&&l(t,e,n,"!=",O.notEqual)},O.deepEqual=function(t,e,n){h(t,e,!1)||l(t,e,n,"deepEqual",O.deepEqual)},O.deepStrictEqual=function(t,e,n){h(t,e,!0)||l(t,e,n,"deepStrictEqual",O.deepStrictEqual)},O.notDeepEqual=function(t,e,n){h(t,e,!1)&&l(t,e,n,"notDeepEqual",O.notDeepEqual)},O.notDeepStrictEqual=v,O.strictEqual=function(t,e,n){t!==e&&l(t,e,n,"===",O.strictEqual)},O.notStrictEqual=function(t,e,n){t===e&&l(t,e,n,"!==",O.notStrictEqual)},O.throws=function(t,e,n){m(!0,t,e,n)},O.doesNotThrow=function(t,e,n){m(!1,t,e,n)},O.ifError=function(t){if(t)throw t};var A=Object.keys||function(t){var e=[];for(var n in t)_.call(t,n)&&e.push(n);return e}}).call(e,function(){return this}())},function(t,e,n){(function(t,r){function o(t,n){var r={seen:[],stylize:u};return arguments.length>=3&&(r.depth=arguments[2]),arguments.length>=4&&(r.colors=arguments[3]),d(n)?r.showHidden=n:n&&e._extend(r,n),_(r.showHidden)&&(r.showHidden=!1),_(r.depth)&&(r.depth=2),_(r.colors)&&(r.colors=!1),_(r.customInspect)&&(r.customInspect=!0),r.colors&&(r.stylize=i),c(r,t,r.depth)}function i(t,e){var n=o.styles[e];return n?"["+o.colors[n][0]+"m"+t+"["+o.colors[n][1]+"m":t}function u(t,e){return t}function a(t){var e={};return t.forEach(function(t,n){e[t]=!0}),e}function c(t,n,r){if(t.customInspect&&n&&A(n.inspect)&&n.inspect!==e.inspect&&(!n.constructor||n.constructor.prototype!==n)){var o=n.inspect(r,t);return m(o)||(o=c(t,o,r)),o}var i=f(t,n);if(i)return i;var u=Object.keys(n),d=a(u);if(t.showHidden&&(u=Object.getOwnPropertyNames(n)),S(n)&&(u.indexOf("message")>=0||u.indexOf("description")>=0))return s(n);if(0===u.length){if(A(n)){var v=n.name?": "+n.name:"";return t.stylize("[Function"+v+"]","special")}if(E(n))return t.stylize(RegExp.prototype.toString.call(n),"regexp");if(O(n))return t.stylize(Date.prototype.toString.call(n),"date");if(S(n))return s(n)}var g="",b=!1,w=["{","}"];if(y(n)&&(b=!0,w=["[","]"]),A(n)){var _=n.name?": "+n.name:"";g=" [Function"+_+"]"}if(E(n)&&(g=" "+RegExp.prototype.toString.call(n)),O(n)&&(g=" "+Date.prototype.toUTCString.call(n)),S(n)&&(g=" "+s(n)),0===u.length&&(!b||0==n.length))return w[0]+g+w[1];if(r<0)return E(n)?t.stylize(RegExp.prototype.toString.call(n),"regexp"):t.stylize("[Object]","special");t.seen.push(n);var j;return j=b?l(t,n,r,d,u):u.map(function(e){return p(t,n,r,d,e,b)}),t.seen.pop(),h(j,g,w)}function f(t,e){if(_(e))return t.stylize("undefined","undefined");if(m(e)){var n="'"+JSON.stringify(e).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return t.stylize(n,"string")}return b(e)?t.stylize(""+e,"number"):d(e)?t.stylize(""+e,"boolean"):v(e)?t.stylize("null","null"):void 0}function s(t){return"["+Error.prototype.toString.call(t)+"]"}function l(t,e,n,r,o){for(var i=[],u=0,a=e.length;u<a;++u)R(e,String(u))?i.push(p(t,e,n,r,String(u),!0)):i.push("");return o.forEach(function(o){o.match(/^\d+$/)||i.push(p(t,e,n,r,o,!0))}),i}function p(t,e,n,r,o,i){var u,a,f;if(f=Object.getOwnPropertyDescriptor(e,o)||{value:e[o]},f.get?a=f.set?t.stylize("[Getter/Setter]","special"):t.stylize("[Getter]","special"):f.set&&(a=t.stylize("[Setter]","special")),R(r,o)||(u="["+o+"]"),a||(t.seen.indexOf(f.value)<0?(a=v(n)?c(t,f.value,null):c(t,f.value,n-1),a.indexOf("\n")>-1&&(a=i?a.split("\n").map(function(t){return"  "+t}).join("\n").substr(2):"\n"+a.split("\n").map(function(t){return"   "+t}).join("\n"))):a=t.stylize("[Circular]","special")),_(u)){if(i&&o.match(/^\d+$/))return a;u=JSON.stringify(""+o),u.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(u=u.substr(1,u.length-2),u=t.stylize(u,"name")):(u=u.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),u=t.stylize(u,"string"))}return u+": "+a}function h(t,e,n){var r=0,o=t.reduce(function(t,e){return r++,e.indexOf("\n")>=0&&r++,t+e.replace(/\u001b\[\d\d?m/g,"").length+1},0);return o>60?n[0]+(""===e?"":e+"\n ")+" "+t.join(",\n  ")+" "+n[1]:n[0]+e+" "+t.join(", ")+" "+n[1]}function y(t){return Array.isArray(t)}function d(t){return"boolean"==typeof t}function v(t){return null===t}function g(t){return null==t}function b(t){return"number"==typeof t}function m(t){return"string"==typeof t}function w(t){return"symbol"==typeof t}function _(t){return void 0===t}function E(t){return j(t)&&"[object RegExp]"===x(t)}function j(t){return"object"==typeof t&&null!==t}function O(t){return j(t)&&"[object Date]"===x(t)}function S(t){return j(t)&&("[object Error]"===x(t)||t instanceof Error)}function A(t){return"function"==typeof t}function T(t){return null===t||"boolean"==typeof t||"number"==typeof t||"string"==typeof t||"symbol"==typeof t||"undefined"==typeof t}function x(t){return Object.prototype.toString.call(t)}function k(t){return t<10?"0"+t.toString(10):t.toString(10)}function P(){var t=new Date,e=[k(t.getHours()),k(t.getMinutes()),k(t.getSeconds())].join(":");return[t.getDate(),L[t.getMonth()],e].join(" ")}function R(t,e){return Object.prototype.hasOwnProperty.call(t,e)}var M=/%[sdj%]/g;e.format=function(t){if(!m(t)){for(var e=[],n=0;n<arguments.length;n++)e.push(o(arguments[n]));return e.join(" ")}for(var n=1,r=arguments,i=r.length,u=String(t).replace(M,function(t){if("%%"===t)return"%";if(n>=i)return t;switch(t){case"%s":return String(r[n++]);case"%d":return Number(r[n++]);case"%j":try{return JSON.stringify(r[n++])}catch(t){return"[Circular]"}default:return t}}),a=r[n];n<i;a=r[++n])u+=v(a)||!j(a)?" "+a:" "+o(a);return u},e.deprecate=function(n,o){function i(){if(!u){if(r.throwDeprecation)throw new Error(o);r.traceDeprecation?console.trace(o):console.error(o),u=!0}return n.apply(this,arguments)}if(_(t.process))return function(){return e.deprecate(n,o).apply(this,arguments)};if(r.noDeprecation===!0)return n;var u=!1;return i};var C,B={};e.debuglog=function(t){if(_(C)&&(C=r.env.NODE_DEBUG||""),t=t.toUpperCase(),!B[t])if(new RegExp("\\b"+t+"\\b","i").test(C)){var n=r.pid;B[t]=function(){var r=e.format.apply(e,arguments);console.error("%s %d: %s",t,n,r)}}else B[t]=function(){};return B[t]},e.inspect=o,o.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},o.styles={special:"cyan",number:"yellow",boolean:"yellow",undefined:"grey",null:"bold",string:"green",date:"magenta",regexp:"red"},e.isArray=y,e.isBoolean=d,e.isNull=v,e.isNullOrUndefined=g,e.isNumber=b,e.isString=m,e.isSymbol=w,e.isUndefined=_,e.isRegExp=E,e.isObject=j,e.isDate=O,e.isError=S,e.isFunction=A,e.isPrimitive=T,e.isBuffer=n(21);var L=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];e.log=function(){console.log("%s - %s",P(),e.format.apply(e,arguments))},e.inherits=n(22),e._extend=function(t,e){if(!e||!j(e))return t;for(var n=Object.keys(e),r=n.length;r--;)t[n[r]]=e[n[r]];return t}}).call(e,function(){return this}(),n(18))},function(t,e){t.exports=function(t){return t&&"object"==typeof t&&"function"==typeof t.copy&&"function"==typeof t.fill&&"function"==typeof t.readUInt8}},function(t,e){"function"==typeof Object.create?t.exports=function(t,e){t.super_=e,t.prototype=Object.create(e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}})}:t.exports=function(t,e){t.super_=e;var n=function(){};n.prototype=e.prototype,t.prototype=new n,t.prototype.constructor=t}},function(t,e,n){function r(){o.call(this)}t.exports=r;var o=n(24).EventEmitter,i=n(25);i(r,o),r.Readable=n(26),r.Writable=n(37),r.Duplex=n(38),r.Transform=n(39),r.PassThrough=n(40),r.Stream=r,r.prototype.pipe=function(t,e){function n(e){t.writable&&!1===t.write(e)&&f.pause&&f.pause()}function r(){f.readable&&f.resume&&f.resume()}function i(){s||(s=!0,t.end())}function u(){s||(s=!0,"function"==typeof t.destroy&&t.destroy())}function a(t){if(c(),0===o.listenerCount(this,"error"))throw t}function c(){f.removeListener("data",n),t.removeListener("drain",r),f.removeListener("end",i),f.removeListener("close",u),f.removeListener("error",a),t.removeListener("error",a),f.removeListener("end",c),f.removeListener("close",c),t.removeListener("close",c)}var f=this;f.on("data",n),t.on("drain",r),t._isStdio||e&&e.end===!1||(f.on("end",i),f.on("close",u));var s=!1;return f.on("error",a),t.on("error",a),f.on("end",c),f.on("close",c),t.on("close",c),t.emit("pipe",f),t}},function(t,e){function n(){this._events=this._events||{},this._maxListeners=this._maxListeners||void 0}function r(t){return"function"==typeof t}function o(t){return"number"==typeof t}function i(t){return"object"==typeof t&&null!==t}function u(t){return void 0===t}t.exports=n,n.EventEmitter=n,n.prototype._events=void 0,n.prototype._maxListeners=void 0,n.defaultMaxListeners=10,n.prototype.setMaxListeners=function(t){if(!o(t)||t<0||isNaN(t))throw TypeError("n must be a positive number");return this._maxListeners=t,this},n.prototype.emit=function(t){var e,n,o,a,c,f;if(this._events||(this._events={}),"error"===t&&(!this._events.error||i(this._events.error)&&!this._events.error.length)){if(e=arguments[1],e instanceof Error)throw e;var s=new Error('Uncaught, unspecified "error" event. ('+e+")");throw s.context=e,s}if(n=this._events[t],u(n))return!1;if(r(n))switch(arguments.length){case 1:n.call(this);break;case 2:n.call(this,arguments[1]);break;case 3:n.call(this,arguments[1],arguments[2]);break;default:a=Array.prototype.slice.call(arguments,1),n.apply(this,a)}else if(i(n))for(a=Array.prototype.slice.call(arguments,1),f=n.slice(),o=f.length,c=0;c<o;c++)f[c].apply(this,a);return!0},n.prototype.addListener=function(t,e){var o;if(!r(e))throw TypeError("listener must be a function");return this._events||(this._events={}),this._events.newListener&&this.emit("newListener",t,r(e.listener)?e.listener:e),this._events[t]?i(this._events[t])?this._events[t].push(e):this._events[t]=[this._events[t],e]:this._events[t]=e,i(this._events[t])&&!this._events[t].warned&&(o=u(this._maxListeners)?n.defaultMaxListeners:this._maxListeners,o&&o>0&&this._events[t].length>o&&(this._events[t].warned=!0,console.error("(node) warning: possible EventEmitter memory leak detected. %d listeners added. Use emitter.setMaxListeners() to increase limit.",this._events[t].length),"function"==typeof console.trace&&console.trace())),this},n.prototype.on=n.prototype.addListener,n.prototype.once=function(t,e){function n(){this.removeListener(t,n),o||(o=!0,e.apply(this,arguments))}if(!r(e))throw TypeError("listener must be a function");var o=!1;return n.listener=e,this.on(t,n),this},n.prototype.removeListener=function(t,e){var n,o,u,a;if(!r(e))throw TypeError("listener must be a function");if(!this._events||!this._events[t])return this;if(n=this._events[t],u=n.length,o=-1,n===e||r(n.listener)&&n.listener===e)delete this._events[t],this._events.removeListener&&this.emit("removeListener",t,e);else if(i(n)){for(a=u;a-- >0;)if(n[a]===e||n[a].listener&&n[a].listener===e){o=a;break}if(o<0)return this;1===n.length?(n.length=0,delete this._events[t]):n.splice(o,1),this._events.removeListener&&this.emit("removeListener",t,e)}return this},n.prototype.removeAllListeners=function(t){var e,n;if(!this._events)return this;if(!this._events.removeListener)return 0===arguments.length?this._events={}:this._events[t]&&delete this._events[t],this;if(0===arguments.length){for(e in this._events)"removeListener"!==e&&this.removeAllListeners(e);return this.removeAllListeners("removeListener"),this._events={},this}if(n=this._events[t],r(n))this.removeListener(t,n);else if(n)for(;n.length;)this.removeListener(t,n[n.length-1]);return delete this._events[t],this},n.prototype.listeners=function(t){var e;return e=this._events&&this._events[t]?r(this._events[t])?[this._events[t]]:this._events[t].slice():[]},n.prototype.listenerCount=function(t){if(this._events){var e=this._events[t];if(r(e))return 1;if(e)return e.length}return 0},n.listenerCount=function(t,e){return t.listenerCount(e)}},function(t,e){"function"==typeof Object.create?t.exports=function(t,e){t.super_=e,t.prototype=Object.create(e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}})}:t.exports=function(t,e){t.super_=e;var n=function(){};n.prototype=e.prototype,t.prototype=new n,t.prototype.constructor=t}},function(t,e,n){(function(r){e=t.exports=n(27),e.Stream=n(23),e.Readable=e,e.Writable=n(33),e.Duplex=n(32),e.Transform=n(35),e.PassThrough=n(36),r.browser||"disable"!==r.env.READABLE_STREAM||(t.exports=n(23))}).call(e,n(18))},function(t,e,n){(function(e){function r(t,e){var r=n(32);t=t||{};var o=t.highWaterMark,i=t.objectMode?16:16384;this.highWaterMark=o||0===o?o:i,this.highWaterMark=~~this.highWaterMark,this.buffer=[],this.length=0,this.pipes=null,this.pipesCount=0,this.flowing=null,this.ended=!1,this.endEmitted=!1,this.reading=!1,this.sync=!0,this.needReadable=!1,this.emittedReadable=!1,this.readableListening=!1,this.objectMode=!!t.objectMode,e instanceof r&&(this.objectMode=this.objectMode||!!t.readableObjectMode),this.defaultEncoding=t.defaultEncoding||"utf8",this.ranOut=!1,this.awaitDrain=0,this.readingMore=!1,this.decoder=null,this.encoding=null,t.encoding&&(x||(x=n(34).StringDecoder),this.decoder=new x(t.encoding),this.encoding=t.encoding)}function o(t){n(32);return this instanceof o?(this._readableState=new r(t,this),this.readable=!0,void A.call(this)):new o(t)}function i(t,e,n,r,o){var i=f(e,n);if(i)t.emit("error",i);else if(T.isNullOrUndefined(n))e.reading=!1,e.ended||s(t,e);else if(e.objectMode||n&&n.length>0)if(e.ended&&!o){var a=new Error("stream.push() after EOF");t.emit("error",a)}else if(e.endEmitted&&o){var a=new Error("stream.unshift() after end event");t.emit("error",a)}else!e.decoder||o||r||(n=e.decoder.write(n)),o||(e.reading=!1),e.flowing&&0===e.length&&!e.sync?(t.emit("data",n),t.read(0)):(e.length+=e.objectMode?1:n.length,o?e.buffer.unshift(n):e.buffer.push(n),e.needReadable&&l(t)),h(t,e);else o||(e.reading=!1);return u(e)}function u(t){return!t.ended&&(t.needReadable||t.length<t.highWaterMark||0===t.length)}function a(t){if(t>=P)t=P;else{t--;for(var e=1;e<32;e<<=1)t|=t>>e;t++}return t}function c(t,e){return 0===e.length&&e.ended?0:e.objectMode?0===t?0:1:isNaN(t)||T.isNull(t)?e.flowing&&e.buffer.length?e.buffer[0].length:e.length:t<=0?0:(t>e.highWaterMark&&(e.highWaterMark=a(t)),t>e.length?e.ended?e.length:(e.needReadable=!0,0):t)}function f(t,e){var n=null;return T.isBuffer(e)||T.isString(e)||T.isNullOrUndefined(e)||t.objectMode||(n=new TypeError("Invalid non-string/buffer chunk")),n}function s(t,e){if(e.decoder&&!e.ended){var n=e.decoder.end();n&&n.length&&(e.buffer.push(n),e.length+=e.objectMode?1:n.length)}e.ended=!0,l(t)}function l(t){var n=t._readableState;n.needReadable=!1,n.emittedReadable||(k("emitReadable",n.flowing),n.emittedReadable=!0,n.sync?e.nextTick(function(){p(t)}):p(t))}function p(t){k("emit readable"),t.emit("readable"),b(t)}function h(t,n){n.readingMore||(n.readingMore=!0,e.nextTick(function(){y(t,n)}))}function y(t,e){for(var n=e.length;!e.reading&&!e.flowing&&!e.ended&&e.length<e.highWaterMark&&(k("maybeReadMore read 0"),t.read(0),n!==e.length);)n=e.length;e.readingMore=!1}function d(t){return function(){var e=t._readableState;k("pipeOnDrain",e.awaitDrain),e.awaitDrain&&e.awaitDrain--,0===e.awaitDrain&&S.listenerCount(t,"data")&&(e.flowing=!0,b(t))}}function v(t,n){n.resumeScheduled||(n.resumeScheduled=!0,e.nextTick(function(){g(t,n)}))}function g(t,e){e.resumeScheduled=!1,t.emit("resume"),b(t),e.flowing&&!e.reading&&t.read(0)}function b(t){var e=t._readableState;if(k("flow",e.flowing),e.flowing)do var n=t.read();while(null!==n&&e.flowing)}function m(t,e){var n,r=e.buffer,o=e.length,i=!!e.decoder,u=!!e.objectMode;if(0===r.length)return null;if(0===o)n=null;else if(u)n=r.shift();else if(!t||t>=o)n=i?r.join(""):O.concat(r,o),r.length=0;else if(t<r[0].length){var a=r[0];n=a.slice(0,t),r[0]=a.slice(t)}else if(t===r[0].length)n=r.shift();else{n=i?"":new O(t);for(var c=0,f=0,s=r.length;f<s&&c<t;f++){var a=r[0],l=Math.min(t-c,a.length);i?n+=a.slice(0,l):a.copy(n,c,0,l),l<a.length?r[0]=a.slice(l):r.shift(),c+=l}}return n}function w(t){var n=t._readableState;if(n.length>0)throw new Error("endReadable called on non-empty stream");n.endEmitted||(n.ended=!0,e.nextTick(function(){n.endEmitted||0!==n.length||(n.endEmitted=!0,t.readable=!1,t.emit("end"))}))}function _(t,e){for(var n=0,r=t.length;n<r;n++)e(t[n],n)}function E(t,e){for(var n=0,r=t.length;n<r;n++)if(t[n]===e)return n;return-1}t.exports=o;var j=n(28),O=n(14).Buffer;o.ReadableState=r;var S=n(24).EventEmitter;S.listenerCount||(S.listenerCount=function(t,e){return t.listeners(e).length});var A=n(23),T=n(29);T.inherits=n(30);var x,k=n(31);k=k&&k.debuglog?k.debuglog("stream"):function(){},T.inherits(o,A),o.prototype.push=function(t,e){var n=this._readableState;return T.isString(t)&&!n.objectMode&&(e=e||n.defaultEncoding,e!==n.encoding&&(t=new O(t,e),e="")),i(this,n,t,e,!1)},o.prototype.unshift=function(t){var e=this._readableState;return i(this,e,t,"",!0)},o.prototype.setEncoding=function(t){return x||(x=n(34).StringDecoder),this._readableState.decoder=new x(t),this._readableState.encoding=t,this};var P=8388608;o.prototype.read=function(t){k("read",t);var e=this._readableState,n=t;if((!T.isNumber(t)||t>0)&&(e.emittedReadable=!1),0===t&&e.needReadable&&(e.length>=e.highWaterMark||e.ended))return k("read: emitReadable",e.length,e.ended),0===e.length&&e.ended?w(this):l(this),null;if(t=c(t,e),0===t&&e.ended)return 0===e.length&&w(this),null;var r=e.needReadable;k("need readable",r),(0===e.length||e.length-t<e.highWaterMark)&&(r=!0,k("length less than watermark",r)),(e.ended||e.reading)&&(r=!1,k("reading or ended",r)),r&&(k("do read"),e.reading=!0,e.sync=!0,0===e.length&&(e.needReadable=!0),this._read(e.highWaterMark),e.sync=!1),r&&!e.reading&&(t=c(n,e));var o;return o=t>0?m(t,e):null,T.isNull(o)&&(e.needReadable=!0,t=0),e.length-=t,0!==e.length||e.ended||(e.needReadable=!0),n!==t&&e.ended&&0===e.length&&w(this),T.isNull(o)||this.emit("data",o),o},o.prototype._read=function(t){this.emit("error",new Error("not implemented"))},o.prototype.pipe=function(t,n){function r(t){k("onunpipe"),t===l&&i()}function o(){k("onend"),t.end()}function i(){k("cleanup"),t.removeListener("close",c),t.removeListener("finish",f),t.removeListener("drain",v),t.removeListener("error",a),t.removeListener("unpipe",r),l.removeListener("end",o),l.removeListener("end",i),l.removeListener("data",u),!p.awaitDrain||t._writableState&&!t._writableState.needDrain||v()}function u(e){k("ondata");var n=t.write(e);!1===n&&(k("false write response, pause",l._readableState.awaitDrain),l._readableState.awaitDrain++,l.pause())}function a(e){k("onerror",e),s(),t.removeListener("error",a),0===S.listenerCount(t,"error")&&t.emit("error",e)}function c(){t.removeListener("finish",f),s()}function f(){k("onfinish"),t.removeListener("close",c),s()}function s(){k("unpipe"),l.unpipe(t)}var l=this,p=this._readableState;switch(p.pipesCount){case 0:p.pipes=t;break;case 1:p.pipes=[p.pipes,t];break;default:p.pipes.push(t)}p.pipesCount+=1,k("pipe count=%d opts=%j",p.pipesCount,n);var h=(!n||n.end!==!1)&&t!==e.stdout&&t!==e.stderr,y=h?o:i;p.endEmitted?e.nextTick(y):l.once("end",y),t.on("unpipe",r);var v=d(l);return t.on("drain",v),l.on("data",u),t._events&&t._events.error?j(t._events.error)?t._events.error.unshift(a):t._events.error=[a,t._events.error]:t.on("error",a),t.once("close",c),t.once("finish",f),t.emit("pipe",l),p.flowing||(k("pipe resume"),l.resume()),t},o.prototype.unpipe=function(t){var e=this._readableState;if(0===e.pipesCount)return this;if(1===e.pipesCount)return t&&t!==e.pipes?this:(t||(t=e.pipes),e.pipes=null,e.pipesCount=0,e.flowing=!1,t&&t.emit("unpipe",this),this);if(!t){var n=e.pipes,r=e.pipesCount;e.pipes=null,e.pipesCount=0,e.flowing=!1;for(var o=0;o<r;o++)n[o].emit("unpipe",this);return this}var o=E(e.pipes,t);return o===-1?this:(e.pipes.splice(o,1),e.pipesCount-=1,1===e.pipesCount&&(e.pipes=e.pipes[0]),t.emit("unpipe",this),this)},o.prototype.on=function(t,n){var r=A.prototype.on.call(this,t,n);if("data"===t&&!1!==this._readableState.flowing&&this.resume(),"readable"===t&&this.readable){var o=this._readableState;if(!o.readableListening)if(o.readableListening=!0,o.emittedReadable=!1,o.needReadable=!0,o.reading)o.length&&l(this,o);else{var i=this;e.nextTick(function(){k("readable nexttick read 0"),i.read(0)})}}return r},o.prototype.addListener=o.prototype.on,o.prototype.resume=function(){var t=this._readableState;return t.flowing||(k("resume"),t.flowing=!0,t.reading||(k("resume read 0"),this.read(0)),v(this,t)),this},o.prototype.pause=function(){return k("call pause flowing=%j",this._readableState.flowing),!1!==this._readableState.flowing&&(k("pause"),this._readableState.flowing=!1,this.emit("pause")),this},o.prototype.wrap=function(t){var e=this._readableState,n=!1,r=this;t.on("end",function(){if(k("wrapped end"),e.decoder&&!e.ended){var t=e.decoder.end();t&&t.length&&r.push(t)}r.push(null)}),t.on("data",function(o){if(k("wrapped data"),e.decoder&&(o=e.decoder.write(o)),o&&(e.objectMode||o.length)){var i=r.push(o);i||(n=!0,t.pause())}});for(var o in t)T.isFunction(t[o])&&T.isUndefined(this[o])&&(this[o]=function(e){return function(){return t[e].apply(t,arguments)}}(o));var i=["error","close","destroy","pause","resume"];return _(i,function(e){t.on(e,r.emit.bind(r,e))}),r._read=function(e){k("wrapped _read",e),n&&(n=!1,t.resume())},r},o._fromList=m}).call(e,n(18))},function(t,e){t.exports=Array.isArray||function(t){return"[object Array]"==Object.prototype.toString.call(t)}},function(t,e,n){(function(t){function n(t){return Array.isArray?Array.isArray(t):"[object Array]"===v(t)}function r(t){return"boolean"==typeof t}function o(t){return null===t}function i(t){return null==t}function u(t){return"number"==typeof t}function a(t){return"string"==typeof t}function c(t){return"symbol"==typeof t}function f(t){return void 0===t}function s(t){return"[object RegExp]"===v(t)}function l(t){return"object"==typeof t&&null!==t}function p(t){return"[object Date]"===v(t)}function h(t){return"[object Error]"===v(t)||t instanceof Error}function y(t){return"function"==typeof t}function d(t){return null===t||"boolean"==typeof t||"number"==typeof t||"string"==typeof t||"symbol"==typeof t||"undefined"==typeof t}function v(t){return Object.prototype.toString.call(t)}e.isArray=n,e.isBoolean=r,e.isNull=o,e.isNullOrUndefined=i,e.isNumber=u,e.isString=a,e.isSymbol=c,e.isUndefined=f,e.isRegExp=s,e.isObject=l,e.isDate=p,e.isError=h,e.isFunction=y,e.isPrimitive=d,e.isBuffer=t.isBuffer}).call(e,n(14).Buffer)},function(t,e){"function"==typeof Object.create?t.exports=function(t,e){t.super_=e,t.prototype=Object.create(e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}})}:t.exports=function(t,e){t.super_=e;var n=function(){};n.prototype=e.prototype,t.prototype=new n,t.prototype.constructor=t}},function(t,e){},function(t,e,n){(function(e){function r(t){return this instanceof r?(c.call(this,t),f.call(this,t),t&&t.readable===!1&&(this.readable=!1),t&&t.writable===!1&&(this.writable=!1),this.allowHalfOpen=!0,t&&t.allowHalfOpen===!1&&(this.allowHalfOpen=!1),void this.once("end",o)):new r(t)}function o(){this.allowHalfOpen||this._writableState.ended||e.nextTick(this.end.bind(this))}function i(t,e){for(var n=0,r=t.length;n<r;n++)e(t[n],n)}t.exports=r;var u=Object.keys||function(t){var e=[];for(var n in t)e.push(n);return e},a=n(29);a.inherits=n(30);var c=n(27),f=n(33);a.inherits(r,c),i(u(f.prototype),function(t){r.prototype[t]||(r.prototype[t]=f.prototype[t])})}).call(e,n(18))},function(t,e,n){(function(e){function r(t,e,n){this.chunk=t,this.encoding=e,this.callback=n}function o(t,e){var r=n(32);t=t||{};var o=t.highWaterMark,i=t.objectMode?16:16384;this.highWaterMark=o||0===o?o:i,this.objectMode=!!t.objectMode,e instanceof r&&(this.objectMode=this.objectMode||!!t.writableObjectMode),this.highWaterMark=~~this.highWaterMark,this.needDrain=!1,this.ending=!1,this.ended=!1,this.finished=!1;var u=t.decodeStrings===!1;this.decodeStrings=!u,this.defaultEncoding=t.defaultEncoding||"utf8",this.length=0,this.writing=!1,this.corked=0,this.sync=!0,this.bufferProcessing=!1,this.onwrite=function(t){h(e,t)},this.writecb=null,this.writelen=0,this.buffer=[],this.pendingcb=0,this.prefinished=!1,this.errorEmitted=!1}function i(t){var e=n(32);return this instanceof i||this instanceof e?(this._writableState=new o(t,this),this.writable=!0,void j.call(this)):new i(t)}function u(t,n,r){var o=new Error("write after end");t.emit("error",o),e.nextTick(function(){r(o)})}function a(t,n,r,o){var i=!0;if(!(E.isBuffer(r)||E.isString(r)||E.isNullOrUndefined(r)||n.objectMode)){var u=new TypeError("Invalid non-string/buffer chunk");t.emit("error",u),e.nextTick(function(){o(u)}),i=!1}return i}function c(t,e,n){return!t.objectMode&&t.decodeStrings!==!1&&E.isString(e)&&(e=new _(e,n)),e}function f(t,e,n,o,i){n=c(e,n,o),E.isBuffer(n)&&(o="buffer");var u=e.objectMode?1:n.length;e.length+=u;var a=e.length<e.highWaterMark;return a||(e.needDrain=!0),e.writing||e.corked?e.buffer.push(new r(n,o,i)):s(t,e,!1,u,n,o,i),a}function s(t,e,n,r,o,i,u){e.writelen=r,e.writecb=u,e.writing=!0,e.sync=!0,n?t._writev(o,e.onwrite):t._write(o,i,e.onwrite),e.sync=!1}function l(t,n,r,o,i){r?e.nextTick(function(){n.pendingcb--,i(o)}):(n.pendingcb--,i(o)),t._writableState.errorEmitted=!0,t.emit("error",o)}function p(t){t.writing=!1,t.writecb=null,t.length-=t.writelen,t.writelen=0}function h(t,n){var r=t._writableState,o=r.sync,i=r.writecb;if(p(r),n)l(t,r,o,n,i);else{var u=g(t,r);u||r.corked||r.bufferProcessing||!r.buffer.length||v(t,r),o?e.nextTick(function(){y(t,r,u,i)}):y(t,r,u,i)}}function y(t,e,n,r){n||d(t,e),e.pendingcb--,r(),m(t,e)}function d(t,e){0===e.length&&e.needDrain&&(e.needDrain=!1,t.emit("drain"))}function v(t,e){if(e.bufferProcessing=!0,t._writev&&e.buffer.length>1){for(var n=[],r=0;r<e.buffer.length;r++)n.push(e.buffer[r].callback);e.pendingcb++,s(t,e,!0,e.length,e.buffer,"",function(t){for(var r=0;r<n.length;r++)e.pendingcb--,n[r](t)}),e.buffer=[]}else{for(var r=0;r<e.buffer.length;r++){var o=e.buffer[r],i=o.chunk,u=o.encoding,a=o.callback,c=e.objectMode?1:i.length;if(s(t,e,!1,c,i,u,a),e.writing){r++;break}}r<e.buffer.length?e.buffer=e.buffer.slice(r):e.buffer.length=0}e.bufferProcessing=!1}function g(t,e){return e.ending&&0===e.length&&!e.finished&&!e.writing}function b(t,e){e.prefinished||(e.prefinished=!0,t.emit("prefinish"))}function m(t,e){var n=g(t,e);return n&&(0===e.pendingcb?(b(t,e),e.finished=!0,t.emit("finish")):b(t,e)),n}function w(t,n,r){n.ending=!0,m(t,n),r&&(n.finished?e.nextTick(r):t.once("finish",r)),n.ended=!0}t.exports=i;var _=n(14).Buffer;i.WritableState=o;var E=n(29);E.inherits=n(30);var j=n(23);E.inherits(i,j),i.prototype.pipe=function(){this.emit("error",new Error("Cannot pipe. Not readable."))},i.prototype.write=function(t,e,n){var r=this._writableState,o=!1;return E.isFunction(e)&&(n=e,e=null),E.isBuffer(t)?e="buffer":e||(e=r.defaultEncoding),E.isFunction(n)||(n=function(){}),r.ended?u(this,r,n):a(this,r,t,n)&&(r.pendingcb++,o=f(this,r,t,e,n)),o},i.prototype.cork=function(){var t=this._writableState;t.corked++},i.prototype.uncork=function(){var t=this._writableState;t.corked&&(t.corked--,t.writing||t.corked||t.finished||t.bufferProcessing||!t.buffer.length||v(this,t))},i.prototype._write=function(t,e,n){n(new Error("not implemented"))},i.prototype._writev=null,i.prototype.end=function(t,e,n){var r=this._writableState;E.isFunction(t)?(n=t,t=null,e=null):E.isFunction(e)&&(n=e,e=null),E.isNullOrUndefined(t)||this.write(t,e),r.corked&&(r.corked=1,this.uncork()),r.ending||r.finished||w(this,r,n)}}).call(e,n(18))},function(t,e,n){function r(t){if(t&&!c(t))throw new Error("Unknown encoding: "+t)}function o(t){return t.toString(this.encoding)}function i(t){this.charReceived=t.length%2,this.charLength=this.charReceived?2:0}function u(t){this.charReceived=t.length%3,this.charLength=this.charReceived?3:0}var a=n(14).Buffer,c=a.isEncoding||function(t){switch(t&&t.toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":case"raw":return!0;default:return!1}},f=e.StringDecoder=function(t){switch(this.encoding=(t||"utf8").toLowerCase().replace(/[-_]/,""),r(t),this.encoding){case"utf8":this.surrogateSize=3;break;case"ucs2":case"utf16le":this.surrogateSize=2,this.detectIncompleteChar=i;
break;case"base64":this.surrogateSize=3,this.detectIncompleteChar=u;break;default:return void(this.write=o)}this.charBuffer=new a(6),this.charReceived=0,this.charLength=0};f.prototype.write=function(t){for(var e="";this.charLength;){var n=t.length>=this.charLength-this.charReceived?this.charLength-this.charReceived:t.length;if(t.copy(this.charBuffer,this.charReceived,0,n),this.charReceived+=n,this.charReceived<this.charLength)return"";t=t.slice(n,t.length),e=this.charBuffer.slice(0,this.charLength).toString(this.encoding);var r=e.charCodeAt(e.length-1);if(!(r>=55296&&r<=56319)){if(this.charReceived=this.charLength=0,0===t.length)return e;break}this.charLength+=this.surrogateSize,e=""}this.detectIncompleteChar(t);var o=t.length;this.charLength&&(t.copy(this.charBuffer,0,t.length-this.charReceived,o),o-=this.charReceived),e+=t.toString(this.encoding,0,o);var o=e.length-1,r=e.charCodeAt(o);if(r>=55296&&r<=56319){var i=this.surrogateSize;return this.charLength+=i,this.charReceived+=i,this.charBuffer.copy(this.charBuffer,i,0,i),t.copy(this.charBuffer,0,0,i),e.substring(0,o)}return e},f.prototype.detectIncompleteChar=function(t){for(var e=t.length>=3?3:t.length;e>0;e--){var n=t[t.length-e];if(1==e&&n>>5==6){this.charLength=2;break}if(e<=2&&n>>4==14){this.charLength=3;break}if(e<=3&&n>>3==30){this.charLength=4;break}}this.charReceived=e},f.prototype.end=function(t){var e="";if(t&&t.length&&(e=this.write(t)),this.charReceived){var n=this.charReceived,r=this.charBuffer,o=this.encoding;e+=r.slice(0,n).toString(o)}return e}},function(t,e,n){function r(t,e){this.afterTransform=function(t,n){return o(e,t,n)},this.needTransform=!1,this.transforming=!1,this.writecb=null,this.writechunk=null}function o(t,e,n){var r=t._transformState;r.transforming=!1;var o=r.writecb;if(!o)return t.emit("error",new Error("no writecb in Transform class"));r.writechunk=null,r.writecb=null,c.isNullOrUndefined(n)||t.push(n),o&&o(e);var i=t._readableState;i.reading=!1,(i.needReadable||i.length<i.highWaterMark)&&t._read(i.highWaterMark)}function i(t){if(!(this instanceof i))return new i(t);a.call(this,t),this._transformState=new r(t,this);var e=this;this._readableState.needReadable=!0,this._readableState.sync=!1,this.once("prefinish",function(){c.isFunction(this._flush)?this._flush(function(t){u(e,t)}):u(e)})}function u(t,e){if(e)return t.emit("error",e);var n=t._writableState,r=t._transformState;if(n.length)throw new Error("calling transform done when ws.length != 0");if(r.transforming)throw new Error("calling transform done when still transforming");return t.push(null)}t.exports=i;var a=n(32),c=n(29);c.inherits=n(30),c.inherits(i,a),i.prototype.push=function(t,e){return this._transformState.needTransform=!1,a.prototype.push.call(this,t,e)},i.prototype._transform=function(t,e,n){throw new Error("not implemented")},i.prototype._write=function(t,e,n){var r=this._transformState;if(r.writecb=n,r.writechunk=t,r.writeencoding=e,!r.transforming){var o=this._readableState;(r.needTransform||o.needReadable||o.length<o.highWaterMark)&&this._read(o.highWaterMark)}},i.prototype._read=function(t){var e=this._transformState;c.isNull(e.writechunk)||!e.writecb||e.transforming?e.needTransform=!0:(e.transforming=!0,this._transform(e.writechunk,e.writeencoding,e.afterTransform))}},function(t,e,n){function r(t){return this instanceof r?void o.call(this,t):new r(t)}t.exports=r;var o=n(35),i=n(29);i.inherits=n(30),i.inherits(r,o),r.prototype._transform=function(t,e,n){n(null,t)}},function(t,e,n){t.exports=n(33)},function(t,e,n){t.exports=n(32)},function(t,e,n){t.exports=n(35)},function(t,e,n){t.exports=n(36)},function(t,e,n){(function(t){function r(t){var e,n,r,o,i,s,l,p,h,y=["([^%]*)","%","(['\\-+ #0]*?)","([1-9]\\d*)?","(\\.([1-9]\\d*))?","[lhjztL]*?","([diouxXfFeEgGaAcCsSp%jr])"].join(""),d=new RegExp(y),v=Array.prototype.slice.call(arguments,1),g="",b=1;for(c.equal("string",typeof t);null!==(h=d.exec(t));)if(g+=h[1],t=t.substring(h[0].length),e=h[2]||"",n=h[3]||0,r=h[4]||"",o=h[6],i=!1,l=!1,s=" ","%"!=o){if(0===v.length)throw new Error("too few args to sprintf");if(p=v.shift(),b++,e.match(/[\' #]/))throw new Error("unsupported flags: "+e);if(r.length>0)throw new Error("non-zero precision not supported");switch(e.match(/-/)&&(i=!0),e.match(/0/)&&(s="0"),e.match(/\+/)&&(l=!0),o){case"s":if(void 0===p||null===p)throw new Error("argument "+b+": attempted to print undefined or null as a string");g+=u(s,n,i,p.toString());break;case"d":p=Math.floor(p);case"f":l=l&&p>0?"+":"",g+=l+u(s,n,i,p.toString());break;case"x":g+=u(s,n,i,p.toString(16));break;case"j":0===n&&(n=10),g+=f.inspect(p,!1,n);break;case"r":g+=a(p);break;default:throw new Error("unsupported conversion: "+o)}}else g+="%";return g+=t}function o(){var e=Array.prototype.slice.call(arguments);e.unshift(t.stdout),i.apply(null,e)}function i(t){var e=Array.prototype.slice.call(arguments,1);return t.write(r.apply(this,e))}function u(t,e,n,r){for(var o=r;o.length<e;)n?o+=t:o=t+o;return o}function a(t){var e;if(!(t instanceof Error))throw new Error(r("invalid type for %%r: %j",t));if(e="EXCEPTION: "+t.constructor.name+": "+t.stack,t.cause&&"function"==typeof t.cause){var n=t.cause();n&&(e+="\nCaused by: "+a(n))}return e}var c=n(19),f=n(20);e.sprintf=r,e.printf=o,e.fprintf=i}).call(e,n(18))},function(t,e,n){(function(t){function n(t){return Array.isArray?Array.isArray(t):"[object Array]"===v(t)}function r(t){return"boolean"==typeof t}function o(t){return null===t}function i(t){return null==t}function u(t){return"number"==typeof t}function a(t){return"string"==typeof t}function c(t){return"symbol"==typeof t}function f(t){return void 0===t}function s(t){return"[object RegExp]"===v(t)}function l(t){return"object"==typeof t&&null!==t}function p(t){return"[object Date]"===v(t)}function h(t){return"[object Error]"===v(t)||t instanceof Error}function y(t){return"function"==typeof t}function d(t){return null===t||"boolean"==typeof t||"number"==typeof t||"string"==typeof t||"symbol"==typeof t||"undefined"==typeof t}function v(t){return Object.prototype.toString.call(t)}e.isArray=n,e.isBoolean=r,e.isNull=o,e.isNullOrUndefined=i,e.isNumber=u,e.isString=a,e.isSymbol=c,e.isUndefined=f,e.isRegExp=s,e.isObject=l,e.isDate=p,e.isError=h,e.isFunction=y,e.isPrimitive=d,e.isBuffer=t.isBuffer}).call(e,n(14).Buffer)},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function o(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function i(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function u(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}function a(t,e){var n=4,r=15;if(void 0===e&&(e=0),e+=1,null===t)return"null";if(void 0===t)return"void";if("string"==typeof t||"number"==typeof t||"boolean"==typeof t)return"undefined"==typeof t?"undefined":c(t);if(!Array.isArray(t)){var o=Object.keys(t);if(!o.length)return t.constructor&&t.constructor.name&&"Object"!==t.constructor.name?t.constructor.name:"Object";if(e>n)return"{...}";var i="  ".repeat(e-1),u=o.slice(0,r).map(function(n){return(/^([A-Z_$][A-Z0-9_$]*)$/i.test(n)?n:JSON.stringify(n))+": "+a(t[n],e)+";"}).join("\n  "+i);return o.length>=r&&(u+="\n  "+i+"..."),t.constructor&&t.constructor.name&&"Object"!==t.constructor.name?t.constructor.name+" {\n  "+i+u+"\n"+i+"}":"{\n  "+i+u+"\n"+i+"}"}if(!(t.length>0))return"Array";var f=function(){if(e>n)return{v:"[...]"};var o=a(t[0],e);return t.every(function(t){return a(t,e)===o})?{v:o.trim()+"[]"}:{v:"["+t.slice(0,r).map(function(t){return a(t,e)}).join(", ")+(t.length>=r?", ...":"")+"]"}}();return"object"===("undefined"==typeof f?"undefined":c(f))?f.v:void 0}Object.defineProperty(e,"__esModule",{value:!0});var c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},f=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),s=n(11),l=r(s),p=function(t){function e(){return o(this,e),i(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return u(e,t),f(e,null,[{key:"createError",value:function(t){if(!Array.isArray(t)||!t.every(function(t){return"string"==typeof t}))throw new TypeError('Value of argument "services" violates contract.\n\nExpected:\nArray<string>\n\nGot:\n'+a(t));var n=[].concat(t).reverse().join(" <- ");return new e({services:t},"Circular dependency found: %s",n)}}]),e}(l.default);e.default=p},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function o(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function i(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function u(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}function a(t,e){var n=4,r=15;if(void 0===e&&(e=0),e+=1,null===t)return"null";if(void 0===t)return"void";if("string"==typeof t||"number"==typeof t||"boolean"==typeof t)return"undefined"==typeof t?"undefined":c(t);if(!Array.isArray(t)){var o=Object.keys(t);if(!o.length)return t.constructor&&t.constructor.name&&"Object"!==t.constructor.name?t.constructor.name:"Object";if(e>n)return"{...}";var i="  ".repeat(e-1),u=o.slice(0,r).map(function(n){return(/^([A-Z_$][A-Z0-9_$]*)$/i.test(n)?n:JSON.stringify(n))+": "+a(t[n],e)+";"}).join("\n  "+i);return o.length>=r&&(u+="\n  "+i+"..."),t.constructor&&t.constructor.name&&"Object"!==t.constructor.name?t.constructor.name+" {\n  "+i+u+"\n"+i+"}":"{\n  "+i+u+"\n"+i+"}"}if(!(t.length>0))return"Array";var f=function(){if(e>n)return{v:"[...]"};var o=a(t[0],e);return t.every(function(t){return a(t,e)===o})?{v:o.trim()+"[]"}:{v:"["+t.slice(0,r).map(function(t){return a(t,e)}).join(", ")+(t.length>=r?", ...":"")+"]"}}();return"object"===("undefined"==typeof f?"undefined":c(f))?f.v:void 0}Object.defineProperty(e,"__esModule",{value:!0});var c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},f=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),s=n(11),l=r(s),p=function(t){function e(){return o(this,e),i(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return u(e,t),f(e,null,[{key:"createError",value:function(t){if("string"!=typeof t)throw new TypeError('Value of argument "identifier" violates contract.\n\nExpected:\nstring\n\nGot:\n'+a(t));return new e({identifier:t},'Factory method for identifier "%s" returns nothing',t)}}]),e}(l.default);e.default=p},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function o(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function i(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function u(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}function a(t,e){var n=4,r=15;if(void 0===e&&(e=0),e+=1,null===t)return"null";if(void 0===t)return"void";if("string"==typeof t||"number"==typeof t||"boolean"==typeof t)return"undefined"==typeof t?"undefined":c(t);if(!Array.isArray(t)){var o=Object.keys(t);if(!o.length)return t.constructor&&t.constructor.name&&"Object"!==t.constructor.name?t.constructor.name:"Object";if(e>n)return"{...}";var i="  ".repeat(e-1),u=o.slice(0,r).map(function(n){return(/^([A-Z_$][A-Z0-9_$]*)$/i.test(n)?n:JSON.stringify(n))+": "+a(t[n],e)+";"}).join("\n  "+i);return o.length>=r&&(u+="\n  "+i+"..."),t.constructor&&t.constructor.name&&"Object"!==t.constructor.name?t.constructor.name+" {\n  "+i+u+"\n"+i+"}":"{\n  "+i+u+"\n"+i+"}"}if(!(t.length>0))return"Array";var f=function(){if(e>n)return{v:"[...]"};var o=a(t[0],e);return t.every(function(t){return a(t,e)===o})?{v:o.trim()+"[]"}:{v:"["+t.slice(0,r).map(function(t){return a(t,e)}).join(", ")+(t.length>=r?", ...":"")+"]"}}();return"object"===("undefined"==typeof f?"undefined":c(f))?f.v:void 0}Object.defineProperty(e,"__esModule",{value:!0});var c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},f=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),s=n(11),l=r(s),p=function(t){function e(){return o(this,e),i(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return u(e,t),f(e,null,[{key:"createError",value:function(t){if("string"!=typeof t)throw new TypeError('Value of argument "methodName" violates contract.\n\nExpected:\nstring\n\nGot:\n'+a(t));return new e({methodName:t},'Method "%s" does not exist',t)}}]),e}(l.default);e.default=p},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function o(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function i(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function u(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}function a(t,e){var n=4,r=15;if(void 0===e&&(e=0),e+=1,null===t)return"null";if(void 0===t)return"void";if("string"==typeof t||"number"==typeof t||"boolean"==typeof t)return"undefined"==typeof t?"undefined":c(t);if(!Array.isArray(t)){var o=Object.keys(t);if(!o.length)return t.constructor&&t.constructor.name&&"Object"!==t.constructor.name?t.constructor.name:"Object";if(e>n)return"{...}";var i="  ".repeat(e-1),u=o.slice(0,r).map(function(n){return(/^([A-Z_$][A-Z0-9_$]*)$/i.test(n)?n:JSON.stringify(n))+": "+a(t[n],e)+";"}).join("\n  "+i);return o.length>=r&&(u+="\n  "+i+"..."),t.constructor&&t.constructor.name&&"Object"!==t.constructor.name?t.constructor.name+" {\n  "+i+u+"\n"+i+"}":"{\n  "+i+u+"\n"+i+"}"}if(!(t.length>0))return"Array";var f=function(){if(e>n)return{v:"[...]"};var o=a(t[0],e);return t.every(function(t){return a(t,e)===o})?{v:o.trim()+"[]"}:{v:"["+t.slice(0,r).map(function(t){return a(t,e)}).join(", ")+(t.length>=r?", ...":"")+"]"}}();return"object"===("undefined"==typeof f?"undefined":c(f))?f.v:void 0}Object.defineProperty(e,"__esModule",{value:!0});var c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},f=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),s=n(11),l=r(s),p=function(t){function e(){return o(this,e),i(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return u(e,t),f(e,null,[{key:"createError",value:function(t){if("string"!=typeof t)throw new TypeError('Value of argument "identifier" violates contract.\n\nExpected:\nstring\n\nGot:\n'+a(t));return new e({identifier:t},'Service definition for "%s" has already been used to instantiate a service, refusing to modify it',t)}}]),e}(l.default);e.default=p},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function o(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function i(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function u(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}function a(t,e){var n=4,r=15;if(void 0===e&&(e=0),e+=1,null===t)return"null";if(void 0===t)return"void";if("string"==typeof t||"number"==typeof t||"boolean"==typeof t)return"undefined"==typeof t?"undefined":c(t);if(!Array.isArray(t)){var o=Object.keys(t);if(!o.length)return t.constructor&&t.constructor.name&&"Object"!==t.constructor.name?t.constructor.name:"Object";if(e>n)return"{...}";var i="  ".repeat(e-1),u=o.slice(0,r).map(function(n){return(/^([A-Z_$][A-Z0-9_$]*)$/i.test(n)?n:JSON.stringify(n))+": "+a(t[n],e)+";"}).join("\n  "+i);return o.length>=r&&(u+="\n  "+i+"..."),t.constructor&&t.constructor.name&&"Object"!==t.constructor.name?t.constructor.name+" {\n  "+i+u+"\n"+i+"}":"{\n  "+i+u+"\n"+i+"}"}if(!(t.length>0))return"Array";var f=function(){if(e>n)return{v:"[...]"};var o=a(t[0],e);return t.every(function(t){return a(t,e)===o})?{v:o.trim()+"[]"}:{v:"["+t.slice(0,r).map(function(t){return a(t,e)}).join(", ")+(t.length>=r?", ...":"")+"]"}}();return"object"===("undefined"==typeof f?"undefined":c(f))?f.v:void 0}Object.defineProperty(e,"__esModule",{value:!0});var c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},f=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),s=n(11),l=r(s),p=function(t){function e(){return o(this,e),i(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return u(e,t),f(e,null,[{key:"createError",value:function(t){if("string"!=typeof t)throw new TypeError('Value of argument "identifier" violates contract.\n\nExpected:\nstring\n\nGot:\n'+a(t));return new e({identifier:t},'Undefined parameter for identifier "%s"',t)}}]),e}(l.default);e.default=p},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function o(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function i(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function u(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}function a(t,e){var n=4,r=15;if(void 0===e&&(e=0),e+=1,null===t)return"null";if(void 0===t)return"void";if("string"==typeof t||"number"==typeof t||"boolean"==typeof t)return"undefined"==typeof t?"undefined":c(t);if(!Array.isArray(t)){var o=Object.keys(t);if(!o.length)return t.constructor&&t.constructor.name&&"Object"!==t.constructor.name?t.constructor.name:"Object";if(e>n)return"{...}";var i="  ".repeat(e-1),u=o.slice(0,r).map(function(n){return(/^([A-Z_$][A-Z0-9_$]*)$/i.test(n)?n:JSON.stringify(n))+": "+a(t[n],e)+";"}).join("\n  "+i);return o.length>=r&&(u+="\n  "+i+"..."),t.constructor&&t.constructor.name&&"Object"!==t.constructor.name?t.constructor.name+" {\n  "+i+u+"\n"+i+"}":"{\n  "+i+u+"\n"+i+"}"}if(!(t.length>0))return"Array";var f=function(){if(e>n)return{v:"[...]"};var o=a(t[0],e);return t.every(function(t){return a(t,e)===o})?{v:o.trim()+"[]"}:{v:"["+t.slice(0,r).map(function(t){return a(t,e)}).join(", ")+(t.length>=r?", ...":"")+"]"}}();return"object"===("undefined"==typeof f?"undefined":c(f))?f.v:void 0}Object.defineProperty(e,"__esModule",{value:!0});var c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},f=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),s=n(11),l=r(s),p=function(t){function e(){return o(this,e),i(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return u(e,t),f(e,null,[{key:"createError",value:function(t){if("string"!=typeof t)throw new TypeError('Value of argument "identifier" violates contract.\n\nExpected:\nstring\n\nGot:\n'+a(t));return new e({identifier:t},'Undefined service definition and instance for identifier "%s"',t)}}]),e}(l.default);e.default=p},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function o(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function i(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function u(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}function a(t,e){var n=4,r=15;if(void 0===e&&(e=0),e+=1,null===t)return"null";if(void 0===t)return"void";if("string"==typeof t||"number"==typeof t||"boolean"==typeof t)return"undefined"==typeof t?"undefined":c(t);if(!Array.isArray(t)){var o=Object.keys(t);if(!o.length)return t.constructor&&t.constructor.name&&"Object"!==t.constructor.name?t.constructor.name:"Object";if(e>n)return"{...}";var i="  ".repeat(e-1),u=o.slice(0,r).map(function(n){return(/^([A-Z_$][A-Z0-9_$]*)$/i.test(n)?n:JSON.stringify(n))+": "+a(t[n],e)+";"}).join("\n  "+i);return o.length>=r&&(u+="\n  "+i+"..."),t.constructor&&t.constructor.name&&"Object"!==t.constructor.name?t.constructor.name+" {\n  "+i+u+"\n"+i+"}":"{\n  "+i+u+"\n"+i+"}"}if(!(t.length>0))return"Array";var f=function(){if(e>n)return{v:"[...]"};var o=a(t[0],e);return t.every(function(t){return a(t,e)===o})?{v:o.trim()+"[]"}:{v:"["+t.slice(0,r).map(function(t){return a(t,e)}).join(", ")+(t.length>=r?", ...":"")+"]"}}();return"object"===("undefined"==typeof f?"undefined":c(f))?f.v:void 0}Object.defineProperty(e,"__esModule",{value:!0});var c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},f=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),s=n(11),l=r(s),p=function(t){function e(){return o(this,e),i(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return u(e,t),f(e,null,[{key:"createError",value:function(t){if("string"!=typeof t)throw new TypeError('Value of argument "identifier" violates contract.\n\nExpected:\nstring\n\nGot:\n'+a(t));return new e({identifier:t},'Undefined service definition for identifier "%s"',t)}}]),e}(l.default);e.default=p},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function o(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function i(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function u(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}Object.defineProperty(e,"__esModule",{value:!0});var a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},c=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),f=n(11),s=r(f),l=function(t){function e(){return o(this,e),i(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return u(e,t),c(e,null,[{key:"createError",value:function(t){return new e({arg:t},'Unsupported arg of type "%s"',"undefined"==typeof t?"undefined":a(t))}}]),e}(s.default);e.default=l},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function o(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function i(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function u(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}function a(t,e){var n=4,r=15;if(void 0===e&&(e=0),e+=1,null===t)return"null";if(void 0===t)return"void";if("string"==typeof t||"number"==typeof t||"boolean"==typeof t)return"undefined"==typeof t?"undefined":c(t);if(!Array.isArray(t)){var o=Object.keys(t);if(!o.length)return t.constructor&&t.constructor.name&&"Object"!==t.constructor.name?t.constructor.name:"Object";if(e>n)return"{...}";var i="  ".repeat(e-1),u=o.slice(0,r).map(function(n){return(/^([A-Z_$][A-Z0-9_$]*)$/i.test(n)?n:JSON.stringify(n))+": "+a(t[n],e)+";"}).join("\n  "+i);return o.length>=r&&(u+="\n  "+i+"..."),t.constructor&&t.constructor.name&&"Object"!==t.constructor.name?t.constructor.name+" {\n  "+i+u+"\n"+i+"}":"{\n  "+i+u+"\n"+i+"}"}if(!(t.length>0))return"Array";var f=function(){if(e>n)return{v:"[...]"};var o=a(t[0],e);return t.every(function(t){return a(t,e)===o})?{v:o.trim()+"[]"}:{v:"["+t.slice(0,r).map(function(t){return a(t,e)}).join(", ")+(t.length>=r?", ...":"")+"]"}}();return"object"===("undefined"==typeof f?"undefined":c(f))?f.v:void 0}Object.defineProperty(e,"__esModule",{value:!0});var c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},f=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),s=n(11),l=r(s),p=function(t){function e(){return o(this,e),i(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return u(e,t),f(e,null,[{key:"createError",value:function(t,n){if("string"!=typeof t)throw new TypeError('Value of argument "identifier" violates contract.\n\nExpected:\nstring\n\nGot:\n'+a(t));if(!(n instanceof Error))throw new TypeError('Value of argument "cause" violates contract.\n\nExpected:\nError\n\nGot:\n'+a(n));return new e({cause:n,info:{identifier:t}},'Error getting service "%s"',t)}}]),e}(l.default);e.default=p}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,